{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["10tb+","1m+","250m+","6","activ","backend","brief","carnegi","cloud","commerc","common","compil","compiler.","comput","contribut","daili","data","data,","develop","distribut","e","endpoints.","experi","expertis","gener","github:","graduat","https://github.com/zsshen","https://mzl.la/2fo3bjq","https://www.linkedin.com/in/zsshen","https://www.slideshare.net/zongshenshen","https://www.zsshen.com","ieee","includ","industri","introduct","javascript","jit","larg","linkedin:","media","mellon","memo","mobil","mozilla'","mozilla:","open","optimization.","orchestr","patent","pipelin","portfolio:","program","projects,","prolif","protect","publications.","puzzles.","qps,","research","scalabl","scale","secur","serv","servic","slideshare:","social","sourc","student","system","transact","u.s.","variou","year"],"Prefix Sum and Subarray/Subarray Sum.html":["&nums)","(int","*","*/","+","...","/**","//","0","0;","1)","138.","1;","1]",";","=","=>","@param","@return:","class","code","first","here","https://www.lintcode.com/problem/subarray","includ","index","int","integ","j)","last","lintcod","list","map;","map[0]","num[0]","num[1]","num[i","num[j]","number","nums.size();","nums:","nums[i]","prefix(i","prefix(j)","preix(i)","problem","public:","size","solut","std::unordered_map","subarray","subarraysum(vector","sum","sum(i,","sum/descript","vector","write","{"],"Prefix Sum and Subarray/Subarray Sum II.html":["&a,","(int","(l","*","*/","+","++l;","++r;","+=","...,","/**","//","0);","1","1,","138.",";","=","@param","@return:","a1,","a2,","a:","answer","array","bound.","class","code","count","count;","end)","end:","here","https://www.lintcode.com/problem/subarray","ii","int","integ","l;","lintcod","number","pinpoint","possibl","prefix(n","problem","public:","r","return","s0,","s1,","s2,","sn","solut","start","start)","start,","start:","subarray","subarraysumii(vector","sum","sum/descript","upper","write","{","}","};"],"Prefix Sum and Subarray/Submatrix Sum.html":["&matrix)","(a","(e","(i","(int","(m","*","*/","+","...","/*","/**","//","0","0);","0;","1)","1;","1d","2","405.",";","=","=>",">","@param","@return:","appli","array)","array.size();","array[0]","array[1]","array[i];","b","b)","c","class","code","column","column.","columns,","const","coordin","d","down","e","f","f)","first","g","gener","h","here","https://www.lintcode.com/problem/submatrix","int","integ","j","j)","k","l","left","lintcod","m","match;","match[0]","matrix","matrix.size();","matrix:","matrix[0].size();","merg","n","n)","num_c","num_r","number","o","o(c^2","p","prefix(i","prefix(i)","prefix(j)","problem","public:","r)","right","scan","size","solut","solv","span","std::unordered_map","std::vector&","subarray","subarraysum(","submatrix","submatrixsum(vector>","sum","sum(i,","sum/descript","suppos","syn(num_r,","synthet","up","us","vector>","want","write","{"],"Prefix Sum and Subarray/Subarray Sum Closest.html":["&nums)","(int","(n","*","*/","+",".","...,","/*","/**","//","0","0)","1","1));","1,","139.","1]","1],","1};",":",";","=","==","@param","@return:","class","closest","closest/descript","code","find","first","gap.","here","https://www.lintcode.com/problem/subarray","includ","index","index(index)","index)","index;","int","integ","last","lintcod","list","minimum","n","neighbor","number","nums.size();","nums:","nums[0]","nums[1]","nums[n","pair","prefix","prefix(n","problem","public:","record","record(0,","record(int","return","s[0]","s[0],","s[1]","s[1],","s[2]","s[2],","s[3]","s[n","s[n]","solut","sort","std::vector","struct","subarray","subarraysumclosest(vector","sum","sum(sum),","sum,","sum;","vector","write","{","}","};"],"Prefix Sum and Subarray/Subarray Sum Equals K.html":["&nums,","(int","*","*/","++map[sum];","+=","/**","//","0;","1)","1;","838.",":","=","=>","@param","@return:","class","code","continu","count","count;","denot","equal","here","https://www.lintcode.com/problem/subarray","int","integ","integer,","j)","k","k)","k/descript","k:","k];","lintcod","list","map;","map[0]","map[sum","num","num;","number","nums)","nums:","prefix(i","prefix(j)","problem","public:","return","solut","std::unordered_map","subarray","subarraysumequalsk(vector","sum","sum(i,","whose","write","{","}","};"],"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":["&&","&nums,","(int","*","*/","/**","//","0","0;","2","406.",";","=","@param","@return:","adjust","array","array.","b","bound","c","class","code","control","d","descpretion.","e","each","eqaul","f","fulfil","g","h","here","https://www.lintcode.com/problem/minimum","implementation,","int","int_max;","integ","l","l,","less","lintcod","main","min","minimum","minimumsize(vector","movement","n","name","note:","nums.size();","nums:","pointer","pointers,","prefix","prefix[l],","prefix[r]","problem","procedure,","public:","r","real","repres","s","s)","s,","s:","scan","singl","size","slide","smaller","solut","subarray","sum","sum/descript","time,","tri","us","varabl","window","window.","write","{"],"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":["&nums,","(int","(valu","*","*/","/**","//","0","0;","1","2","3","5","6","911.",";","=","@param","@return:","an","array","class","code","equal","hashtable(key","here","https://www.lintcode.com/problem/maximum","index)","int","int_min;","k","k)","k/descript","k:","length","lintcod","map;","maximum","maxsubarraylen(vector","n","nums.size();","nums:","prefix","problem","public:","size","solut","std::unordered_map","subarray","sum","sum)","target","valu","write","{"],"Prefix Sum and Subarray/Maximum Subarray.html":["&nums)","(int","(local","*","*/","+=","/**","//","0;","41.",":","=","@param","@return:","an","class","code","here","https://www.lintcode.com/problem/maximum","indic","int","integ","lintcod","list","local","local);","max","maximum","maxsubarray(vector","num","num;","nums)","nums:","nums[0];","problem","public:","solut","std::max(ans,","subarray","subarray/descript","sum","write","{"],"Prefix Sum and Subarray/Maximum Submatrix.html":["&","&matrix)","(a1","(int","(num_c","(num_r","*","*/","+",",",".","/**","//","0","0)","0);","0,","0;","944.",";","=","==","=>",">","@param","@return:","a,","a1","a2","a3","ak","an","array)","b","b1","b2","b3","bk","bn","c1","c1)","c2","c3","ck","class","cn","code","d1","d2","d3","dn","given","here","https://www.lintcode.com/problem/maximum","int","j","largest","lintcod","matrix","matrix.size();","matrix:","matrix[0].size();","maximum","maxsubmatrix(vector>","num_c","num_r","possibl","problem","public:","return","s1","s2","s3","sk","sn","solut","std::numeric_limits::min();","submatrix","submatrix/descript","sum","syn(num_r,","write","{","}"],"Prefix Sum and Subarray/Continuous Subarray Sum.html":["&a)","(end","(n","*","*/","+","++end;","/*","/**","//","0)","0,","0;","1,","1};","402.","=","==",">","@param","@return:","a,","a.size();","a:","a[0],","array","b","bgn","bgn;","class","code","continu","continuoussubarraysum(vector","end","end;","first","here","https://www.lintcode.com/problem/continu","includ","index","int","integ","last","lintcod","list","max","max)","max_bgn","max_end","n","number","problem","public:","return","solut","subarray","sum","sum/descript","sum;","vector","write","{","}"],"Prefix Sum and Subarray/Continuous Subarray Sum II.html":["&","&&","&a)","(bgn","(end","(i","(j","(min.bgn","(sum","*","*/","+","++end;","/*","/**","//","0","0)","0,","0;","1","1)","1.","1;","2","403.",":","=","==","=>",">","@param","@return:","a:","aforement","array","array,","bgn","bgn(bgn),","bgn,","bgn;","boundari","class","code","compar","continu","continuoussubarraysumii(vector","cyclic","denot","e.g:","end","end(end),","end,","end;","end};","exce","finally,","findmax(const","first","gener","handl","here","however,","https://www.lintcode.com/problem/continu","ii","ii/description?_from=ladder&&fromid=4","impli","includ","index","input","int","integ","j).","j,","last","lintcod","list","locat","max","max)","max.end};","max_bgn","max_end","maximum","min","min);","min.bgn","min.end","min.sum)","min_bgn","min_end","min_end,","minimum","n","n)","need","negative.","normal","number","nums,","nums[0],","private:","problem","public:","range.","real","record","record(int","record(min_bgn,","result","return","s(i,","s0","s1","s2","scenario","scenarios.","si","sj","sn","solut","span","std::vector&","struct","subarray","subarray,","subarray.","subract","sum","sum(sum)","sum)","sum;","then,","thu","thus,","total","vector","write","{","{bgn,","{max.bgn,","}","};"],"Prefix Sum and Subarray/Max Consecutive Ones III.html":["(j","*","+","++l;","/**","0s,","1)","1);","1004.","1s","=","a,","a[l];","array","class","consecut","element","find","follow","formula:","fulfil","https://leetcode.com/problems/max","iii","iii/","int","j)","k)","l","leetcod","longest","longestones(vector&","max","max;","on","problem","public:","r","return","solut","std::max(max,","subarray","sum","sum(i,","transform","{","}","};"],"Sliding Window/Window Sum.html":["&nums,","(int","(n","*","*/","/**","//","0","0)","0;","604.",";","=","==","@param","@return:","ans;","class","code","each","element","here","https://www.lintcode.com/problem/window","insid","int","integers.","k","k)","k:","length","lintcod","list","moving.","n","nums.size();","nums:","problem","public:","return","solut","std::vector","sum","sum/descript","vector","window","window.","winsum(vector","write","{","{};","||","}"],"Sliding Window/Sliding Window Median.html":["&nums,","(int","(max_siz","(min_siz","(n","*","*/","*it;","*max.begin();","+","/**","//","0","0)","1)","360.",";","=","==",">","@param","@return:","ans.push_back(getmedian(min,","ans;","auto","auto&","class","code","each","element","getmedian(auto&","here","https://www.lintcode.com/problem/slid","insid","int","integ","k","k)","k:","lintcod","list","max)","max));","max.begin();","max.erase(it);","max.insert(num);","max.size();","max;","max_siz","median","median/descript","medianslidingwindow(vector","min,","min.begin();","min.erase(it);","min.insert(num);","min.size();","min;","min_siz","min_size)","move","n","num","nums.size();","nums:","problem","public:","return","return;","slide","solut","std::multiset>","vector","window","write","{","{};","||","}"],"Sliding Window/Sliding Window Maximum.html":["&nums,","(deque.front()","(int","*","*/","/**","//","0","1","1,","2","2,","362.","7","7,","8",";","=","==","@param","@return:","ans;","class","code","deque,","deque.pop_back();","deque.pop_front();","deque.push_back(index);","deque:","deque;","dequeue(auto&","each","here","https://www.lintcode.com/problem/slid","index)","insid","int","integ","integers.","k)","k:","lintcod","list","maximum","maximum/descript","maxslidingwindow(vector","moving.","number","nums:","nums[deque.back()])","problem","public:","slide","solut","std::vector","vector","void","window","write","{","}","};"],"Sliding Window/Subarray Product Less than K.html":["&&","&nums,","(int","(n","*","*/","/**","//","0","0)","0;","1075.","1;",";","=","==","@param","@return:","array","class","code","count","element","here","https://www.lintcode.com/problem/subarray","int","integ","k","k)","k/descript","k:","l","less","lintcod","n","number","nums.size();","nums:","numsubarrayproductlessthank(vector","problem","product","public:","r","re","return","solut","subarray","write","{","}"],"Sliding Window/Longest Substring without Repeating Characters.html":["&s)","(n","(r","*","*/","/**","//","0)","0,","0;","384.","=","==","@param","@return:","an","bag(256,","charact","characters/descript","class","code","false);","here","https://www.lintcode.com/problem/longest","int","integ","l","lengthoflongestsubstring(str","lintcod","longest","n","problem","public:","r","repeat","return","s.length();","s:","solut","std::vector","string","substr","without","write","{","}"],"Sliding Window/Longest Substring with at Most K Distinct Characters.html":["&s,","(freq[ch]","(int","(n","*","*/","+","/**","//","0","0)","0);","0;","1);","386.",";","=","==","@param","@return:","ch","charact","characters/descript","class","code","count","count;","distinct","freq(256,","freq[ch];","here","https://www.lintcode.com/problem/longest","int","integ","k","k)","k:","l","lengthoflongestsubstringkdistinct(str","lintcod","longest","max","max;","n","problem","public:","r","return","s.length();","s:","s[l++];","solut","std::max(max,","std::vector","string","substr","write","{","}","};"],"Sliding Window/Find All Anagrams in a String.html":["(char","(freq_t[ch]","(int","(l","++cnt_t;","++freq_t[ch];","0","0);","0;","1)","647.",":",";","=","==","anagram","ans;","ch","class","cnt_","cnt_t","find","findanagrams(str","freq_s(256,","freq_t(256,","https://www.lintcode.com/problem/find","int","lintcod","lp","ls","p)","p.length();","problem","public:","s,","s.length();","solut","string","string/descript","vector","{","}"],"Sliding Window/Minimum Window Substring.html":["\"\"","\"\";","&sourc","&target)","(bag_s[ch]","(int","(min","(n","(nt","*","*/","++l;","++r;",",","/**","//","0","0)","0);","0;","1","1)","2","3","32.","4",":",";","=","==","@param","@return:","a:","b","b:","bag_s(256,","bag_s:","bag_s[ch];","bag_t(256,","bag_t:","bag_t[ch]","c","c:","class","code","count_","count_s;","count_t","d","denot","e","here","https://www.lintcode.com/problem/minimum","int","l","lintcod","minimum","minwindow(str","n","ns","nt","o","problem","public:","r","return","s:","solut","sourc","source.length();","std::vector","string","substr","substring/descript","such","t:","target.length();","target:","window","window,","window:","write","{","}"],"Sliding Window/Moving Average from Data Stream.html":["(size","(size);","*","*/","*/movingaverage(int","+=","/","/*","/**","//","642.",":","=","@param","@return:","averag","call","capacity(size),","capacity;","class","code","data","deque.front();","deque.pop_front();","deque.push_back(val);","deque;","doubl","here","https://www.lintcode.com/problem/mov","instanti","int","integ","intial","lintcod","move","movingaverag","movingaverage(size);","necessari","new","next(int","obj","obj.next(val);","object","param","private:","problem","public:","return","size(0),","size)","size:","size;","solut","static_cast(size);","std::dequ","stream","stream/descript","such:","sum","sum(0.0)","sum;","val)","val:","val;","write","{","}","};"],"Sliding Window/Find Median from Data Stream.html":["&nums)","(int","(max.empty())","(max_siz","(min_siz","(num","*","*/","+","/**","//","1)","81.",":","=",">","@param","@return:","ans.push_back(getmedian(min,","ans;","auto&","class","code","data","enqueue(auto&","enqueue(min,","find","getmedian(auto&","here","https://www.lintcode.com/problem/find","int","integ","lintcod","list","max)","max));","max);","max,","max.pop();","max.push(num);","max.size();","max.top();","max;","max_siz","max_size)","median","medianii(vector","min,","min.pop();","min.push(num);","min.size();","min.top();","min;","min_siz","min_size)","num","num)","num);","number","nums)","nums:","private:","problem","public:","rebalance(min,","return","return;","solut","std::greater>","std::less>","std::priority_queue,","std::vector","stream","stream/descript","vector","void","write","{","}","};"],"Two Sum/3Sum.html":["&&","&nums)","(int","(l","(n","(nums[i]","*","*/","+","/**","//","0","0)","1,","1])","3sum","57.",";","=","==",">","@param","@return:","ans)","ans);","ans;","array","auto&","avoid","bgn,","break","break;","class","code","computions.","continue;","end,","end;","find","gener","give","here","https://www.lintcode.com/problem/3sum/descript","imposs","int","integ","l","legal","lintcod","loop","n","num","number","nums,","nums.end());","nums.size();","nums:","nums[i","nums[i]","nums[i],","positive,","private:","problem","public:","r","redund","remain","return","solut","std::sort(nums.begin(),","std::vector>","sum","target,","threesum(vector","thus,","triplet","triplets.","twosum(const","twosum(nums,","uniqu","vector>","void","write","zero.","{","{};","}"],"Two Sum/4Sum.html":["&&","&nums,","(int","(l","(n","*","*/","+","/**","//","0","0)","1","1,","1])","4sum","58.",";","=","==","@param","@return:","ans)","ans);","ans;","array","auto&","bgn,","cach","class","code","const","continue;","end,","end;","f","find","first","first,","foursum(vector","give","here","https://www.lintcode.com/problem/4sum/descript","int","integ","l","lintcod","n","numbers:","nums,","nums.end());","nums.size();","nums[","nums[f","nums[f]","nums[f],","nums[s]","nums[s],","private:","problem","public:","quadruplet","r","return","s","second,","second;","solut","std::sort(nums.begin(),","std::vector>","sum","target)","target,","target:","twosum(","twosum(nums,","uniqu","vector>","void","write","zero","{","{};","}"],"Two Sum/3Sum Closest.html":["&&","&nums,","(int","(l","(n","*","*/","+","/**","//","0","0)","0;","1;","1])","3sum","59.",";","=","==","@param","@return:","ans;","array","class","closest","closest/descript","code","continue;","f","give","here","https://www.lintcode.com/problem/3sum","int","int_max;","integ","integers,","l","lintcod","min_diff","n","number","numbers:","nums.end());","nums.size();","nums[f","nums[f]","problem","public:","r","return","solut","std::sort(nums.begin(),","sum","target)","target.","target:","three","threesumclosest(vector","write","{","}"],"Two Sum/2Sum III Data Structure Design.html":["!=","(int","(set.count(dst)","(src","*","*/","/**","//","1","2;","2sum","607.",":","=",">=","?","@param","@return:","add(int","bool","class","code","data","design","design/descript","dst","dst)","equal","exist","false;","find","find(int","freq","freq)","here","https://www.lintcode.com/problem/two","iii","int","integ","lintcod","noth","number","number)","number:","pair","private:","problem","public:","return","set)","set.insert(number);","set;","solut","src","src;","std::unordered_multiset","structur","sum","true;","two","twosum","valu","value)","value.","value:","void","write","{","}","};"],"Element Partition/Move Zeros.html":["&nums)","(r","*","*/","/**","//","0,","0;","539.","=","@param","@return:","array","class","code","here","https://www.lintcode.com/problem/mov","int","integ","l","lintcod","move","movezeroes(vector","n","noth","nums.size();","nums:","problem","public:","r","solut","void","write","zero","zeroes/descript","{"],"Element Partition/Partition Array.html":["&nums,","(r","*","*/","/**","//","0,","0;","31.","=","@param","@return:","array","array/descript","class","code","here","https://www.lintcode.com/problem/partit","index","int","integ","k)","k:","l","lintcod","n","nums.size();","nums:","partit","partitionarray(vector","problem","public:","r","solut","write","{"],"Element Partition/Sort Colors.html":["\"one\"","\"two\"","\"zero\"","&nums)","(one","*","*/","/**","//","0","0,","1","1.","148.","1;","2","2.","3","3.","=","@param","@return:","array.","class","code","color","colors/descript","consecut","elements:","guid","hand","here","https://www.lintcode.com/problem/sort","int","integ","left","lintcod","list","n","noth","nums.size();","nums:","on","point","pointer","problem","procedure.","public:","right","scan","shift","side","size","solut","sort","sortcolors(vector","tail","track","two","twos,","us","v","void","write","zero","zeros,","{","|"],"Element Partition/Kth Smallest Number in Unsorted Array.html":["&nums)","(bgn","(r","*","*/","+","/","/**","//","0,","1);","1,","2;","461.","=","@param","@return:","array","array/descript","bgn,","bgn;","class","code","element","end)","end,","here","https://www.lintcode.com/problem/kth","int","integ","k","k)","k,","k:","kth","kthsmallest(int","l","lintcod","mid","number","nums,","nums.size()","nums:","nums[end]);","nums[mid];","pivot","private:","problem","public:","quickselect(auto&","quickselect(nums,","r","return","smallest","solut","std::swap(nums[mid],","unsort","vector","write","{","}"],"Element Partition/Remove Duplicates from Sorted Array.html":["(n","(r","0)","0,","0;","26.","=","==","array","array/","class","duplic","https://leetcode.com/problems/remov","int","l","leetcod","n","nums)","nums.size();","problem","public:","r","remov","removeduplicates(vector&","return","solut","sort","{","}"],"Element Partition/Intersection of Two Arrays II.html":["&nums1,","&nums2)","(i","*","*/","/**","//","0,","0;","548.","=","@param","@return:","ans;","array","class","code","here","https://www.lintcode.com/problem/intersect","ii","ii/descript","int","integ","intersect","intersection(vector","j","leetcod","nums1.end());","nums1.size(),","nums1:","nums2.end());","nums2.size();","nums2:","problem","public:","size_1","size_2","solut","std::sort(nums1.begin(),","std::sort(nums2.begin(),","std::vector","two","vector","write","{"],"Element Partition/Rotate String.html":["%","&str,","(a","(d","(e","(g","(offset","*","*/","+","/**","//","0","0)","3","4","8.","=","==","=>","@param","@return:","a)","array","b","c","char","class","code","d","d)","e","e)","f","g","g)","here","https://www.lintcode.com/problem/rot","int","integ","lintcod","n","n);","noth","offset","offset)","offset:","problem","public:","r","r);","r,","return;","rotat","rotatestring(str","solut","std::reverse(str.begin()","std::reverse(str.begin(),","str.begin()","str.end());","str.length();","str:","string","string/descript","void","write","{","||","}","};"],"Monotonous Stack/Min Stack.html":["(stk.empty())","*","*/","/*","//","12.","=","@param","@return:","class","code","here","https://www.lintcode.com/problem/min","int","integ","intial","lintcod","min","min()","min_stk.pop();","min_stk.push(number);","min_stk.push(std::min(number,","min_stk.top()));","min_stk.top();","min_stk;","minstack","minstack()","necessari","noth","num","num;","number)","number:","pop()","private:","problem","public:","push(int","return","solut","stack","stack/descript","std::stack","stk.pop();","stk.push(number);","stk.top();","stk;","void","write","{","}","};"],"Monotonous Stack/Next Greater Element I.html":["&&","&nums1,","&nums2)","(!stk.empty()","(int","(stk.empty())","*","*/","/**","//","1","1,","1206.","1:","1;","2","2:","3","3,","3:","4","4,","4:",":","=",">","@param","@return:","ans.push_back(map[num]);","ans;","array","class","code","continue;","correspond","element","find","greater","here","https://www.lintcode.com/problem/next","i/descript","lintcod","map;","map[num]","map[stk.top()]","next","nextgreaterelement(vector","num","num;","number","nums1'","nums1)","nums1:","nums2","nums2)","nums2:","place","problem","public:","return","solut","stack:","std::stack","std::unordered_map","std::vector","stk.pop();","stk.push(num);","stk.top())","stk;","vector","write","{","|","}","};"],"Monotonous Stack/Next Greater Element II.html":["&nums)","(int","(n","*","*/","/**","//","0","0)","1","1);","1201.","1:","2","2:","3","3:","4","4:","5","5:","6","6:",";","=","==","@param","@return:","ans(n,","ans;","ans[index]","array","class","code","curr;","element","greater","here","https://www.lintcode.com/problem/next","ii","ii/descript","index","int","lintcod","n","next","nextgreaterelements(vector","number","nums.size();","nums:","nums[stk.top()])","problem","public:","return","solut","stack:","std::stack","std::vector","stk.pop();","stk.push(i);","stk.top();","stk;","vector","write","{","{};","|","}","};"],"Monotonous Stack/Largest Rectangle in Histogram.html":["&heights)","(int","(n","*","*/","/**","//","0","0)","0;","1","1,","122.","1st:","1x3","1x6","2","2,","2nd:","2x5","3","3,","3rd:","4x2","5","5,","6","6,","6.","6x1",";","=","==","@param","@return:","area","class","code","consid","dummi","examination.","height:","heights.size();","here","histogram","histogram/descript","https://www.lintcode.com/problem/largest","int","integ","largest","largestrectanglearea(vector","last","less","let'","lintcod","list","max","n","number","number,","problem","public:","rectangl","return","see","situat","siutat","solut","stack","std::stack","stk;","trigger","us","write","{","}"],"Monotonous Stack/Maximal Rectangle.html":["&matrix)","(int","(num_c","(num_r","*","*/","/**","//","0","0)","0);","0,","0;","1,","1]","1],","2","2d","4","510.",";","=","==","=>","@param","@return:","[0,","[1,","boolean","class","code","find","heights(num_c,","here","histogram.","https://www.lintcode.com/problem/maxim","int","integ","lintcod","matrix","matrix.size();","matrix:","matrix[0].size();","max","maxim","maximalrectangle(vector>","num_c","num_r","problem","public:","rectangl","rectangle/descript","reduc","return","solut","std::vector","stk;","write","{","}"],"Monotonous Stack/Max Tree.html":["&&","&a)","(!stk.empty()","(!stk.empty())","(int","(the","*","*/","*left,","*right;","/","/**","//","0","0,","1","1.","128.","2","2,","2.","3","3,","5","5,","6","6,",":","=","=>",">",">left",">right",">val",">val)","?","@param","@return:","\\","a)","a:","array","assign","auto","child","class","code","contain","curr","curr;","definit","duplicates.","empty.","given","greater","here","https://www.lintcode.com/problem/max","int","integ","last","left","less","lintcod","max","maxtree(vector","meet","moreover,","need","new","node","node.","null;","nullptr;","num","pop","pope","previou","problem","public:","return","right","root","solut","stack","stack),","stack:","std::vector","stk.back()","stk.back();","stk.pop_back();","stk.push_back(curr);","stk;","stk[0]","store","top","tree","tree.","tree/descript","tree:","treenod","treenode(int","treenode(num);","treenode:","until","val)","val;","valu","write","{","}","};"],"Priority Queue/Kth Smallest Number in Sorted Matrix.html":["&matrix,","(const","(int","(k","(num_c","(num_r","*","*/","/**","//","0","0)","0));","0,","0;","401.",":",";","=","==",">","@param","@return:","auto&","bool","c(c)","c)","c;","class","code","const","false));","here","https://www.lintcode.com/problem/kth","int","integ","k)","k:","kth","kthsmallest(vector>","lhs,","lhs.num","lintcod","matrix","matrix.size();","matrix/descript","matrix:","matrix[0].size();","num(num),","num,","num;","num_c","num_r","number","operator()","problem","public:","queue.push(record(matrix[0][0],","queue;","r(r),","r,","record","record(int","recordcompar","recordcompare>","return","rhs)","rhs.num;","smallest","solut","sort","std::priority_queue,","std::vector(num_c,","std::vector>","struct","true;","visit(num_r,","visit[0][0]","write","{","}","};"],"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":["&a,","&b,","(1,","(2,","(4,","(6,","(7,","(const","(int","*","*/","+","/**","//","0","0));","0,","11)","11]","2)","3,","4)","4,","465.","5,","6)","6]","7)","7,","9",":",";","=",">","@param","@return:","[1,","[2,","a.size();","a:","array","arrays/descript","ascend","auto&","b","b.size();","b:","b[0],","bool","class","code","const","false));","here","https://www.lintcode.com/problem/kth","idx_a(idx_a),","idx_a,","idx_a;","idx_b(idx_b)","idx_b)","idx_b;","int","integ","k)","k:","kth","kthsmallestsum(vector","lhs,","lhs.sum","lintcod","o(klogk)","operator()","order","problem","public:","queue.push(record(a[0]","queue;","record","record(int","recordcompar","recordcompare>","return","rhs)","rhs.sum;","size_a","size_b","smallest","solut","sort","std::priority_queue,","std::vector(size_b,","std::vector>","struct","sum","sum(sum),","sum,","sum;","true;","two","vector","visit(size_a,","visit[0][0]","write","{","}","};"],"Priority Queue/Kth Largest in N Arrays.html":["&arrays,","(const","(int","(queue.size()","*","*/","/**","//","543.",":",">","@param","@return:","array","array)","arrays)","arrays/descript","arrays:","auto&","class","code","element","here","https://www.lintcode.com/problem/kth","int","integ","integer,","k","k)","k:","kth","kthinarrays(vector>","largest","lintcod","list","n","num","problem","public:","queue.pop();","queue.push(num);","queue.top();","queue;","return","solut","std::greater>","std::priority_queue,","th","write","{","}","};"],"Priority Queue/Ugly Number II.html":["(int","*","*/","...","/**","//","0","0;","1","10","10,","15","1st:","2","2,","2nd:","3","3,","3rd:","4,","4.","5","5,","6,","9,",";","=","@param","@return:","class","code","description.","here","https://www.lintcode.com/problem/ugli","ii","ii/descript","int","integ","lintcod","long","n)","n:","nth","nthuglynumber(int","number","prioriti","problem","public:","queue","queue.insert(1);","queue;","return","solut","std::set>","ugli","write","{"],"Priority Queue/Super Ugly Number.html":["&primes)","(int","*","*/","/**","//","0","0;","518.",";","=","@param","@return:","class","code","given","here","https://www.lintcode.com/problem/sup","int","integ","lintcod","list","long","n,","n:","nth","nthsuperuglynumber(int","number","number/descript","posit","prime","primes:","problem","public:","queue.insert(1);","queue;","solut","std::set>","super","ugli","vector","write","{"],"Priority Queue/K Closest Points.html":["&origin,","&points,","(!queue.empty())","(const","(int","(lhs.dist","(lhs.x","(n","*","*/","/**","//","0","0)","612.",":",";","=","==","a,","ans.end());","ans.push_back(points[rec.id]);","ans;","auto","auto&","b)","bool","closest","code","const","definit","dist(dist),","dist,","dist;","doubl","here","https://www.lintcode.com/problem/k","id(id),","id,","id;","int","k","k)","kclosest(vector","lhs,","lhs.i","lintcod","n","operator()","point","point()","point(int","point.","points.size();","points/descript","problem","queue.pop();","queue.top();","queue;","rec","record","record(int","recordcompar","recordcompare>","return","rhs)","rhs.dist)","rhs.y)","solut","std::priority_queue,","std::reverse(ans.begin(),","std::vector","struct","write","x(0),","x(a),","x(x),","x,","x;","y(0)","y(b)","y(y)","y)","y;","{","{}","{};","}","};"],"Priority Queue/High Five.html":["(!queue.empty())","(auto&","(const","(map[id].size()","(student_id,","*","*/","+=","/","/**","//","0;","5","5)","5;","613.",":","=",">",">id",">score","@param","@return","ans;","ans[id]","auto&","averag","average_score)","class","code","definit","each","find","five","five/descript","here","high","highest","highfive(vector&","https://www.lintcode.com/problem/high","id","id,","id;","int","lintcod","list","map","map)","map;","map[id].pop();","map[id].push(score);","pair","pair.first;","pair.second;","person","problem","public:","queue","queue.pop();","queue.top();","record","record(int","result","result.id;","result.score;","results)","return","score","score)","score;","solut","static_cast(sum)","std::greater>>","std::map","std::unordered_map,","sum","write","{","}","};"],"Priority Queue/Merge K Sorted Interval Lists.html":["&intervals)","(!queue.empty())","(const","(index","(int","(lhs.interval.start","*","*/","/**","//","0","577.",":",";","=","==",">",">end",">start","@param","@return:","ans.emplace_back(std::move(prev));","ans;","auto","auto&","bool","class","classs","code","const","continue;","curr","curr.end);","definit","end)","end;","given","here","https://www.lintcode.com/problem/merg","id","id(id),","id,","id;","index","index(index)","index)","index;","int","interv","interval(int","interval(interval),","interval,","interval:","interval;","intervals.size();","intervals:","k","lhs,","lhs.interval.end","lhs.interval.start","lintcod","list","lists/descript","merg","mergeksortedintervallists(vector>","new","operator()","prev","prev.end","prev.end)","problem","public:","queue.pop();","queue.top();","queue;","rec","rec.id;","rec.index;","rec.interval;","record","record(interv","recordcompar","recordcompare>","return","rhs)","rhs.interval.end)","rhs.interval.end;","rhs.interval.start;","solut","sort","start,","start;","std::max(prev.end,","std::move(curr);","std::priority_queue,","struct","vector","write","{","}","};"],"Flood and Fill/Number of Islands.html":["&&","&grid)","(!(nr","(!queue.empty())","(const","(int","(num_c","(num_r","*","*/","+","/**","//","0","0)","0;","0},","1,","1},","1}})","2d","433.",":",";","=","==",">",">=","@param","@return:","auto","auto&","boolean","c(c)","c)","c));","c;","class","code","count","direct","direct[0];","direct[1];","directs({{1,","directs)","directs;","grid.size();","grid:","grid[0].size();","here","https://www.lintcode.com/problem/numb","int","integ","island","islands/descript","lintcod","matrix","nc","nr","num_c","num_r","number","numislands(vector>","problem","public:","queue.front();","queue.pop();","queue.push(record(r,","queue;","r","r(r),","r,","r;","rec","rec.c","rec.r","record","record(int","return","solut","solution()","struct","write","{","{0,","}","};"],"Flood and Fill/Number of Islands II.html":["!=","&&","&operators)","(!(nx","(0,","(1,","(3,","(const","(grid[x][y]","(parent[x]","(px","*","*/","+","++count;","/**","//","0","0)","0));","00000","00010","00011","01000","0},","1","1)","1,","1},","1}})","2","3","3)","4)","434.",":","=","==","=>",">",">=",">=0","@param","@return:","add(int","ans.push_back(set.getnumberofsets());","ans;","array","auto&","avoid","class","code","continue;","count(0)","count;","direct","direct[0];","direct[1];","directs({{1,","directs)","directs;","disjointset","disjointset()","dpulic","find(int","find(parent[x]);","find(x);","find(y);","generateid(m,","getnumberofsets()","grid(n,","grid[x][y]","here","https://www.lintcode.com/problem/numb","id","id;","ii","ii/descript","int","integ","island","lintcod","m,","m:","n,","n:","number","numislands2(int","nx","ny","op","op.x;","op.y;","operations.","operators)","operators:","parent;","parent[px]","parent[x]","parent[x];","point","private:","problem","public:","px","py","py)","py;","return","set.add(id);","set;","solut","solution()","std::unordered_map","std::vector","std::vector(m,","std::vector>","unite(int","vector","void","write","x","x)","x,","x;","y","y)","y);","{","{0,","}","};"],"Flood and Fill/Surrounded Regions.html":["&&","&board)","'o'","'x'","(!(nx","(!queue.empty())","(const","(int","(num_c","(num_r","*","*/","+","/*","/**","//","0","0)","0},","1,","1},","1}})","2d","477.",":",";","=","==","=>",">",">=0","@param","@return:","auto","auto&","b","board","board.size();","board:","board[0].size();","c));","class","code","contain","direct","direct[0];","direct[1];","directs({{1,","directs)","directs;","false));","here","https://www.lintcode.com/problem/surround","int","lintcod","noth","num_c","num_r","nx","ny","o","problem","public:","queue.front();","queue.pop();","queue.push(record(r,","queue;","rec","rec.x;","rec.y;","record","record(int","region","regions/descript","return;","solut","solution()","std::vector(num_c,","std::vector>","struct","surround","surroundedregions(vector>","visit(num_r,","void","write","x","x(x),","x,","x;","y","y(y)","y)","y;","{","{0,","}","};"],"Flood and Fill/Walls and Gates.html":["&&","&rooms)","(int","(num_c","(num_r","*","*/","/**","//","0","0)","0},","1,","1},","1}})","2d","663.",":",";","=","==",">",">=","@param","@return:","c(c)","c)","c;","class","code","directs({{1,","directs;","false));","gate","gates/descript","grid","here","https://www.lintcode.com/problem/wal","int","lintcod","m","n","nc","noth","nr","num_c","num_r","problem","public:","queue;","r","r(r),","r,","record","record(int","return;","rooms.size();","rooms:","rooms[0].size();","solut","solution()","std::queue","std::vector(num_c,","std::vector>","struct","visit(num_r,","void","wall","wallsandgates(vector>","write","x","{","{0,","}","};"],"Flood and Fill/Pacific Atlantic Water Flow.html":["(board[r][c]","(int","(m","(n","0","0)","778.",";","=","==",">",">=","ans;","atlant","atlantic(m,","c","class","false));","flow","flow/descript","https://www.lintcode.com/problem/pacif","int","lintcod","m","matrix)","matrix.size();","matrix[0].size();","n","n)","pacif","pacific(m,","pacificatlantic(vector>&","problem","public:","return","return;","solut","vector(n,","vector>","water","{","{};","||","}"],"Flood and Fill/Set Matrix Zeros.html":["&matrix)","(int","(num_c","(num_r","*","*/","/**","//","0","0)","0s","0s.","1","1.","162.","2.","3.","4.",";","=","==","=>","@param","@return:","base","bool","cell","check","class","code","column","column,","columns.","contain","determin","entir","false;","fill","find","first","frame.","futhermore,","here","https://www.lintcode.com/problem/set","int","integ","intern","lead","lintcod","list","lsit","matrix","matrix.size();","matrix:","matrix[0].size();","modifi","more","must_fill_1st_row","necessary.","need","noth","now","num_c","num_r","outer","problem","public:","result","return;","row","row,","row.","set","setzeroes(vector>","solut","specific,","step","step,","void","well.","write","zero","zeroes/descript","{","}"],"Flood and Fill/Island Perimeter.html":["&&","&grid)","(int","(num_c","(num_r","*","*/","/**","//","0","0)","0;","0},","1,","1225.","1},","1}})","2d",":",";","=","==",">",">=","@param","@return:","array","class","code","directs({{1,","directs;","grid.size();","grid:","grid[0].size();","here","https://www.lintcode.com/problem/island","int","island","islandperimeter(vector>","lintcod","num_c","num_r","perimet","perimeter/descript","problem","public:","return","solut","solution()","sum","write","x","y","{","{0,","}","};"],"Post Office/Build Post Office II.html":["&&","&grid)","(!queue.empty())","(const","(int","(num_c","(num_r","*","*/","++level;","/**","//","0","0)","0));","0;","0},","1,","1},","1}})","2d","573.",":",";","=","==",">",">=","@param","@return:","an","auto&","build","c));","class","code","collect","directs({{1,","directs;","dist(num_r,","dist,","false));","floodandfill(rec.x,","grid","grid,","grid.size();","grid:","grid[0].size();","here","houses.","https://www.lintcode.com/problem/build","ii","ii/descript","int","int_max;","integ","level","lintcod","n","num_c","num_c,","num_hous","num_r","num_r,","nx","ny","offic","post","problem","public:","queue.push(record(r,","queue.size();","queue;","reach(num_r,","reach);","rec","rec.y,","record","record(int","recs)","recs;","return","shortestdistance(vector>","solut","solution()","std::vector","std::vector(num_c,","std::vector>","struct","true;","visit(num_r,","visit[r][c]","write","x(x),","x,","y(y)","y)","y;","{","{0,","}","};"],"Post Office/Post Office Problem.html":["&a,","(i","(int","*","*/","+","/**","//","0","0));","1)>","1][j]}","1][k]","435.",";","=",">","@param","@return:","a:","array","build","class","code","cost","cost(n,","cost[i][j]:","cost[k","dp(k,","dp[i][j]","dp[i][j]:","first","given","here","hous","house.","houses.","https://www.lintcode.com/problem/post","int","integ","ith","j","jth","k)","k:","lintcod","middl","min","minimum","offic","optim","point","post","postoffice(vector","problem","problem/descript","public:","put","rang","range.","serv","solut","std::vector(n,","way","within","write","{","{dp[i"],"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":["&prices)","(int","(size","*","*/","/**","//","0)","0;","1","149.",";","=","==","@param","@return:","array","best","buy","class","code","given","here","https://www.lintcode.com/problem/best","int","integ","lintcod","maximum","maxprofit(vector","min","opt","prices.size();","prices:","prices[0];","problem","profit","public:","return","sell","size","solut","stock","stock/descript","time","write","{","}"],"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":["&prices)","(0,","(2,","(end","(n","*","*/",",","/**","//","0)","0,","0;","1","1),","150.","1;","2","4","5","6","6)","7",":","=","==","@param","@return:","_____________","aggreg","an","array","ascend","best","bgn","buy","class","code","end","given","here","https://www.lintcode.com/problem/best","ii","ii/descript","int","integ","lintcod","maximum","maxprofit(vector","n","objective:","prices.size();","prices:","problem","profit","public:","return","segments.","segments:","sell","solut","stock","time","valu","write","{","}"],"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":["&prices)","(int","*","*/","+","/**","//","0;","151.",":","=","@param","@return:","^^^^^^^^","array","best","buy","buy_1st","buy_1st,","buy_2nd","buy_2nd,","buy_first","buy_second","class","code","conduct","day.","first","given","here","https://www.lintcode.com/problem/best","iii","iii/descript","int","integ","ith","lintcod","maximum","maxprofit(vector","max{","price","price);","price:","prices)","prices:","price}","problem","profit","public:","purchase.","return","second","sell","sell_1st","sell_1st,","sell_1st:","sell_2nd","sell_2nd,","sell_2nd:","sell_first","sell_second","sell_second;","selling.","solut","std::max(buy_first,","std::max(buy_second,","std::max(sell_first,","std::max(sell_second,","std::numeric_limits::min();","stock","time","write","{","}","};"],"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":["&prices)","(int","(k","(n","(price[j]","*","*/","+","+=","/","/*","/**","//","0","0)","0));","0;","1","1,","1]","1])","1];","1][h]","1][j]","2)","393.",";","=","==","=>",">=","@param","@return:","array","best","buy","cach","class","code","conduct","day,","days.","determin","dp(k","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","first","here","https://www.lintcode.com/problem/best","int","integ","iv","iv/descript","j","jth","k","k,","k:","lintcod","max","maxdiff","maxdiff,","maximum","maxprofit(int","max{","n","n^2)","o(k","o(kn)","optim","otherwise,","price[h])","price[j]","price[j]},","prices.size();","prices:","prices[i","prices[i]","problem","profit","public:","return","sell","solut","std::vector(n,","std::vector>","stock","sum","sum;","time","transact","updat","valu","vector","write","{","|","||","}"],"Knapsack Problem/Backpack I.html":["&a)","(int","*","*/","+","/**","//","0));","1","1,","1]);","1][j","1][j],","1][j];","1]]","92",";","=",">","@param","@return:","a:","a[i","a[i]","aggreg","backpack","backpack(int","class","code","continue;","denot","dp(n","dp[i","dp[i][j]","dp[i][j]:","dp[n][m];","first","given","here","hold","https://www.lintcode.com/problem/backpack/descript","int","integ","item","items.","j","j)","knapsack","lintcod","m","m,","m:","maxim","maximum","n","problem","public:","return","size","solut","std::max(dp[i","std::vector(m","unit","us","vector","weight","write","{","|","}","};"],"Knapsack Problem/Backpack II.html":["&a,","&v)","(int","*","*/","+","/**","//","0));","1","1,","125","1]","1][j","1][j]);","1][j];","1]],",";","=",">","@param","@return:","a:","a[i","a[i]","aggreg","backpack","backpackii(int","class","code","continue;","denot","dp(n","dp[i","dp[i][j]","dp[i][j]:","dp[n][m];","first","given","here","hold","https://www.lintcode.com/problem/backpack","ii","ii/descript","int","integ","item","items.","j","j)","knapsack","lintcod","m","m,","m:","maxim","maximum","n","problem","public:","return","size","solut","std::max(","std::vector(m","unit","us","v:","v[i","v[i]","valu","vector","w[i]","weight","write","{","|","}","};"],"Knapsack Problem/Backpack III.html":["&a,","&v,","(int","*","*/","+","/**","//","0));","1","1,","1]","1][j],","1][j];","1]]);","440",";","=",">","@param","@return:","a:","a[i","aggreg","array","backpack","backpackiii(vector","class","code","continue;","dp(n","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","dp[n][m];","first","here","hod","https://www.lintcode.com/problem/backpack","iii","iii/descript","int","integ","item","items.","j","j)","knapsack","lintcod","m)","m:","maxim","multipl","note:","problem","public:","return","solut","std::max(dp[i","std::vector(m","times.","unit","us","v:","v[i","valu","vector","w[i]","weight","write","{","|","}","};"],"Knapsack Problem/Backpack IV.html":["&nums,","(int","*","*/","+","/**","//","0","0));","1,","1][j]","1][j];","1]];","562",";","=",">","@param","@return:","array","backpack","backpackiv(vector","class","code","continue;","dp(n","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","dp[n][target];","duplic","fill","first","here","hold","https://www.lintcode.com/problem/backpack","int","integ","item","items.","iv","iv/descript","j","j)","knapsack","lintcod","multipl","note:","number","numbers,","nums:","nums[i","nums[i]","posit","problem","public:","return","solut","std::vector(target","target)","target:","times.","unit","us","way","weight","write","{","|","}","};"],"Knapsack Problem/Backpack V.html":["&nums,","(int","*","*/","+","/**","//","0","0));","1,","1][j","1][j]","1][j];","1]];","563",";","=",">","@param","@return:","array","backpack","backpackv(vector","class","code","continue;","dp(n","dp[i","dp[i][j]","dp[i][j]:","dp[n][target];","fill","first","here","hold","https://www.lintcode.com/problem/backpack","int","integ","items.","j","j)","knapsack","lintcod","number","nums:","nums[i","nums[i]","posit","problem","public:","return","solut","std::vector(target","target)","target:","unit","us","v","v/descript","way","weight","write","{","|","}","};"],"Knapsack Problem/Backpack VI.html":["&nums,","(int","*","*/","+","+=","/**","//","0","0);","1","1,","1;","564",";","=",">=","@param","@return:","array","backpack","backpackvi(vector","class","code","combin","continue;","dp(target","dp[0]","dp[i","dp[i]","dp[i]:","dp[target];","duplic","here","https://www.lintcode.com/problem/combin","i)","int","integ","iv","iv/descript","lintcod","num];","number","numbers,","numbers.","nums:","nums[j]","nums[j]}","posit","problem","public:","return","solut","sum","target)","target:","up","us","vi","way","write","{","|","}","};"],"Knapsack Problem/K Sum.html":["&a,","(int","(k","*","+","/**","//","0","0)));","1,","1][h","1][j","1][j][h]","1][j][h];","1]];","89",";","=",">>","@param","a:","a[i","a[i]","array","class","code","compos","continue;","dp(n","dp[i","dp[i][j][h]","dp[i][j][h]:","dp[n][k][target];","first","h)","h.","here","https://www.lintcode.com/problem/k","int","integ","j","k","k,","k:","lintcod","number","posit","problem","public:","return","solut","std::vector(target","std::vector>(","sum","sum/descript","target)","us","way","write","{","|","}","};"],"Knapsack Problem/Coin Change.html":["&coins,","(int","(min","(n","*","*/","+","/**","//","0","0)","0;","1","1,","1;","669.",";","=","==","@param","@return:","amount","amount)","amount:","chang","change/descript","class","code","coin","coin]);","coinchange(vector","coins.size();","coins:","coins[j]","continue;","dollars.","dp(amount","dp[0]","dp[i","dp[i]","dp[i]:","fewest","here","https://www.lintcode.com/problem/coin","i)","int","int_max);","integ","lintcod","list","make","min","minimum","money","n","need","number","problem","public:","return","solut","std::min(min,","std::vector","total","up","write","{","|","}"],"Knapsack Problem/Number of Dice Rolls with Target Sum.html":["%","(int","+","+=","/*","0));","0>","1","1,","1000000007;","1155.","1;","1][j",";","=",">=","class","continue;","d,","dice","dices.","dp(d","dp[0][0]","dp[d][target];","dp[i","dp[i][j]","dp[i][j]:","f,","first","https://leetcode.com/problems/numb","int","j","j)","k","k]","k];","leetcod","number","numrollstotarget(int","problem","public:","return","roll","solut","sum","sum/","sum;","target","target)","up","us","vector(target","way","{","|","}","};"],"Knapsack Problem/Target Sum.html":["&nums,","(for","(int","(n","*","*/","+","+=","/**","//","0)","0;","1","1208.","1;","1][j",";","=","==","@param","@return:","array","assign","class","code","dimension,","discrete.)","dp(n);","dp[0][","dp[0][nums[0]]","dp[i","dp[i][j]","dp[i][j]:","equal","findtargetsumways(vector","first","given","hash","here","https://www.lintcode.com/problem/target","int","integ","j","lintcod","make","n","number","numbers.","nums.size();","nums:","nums[0]]","nums[i]]","problem","public:","rang","return","s","s)","s:","second","solut","sum","sum/descript","symbol","tabl","target","up","us","valu","vector>","way","write","{","}"],"Matrix Chain Multiplication/Stone Game.html":["&a)","(int","*","*/","+","/**","//","0));","0);","1","1,","1]","1][j]","476.","::max();",";","=",">","@param","@return:","a:","array","class","code","cost","dp(n,","dp[i][j]","dp[i][j]:","dp[i][k]","dp[k","game","game/descript","here","https://www.lintcode.com/problem/ston","int","integ","ith","j)","jth","k","lintcod","merg","min","minimum","pile","pile.","prefix(n","prefix[i];","prefix[j","problem","public:","solut","start","std::vector(n,","stone","stonegame(vector","sum","sum(i,","write","{","}"],"Matrix Chain Multiplication/Stone Game II.html":["&a)","(int","*","*/","+","/**","//","0","0));","0);","1","1,","1]","1][j]","2","593.","::max();",";","=","=>",">","@param","@return:","a:","array","b","break","c","class","code","consecut","cost","d","dp(nn,","dp[i][j]","dp[i][j]:","dp[i][k]","dp[k","e","flatten","game","good","here","https://www.lintcode.com/problem/ston","ii","ii/descript","int","integ","ith","j)","jth","k","lintcod","loop","merg","min","minimum","pile","pile.","prefix(nn","prefix[i];","prefix[j","problem","public:","replicas.","solut","start","std::vector(nn,","stone","stonegame2(vector","sum","sum(i,","way","write","{","}"],"Matrix Chain Multiplication/Burst Balloons.html":["&nums)","(int","*","*/","+","...","....",".......","........","...........","............","/**","//","0));","1","168.","1]","1][j]","1}","2,",";","=","@param","@return:","b","balloon","balloon.","balloons/descript","burst","class","code","coin","consid","dp(n","dp[i][j]","dp[i][j]:","dp[i][k","dp[k","here","https://www.lintcode.com/problem/burst","i>","int","integ","integer,","ith","j).","jth","k","l","last","lintcod","list","max","maxcoins(vector","maximum","nums:","nums[i","nums[j","nums[k]","problem","public:","range(i,","score","secur","solut","std::vector(n","write","{","|","}"],"Matrix Chain Multiplication/Unique Binary Search Trees.html":["(int","(k","*","*/","+","/**","//","0","0));","163.","1;","1]","1][j]",":",";","=","?","@param","@return:","binari","class","code","dp(n,","dp[i][j]","dp[i][j]:","dp[i][k","dp[k","gener","here","https://www.lintcode.com/problem/uniqu","i)","i>","int","integ","ith","jth","lintcod","n)","n:","node","node.","number","numtrees(int","problem","public:","rght","search","solut","start","std::vector(n,","sum","tree","trees/descript","uniqu","write","{","}"],"Fibonacci Sequence/Decode Ways.html":["&s)","'0')","'1')","'2')","('0'","(int","(n","(str[s1]","*","*/","+","+=","...,","/**","//","0","0)","0;","1","1)","1);","1,","1;","1]","1]:","2","2)","2,","2]","2];","4,","512.","6}","8,","9}",":",";","=","==",">","?","@param","@return:","class","code","countonedigit(const","counttwodigits(const","counttwodigits(s,","decod","digit:","digits:","dp(n","dp[i","dp[i]","dp[i]:","dp[n];","encod","end","handl","here","https://www.lintcode.com/problem/decod","i.","index","int","integer,","lintcod","messag","n","number","numdecodings(str","prefix","private:","problem","public:","return","s.length();","s1)","s1,","s2)","s:","s[i","s[i]:","solut","std::string&","std::vector","str,","string,","way","ways/descript","write","{","{0,","{1,","{3,","{7,","}"],"Fibonacci Sequence/Decode Ways II.html":["&s)","(i","(int","(n","*","*****","******","*******","*/","+",",","...,","/**","//","0","0)","0);","0,","0;","1","1)","1,","15","1;","1]","1]:","2","2)","2]","2]:","6","676.","6}","8,","9","9}",":",";","=","==",">","@param","@return:","be","class","code","decod","dp(n","dp[0]","dp[i","dp[i]","dp[i]:","encod","end","given","here","https://www.lintcode.com/problem/decod","ii","ii/descript","int","integ","ith","j","letter.","lintcod","messag","mod(1000000007)","n","number","numdecodings(str","problem","public:","return","s.length();","s:","s[2]:","s[i","s[i]:","solut","solution()","std::vector","substr","way","write","{","{0,","{1,","{3,","{7,","}"],"Fibonacci Sequence/House Robber.html":["&a)","(int","(n","*","*/","+","/**","//","0)","0);","0;","1]","2","2],","392.",";","=","==","@param","@return:","a.size();","a:","a[0];","a[1]);","aggreg","amount","array","class","code","dp(n,","dp[0]","dp[1]","dp[i","dp[i]","dp[i]:","first","here","hous","houserobber(vector","houses.","https://www.lintcode.com/problem/hous","int","integ","lintcod","long","maximum","max{","money","n","neg","non","problem","profit","profit[i]","public:","return","rob","robber","robber/descript","solut","std::max(a[0],","std::vector","tonight","write","{","}"],"Fibonacci Sequence/House Robber II.html":["&nums)","(0,","(1,","(a","(b","(int","(n","*","*/","+","/**","//","0)","0);","0,","0;","1)","1));","1).","1,","1.","1]","1]);","1st","2","2),","2).","2.","2],","534.",";","=","==","=>","@param","@return:","aggreg","amount","array","b","bgn","bgn,","break","c","class","code","d","d)","dp(n,","dp[bgn","dp[bgn]","dp[i","dp[i]","dp[i]:","e","e)","end)","first","gener","here","hous","house,","houserobber2(vector","houses.","https://www.lintcode.com/problem/hous","ii","ii/descript","int","integers.","key","last","lintcod","loop","max","maximum","money","n","n,","neg","non","nums,","nums.size();","nums:","nums[0];","nums[bgn","nums[bgn];","private:","problem","profit","profit[i]","public:","rang","respectively.","return","rob","rob(const","rob(nums,","robber","solut","solv","std::max(nums[bgn],","std::max(rob(nums,","std::vector","std::vector&","subproblem","tonight","within","write","{","}"],"Fibonacci Sequence/House Robber III.html":["(!root)","(memo.count(root)","(root","*","*/","*left,","*right;","+","/","/**","//","0,","0;","1)","535.","=","==",">l",">l]",">left",">left)",">left,",">r",">r]",">right",">right)",">right,",">val","@param","@return:","\\","aggreg","amount","b","binari","c","c.","class","code","d","definit","dp[c","dp[c]","dp[c]:","e","f","g","here","hous","houserobber3(treenod","https://www.lintcode.com/problem/hous","iii","iii/descript","int","l","lintcod","ll","lr","max","max;","maximum","memo)","memo);","memo;","memo[root]","memo[root];","money","null;","private:","problem","profit","public:","r","r);","return","rl","rl,","rob","robber","root","root)","root,","root:","rr","runpostorder(root","runpostorder(root,","runpostorder(treenode*","solut","std::max(root","std::unordered_map","std::unordered_map&","subtre","tonight","tree.","treenod","treenode(int","treenode:","val)","val;","write","{","|","}","};"],"Fibonacci Sequence/4 Keys Keyboard.html":["(i","(int","*","*/","+","/**","//","0","1","1)","1;","1]","4","867.",";","=","@param","@return:","class","code","dp(n);","dp[0]","dp[i","dp[i]","dp[i]:","dp[j]","here","https://www.lintcode.com/problem/4","int","integ","j","key","keyboard","keyboard/solut","keys.","letter","lintcod","max","maxa(int","maximum","n)","n:","number","press","problem","public:","return","solut","time","write","{","|"],"Fibonacci Sequence/Minimum Cost for Tickets.html":["(int","*/","+",",we","/*","0;","1","1);","1,","1]","30]","7]","983.",":",";","=","class","cost","cost[d]","cost[m]","cost[w]","costs)","day","day.","days)","days,","days.back();","don't","dp(n","dp[0]","dp[day]","dp[i","dp[i]","dp[i]:","https://leetcode.com/problems/minimum","int","ith","leetcod","min","mincosttickets(vector&","minimum","n","need","problem","public:","solut","ticket","tickets/","till","travel","vector","vector&","{","|","}"],"String and Sequence Extremum/Minimum Edit Distance.html":["&s,","&t)","(int","*","*/","+",",","/**","//","0","1","1));","1,","119.","1]","1],","1][j","1][j]",";","=","==","@param","@return:","a[i]","a[i].","b","b[j],","class","code","cost","delet","distanc","distance/descript","dp(n","dp[i","dp[i][i]","dp[i][j","dp[i][j]:","edit","end","here","https://www.lintcode.com/problem/edit","index","insert","int","j.","letter.","lintcod","min","mindistance(str","minimum","ns","nt","number","otherwis","prefix","problem","public:","replac","s.length();","solut","std::vector(nt","std::vector>","steps.","string","t.length();","transform","word1:","word2:","write","{","|"],"String and Sequence Extremum/One Edit Distance.html":["&s,","&t)","(diff","(int","*","*/","++i;","++j;","/**","//","0","0)","0;","1)","640.",";","=","==",">","@param","@return:","apart","auto&","bool","both","checkstringswithdifferentlength(s,","checkstringswithsamelength(const","checkstringswithsamelength(s,","class","code","const","count","diff","distanc","distance/descript","edit","fals","false;","here","https://www.lintcode.com/problem/on","int","isoneeditdistance(str","len)","len_","len_s);","len_s,","len_t","len_t)","len_t);","lintcod","on","private:","problem","public:","return","s,","s.length();","s:","solut","std::abs(len_","string","t,","t.length();","t:","true","true;","write","{","}","};"],"String and Sequence Extremum/Longest Common Subsequence.html":["&a,","&b)","(int","*","*/","+",",","/**","//","0));","1","1,","1]","1])","1][j","1][j],","77.",";","=","==","@param","@return:","a(0,","a.size();","a:","a[i]","b","b(0,","b.size();","b:","b[j],","class","code","common","dp(na","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","here","https://www.lintcode.com/problem/longest","i)","int","j).","lc","length","lintcod","longest","longestcommonsubsequence(str","max(dp[i","na","nb","otherwis","prefix","problem","public:","solut","std::vector(nb","std::vector>","string","subsequ","subsequence/descript","write","{","|"],"String and Sequence Extremum/Shortest Common Supersequence.html":["(int","(trace[r][c]","*/","+",",","/**","0","0)","0));","1","1,","1092.","1]","1][j","1][j],","1]}","2,","3",";","=","==",">","c","c;","c]);","class","common","dp(n1","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","end","enum","https://leetcode.com/problems/shortest","int","j.","leetcod","length","min{dp[i","n1","n2","offset","otherwis","prefix","private:","problem","public:","r]);","return","s1","s1)","s1,","s1.length();","s1[i]","s2","s2)","s2.length();","s2[j],","sc","scs.end());","scs.push_back(s1[","scs.push_back(s2[","scs;","shortest","shortestcommonsupersequence(str","solut","std::reverse(scs.begin(),","string","supersequ","supersequence/","trace(n1","vector(n2","vector>","{","|","||","}","};"],"String and Sequence Extremum/Longest Common Substring.html":["&a,","&b)","(int","*","*/","+",",","/**","//","0","0));","0;","1","1,","1]","1][j","2","79.",";","=","==","@param","@return:","a(0,","a.size();","a:","a[i]","abcd,","an","b","b(0,","b.size();","b:","b[j],","c","cbce","class","code","common","d","dp(na","dp[i","dp[i][j]","dp[i][j]:","e","e.g.:","here","https://www.lintcode.com/problem/longest","i)","int","j).","length","lintcod","longest","longestcommonsubstring(str","na","nb","otherwis","prefix","problem","public:","solut","std::vector(nb","std::vector>","string","substr","substring.","substring/descript","write","{","|"],"String and Sequence Extremum/Longest Palindromic Subsequence.html":["&s)","(int","(n","*","*/","+",",","/**","//","0","0)","0));","0;","1000","1]","1],","1][j","1][j]","2","667.",";","=","==","@param","@return:","class","code","dp(n,","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","end","here","https://www.lintcode.com/problem/longest","index","int","j.","length","lintcod","longest","longestpalindromesubseq(str","maximum","max{","n","otherwis","palindrom","problem","public:","return","s","s.length();","s:","s[i]","s[j],","solut","start","std::vector(n,","std::vector>","subsequ","subsequence'","subsequence/descript","substr","write","{","|","}"],"String and Sequence Extremum/Longest Palindromic Substring.html":["\"\";","&&","&s)","(int","(n","*","*/","+","/**","//","0","0)","0;","1;","1]","1][j","200.",";","=","==","@param","@return:","alreadi","begin","bgn","class","code","data","end","extra","false));","here","https://www.lintcode.com/problem/longest","i;","index","information.","input","int","j","l;","length","lintcod","longest","longestpalindrome(str","lp","lps)","lps);","n","need","offset","palin(n,","palin[i","palin[i][j]","palin[i][j]:","palindrom","palindromic.","problem","public:","record","return","s.length();","s.substr(bgn,","s:","s[i]","s[j]","show","solut","start","std::vector(n,","std::vector>","string","structur","substr","substring,","substring/descript","whether","write","{","}","};"],"String and Sequence Extremum/Longest Increasing Subsequence.html":["&nums)","(cand","(int","(l","(longest","(n","*","*/","+","/**","//","0)","0,","0;","1","1;","2","3","4","5","7","77.",";","=","==",">","@param","@return:","[1]","[2]","[3]","array","cand","cand;","class","code","continue;","dp[0]","here","https://www.lintcode.com/problem/longest","increas","int","integ","l","length","li","lintcod","lis.back())","lis.push_back(nums[0]);","lis.push_back(nums[i]);","lis.size()","lis.size();","lis;","lis[l]","lis[l])","lis[m])","lis[r]","longest","longestincreasingsubsequence(vector","m;","n","nums.size();","nums:","nums[i];","o(nlogn)","problem","public:","r","return","solut","std::vector","subsequ","subsequence)","subsequence/descript","write","{","}","};"],"String and Sequence Extremum/Longest Increasing Substring.html":["&a)","(a[i]","(int","(n","(substring)","*","*/","+","++dp;",",","/**","//","0","0)","0;","1","1.","1;","1]","1])","2","397.",";","=","==",">",">=","@param","@return:","a.size();","a:","a[i","a[i]","an","ans;","array","class","code","continu","current","dp","dp);","dp[i","dp[i]","dp[i]:","end","here","https://www.lintcode.com/problem/longest","i)","i.","increas","index","int","integ","length","lintcod","longest","longestincreasingcontinuoussubsequence(vector","n","otherwis","problem","public:","return","solut","std::max(ans,","subsequ","subsequence/descript","substr","write","{","|","}","};"],"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":["&&","&matrix)","(const","(int","(num_c","(num_r","*","*/","+","/**","//","0","0)","0;","0},","1));","1);","1,","1;","1},","1}})","2d","398.",":",";","=","==",">",">=","@param","@return:","an","ans;","array","bool","class","code","const","continu","directs({{1,","directs;","dp(num_r,","dp[nx][ny]","dp[nx][ny]);","dp[x][y]","dynam","here","https://www.lintcode.com/problem/longest","ii","ii/descript","increas","int","integ","lhs,","lhs.val","lintcod","longest","longestcontinuousincreasingsubsequence2(vector>","matrix","matrix.size();","matrix:","matrix[0].size();","num_c","num_r","nx","ny","operator()","prioriti","private:","problem","program","public:","queue","queue;","record","record&","record(int","recordcompar","recordcompare>","return","rhs)","rhs.val;","solut","solution()","std::max(ans,","std::max(dp[nx][ny],","std::priority_queue,","std::vector(num_c,","std::vector>","struct","subsequ","val(val)","val)","val;","write","x(x),","x,","x;","y(y),","y,","y;","{","{0,","}","};"],"String and Sequence Extremum/Longest Repeating Subsequence.html":["!=","&str)","(int","(n","*","*/","+",",","/**","//","0","0)","0));","0;","1","1,","1]","1],","1][j","1][j]","581.",";","=","==","@param","@return:","class","code","common","dp(n","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","end","found","here","https://www.lintcode.com/problem/longest","index","int","j,","j.","length","lintcod","longest","longestrepeatingsubsequence(str","max{","n","otherwis","otherwise,","prefix","problem","public:","repeat","return","s[i]","s[j],","solut","std::vector(n","std::vector>","str","str.length();","str:","string","subsequ","subsequence/descript","write","{","|","}"],"String and Sequence Extremum/Longest Consecutive Sequence.html":["&nums)","(!set.empty())","(int","(set.count(backward)","(set.count(forward)","*","*/","*set.begin();","+","++forward;","++len;","/**","//","0;","1)","124.","1;",":","=","==","@param","@return:","backward","backward;","class","code","consecut","forward","here","https://www.lintcode.com/problem/longest","int","integ","len","len);","lintcod","list","longest","longestconsecutive(vector","max","max;","num","num:","nums)","problem","public:","return","seed","sequenc","sequence/descript","set.erase(backward);","set.erase(forward);","set.erase(seed);","set.insert(num);","set;","solut","std::max(max,","std::unordered_set","write","{","}","};"],"String and Sequence Extremum/Longest Palindrome.html":["&s)","(char","(int","*","*/","++map[ch];","/**","//","0","0);","0;","627.",":",";","=","@param","@return:","bool","built","ch","class","code","consist","false;","has_odd","here","https://www.lintcode.com/problem/longest","int","len","length","letter","lintcod","longest","longestpalindrome(str","lowercas","map(256,","palindrom","palindrome/descript","problem","public:","s)","s:","solut","std::vector","string","uppercas","write","{","}"],"String and Sequence Extremum/Decrease to be Palindrome.html":["&s)","(l","*","*/","/**","//","0,","0;","1784.","1;","=","@param","@return:","class","code","count","decreas","here","https://www.lintcode.com/problem/decreas","int","l","lintcod","number","numberofoperations(str","oper","palindrom","palindrome/descript","problem","public:","r","s","s.length()","s:","solut","string","write","{"],"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":["(int","*/","+","/**","0","0));","1","1312.","1]","1],","1][j","1][j]}",";","=","==","class","dp(n,","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","https://leetcode.com/problems/minimum","insert","int","j)","leetcod","make","minimum","mininsertions(str","min{","n","number","otherwise,","palindrom","palindrome/","palindromic.","problem","public:","s(i,","s)","s.length();","s[i]","s[j],","solut","step","string","substr","vector(n,","vector>","{","|"],"String Scramble/Distinct Subsequences.html":["&s,","&t)","(int","*","*/","+",",","/**","//","0","0));","1","1,","118.","1]","1][j","1][j]","2","3",";","=","==","@param","@return:","b","charact","class","code","count","distinct","dp(n","dp[i","dp[i][j]","dp[i][j]:","end","form","here","https://www.lintcode.com/problem/distinct","int","ith","jth","lintcod","ns","nt","number","numdistinct(str","otherwis","posit","position.","prefix","problem","public:","r","remov","s","s.length();","s:","s[i]","solut","std::vector(nt","std::vector>","string","subsequ","subsequences/descript","t","t.length();","t:","t[j],","way","write","{","|"],"String Scramble/Interleaving String.html":["!=","&&","&s1,","&s2,","&s3)","(i","(int","(n1","(s1[i]","(s2[j]","*","*/","+","/**","//","1","1,","1])","1][j])","29.",";","=","==","@param","@return:","bool","charact","class","code","determin","dp(n1","dp[0][0]","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","false));","false;","first","form","here","https://www.lintcode.com/problem/interleav","int","interleav","isinterleave(str","j","j)","j]","lintcod","n1","n2","n3","n3)","problem","public:","return","s1","s1.length();","s1:","s2","s2.","s2.length();","s2:","s3","s3.length();","s3:","s3[i","solut","std::vector(n2","std::vector>","string","string/descript","true;","us","whether","write","{","||","}"],"String Scramble/Scramble String.html":["!=","\"abc\",","\"abcde\".","\"de\",","\"deabc\"","&&","&s1,","&s2)","'a'];","(char","(int","(it_","(it_t","(n","*","*/","+","++freq_s[ch","++freq_t[ch","/**","//","0","0);","1)","2","430.",":",";","=","==","=>",">second;","@param","@return:","anoth","atgre,","auto","auto&","bool","cach","canscramble(const","canscramble(s1,","ch","charact","check","class","code","composition.","const","decomps","deriv","determin","eatgr","equal:","example,","false;","first.","freq_s(26,","freq_t(26,","gener","given","great","here","https://www.lintcode.com/problem/scrambl","inner","inner.end())","inner.find(t);","int","interexchan","interexchang","isscramble(str","it_","it_t","lengths.","lintcod","m","m)","memo)","memo);","memo.end())","memo.find(s);","memo;","memo[s][t]","n","one!","part","prefix","prefix,","private:","problem","public:","re","res;","respect","result","return","s","s)","s,","s.length();","s1","s1:","s2","s2,","s2:","s[0]","scrambl","solut","sp","ss","std::unordered_map>","std::vector","string","string/descript","strings,","substr","suffix,","suffix.","t","t)","t,","t.length();","t[0];","tgrea","tp","tp,","ts","ts,","version","whether","write","{","}"],"String Scramble/Wildcard Matching.html":["\"*\"","\"?\"","&p)","&s,","'*'","'?',","(int","*","*/","+",",","/**","//","1","1,","192.","1]","1][j","1][j]",";","=","==","@param","@return:","bool","class","code","dp(len_","dp[0][0]","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","end","fals","false));","here","https://www.lintcode.com/problem/wildcard","includ","index","int","ismatch(str","j.","len_","len_p","lintcod","match","match?","matching/descript","otherwis","p","p.length();","p:","p[j]","problem","public:","s","s.length();","s:","s[i]","solut","std::vector(len_p","std::vector>","string","subpattern","substr","true;","whether","wildcard","write","{","|","||"],"String Scramble/Regular Expression Matching.html":["\"*\"","\".\"","&&","&p)","&s,","'*'","'*')","'.'","'.')","'.',","(int","(s[i","*","*/","+",",","/**","//","1","1,","154.","1]","1][j","1][j]","1][j];","2","2]","2];",";","=","==","@param","@return:","bool","boolean","class","code","dp(len_","dp[0][0]","dp[0][i","dp[0][i]","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","dp[len_s][len_p];","end","express","fals","false));","here","https://www.lintcode.com/problem/regular","includ","index","int","ismatch(str","j.","len_","len_p","lintcod","match","matching/descript","otherwis","p","p.length();","p:","p[i","p[j","p[j]","plan","problem","public:","regular","return","s","s.length();","s:","s[i]","solut","std::vector(len_p","std::vector>","string","subpattern","substr","true;","whether","write","{","|","||","}","};"],"Game Theory/Coins in a Line.html":["(int","(l)3","(n","(w)2","*","*/","+","/","/**","//","0)","1","1(w)","1,","1.","1]","2","2(w)","2)","2.","2]","3","394.","4(w)",";","=","==","@param","@return:","\\","alway","b","bool","boolean","class","code","coin","competitor","dp(n","dp[1]","dp[2]","dp[i","dp[i]","dp[i]:","equal","fals","false);","false;","first","firstwillwin(int","game","game.","go","guarante","hard","here","https://www.lintcode.com/problem/coin","integ","line","line.","line/descript","lintcod","losabl","lose","matter","n","n)","n:","player","problem","public:","push","return","solut","state,","state.","std::vector","step","then,","tries,","true","true;","whether","win","winnabl","winnable.","write","{","||","}"],"Game Theory/Coins in a Line II.html":["&values)","(i+1)th","(int","(n","(sum[i","*","*/","+",",","/**","//","0","0)","0);","1","1)","1.","1]","1])","1];","2","2)","2.","2]","2])","2];","3","395.",";","=","==",">",">=","@param","@return:","aggreg","b","b,","bool","boolean","choices.","class","code","coin","coin,","competitor","cover","current","dp(n,","dp[0]","dp[i","dp[i]","dp[i]:","dp[n","equal","false;","first","firstwillwin(vector","here","https://www.lintcode.com/problem/coin","i)","ii","ii/descript","int","integ","iteration.","ith","last","left.","line","lintcod","max","maximum","n","next","one.","person","pick","plan_a","plan_b","plan_b);","player","problem","public:","remain","remained,","return","sa","sa:","sb''.","sb'.","sb:","solut","std::max(plan_a,","std::vector","sum(i","sum(i)","sum(i):","sum(n,","sum[0];","sum[i","sum[i]","sum[n","total","true","true;","valu","values.size();","values:","values[i","values[i]","values[i];","values[n","vector","win","write","{","|","||","}","};"],"Game Theory/Coins in a Line III.html":["&values)","(int","(j","(n","*","*/","+","/**","//","0","0)","0));","1)","1,","1.","1]","1];","1][j]","2","2.","396.",";","=","==","@param","@return:","aggreg","b","b,","bool","boolean","choices.","class","code","coin","coin,","competitor","cover","current","dp(n,","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","equal","false;","first","firstwillwin(vector","here","https://www.lintcode.com/problem/coin","iii","iii/descript","int","integ","iteration.","ith","j","j)","j):","jth","left.","line","lintcod","max","maximum","n","next","one.","person","pick","player","problem","public:","remain","remained,","return","sa","sa:","sb''.","sb'.","sb:","solut","std::vector(n,","std::vector>","sum(i","sum(i,","sum(n,","sum[0][n","sum[i][j]","total","true","true;","valu","values.size();","values:","values[i]","values[j]","vector","win","write","{","|","}","};"],"Iterator/Binary Tree Iterative Preorder Traversal.html":["(!root)","(!stk.empty())","(curr","*","*/","*left,","*right;","/**","//","66.","=",">left",">left)",">left);",">right",">right)",">right);",">val",">val);","@param","@return:","ans.push_back(curr","ans;","arraylist","auto","binari","class","code","contain","curr","definit","here","https://www.lintcode.com/problem/binari","int","iter","lintcod","node","null;","preorder","preordertraversal(treenod","problem","public:","return","root)","root:","solut","std::stack","std::vector","stk.pop();","stk.push(curr","stk.push(root);","stk.top();","stk;","travers","traversal/descript","tree","treenod","treenode(int","treenode:","val)","val;","values.","vector","write","{","{};","}","};"],"Iterator/Binary Tree Iterative Inorder Traversal.html":["(!root)","(!stk.empty())","(curr)","*","*/","*left,","*right;","/**","//","67.","=",">left",">left;",">right",">right;",">val",">val);","@param","@return:","ans.push_back(curr","ans;","arraylist","auto","binari","class","code","contain","curr","definit","here","https://www.lintcode.com/problem/binari","inord","inordertraversal(treenod","int","iter","lintcod","node","null;","problem","public:","return","root)","root:","root;","solut","std::stack","std::vector","stk.pop();","stk.push(curr);","stk.top();","stk;","travers","traversal/descript","tree","treenod","treenode(int","treenode:","val)","val;","values.","vector","write","{","{};","}","};"],"Iterator/Binary Tree Iterative Postorder Traversal.html":["(!root)","(!stk.empty())","(root","(root)","(stk.top()","*","*/","*left,","*right;","/**","//","68.","=","==",">left",">left)",">left;",">right",">right,",">right;",">val",">val);","@param","@return:","ans.push_back(curr","ans;","arraylist","auto","binari","class","code","contain","curr","curr)","definit","findsuccessor(root,","findsuccessor(stk.top()","findsuccessor(treenode*","here","https://www.lintcode.com/problem/binari","int","iter","lintcod","node","null;","postord","postordertraversal(treenod","private:","problem","public:","return","root","root)","root,","root:","solut","std::stack","std::stack&","std::vector","stk)","stk);","stk.pop();","stk.push(root);","stk.top();","stk;","travers","traversal/descript","tree","treenod","treenode(int","treenode:","val)","val;","values.","vector","void","write","{","{};","}","};"],"Iterator/Inorder Successor in BST.html":["!=","!p)","(!root","(curr","(curr)","(p","*","*/","*left;","*right;","/*","/**","//","448.",":","=",">left;",">right)",">right;",">val","@param","@return:","auto","binari","bst","bst.","bst/descript","class","code","curr","curr;","definit","find","here","https://www.lintcode.com/problem/inord","inord","inordersuccessor(treenod","int","left(null),","lintcod","need","node","node.","nullptr;","p","p)","p.","p:","pred","pred;","problem","public:","return","right(null)","root","root,","root:","root;","solut","struct","successor","sucessor","tree","treenod","treenode(int","treenode*","val(x),","val)","val;","write","x)","{","{}","||","}","};"],"Iterator/Flatten Binary Tree to Linked List.html":["(!root)","(last_l)","(last_r)","*","*/","*left,","*right;","/","/**","//","1","1:","2","2:","3","3*","3:","4","4*","453.","4:","5","6","6*","=","=>",">left",">left);",">left;",">right",">right);",">right;",">val","@param","@return:","\\","auto","b","binari","c","case","child","children","class","code","definit","demo:","flatten","flatten(treenod","here","https://www.lintcode.com/problem/flatten","int","last","last_l","last_l;","last_r","last_r;","left","link","lintcod","list","list/","node.","noth","null;","nullptr;","private:","problem","public:","return","right","root","root)","root:","root;","runpostorder(root","runpostorder(root);","runpostorder(treenode*","solut","tree","treenod","treenode(int","treenode*","treenode,","treenode:","two","val)","val;","void","write","{","}","};"],"Iterator/Flatten Nested List.html":["!=","&getlist()","&nestedlist)","(!list.empty())","(!nestedlist.empty())","(!stk.empty())","(bgn","*","*/","++bgn;","/**","//","22.","=",">getinteger());",">getlist());",">isinteger())","@param","@return","allow","ans.push_back(bgn","ans;","auto","auto&","bgn","bool","break;","class","code","const","const;","const_cast&>(bgn","creat","end","end)","end));","flatten","flatten(vector","getinteger()","here","hold","holds,","https://www.lintcode.com/problem/flatten","implement","int","integ","integer,","interfac","isinteger()","it,","lintcod","list","list.","list.end()));","list/descript","lists.","nest","nestedinteg","nestedlist","nestedlist.end()));","problem","public:","result","return","singl","solut","specul","std::stack::iterator,","std::vector","std::vector::iterator>>","stk.pop();","stk.push(std::make_pair(bgn,","stk.push(std::make_pair(list.begin(),","stk.push(std::make_pair(nestedlist.begin(),","stk.top();","stk;","top","top.first;","top.second;","true","undefin","vector","write","{","}","};"],"Iterator/Flatten Nested List Iterator.html":["!=","&getlist()","&nestedlist)","(!list.empty())","(!nestedlist.empty())","(!stk.empty())","(bgn","(i.hasnext())","*","*/","++bgn;","/**","//","528.","=",">getinteger();",">getlist());",">isinteger())","@return","allow","auto","auto&","bgn","bool","cach","cache;","call","class","code","const","const;","const_cast&>(bgn","creat","data","element","end","end)","end));","fals","false;","flatten","getinteger()","hasnext()","here","here.","hold","holds,","https://www.lintcode.com/problem/flatten","i(nestedlist);","implement","initi","instanti","int","integ","integer,","interfac","isinteger()","it,","iter","iterator/descript","lintcod","list","list.","list.end()));","lists.","more","nest","nestedinteg","nestediter","nestediterator(vector","nestedlist.end()));","next","next()","object","private:","problem","public:","result","return","singl","solut","specul","std::stack::iterator,","std::vector::iterator>>","stk.pop();","stk.push(std::make_pair(bgn,","stk.push(std::make_pair(list.begin(),","stk.push(std::make_pair(nestedlist.begin(),","stk.top();","stk;","structur","such:","top","top.first;","top.second;","true","true;","undefin","v.push_back(i.next());","vector","write","{","{boolean}","{int}","}","};"],"Iterator/Flatten 2D Vector.html":["(i.hasnext())","(index_row","*","/**","//","2d","601.",":",">","cache;","call","class","cout","data","flatten","here","https://www.lintcode.com/problem/flatten","i(vec2d);","index_col(0),","index_row(0),","initi","instanti","int","lintcod","object","problem","public:","solut","structur","such:","total_col(0),","total_row(vec2d.size()),","vec2d(vec2d)","vec2d)","vec2d;","vector","vector/descript","vector2d","vector2d(vector>&","{","};"],"Iterator/ZigZag Iterator.html":["!=","&&","(bgn_first","(bgn_second","(solution.hasnext())","(turn","*","*/","*/zigzagiterator(vector&","*bgn_first;","*bgn_second;","++bgn_first;","++bgn_second;","/*","/**","//","1d","540.",":","=","==","@param","@return:","bgn_first(v1.begin()),","bgn_first,","bgn_second","bgn_second(v2.begin()),","bgn_second,","bool","cach","cache;","call","char","class","code","end_first","end_first(v1.end()),","end_first)","end_first,","end_second(v2.end()),","end_second)","end_second;","enum","false;","first,","hasnext()","here","https://www.lintcode.com/problem/zigzag","instanti","int","integ","intial","iter","iterator/descript","lintcod","necessari","next","next()","object","ouptut","private:","problem","public:","result","result.push_back(solution.next());","return","second","solut","solution(v1,","std::vector::iter","such:","true","true;","turn","turn(turn::first)","turn::first)","turn::first;","turn::second;","turn;","v1,","v1:","v2)","v2);","v2:","vector","vector&","write","zigzag","zigzagiter","{","}","};"],"Iterator/ZigZag Iterator II.html":["%","(!vec.empty())","(auto&","(bgns[turn]","(solution.hasnext())","(total","(turn","*","*/","*/zigzagiterator2(vector>&","*bgns[turn];","+","++bgns[turn];","++total;","/*","/**","//","0)","0;","1)","1d","541.",":","=","==",">","@param","@return:","bgns.emplace_back(vec.begin());","bgns.erase(bgns.begin()","bgns.push_back(vec.begin());","bgns;","bool","cach","cache;","call","class","code","elem","elem;","ends.emplace_back(vec.end());","ends.erase(ends.begin()","ends.push_back(vec.end());","ends;","ends[turn])","false;","hasnext()","here","https://www.lintcode.com/problem/zigzag","ii","ii/descript","instanti","int","integ","intial","iter","lintcod","list","necessari","next","next()","object","ouptut","private:","problem","public:","result","result.push_back(solution.next());","return","solut","solution(vecs);","std::vector::iterator>","std::vector>","such:","total","total(0),","total;","true","true;","turn","turn(0)","turn(0),","turn);","turn,","turn;","vec","vecs(vecs)","vecs)","vecs:","vecs;","vector","write","zigzag","zigzagiterator2","{","}","};"],"Iterator/Nested List Weight Sum.html":["!=","&getlist()","(!list.empty())","(!stk.empty())","(bgn","*","*/","+","++bgn;","+=","/**","//","0;","1,","551.",":","=",">getinteger()",">getlist());",">isinteger())","allow","auto","auto&","bgn","bgn(bgn),","bgn,","bool","break;","class","code","const","const;","const_cast&>(bgn","const_cast&>(nestedlist);","creat","depth","depth(depth),","depth,","depth;","depthsum(const","end","end(end)","end)","end;","getinteger()","here","hold","holds,","https://www.lintcode.com/problem/nest","implement","input","input.begin(),","input.end()));","int","integ","integer,","interfac","isinteger()","it,","lintcod","list","list.","list.begin(),","list.end()));","lists.","nest","nestedinteg","nestedlist)","problem","public:","record","record(int","result","return","singl","solut","specul","std::move(bgn),","std::move(end)));","std::stack","std::vector::iter","std::vector::iterator&&","stk.pop();","stk.push(record(1,","stk.push(record(depth","stk.push(record(depth,","stk.top();","stk;","struct","sum","sum/descript","sum;","top","top.bgn;","top.depth;","top.end;","true","undefin","vector","vector&","weight","write","{","}","};"],"Iterator/Nested List Weight Sum II.html":["!=","(!list.empty())","(!stk.empty())","(auto&","(bgn","(max_depth","(nestedlist.empty())","*","*/","+","++bgn;","+=","/**","//","0;","1","1);","1,","1]","1],","1]]","2,","2]","2],","905.",":","=","=>",">getinteger(),",">getlist());",">isinteger())","@param","@return:","[1,","[2,","[[1,","adjust","auto","auto&","auto&&","bgn","bgn(bgn),","bgn,","break;","cache)","cache.emplace_back(bgn","cache;","class","code","const_cast&>(bgn","depth","depth(depth),","depth);","depth,","depth;","depthsuminverse(vector","elem","elem.num","elem.weight","element","element(int","end","end(end)","end)","end;","final","gener","here.","https://www.lintcode.com/problem/nest","ii","ii/descript","int","lintcod","list","list.begin(),","list.end()));","max_depth","maximum","nest","nestedinteg","nestedlist)","nestedlist.begin(),","nestedlist.end()));","nestedlist:","num(num),","num,","origin","problem","public:","record","record(int","return","solut","std::max(max_depth,","std::move(bgn),","std::move(end)));","std::stack","std::vector","std::vector::iter","stk.pop();","stk.push(record(1,","stk.push(record(depth","stk.push(record(depth,","stk.top();","stk;","struct","sum","sum;","top","top.bgn;","top.depth;","top.end;","weight","weight(weight)","weight)","weight;","write","{","}","};"],"Binary Tree/Valid Binary Search Tree.html":["!r.is_bst)","!root","&&","(!l.is_bst","(!root","(!root)","(root","*","*/","*left,","*right;","/**","//","95.",":","=",">",">left",">left);",">right",">right)",">right);",">val",">val,","@param","@return:","auto","binari","bool","bst,","class","code","definit","fals","here","https://www.lintcode.com/problem/valid","int","is_bst(is_bst)","is_bst)","is_bst;","isvalidbst(treenod","l","l.max","l.max)","l.min,","lintcod","max(max),","max(std::numeric_limits::min()),","max,","max;","min(min),","min(std::numeric_limits::max()),","min,","min;","null;","private:","problem","public:","r","result","result(bool","result(false);","result(int","result(root","result(true);","result.is_bst;","return","root","root)","root:","runpostorder(root","runpostorder(root);","runpostorder(treenode*","search","solut","struct","tree","tree.","tree/descript","treenod","treenode(int","treenode:","true","true);","val)","val,","val;","valid","write","{","||","}","};"],"Binary Tree/Balanced Binary Tree.html":["!r.balanced)","!root","&&","(!l.balanc","(!root","(!root)","(diff","*","*/","*left,","*right;","+","/**","//","0);","1)","1);","95.",":","=",">",">left",">left);",">right",">right)",">right);",">val","@param","@return:","auto","balanc","balanced(balanced),","balanced,","balanced;","binari","bool","class","code","definit","diff","false.","height(height)","height)","height;","here","https://www.lintcode.com/problem/balanc","int","isbalanced(treenod","l","lintcod","null;","private:","problem","public:","r","r.height)","r.height);","re","record","record(bool","record(false,","record(true,","res.balanced;","return","root","root)","root:","runpostorder(root","runpostorder(root);","runpostorder(treenode*","solut","std::abs(l.height","std::max(l.height,","struct","tree","tree.","tree/descript","treenod","treenode(int","treenode:","true","val)","val;","write","{","||","}","};"],"Binary Tree/Complete Binary Tree.html":["(!queue.empty())","(!root)","(int","(node","*","*/","*left;","*right;","+","/**","//","0","0;","1));","2","2));","958.",":",";","=",">left,",">right)",">right,","binari","bool","check","class","complet","count","counter","definit","https://leetcode.com/problems/check","int","iscompletetree(treenode*","label","label(label)","label)","label;","leetcod","left(null),","left)","level","node(node),","node,","node.","node;","order","problem","public:","queue.push(record(nod","queue.push(record(root,","queue.size();","queue;","record","record(treenode*","return","right(null)","root)","size","solut","std::queue","struct","travers","tree","tree/","treenod","treenode(int","treenode*","true;","val(x),","val;","x)","{","{}","}","};"],"Binary Tree/Maximum Width of Binary Tree.html":["(!queue.empty())","(!root)","(int","(node","*","*/","*left,","*right;","+","/**","//","0","0;","1));","1);","1101.","2","2));",":",";","=",">left",">left,",">right",">right)",">right,",">val","@param","@return:","binari","class","code","definit","given","here","https://www.lintcode.com/problem/maximum","int","int_max;","int_min;","label","label(label)","label)","label;","left)","level","lintcod","max","maximum","min","node(node),","node,","node;","null;","order","problem","public:","queue.push(record(nod","queue.push(record(root,","queue.size();","queue;","record","record(treenode*","return","root","root)","root:","size","solut","std::max(width,","std::queue","struct","travers","tree","tree/descript","treenod","treenode(int","treenode*","treenode:","val)","val;","width","width;","widthofbinarytree(treenod","write","{","}","};"],"Binary Tree/Diameter of Binary Tree.html":["!root","&&","(!root","(!root)","*","*/","*left,","*right;","+","/**","//","0;","1181.","1;","2","=",">left",">left,",">right",">right)",">right,",">val","@param","@return:","an","ans)","ans);","ans;","binari","both","branch","calcul","class","code","collect","combin","conquer","definit","depth","diamet","diameter.","diameterofbinarytree(treenod","diamter","divid","each","essenti","form","here","https://www.lintcode.com/problem/diamet","int","int&","integ","l","l);","left","lintcod","maximum","merg","node","note","null;","path.","pleas","postord","private:","problem","public:","r","r)","r,","r.","return","right","root","root)","root,","root:","runpostorder(root","runpostorder(root,","runpostorder(treenode*","segment","segments,","solut","std::max(ans,","std::max(l,","std::numeric_limits::min();","subtre","then,","therefore,","travers","tree","tree.","tree/descript","treenod","treenode(int","treenode:","val)","val;","write","{","}","};"],"Binary Tree/Minimum Depth of Binary Tree.html":["!root","&&","(!root","(!root)","(root","*","*/","*left,","*right;","+","/**","//","0;","1,","155.","=",">left",">left)",">left,",">right",">right)",">right,",">val","@param","@return:","an","ans)","ans);","ans;","binari","class","code","comparison","definit","depth","h","h,","height","here","https://www.lintcode.com/problem/minimum","int","int&","integ","lintcod","mindepth(treenod","minimum","null;","preorder","private:","problem","public:","return","return;","root","root)","root,","root:","runpreorder(root","runpreorder(root,","runpreorder(treenode*","solut","std::min(h,","std::numeric_limits::max();","travers","tree","tree/descript","treenod","treenode(int","treenode:","val)","val;","void","write","{","}","};"],"Binary Tree/Maximum Depth of Binary Tree.html":["!root","&&","(!root","(!root)","(root","*","*/","*left,","*right;","+","/**","//","0;","1,","97.","=",">left",">left)",">left,",">right",">right)",">right,",">val","@param","@return:","an","ans)","ans);","ans;","binari","class","code","comparison","definit","depth","h","h);","h,","height","here","https://www.lintcode.com/problem/maximum","int","int&","integ","lintcod","maxdepth(treenod","maximum","null;","preorder","private:","problem","public:","return","root","root)","root,","root:","runpreorder(root","runpreorder(root,","runpreorder(treenode*","solut","std::max(ans,","std::numeric_limits::min();","travers","tree","tree.","tree/descript","treenod","treenode(int","treenode:","val)","val;","void","write","{","}","};"],"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":["&&","(root","*","*/","*left,","*right;","/**","//","1311.","=",">",">left",">left,",">right",">right,",">val",">val)","@param","@return:","ancestor","binari","class","code","common","definit","find","here","https://www.lintcode.com/problem/lowest","int","lca","lintcod","lowest","lowestcommonancestor(root","lowestcommonancestor(treenod","node","null;","p","p,","p:","problem","public:","q","q)","q);","q:","return","root","root,","root:","root;","search","solut","tree","tree/descript","treenod","treenode(int","treenode:","val","val)","val;","write","{","}","};"],"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":["&&","(!root","(l","(l)","(r)","*","*/","*left,","*right;","/*","/**","//","88.","=","==",">left",">left,",">right",">right,",">val","@param","@return:","a,","a:","ancestor","ancestor(lca)","auto","b)","b);","b:","binari","binary.","class","code","common","definit","here","https://www.lintcode.com/problem/lowest","int","l","l;","lintcod","lowest","lowestcommonancestor(root","lowestcommonancestor(treenod","nodes.","null;","nullptr;","problem","public:","r","r)","r;","return","root","root,","root:","root;","search","solut","tree","tree.","tree/descript","treenod","treenode(int","treenode:","two","val)","val;","write","{","||","}","};"],"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":["(a)","(b)","(set.count(b)","*","*/","*left,","*parent,","*right;","/*","/**","//","1)","474.","=","==",">parent;","@param","@return:","a,","a:","ancestor","b","b)","b:","b;","binari","break;","class","code","common","definit","here","https://www.lintcode.com/problem/lowest","ii","ii/descript","int","lintcod","lowest","lowestcommonancestorii(parenttreenod","node","parenttreenod","parenttreenode:","problem","public:","return","root","root,","root:","set.insert(a);","set;","solut","std::unordered_set","tree","val;","write","{","}","};"],"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":["&&","(!root)","(curr.found_a","(l.lca)","(r.lca)","(root","*","*/","*left,","*right;","/*","/**","//","578.",":","=","==",">left",">left,",">right",">right,",">val","@param","@return:","a)","a,","a:","ancestor","ancestor(lca)","auto","b)","b);","b:","binari","binary.","bool","class","code","common","curr.found_a","curr.found_b","curr.found_b)","curr.lca","curr;","definit","found_a(false),","found_a(found_a),","found_a,","found_a;","found_b(false),","found_b(found_b),","found_b,","found_b;","here","https://www.lintcode.com/problem/lowest","iii","iii/descript","int","l","l.found_a","l.found_b","l;","lca(lca)","lca(nullptr)","lca)","lca;","lintcod","lowest","lowestcommonancestor(treenod","nodes.","null;","private:","problem","public:","r","r.found_a;","r.found_b;","r;","re","record","record()","record();","record(bool","res.lca;","return","root","root,","root:","root;","runpostorder(root","runpostorder(root,","runpostorder(treenode*","search","solut","struct","tree","tree.","treenod","treenode(int","treenode*","treenode:","true;","two","val)","val;","write","{","||","}","};"],"Binary Tree/Recover Binary Search Tree.html":["&&","(!src)","(4,","(5,","(curr","(pred","(src","(src)","*","*/","*dst","*left,","*pred","*right;","*src","/**","//","1","1)","2","2)","3","3,","4","4}.","5","691.","=","=>",">",">left",">left)",">left,",">right",">right)",">right,",">val",">val)",">val);",">val,","@param","@return:","anoth","appli","binari","bstswappednode(treenod","case","class","code","consid","curr","curr,","curr.","curr;","definit","discov","dst","dst)","dst);","find","first","given","here","https://www.lintcode.com/problem/recov","inord","int","invers","lintcod","name","null;","nullptr,","nullptr;","number","out","pair,","pairs.","pointer","pred","pred,","pred.","pred;","predecessor","private:","problem","public:","record","recov","return","root)","root:","root;","runinorder(","runinorder(curr","runinorder(root,","search","second","solut","specifically,","src","src,","std::swap(src","swap","time,","travers","tree","tree.","tree/descript","treenod","treenode(int","treenode*","treenode*&","treenode:","trival","us","val)","val;","void","write","wrong!","{","{1,","}","};"],"Binary Tree/Binary Tree Maximum Path Sum.html":["(!root)","*","*/","*left,","*right;","+","/","/**","//","/\\","/__\\","0;","94.","=",">left",">left,",">right",">right,",">val",">val);",">val;","@param","@return:","\\","be:","binari","branch","candid","cases.","check","class","code","consid","definit","denot","follow","full","full);","gener","here","https://www.lintcode.com/problem/binari","int","int&","integ","is:","l","l,","l;","left","level","lintcod","max","maximum","maxpathsum(treenod","need","null;","opt","opt)","opt);","opt;","parent","pass","path","private:","problem","public:","r","r,","r;","ret","ret;","return","right","root","root)","root,","root:","runpostorder(root","runpostorder(root,","runpostorder(treenode*","solut","std::max(opt,","std::max(ret,","std::max(std::max(tl,","sum","sum/descript","t","t,","t.","then,","thw","tl","tlr","tlr);","tr","tr),","tree","tree.","treenod","treenode(int","treenode:","val)","val;","want","write","{","}","};"],"Binary Tree/Binary Tree Maximum Path Sum II.html":["(!root)","(root","*","*/","*left,","*right;","+=",",","/**","//","0;","475.","=",">left",">left)",">left,",">right",">right)",">right,",">val",">val;","@param","@return:","binari","class","code","definit","here","https://www.lintcode.com/problem/binari","ii","ii/descript","int","int&","integ","lintcod","maximum","maxpathsum2(treenod","null;","opt","opt)","opt);","opt;","path","private:","problem","public:","return","root","root)","root,","root:","runpreorder(root","runpreorder(root,","runpreorder(treenode*","solut","std::max(opt,","sum","sum);","sum,","tree","tree.","treenod","treenode(int","treenode:","val)","val;","void","write","{","}","};"],"Binary Tree/Binary Tree Path Sum.html":["!root","&&","(!root","(!root)","(root","*","*/","*left,","*right;","+=","/*","/**","//","0,","376.","=","==",">left",">left)",">left,",">right",">right)",">right,",">val",">val);",">val;","@param","@return:","ans,","ans.push_back(prefix);","ans;","auto&","binari","binarytreepathsum(treenod","class","code","definit","here","https://www.lintcode.com/problem/binari","int","integ","lintcod","null;","path","prefix,","prefix.pop_back();","prefix.push_back(root","prefix;","private:","problem","public:","return","root","root,","root:","runpreorder(","runpreorder(root","runpreorder(root,","solut","std::vector","std::vector>","sum","sum,","sum/descript","target)","target);","target:","tree","treenod","treenode(int","treenode*","treenode:","val)","val;","valid","vector>","void","write","{","{};","}","};"],"Binary Tree/Binary Tree Path Sum II.html":["(!root)","(!stk.empty())","(root","(start","(sum","*","*/","*left,","*right;","+=","/*","/**","//","0,","246.","=","==",">left",">left)",">left);",">left,",">right",">right)",">right);",">right,",">val",">val);",">val;","@param","@return:","ans,","ans.push_back(prefix);","ans;","auto","auto&","binari","binarytreepathsum2(treenod","class","code","definit","here","https://www.lintcode.com/problem/binari","ii","ii/descript","int","integ","lintcod","null;","path","prefix,","prefix.pop_back();","prefix.push_back(root","prefix;","private:","problem","public:","return","root","root,","root:","runpreorder(","runpreorder(root","runpreorder(start,","solut","start","std::stack","std::vector","std::vector>","stk.pop();","stk.push(root);","stk.push(start","stk.top();","stk;","sum","sum,","target)","target);","target:","tree","treenod","treenode(int","treenode*","treenode:","val)","val;","valid","vector>","void","write","{","{};","}","};"],"Binary Tree/Binary Tree Path Sum IV.html":["!root","&&","&nums)","(!root","(auto&","(int","(map.count(r_index)","(nums.empty())","(posit","(root","*","*/","+","+=","...","/","/**","//","0","0,","0;","1","1)","1);","1,","100;","10;","113","1;","1st","2","2,","215","3","3rd","863.",":","=","==",">",">left",">left)",">left,",">right",">right)",">right,",">val;","@param","@return:","^","an","ans)","ans);","ans;","answer.","auto","binari","class","clean","code","curr","depth","depth:","here","https://www.lintcode.com/problem/binari","index","int","int&","integ","iv","iv/descript","l_index","left","lintcod","list","map)","map;","map[index]","map[l_index];","map[r_index];","new","node","num","nums)","nums:","pair","pair.first;","pair.second;","path","pathsum(vector","posit","position:","pow(2,","private:","problem","public:","r_index","resolv","return","root","root,","runpreorder(map[1],","runpreorder(root","runpreorder(treenode*","solut","std::unordered_map","sum","sum,","sum;","todo:","tree","treenode(num);","void","write","{","}","};"],"Binary Tree/Convert BST to Greater Tree.html":["(!root)","*","*/","*left,","*right;","+=","/**","//","0;","661.","=",">left",">left,",">right",">right,",">val",">val;","@param","@return:","binari","bst","class","code","convert","convertbst(treenod","definit","greater","here","https://www.lintcode.com/problem/convert","int","int&","lintcod","new","null;","private:","problem","public:","return","return;","root","root)","root,","root:","root;","runreversedinorder(root","runreversedinorder(root,","runreversedinorder(treenode*","solut","sum","sum)","sum);","sum;","tree","tree/descript","treenod","treenode(int","treenode:","val)","val;","void","write","{","}","};"],"Binary Tree/Find Leaves of Binary Tree.html":["(1)4","(2)2","(int","*","*/","*left,","*right;","+","/","/*","/**","//","1","1(3)","1:","1;","2","2:","3","3(1)","3:","4,","5(1)","5,","650.",";","=",">left",">right",">right,",">val",">val);","@param","@return:","\\","ans;","binari","class","code","collect","definit","find","findleaves(treenod","h","h;","here","https://www.lintcode.com/problem/find","int","leav","left,","lintcod","map);","map;","map[h].push_back(root","null;","problem","public:","r","r)","remov","return","root","root)","root:","runpostorder(root","runpostorder(root,","solut","std::max(l,","std::unordered_map>","std::vector>","tree","tree/descript","treenod","treenode(int","treenode:","val)","val;","vector>","write","{","}","};"],"Binary Tree/Binary Tree Upside Down.html":["(!new_root)","(!parent)","(!root)","(curr","(parent","*","*/","*left,","*right;","/","/**","//","1","1.","2","2.","3","4","5","649.","=","=>",">left",">left)",">left,",">right",">right)",">right;",">val","@param","@return:","\\","binari","chang","child","class","code","curr","curr);","curr,","curr;","current","definit","down","down/descript","each","find","here","https://www.lintcode.com/problem/binari","int","left","lintcod","moreover,","need","new","new_root","new_root;","node","node,","node.","null,","null;","nullptr);","nullptr;","offspring,","origin","parent","parent)","parent;","private:","problem","public:","record","return","right","root","root)","root.","root:","runpreorder(curr","runpreorder(root,","runpreorder(treenode*","sibl","sibling,","sibling.","side","solut","tree","tree.","treenod","treenode(int","treenode*","treenode:","up","upsid","upsidedownbinarytree(treenod","val)","val;","veri","write","{","|","}","};"],"Binary Tree/Binary Tree Vertical Order Traversal.html":["(!queue.empty())","(!root)","(0)","(2)","(int","(node","*","*(","*/","*left,","*right;","+","/","/**","//","0));","1));","1)9","1,","15","1;","20(1)","3","651.","7",":",";","=",">left",">left)",">left,",">right",">right)",">right,",">val",">val);","@param","@return:","\\","ans;","auto","binari","class","code","definit","here","https://www.lintcode.com/problem/binari","int","level","level(level)","level)","level);","level;","lintcod","map;","map[level].push_back(nod","max","min","node","node(node),","node,","node;","null;","order","problem","public:","queue.front();","queue.pop();","queue.push(record(nod","queue.push(record(root,","queue;","rec","rec.level;","rec.node;","record","record(treenode*","return","root","root)","root:","solut","std::max(max,","std::min(min,","std::queue","std::unordered_map>","std::vector>","struct","travers","traversal/descript","tree","treenod","treenode(int","treenode*","treenode:","val)","val;","vector>","vertic","verticalorder(treenod","write","{","{};","}","};"],"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":["%","(!first.empty())","(!root)","(int","(level","(node","*","*/","*left,","*right;","++level;","/**","//","0","0)","0;","1","2","2,","3,","71.",";","=","==",">",">left",">left)",">left);",">right",">right)",">right);",">val","@param","@return:","ans.emplace_back(std::move(collect));","ans;","binari","children","class","code","collect","collect;","consum","content","control","definit","e.g.","even,","explor","finish","first","first.push(root);","first.size();","first;","here","https://www.lintcode.com/problem/binari","includ","int","integ","l","left","level","level,","list","n","node","nodes'","nodes.","null;","number","odd,","onto","order","overrid","problem","public:","push","r","return","right","root)","root:","second","second.push(nod","second;","side","solut","specif","stack","stack,","stack.","std::move(second);","std::stack","std::vector","std::vector>","those","travers","traversal.","traversal/descript","tree","treenod","treenode(int","treenode:","upon","us","val)","val);","val;","values.","vector>","veri","visualization:","write","zag","zig","zigzag","zigzaglevelorder(treenod","{","{};","|","}","};"],"Binary Tree/Serialize and Deserialize Binary Tree.html":["\"#\")","\"#\";","\",\"","\"deserialize\"","\"serialize\"","\"serialize\",","#","#,","&data)","',');","(!root)","(token","*","*/","*left,","*right;","+","/","/**","//","15","15,","20","20,","3","3,","7","7,","7.","9","9,","=","==",">left",">left)",">right",">right);",">val",">val)","\\","algorithm","argument","auto","binari","class","code","curr","curr;","data","definit","denot","deseri","deserialize(str","deserializehelper(std::stringstream&","deserializehelper(stream);","design","easili","exactli","first,","format","getline(stream,","given","here","https://www.lintcode.com/problem/seri","int","invok","it'","later.","lintcod","mean","method","method.","new","node","null;","nullptr;","private:","problem","public:","return","root","root)","second,","serial","serialize(root","serialize(treenod","solut","std::string","std::stringstream","std::to_string(root","stream(data);","stream)","string","system,","token,","token;","tree","tree/descript","treenod","treenode(int","treenode(stoi(token));","treenode*","treenode:","val)","val;","write","yourself,","{","}","};"],"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":["!=","&inorder)","&preorder,","(in_bgn","(left","(mid","(num_pr","(right","*","*/","*@param","*@return","*left,","*right;","+","/","/**","//","0","0,","1","1);","1,","2","2,","3","3,","4","4,","5","5,","6","6,","7","73.",":",";","=","==",">",">left",">right",">val","\\","auto&","binari","branch)","buildtree(","buildtree(preorder,","buildtree(vector","class","code","const","construct","definit","here","https://www.lintcode.com/problem/construct","in_bgn","in_bgn,","in_end)","in_end);","inord","inorder,","inorder.size();","int","integ","l","left","left_range,","lintcod","list","mid","mid;","new","null;","nullptr;","num_in","num_in)","num_pr","pre_bgn","pre_bgn,","pre_end,","preorder","preorder,","preorder.size();","preorder:","preorder[pre_bgn];","private:","problem","public:","r","return","root","root;","root_val","solut","t","travers","traversal/descript","tree","treenod","treenode(inorder[in_bgn]);","treenode(int","treenode*","treenode:","val)","val;","vector","write","{","||","}","};"],"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":["!=","&inorder,","&postorder)","(in_end","(left","(num_in","(right","*","*/","*left,","*right;","+","/","/**","//","0","0,","1","1);","1,","2","2,","3","3,","4","4,","5","5,","6","6,","7","7,","72.",":","=","==",">left",">right",">val","@param","@return:","\\","auto&","binari","branch)","buildtree(","buildtree(inorder,","buildtree(vector","class","code","const","construct","definit","here","https://www.lintcode.com/problem/construct","in_bgn,","in_end,","inord","inorder,","inorder.size();","inorder:","int","integ","l","left","left_rang","left_range,","lintcod","list","mid","null;","nullptr;","num_in","num_post","num_post)","post_bgn","post_bgn,","post_end","post_end)","postord","postorder,","postorder.size();","postorder:","private:","problem","public:","r","return","root","root;","solut","t","travers","traversal/descript","tree","treenod","treenode(int","treenode*","treenode:","val)","val;","vector","write","{","||","}","};"],"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":["!=","(left","(mid","(num_pr","(pre_bgn","(right","*","*/","*left;","*right;","+","/","/**","0","0,","1","1);","1,","1];","2","2,","3","3,","4","4,","5","5,","6","6,","7","7,","889.",":",";","=","==",">",">right","\\","auto&","binari","branch)","buildtree(","buildtree(pre,","class","const","construct","constructfromprepost(vector&","definit","https://leetcode.com/problems/construct","int","l","leetcod","left","left(null),","left_range,","mid","mid,","mid;","new","node.","nullptr;","num_post","num_post)","num_pr","p","pivot","post)","post,","post.size();","post_bgn","post_bgn,","post_end","post_end)","postord","postorder:","pre,","pre.size();","pre[pre_bgn","pre[pre_bgn];","pre_bgn","pre_bgn,","pre_end)","pre_end,","preorder","private:","problem","public:","r","return","right(null)","root","root;","root_val","solut","struct","t","travers","traversal/","tree","treenod","treenode(int","treenode(pre[pre_bgn]);","treenode*","val(x),","val;","vector&","x)","{","{}","||","}","};"],"Binary Tree/Maximum Subtree.html":["(!root)","(sum","*","*/","+","/**","//","628.",":","=",">",">left,",">right,",">val","@param","@return:","auto","binari","class","code","findsubtree(treenod","here","https://www.lintcode.com/problem/maximum","int","l","l.sum","lintcod","maximum","nullptr);","opt(int_min,","opt)","opt);","opt.root","opt.root;","opt.sum","opt.sum)","private:","problem","public:","r","r.sum;","result","result&","result()","result();","result(int","result(sum,","return","root","root(nullptr)","root(root)","root)","root);","root,","root:","root;","runpostorder(root","runpostorder(root,","runpostorder(treenode*","solut","struct","subtre","subtree/descript","sum","sum(0),","sum(sum),","sum,","sum;","tree","treenod","treenode*","write","{","}","};"],"Binary Tree/Symmetric Tree.html":["!=","!right)","!root","&&","(!left","(left","*","*/","*left,","*right;","/**","//","1360.","=","==",">left",">left);",">left,",">right",">right)",">right,",">val",">val)","@param","@return:","bool","class","code","definit","false;","given","here","https://www.lintcode.com/problem/symmetr","int","issymmetric(treenod","issymmetrichelper(left","issymmetrichelper(root,","issymmetrichelper(treenode*","itself","left","left,","lintcod","mirror","null;","private:","problem","public:","return","right","right)","right;","root","root)","root);","root:","solut","symmetr","tree","tree/descript","treenod","treenode(int","treenode*","treenode:","val)","val;","whether","write","{","||","}","};"],"Binary Tree/Subtree with Maximum Average.html":["(!root)","(test","*","*/","*left,","*right;","+","/","/**","//","1,","1;","597.",":","=",">",">left",">left,",">right",">right,",">val",">val;","@param","@return:","auto","averag","average/descript","binari","class","code","count","count(0),","count(count),","count,","count;","definit","doubl","findsubtree2(treenod","here","https://www.lintcode.com/problem/subtre","int","l","l.count","l.sum","lintcod","maximum","null;","nullptr);","opt(int_min,","opt)","opt);","opt.count","opt.count;","opt.root","opt.root;","opt.sum","private:","problem","public:","r","r.count","r.sum","record","record&","record()","record();","record(int","record(sum,","ref","ref)","return","root","root(nullptr)","root(root)","root)","root);","root,","root:","root;","runpostorder(root","runpostorder(root,","runpostorder(treenode*","solut","static_cast(opt.sum)","static_cast(sum)","struct","subtre","sum","sum(0),","sum(sum),","sum,","sum;","test","tree","treenod","treenode(int","treenode*","treenode:","val)","val;","write","{","}","};"],"Binary Tree/Closest Binary Search Tree Value.html":["(!lower)","(!root)","(!upper)","((target","(lower)","(root","(target","(upper","(upper)","*","*/","*left,","*right;","/**","//","900.","=",">",">left",">left,",">right",">right,",">val",">val)",">val))",">val;","@param","@return:","auto","binari","bst","class","closest","closestvalue(treenod","code","definit","doubl","equal","findlowerbound(root","findlowerbound(root,","findlowerbound(treenode*","findupperbound(root","findupperbound(root,","findupperbound(treenode*","given","greater","here","https://www.lintcode.com/problem/closest","int","less","lintcod","lower","lower;","lower_bound:","max","min","null;","nullptr;","private:","problem","public:","return","right,","root","root,","root:","root;","search","solut","static_cast(low","target","target)","target))","target);","target.","target:","tree","treenod","treenode(int","treenode*","treenode:","upper","upper;","upper_bound:","val","val)","val;","valu","value/descript","write","{","}","};"],"Binary Tree/Closest Binary Search Tree Value II.html":["(curr","(curr)","(int","(std::abs(p","(succ.empty())","(target","*","*/","/","/**","//","0","10","12","15","15,","17","17,","18","19.","20","3","30","35","5","901.",";","=",">",">=",">left)",">left;",">right)",">right;",">val",">val)",">val);","@param","@return:","\\","ans.push_back(","ans.push_back(p","ans.push_back(pred.top()","ans;","auto","binari","bst","class","closest","closestkvalues(treenod","code","continue;","curr","doubl","getpredecessors(pred);","getpredecessors(std::stack&","getsuccessors(std::stack&","getsuccessors(succ);","given","here","https://www.lintcode.com/problem/closest","ii","ii/descript","int","k","k)","k:","p","pred)","pred.pop();","pred.push(curr);","pred.top();","pred:","pred;","private:","problem","public:","return","root,","root:","root;","s","search","solut","std::stack","std::vector","succ)","succ.pop();","succ.push(curr);","succ.top();","succ:","succ;","target","target)","target))","target,","target:","tree","val","val);","valu","vector","void","write","{","}","};"],"Binary Tree/Insert Node in Binary Search Tree.html":["(!root)","(curr","(curr)","(node","*","*/","*left,","*right;","/*","/**","//","85.","=",">",">left",">left;",">right",">right;",">val",">val)","@param","@return:","auto","binari","class","code","curr","curr;","definit","here","https://www.lintcode.com/problem/insert","insert","insertnode(treenod","int","lintcod","new","node","node)","node:","node;","null;","pred","problem","public:","return","root","root,","root:","root;","search","solut","tree","tree.","tree/descript","treenod","treenode(int","treenode:","val)","val;","write","{","}","};"],"Binary Tree/Remove Node in Binary Search Tree.html":["!=","!curr","&&","(!curr","(!curr)","(curr","(curr)","(succ","*","*/","*left,","*right;","/*","/**","//","1","2","87.",":","=","==",">",">left",">left)",">left;",">right",">right)",">right;",">val",">val)",">val;","?","@param","@return:","auto","binari","break;","child","child.","child;","children.","class","code","curr","curr);","curr;","definit","delet","dst","dst)","dst;","find","findsuccessor(auto","findsuccessor(root,","given","here","https://www.lintcode.com/problem/remov","int","lintcod","node","node.","null;","nullptr;","pred","pred;","private:","problem","public:","re","remov","removal.","removenode(treenod","res.first;","res.second","res.second;","return","root","root)","root,","root:","root;","search","solut","std::make_pair(pred,","std::pair","succ","succ);","succ;","target","tree","tree.","tree/descript","treenod","treenode(int","treenode*","treenode:","val)","val;","value)","value.","value:","want","write","{","}","};"],"Binary Tree/All Nodes Distance K in Binary Tree.html":["!=","&&","(!root)","(curr","(k","(root","*","*/","*left,","*parent,","*right;","/**","//","0)","1,","1506.",":","=","==",">left",">left,",">parent",">parent,",">right",">right,",">val",">val);","@param","@return:","ans)","ans);","ans.push_back(curr","ans;","auto","auto&","binari","class","code","curr","curr,","curr;","definit","distanc","distancek(treenod","given","here","https://www.lintcode.com/problem/al","int","k","k)","k,","k:","left(nullptr),","lintcod","mytreenod","mytreenode(int","mytreenode(root","mytreenode*","mytreenode*&","new","new_root","new_target","new_target)","new_target);","new_target;","node","null;","nullptr,","nullptr;","parent(nullptr),","parent,","parent;","pred)","pred,","private:","problem","public:","return","return;","right(nullptr),","root","root,","root:","rundfs(curr","rundfs(mytreenode*","rundfs(new_target,","runpreorder(","runpreorder(root","runpreorder(root,","solut","struct","target","target)","target,","target:","tree","tree/descript","treenod","treenode(int","treenode*","treenode:","val(val)","val)","val;","vector","void","write","{","}","};"],"Binary Search/First Bad Version.html":["(l","*","*/","+","/**","//","1","1,","74.","=","@param","@return:","bad","bool","class","code","findfirstbadversion(int","first","here","https://www.lintcode.com/problem/first","int","integ","isbadversion(int","judg","k);","kth","l","lintcod","n)","n:","n;","not.","problem","public:","r","solut","static","svnrepo","svnrepo::isbadversion(k)","us","version","version.","version/descript","whether","write","{","}"],"Binary Search/Search a 2D Matrix.html":["&matrix,","(l","(num_c","(num_r","(target","*","*/","+","/**","//","0)","0,","1","1;","28.","2d",":","=","==",">=","?","@param","@return:","auto&","bool","boolean,","class","code","contain","determinerow(const","determinerow(matrix,","false;","here","https://www.lintcode.com/problem/search","indic","int","integ","l","l;","lintcod","list","m;","matrix","matrix,","matrix.size();","matrix/descript","matrix:","matrix[0].size();","matrix[m][0])","matrix[r][0])","num_c","num_c,","num_r","num_r,","private:","problem","public:","r","return","row,","row[l]","row[m])","row[r])","search","searchmatrix(vector>","searchrow(const","searchrow(matrix[r],","solut","target","target)","target);","target:","true","whether","write","{","||","}","};"],"Binary Search/Search a 2D Matrix II.html":["&matrix,","(matrix[x][y]","(num_c","(num_r","(target","(x","*","*/","++count;","/**","//","0)","0,","0;","1;","2d","38.","=","==","@param","@return:","class","code","count","given","here","https://www.lintcode.com/problem/search","ii","ii/descript","indic","int","integ","lintcod","list","matrix","matrix.size();","matrix:","matrix[0].size();","num_c","num_r","occurr","problem","public:","return","search","searchmatrix(vector>","solut","target","target)","target:","total","want","write","x","y","{","}"],"Binary Search/Search for a Range.html":["&a,","(a[r]","(l","(n","*","*/","+","/**","//","0)","0,","1","1,","1;","1};","2,","61.",":","=","==","?","@param","@return:","[index1,","a.size();","a:","a[m])","array","class","code","end","end};","find","here","https://www.lintcode.com/problem/search","index2]","insert","int","integ","l","l;","length","lintcod","list","m;","n","position.","problem","public:","r","rang","range/descript","return","search","searchrange(vector","solut","sort","start","target)","target:","vector","write","{","{bgn,","}","};"],"Binary Search/Pow x n.html":["(d","(n","(n^2","(x,n)","*","*/","/","/**","//","0)","1","1)","1;","2147483648","428.",":","=","==",">",">>","?","@param","@return:","base","case:","class","code","corner","d","d);","doubl","exponential.","genpow(doubl","genpow(x,","half","half;","here","https://www.lintcode.com/problem/powx","int","lintcod","long","mayb","mypow(doubl","n","n)","n/descript","n:","n;","n^2)","n^4","n^8","n^9","nn","nn)","nn);","number","pow","pow(x,","power","private:","problem","public:","re","result","return","solut","store","that'","type","us","way","write","x","x,","x:","x;","{","}"],"Binary Search/Find K Closest Elements.html":["&&","&a,","(int","(l","(n","*","*/","+","/**","//","0","0)","0,","1","1;","460.",";","=","==","@param","@return:","]);","a.size();","a:","ans.push_back(a[l","ans.push_back(closest);","ans;","array","class","closest","code","element","elements/descript","find","here","https://www.lintcode.com/problem/find","int","integ","k","k)","k:","kclosestnumbers(vector","l","lintcod","n","n)","pivot","problem","public:","r","return","solut","target,","target:","vector","write","{","{};","||","}","};"],"Binary Search/Find Minimum in Rotated Sorted Array.html":["&nums)","(l","*","*/","+","/**","//","0,","1","159.","1;","=","@param","@return:","array","array/descript","class","code","find","findmin(vector","here","https://www.lintcode.com/problem/find","int","l","lintcod","minimum","n","number","nums.size();","nums:","problem","public:","r","rotat","solut","sort","write","{"],"Binary Search/Maximum Number in Mountain Sequence.html":["&nums)","(l","*","*/","+","/**","//","0,","1","1;","585.","=","@param","@return:","class","code","decreas","firstli","here","https://www.lintcode.com/problem/maximum","increas","int","l","lintcod","maximum","mountain","mountainsequence(vector","n","number","nums.size();","nums:","problem","public:","r","sequenc","sequence/descript","solut","top","write","{"],"Binary Search/Search in Rotated Sorted Array.html":["&a,","(l","(n","*","*/","+","/**","//","0)","0,","1","1;","62.","=","==","@param","@return:","a.size();","a:","array","array/descript","class","code","here","https://www.lintcode.com/problem/search","int","integ","l","lintcod","n","problem","public:","r","return","rotat","search","search(vector","solut","sort","target)","target:","write","{","}"],"Binary Search/Search in Rotated Sorted Array II.html":["&a,","(a[l]","(l","(n","*","*/","+","/**","//","0)","0,","1","1;","63.","=","==","@param","@return:","a.size();","a:","a[r])","allow","array","bool","boolean","class","code","duplic","false;","here","https://www.lintcode.com/problem/search","ii","ii/descript","int","integ","l","lintcod","n","problem","public:","r","ratat","return","rotat","search","search(vector","solut","sort","target)","target:","write","{","}"],"Binary Search/Divide Two Integers.html":["(divd","(divisor","(quot","(temp","*","*/","/**","//","0)","1;","414.",":","=",">",">=","?","@param","@return:","^","class","code","count","divd","divid","divide(int","dividend","dividend,","dividend:","divisor","divisor)","divisor:","divr","divr)","divr;","here","https://www.lintcode.com/problem/divid","int","int_max","int_max)","integ","integers/descript","lintcod","long","problem","public:","quot","quot;","result","return","solut","static_cast(dividend);","static_cast(divisor);","temp","two","write","{","}","};"],"Binary Approximation/Sqrt.html":["(l","(r","*","*/","+","/**","//","1","1,","141.",":","=",">","?","@param","@return:","class","code","here","https://www.lintcode.com/problem/sqrtx/descript","int","integ","l","lintcod","m)","m;","problem","public:","r","r;","return","solut","sqrt","sqrt(int","sqrt(x)","write","x","x)","x:","x;","{","}","};"],"Binary Approximation/Sqrt II.html":["(l","(x","*","*/","+","/","/**","//","0)","0;","1","1)","10","1;","1e","586.",":","=","==",">",">=","?","@param","@return:","class","code","doubl","here","https://www.lintcode.com/problem/sqrtx","ii","ii/descript","l","l;","lintcod","m)","m;","problem","public:","r","r)","return","root","solut","sqrt(doubl","sqrt(x)","squar","write","x","x)","x:","{","}","};"],"Binary Approximation/Wood Cut.html":["&","&l,","(countsmallpieces(l,","(int","(l","(l.empty()","(len","*","*/","+","+=","...","/","/**","//","0)","0;","1","1,","183.","1;","2",":","=","==",">","?","@param","@return:","abov","approach","approxim","besides,","binari","class","code","count","count;","cut","cut/descript","equal","find","fuction","given","gradual","here","https://www.lintcode.com/problem/wood","ideal","int","integ","k","k)","k.","k:","l","l)","l,","l1/","l2/","l:","l[i]","len","len;","length","lintcod","lmax","ln/","m;","maximal.","maximum","n","need","o(nlogl)","piec","problem","public:","r","r)","return","s","s)","s:","s;","small","solut","this,","us","wood","woodcut(vector","write","{","||","}","};"],"Binary Approximation/Copy Books.html":["&","&books,","(book","(books.empty()","(int","(l","(left","*","*/","+","+=","/**","//","0)","0;","1","1,","1;","437.",":","=","==",">","@param","@return:","acquir","algorithm.","approximation,","array","binari","book","book;","books)","books,","books/descript","boost","candid","check","class","code","copi","copier","copiers,","copybooks(vector","estim","false;","find","finish","given","gradual","hence,","here","however,","https://www.lintcode.com/problem/copi","ideal","increas","int","integ","k","k)","k:","l","left","lintcod","n","need","number","o(nlogs)","o(ns)","page","pages:","perform","period","period)","period,","period.","period;","problem","public:","r","return","s","s.","shortest","slowest","solut","solution.","still","sum","t","t,","thu","time","total","whether","work","work.","write","{","||","}"],"Binary Approximation/Copy Books II.html":["&times)","(int","(l","(times.empty()","*","*/","*=","+","/**","//","0)","0;","1","1;","438.",":times)","=","==","@param","@return:","acquir","algorithm.","approximation,","array","binari","book","books,","boost","candid","check","class","code","copi","copier","copiers,","copybooksii(int","estim","find","finish","given","gradual","hence,","here","however,","https://www.lintcode.com/problem/copi","ideal","ii","ii/descript","increas","int","integ","job.","k","l","lintcod","n","n,","n:","n;","need","number","o(nlogs)","o(ns)","page","perform","period","period.","problem","public:","r","return","s","s.","shortest","solut","solution.","std::max(r,","still","t","t,","task","thu","time","time);","times:","total","vector","whether","write","{","||","}","};"],"Binary Approximation/Find the Duplicate Number.html":["&nums)","(countnumber(nums,","(n","(p","(x","*","*/","+","...,","/**","//","1","1)","1),","1,","183.","2,","3","=",">=","@param","@return:","amount","array","base","between","bound","class","code","contain","cut","cut/descript","decras","divid","duplic","duplicate.","find","findduplicate(vector","here","hole","https://www.lintcode.com/problem/wood","int","integ","know","l","l)","lintcod","m","m;","n","number","numbers,","nums:","on","otherwise,","p","p,","p:","pigeon","portions.","problem","public:","r","return","solut","suppos","target.","theory,","upper","wood","write","{","|","}"],"Binary Approximation/Maximum Average Subarray II.html":["&nums,","(a[i]","(a[j]","(int","(j","(l","(n","(nums[i])","(nums[i]));","*","*/","+","+=",",","...","/","/**","//","0","0)","0;","1","1)","1e","5","617.",";","=","==","=>",">=","@param","@return:","a[i]","a[j]","approximation,","array","averag","b[i]","b[j]","binari","check","class","code","doubl","equal","find","here","https://www.lintcode.com/problem/maximum","ii","ii/descript","int","integ","j","k","k)","k:","k])","l","l_sum","l_sum);","less","lintcod","max","maxaverage(vector","maximum","min","min_l_sum","min_l_sum)","min_l_sum;","n","neg","number","nums.size();","nums:","nums[0],","nums[0];","posit","possibl","problem","public:","r","r_sum","return","solut","static_cast(nums[i","static_cast(nums[i])","static_cast(nums[i]));","std::max(r,","std::min(min_l_sum,","subarray","sum","t","t)","t.","transform","true;","us","whose","write","x;","{","|","||","}","};"],"Expression Parsing/Convert Infix Expression to Postfix Expression.html":["!=","\"(\")","\")\")","\",","&exp)","(","('0'","(const","(d","(stack.top()","(token",")","*","*,","*/","+","+*","+*(","+*(+","+,","+/","/","/**","//","/:","0","0}})","1,","1},","2,","2},","370.",":","==","@param","@return:","ab","abc","abc/","abc/d","abc/de+","abc/de+*+","abc/de+*+f","array","auto&","b","c","class","code","convert","converttorpn(vector","d","e","e)","exp)","express","expression:","f","here","https://www.lintcode.com/problem/convert","infix","lintcod","map({{\"*\",","map;","notat","notation/descript","polish","postfix","problem","public:","revers","rpn.push_back(stack.top());","rpn;","solut","solution()","stack","stack.pop();","stack.push(token);","stack;","std::stack","std::vector","string","symbol","token","vector","write","{","{\"","{\"(\",","{\"+\",","{\"/\",","}","};"],"Expression Parsing/Convert Infix Expression to Prefix Expression.html":["!=","\"(\")","\")\")","\",","&exp)","('0'","(int","(stack.top()","(token","*","*/","/**","//","0","0}})","1","1},","2},","369.",":",";","=","==",">=","@param","@return:","array","auto&","class","code","const","convert","converttopn(vector","exp.size();","exp[i];","express","expression:","here","https://www.lintcode.com/problem/convert","i)","infix","int","lintcod","map({{\"*\",","map;","n","notat","notation/descript","pn.push_back(stack.top());","pn;","polish","prefix","problem","public:","solut","solution()","stack.pop();","stack.push(token);","stack;","std::stack","std::vector","string","token","vector","write","{","{\"","{\"(\",","{\"+\",","{\"/\",","}","};"],"Expression Parsing/Evaluate Postfix Expression.html":["\"","\")","\"*\")","\"+\")","\"/\")","&tokens)","'","');","'*');","'*':","'+');","'+':","'/');","'/':","':","(const","(token","*","*/","+","/","/**","//","424.",":","=","==","@param","@return:","auto&","break;","case","char","class","code","evalrpn(vector","evalu","evaluate(stack,","evaluate(std::stack&","express","here","https://www.lintcode.com/problem/evalu","int","lintcod","notat","notation/descript","op)","op1","op2","op2;","polish","postfix","private:","problem","public:","result","result;","return","revers","solut","stack,","stack.pop();","stack.push(result);","stack.push(std::stoi(token));","stack.top();","stack;","std::stack","switch(op)","token","tokens)","tokens:","valu","void","write","{","}","};"],"Expression Parsing/Evaluate Infix Expression.html":["\",","&expression)","(","(!stk.empty())","('0'","(const","*","*,","*/","+,","/**","//","/:","0","0}})","1","1},","2","2},","368.",":","=","@param","@return:","auto","auto&","class","code","converttorpn(const","converttorpn(expression);","evalu","evaluateexpression(vector","evaluaterpn(const","evaluaterpn(rpn);","evaluation/descript","exp)","express","expression:","here","https://www.lintcode.com/problem/express","infix","int","integ","lintcod","list","map({{\"*\",","map;","precedence)","private:","problem","public:","return","rpn","rpn)","rpn.push_back(stk.top());","rpn;","solut","solution()","std::stack","std::vector","std::vector&","stk.pop();","stk.push(token);","stk;","string","token","write","{","{\"","{\"(\",","{\"+\",","{\"/\",","}","};"],"Expression Parsing/Expression Tree Construction.html":["!stk.empty()","\",","&expression)","(","(!stk.empty())","('0'","(const","*","*,","*/","*left,","*right;","+,","/*","/**","//","/:","0","0}})","1","1},","2","2},","367.",":","=",">left",">right",">symbol","?","@param","@return:","array","auto","auto&","build","build(vector","build/descript","buildtree(const","buildtree(rpn);","class","code","construct","converttorpn(const","converttorpn(expression);","definit","exp)","express","expression:","expressiontreenod","expressiontreenode(str","expressiontreenode*","expressiontreenode:","here","https://www.lintcode.com/problem/express","left","left;","lintcod","map({{\"*\",","map;","null;","nullptr;","precedence)","private:","problem","public:","return","right;","root","rpn","rpn)","rpn.push_back(stk.top());","rpn;","solut","solution()","std::stack","std::unordered_map","std::vector","std::vector&","stk.pop();","stk.push(root);","stk.push(token);","stk.top()","stk;","string","symbol)","symbol;","token","tree","write","{","{\"","{\"(\",","{\"+\",","{\"/\",","}","};"],"Number Parsing/Valid Number.html":["'","')","');","'+'","'e')","('0'","(('0'","():","(i","(integer)]","(real","(str[i]","*","*********","*/","++i;","+/","/**","//","0;","1)","123e","123e+","417.","=","==","[+/","[]:","[expon","]","abcd","abcd.ef","abce.","alreadi","auto","back","becom","bool","check","class","count_dot","count_num","decompos","dummi","encount","expon","exponent.","false;","final","format:","https://www.lintcode.com/problem/valid","includ","int","integ","integer.","isnumber(str","len","len)","lintcod","necessari","necessary.","now","now.","number","number)","number.","number/descript","number:","onc","option","part.","patch","problem","public:","real","remain","return","s)","signs.","solut","space","step","str","str.length();","str.push_back('","str[i]","string.","symbol,","trim(s);","valid","visit","white","{","||","}"],"Number Parsing/String to Integer.html":["&str)","(!positive)","(atoi)","(i","(sum","*","*/","++i;","/**","//","0;","54.","=","==",">","@param","@return:","atoi(str","atoi/descript","befor","break;","character.","class","code","first","here","https://www.lintcode.com/problem/str","ignor","int","int_max)","int_max;","integ","len","len)","lintcod","non","problem","public:","return","solut","str.length();","str:","string","sum","sum;","whitespac","write","{","}"],"Number Parsing/Binary Representation.html":["\".\"","\"error\")","\"error\";","&n)","(binary)","(demical)","(fac_part_bin","(fac_part_bin.empty())","(n","(po","(res.empty())","(temp.rem","*","*/","*=","+","/**","//","0","0)","0.0","0.001","0.125","0.25","0.5","0;","1","1.0","180.","2);","2;","32;","=","==",">","@param","@return:","auto","binari","binaryrepresentation(str","class","code","convertfractionalpart(const","convertfractionalpart(fac_part_dec);","convertintegralpart(const","convertintegralpart(int_part_dec);","convertintegralpart(n);","decim","div_t","doubl","e.g:","end","fac_part_bin","fac_part_bin;","fac_part_dec","fraction","given","handl","here","https://www.lintcode.com/problem/binari","int","int_part_bin","int_part_bin;","int_part_dec","len","lintcod","max_len","max_len)","n","n.find('.');","n.length()","n.substr(0,","n.substr(pos,","n:","number","part.","pass","po","pos);","private:","problem","public:","represent","representation/descript","res.end());","res.push_back('0');","res.push_back('1');","res;","return","solut","std::div(n,","std::reverse(res.begin(),","std::stod(str);","std::stoi(str);","std::string","std::string&","std::string::npos)","str)","strategi","string","temp","temp.quot;","write","{","}","};"],"Number Parsing/Palindrome Number.html":["%","(copi","*","*/","*=","+=","/**","//","/=","0)","0;","10;","491.","=","==",">","@param","@return:","bool","class","code","copi","fals","here","https://www.lintcode.com/problem/palindrom","ispalindrome(int","it'","lintcod","long","mirror","num)","num:","num;","number","number/descript","palindrom","posit","problem","public:","return","solut","true","write","{","}","};"],"Number Parsing/Add Digits.html":["%","(n","(num","*","*/","+=","/**","//","/=","0)","0;","10)","10;","569.","=",">",">=","@param","@return:","add","adddigits(int","class","code","decompose(int","decompose(num);","digit","digits/descript","here","https://www.lintcode.com/problem/add","int","integ","lintcod","n","n)","neg","non","num","num)","num:","num;","on","private:","problem","public:","re","res;","return","solut","write","{","}","};"],"Number Parsing/Happy Number.html":["!=","%","(n","(set.count(n)","*","*/","+=","/**","//","/=","0)","0;","1)","10;","488.","=","==",">","@param","@return:","bool","class","code","decompose(int","decompose(n);","digit","digit;","fals","false;","happi","here","https://www.lintcode.com/problem/happi","int","integ","ishappy(int","lintcod","n","n)","n:","number","number/descript","private:","problem","public:","re","res;","return","set.insert(n);","set;","solut","std::unordered_set","true","true;","write","{","}","};"],"Number Parsing/Validate IP Address.html":["!=","\"\";","\"ipv4\"","\"ipv6\"","\"neither\";","&&","'0')","(!('0'","(!(('0'","(!(valu","(bgn","(char","(po","(str.length()","0","0,","1","1222.","16);","3)","4)","8)",":","=","==",">",">=","?","address","address/descript","auto","auto&","base","bgn,","bgn;","break;","ch","char","class","delm)","end)","end,","false;","gettoken(const","https://www.lintcode.com/problem/valid","int","int&","ip","ip)","ip.find('.');","ip.find(':');","isv4(ip)","isv6(ip)","lintcod","po","private:","problem","public:","return","solut","std::stoi(token);","std::stoi(token,","std::string","std::string::npos)","str)","str,","str[0]","string","valid","validipaddress(str","valu","{","}"],"Word Puzzle/Word Break.html":["&&","&dict)","&s,","(int","(n","(s.substr(j","*","*/","+","/*","/**","//","0","0)","1","1,","107.",";","=","==","@param","@return:","bool","boolean","break","break/descript","class","code","compos","continue;","dict","dict)","dict:","dictionari","dp(n","dp[0]","dp[i]","dp[i]:","dp[j]","dp[j])","dp[n];","end","false);","here","https://www.lintcode.com/problem/word","i)","i.","int","ith","len);","lintcod","n","posit","prefix","problem","public:","return","s.length();","s.substr(i,","s:","solut","std::vector","string","true;","unordered_set","whether","word","wordbreak(str","words.","write","{","||","}","};"],"Word Puzzle/Word Break II.html":["!=","\"","&s,","&worddict)","(!piece.empty())","(const","(l","(memo.count(str)","(prefix","(s.empty())","(str.empty())","*","*/","+","...","/*","/**","//","0)","1)","582.",":","=","==","=>",">","@param","@return:","ans.push_back(prefix","ans.push_back(prefix);","ans;","auto","auto&","b","bc","bcd","break","c","class","co","cod","code","const","continue;","d","de","dict)","dict,","e","here","https://www.lintcode.com/problem/word","ii","ii/descript","int","intcod","l","l);","li","lin","lint","lintcod","memo)","memo);","memo;","memo[str]","memo[str];","n","nt","ntcode","od","piec","piece);","piece:","possibl","prefix","prefix:","private:","problem","public:","re","res)","return","runbacktracking(","runbacktracking(s,","runbacktracking(suffix,","s:","sentences.","set","solut","std::move(ans);","std::string&","std::unordered_map>","std::unordered_map>&","std::unordered_set&","std::vector","str,","str.length();","str.substr(0,","str.substr(l,","string","suffix","t","tcode","unordered_set","vector","word","word)","word.length();","wordbreak(str","worddict,","worddict:","words.","write","{","{\"\"};","{};","||","}","};"],"Word Puzzle/Word Break III.html":["(const","(int","(s.substr(j","(word","*","*/","+","+=","/*","/**","//","0","0);","1,","1;","683.",":",";","=","==","@param","@return:","[](char","auto&","break","ch)","class","code","continue;","decompos","dict)","dict.emplace(std::move(norm));","dict;","dp(n","dp[0]","dp[i","dp[i]","dp[i]:","dp[i];","dp[j],","dp[n];","end","here","https://www.lintcode.com/problem/word","iii","iii/descript","int","ith","j)","l))","l]","lintcod","n)","norm(word);","norm.begin(),","norm.end(),","number","offset.","possibl","prefix","problem","public:","return","s,","s.substr(i,","sentences.","set","solut","std::string","std::tolower(ch);","std::transform(norm.begin(),","std::vector","string","sum","unordered_set&","way","word","wordbreak3(string&","words)","write","{","}","});","};"],"Word Puzzle/Word Ladder.html":["&dict)","&end,","&start,","(!queue.empty())","(int","*","*/","/","/*","/**","//","0","1));","120.",":",";","=","@param","@return:","\\","auto&","class","code","cog","dict.insert(end);","dict:","dog","dot","end:","here","hit","hot","https://www.lintcode.com/problem/word","int","integ","ladder","ladder/descript","ladderlength(str","level(level)","level)","level;","lintcod","log","lot","n","problem","public:","queue.push(record(start,","queue.size();","queue;","record","record(const","set","solut","start:","std::queue","std::string","string","struct","unordered_set","word","word(word),","word,","word;","write","{","}","};"],"Word Puzzle/Word Ladder II.html":["!=","&dict)","&end,","&start,","(!queue.empty())","(bgn","(const","(discover[nbr]","(int","*","*/","+","/","/*","/**","//","0","1)","1));","1,","121.","1;",":",";","=","==",">&","@param","@return:","\\","ans,","ans.push_back(collect);","ans;","auto&","bgn,","buildgraph(","buildgraph(start,","class","code","cog(5)","collect)","collect);","collect.pop_back();","collect.push_back(bgn);","collect;","const","continue;","depth","dict,","dict.insert(end);","dict:","discover)","discover);","discover,","discover;","discover[bgn]","dog(4)","dot(3)","end)","end,","end:","findladders(str","graph,","graph;","graph[bgn])","here","hit(1)","hot(2)","https://www.lintcode.com/problem/word","ii","ii/descript","int","ladder","level(level)","level)","level;","lintcod","list","listpaths(1,","listpaths(depth","log(4)","lot(3)","n","nbr","nbr,","private:","problem","public:","queue.push(record(bgn,","queue.size();","queue;","record","record(const","return","set","solut","start,","start:","std::queue","std::string","std::string&","std::unordered_map","std::unordered_map&","std::unordered_map>","std::unordered_map>&","std::unordered_set&","std::vector","std::vector&","std::vector>","std::vector>&","string","struct","unordered_set","vector>","void","word","word(word),","word,","word;","write","{","}","};"],"Word Puzzle/Word Search.html":["!=","&&","&board,","&word)","(!(nr","(board[r][c]","(const","(index","(int","(num_c","(num_r","*","*/","+","/**","//","0","0)","0;","0},","1)","1,","123.","1},","1}})",":",";","=","==",">",">&",">=","@param","@return:","auto&","board,","board.size();","board:","board[0].size();","board[r][c]","board[r][c];","bool","boolean","bound","bound)","c","c,","ch","char","charact","class","code","const","direct","direct[0];","direct[1];","directs({{1,","directs)","directs;","exist(vector>","false;","here","https://www.lintcode.com/problem/word","index,","int","len","lintcod","list","nc","nr","num_c","num_c,","num_r","num_r,","problem","public:","r","r,","re","return","search","search/descript","solut","solution()","std::string&","string","true;","word","word,","word.length();","word:","word[index])","write","{","{0,","}","};"],"Word Puzzle/Word Search II.html":["&&","&board,","&words)","(!(nr","(char","(const","(curr","(int","(num_c","(num_r","*","*/","+","/**","//","0","0)","0;","0},","1,","132.","1},","1}})",":",";","=","==",">",">=",">branch.count(ch)",">branch[ch]",">branch[ch];",">is_word",">is_word)","@param","@return:","ans.push_back(word);","ans;","auto","auto&","board,","board.size();","board:","board[0].size();","board[r][c]","board[r][c];","bool","branch;","c","c,","ch","char","charact","class","code","config,","config.push_back(ch);","config;","curr","curr,","direct","direct[0];","direct[1];","directs({{1,","directs)","directs;","here","https://www.lintcode.com/problem/word","ii","ii/descript","int","is_word(false)","is_word;","lintcod","list","maketrie(const","maketrie(words);","nc","nr","num_c","num_c,","num_r","num_r,","private:","problem","public:","r","r,","return","return;","root","root;","runbacktracking(","search","set)","set.insert(config);","set;","solut","solution()","std::make_shared();","std::shared_ptr","std::string","std::string&","std::unordered_map>","std::unordered_set","std::unordered_set&","std::vector&","std::vector>&","string","struct","trie","trienod","trienode()","true;","vector","void","word","word)","words)","words:","wordsearchii(vector>","write","{","{0,","{};","}","};"],"Word Puzzle/Word Pattern.html":["!=","\"\";","&pattern,","&teststr)","(bgn","(ch","(char","(curr","(iter_b","(iter_f","(token","(token.empty())","*","*/","/**","//","0,","828.",":","=","==",">second)","@param","@return:","auto","backward.end())","backward.find(token);","backward;","backward[token]","bgn","bgn,","bgn;","bool","boolean,","ch","ch;","class","code","curr","denot","end","end)","end);","false;","forward.end())","forward.find(ch);","forward;","forward[ch]","gettoken(const","gettoken(teststr,","here","https://www.lintcode.com/problem/word","int","int&","iter_b","iter_f","lintcod","match","pattern","pattern)","pattern/descript","pattern:","private:","problem","public:","return","solut","std::string","std::string&","std::unordered_map","str,","string","string,","teststr.length();","teststr:","token","token;","true;","whether","word","wordpattern(str","write","{","}"],"Word Puzzle/Word Pattern II.html":["!=","&&","&pattern,","&str)","(cand","(idx_p","(int","(len_t","(map.count(ch)","(ret)","*","*/","+","/**","//","0,","1)","1,","829.",";","=","==",">","@param","@return:","auto","auto&","bnd_","bnd_p","bnd_p,","bnd_s)","bnd_s,","bool","boolean","cand","ch","char","class","code","const","dedup)","dedup);","dedup;","denot","false;","here","https://www.lintcode.com/problem/word","idx_","idx_p","idx_p,","idx_s)","idx_s,","ii","ii/descript","int","len_t","len_t);","len_t,","lintcod","map,","map;","map[ch];","match","pat,","pat[idx_p];","pattern","pattern,","pattern.length(),","pattern:","private:","problem","public:","ret","return","runbacktracking(","solut","std::string&","std::unordered_map","std::unordered_map&","std::unordered_set","std::unordered_set&","str,","str.length(),","str.substr(idx_s,","str:","string","string,","string,denot","token","token)","token.length();","true;","word","wordpatternmatch(str","write","{","||","}"],"Word Puzzle/Word Squares.html":["\"a\".","\"la\".","\"le\"","&words)","(canuse(index","(const","(i","(index","(int","(words.empty())","*","*/","+","+=","/*","/**","//","1","1)","1,","1.","1st","2.","2nd","634.",":",";","=","==","=>","@param","@return:","adopt","ans)","ans);","ans.push_back(config);","ans;","auto&","b","bool","bound)","bound,","cand","candid","candidate,","canuse(","check","choos","class","code","collect","config)","config))","config,","config.pop_back();","config.push_back(cand);","config;","criterion.","duplic","e","far","far.","filter","find","first","form","futur","group","here","https://www.lintcode.com/problem/word","index","index,","int","ith","key","key;","l","legal","len","lintcod","n","n,","need","onc","predict","prefix","prefix.","private:","problem","proper","public:","r","recurs","return","return;","round.","runbacktracking(","runbacktracking(0,","runbacktracking(index","same","second","select","set","share","solut","squar","squares/descript","start","std::string","std::unordered_map>","std::unordered_map>&","std::vector&","std::vector>","std::vector>&","step,","suffix","trie,","trie;","trie[\"\"].insert(word);","trie[key])","vector>","void","without","word","word.length();","word[index];","words)","words:","words[0].size();","wordsquares(vector","write","{","{};","}"],"Word Puzzle/Valid Word Square.html":["&words)","(int","*","*/","/**","//","0","888.",";","=","@param","@return:","bool","boolean","class","code","here","https://www.lintcode.com/problem/valid","int","lintcod","list","num_r","problem","public:","solut","squar","square/descript","string","valid","validwordsquare(vector","word","words.size();","words:","write","{"],"Word Puzzle/Valid Anagram.html":["&digits)","'b',","'c'}},","'e',","'f'}},","'h',","'i'}},","'k',","'l'}},","'n',","'o'}},","'q',","'r',","'s'}},","'u',","'v'}},","'x',","'y',","'z'}},","(char","(digits.empty())","(index","*","*/","+","/**","//","1,","425.",":","=","==","@param","@return:","anagram","ans)","ans);","ans.push_back(config);","ans;","bound)","bound,","ch","char","class","code","combin","config,","config.pop_back();","config.push_back(ch);","config;","const","digit","digits,","digits.length(),","digits:","digits[index];","here","https://www.lintcode.com/problem/lett","index,","int","letter","lettercombinations(str","lintcod","map({","map;","map[digit])","number","number/descript","phone","posibl","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(0,","runbacktracking(index","solut","solution()","std::string","std::string&","std::unordered_map>","std::vector","std::vector&","string","valid","vector","void","write","{","{'2',","{'3',","{'4',","{'5',","{'6',","{'7',","{'8',","{'9',","{'a',","{'d',","{'g',","{'j',","{'m',","{'p',","{'t',","{'w',","}","})","};"],"Word Puzzle/Group Anagrams.html":["&strs)","(auto&","(const","*","*/","/**","//","772.",":","@param","@return:","anagram","anagrams/descript","ans.emplace_back(std::move(pair.second));","ans;","array","auto","auto&","class","code","divid","given","group","groupanagrams(vector","groups)","groups;","groups[key].push_back(word);","here","https://www.lintcode.com/problem/group","key(word);","key.end());","lintcod","pair","problem","public:","return","solut","std::sort(key.begin(),","std::unordered_map>","std::vector>","string","strs)","strs:","vector>","word","write","{","}","};"],"Word Puzzle/Find All Anagrams in a String.html":["&p)","&s,","(char","(int","*","*/","++freq_p[ch];","/**","//","0","0);","0;","647.",":",";","=","@param","@return:","anagram","ans;","appear","ch","charact","class","code","construct","count_","count_p","find","findanagrams(str","freq_p(256,","freq_s(256,","frequenc","gener","here","histogram","https://www.lintcode.com/problem/find","index","initi","int","len_","len_p","lintcod","list","p)","p.","p.length();","p:","problem","public:","s.length();","s:","set.insert(ch);","set.size();","set;","slide","solut","std::unordered_set","std::vector","string","string/descript","vector","window.","write","{","}"],"Word Puzzle/Valid Word Abbreviation.html":["&abbr)","&word,","(index_w","*","*/","/**","//","0,","0;","637.","=","@param","@return:","abbr","abbr.length();","abbr:","abbrevi","abbreviation/descript","bool","class","code","empti","fals","given","here","https://www.lintcode.com/problem/valid","index_a","index_w","int","len_a","len_w","lintcod","match","non","problem","public:","solut","string","true","valid","validwordabbreviation(str","word","word.length();","word:","write","{"],"Word Puzzle/Word Abbreviation.html":["&dict)","(int","(n","(no","*","*/","+","/**","//","0","0)","1","1)","1];","6","639.",";","=","==","=>",">","@param","@return:","abbrevi","abbreviation/descript","ans(n);","array","class","code","dict.size();","dict:","distinct","empti","f2e","face","god","here","https://www.lintcode.com/problem/word","i6l","i6t","i7n","in5l","in6n","int","int4l","int5n","inte3l","inte4n","intens","inter2l","intern","intern1l","internet","interv","interv1l","intr4n","intrus","l2e","lintcod","minim","n","need)","non","possibl","prefix_len","prefix_len)","prefix_lens(n);","problem","public:","return","solut","states;","std::to_string(len","std::unordered_map","std::vector","str.substr(0,","str;","str[len","string","vector","word","wordsabbreviation(vector","write","{","{};","}","};"],"Word Puzzle/Unique Word Abbreviation.html":["&&","&word)","(const","(len","(words.count(word)","*","*/","*/validwordabbr(vector","++abbrs[abbr];","++words[word];","/*","/**","//","0","0)","1","1.","2.","648.","=","==","@param","@return:","abbr","abbrevi","abbreviation/descript","abbrs.count(abbr)","abbrs;","abbrs[abbr])","appear","auto","auto&","bool","call","class","code","dictionary)","dictionary,","dictionary.","dictionary:","equal.","fals","false;","frequenc","genabbreviation(const","genabbreviation(word);","hand,","here","https://www.lintcode.com/problem/uniqu","instanti","int","intial","isunique(str","len","lintcod","list","moreover,","necessari","new","obj","obj.isunique(word);","object","param","present","private:","problem","public:","return","shown","solut","std::string","std::string&","std::unordered_map","store","str)","str.length();","string","such:","too.","true","true;","uniqu","validwordabbr","validwordabbr(dictionary);","word","word:","words;","words[word]","write","{","}","};"],"Linked List/Delete Node in a Linked List.html":["(!node)","(curr","*","*/","*next;","/*","/**","//","372.","=",">next",">next)",">next;",">val",">val;","@param","@return:","auto","class","code","curr","curr;","definit","delet","deletenode(listnod","here","https://www.lintcode.com/problem/delet","int","last","link","lintcod","list","list/descript","listnod","listnode(int","node","node)","node:","node;","noth","null;","nullptr;","pred","pred;","problem","public:","return;","solut","val)","val;","void","write","{","}","};"],"Linked List/Copy List with Random Pointer.html":["(!head)","(curr","(curr)","(succ)","*","*/","*copyrandomlist(randomlistnod","*head)","*next,","*random;","...","/**","//","1.","105.","2.","3.",":","=","=>",">",">label);",">next",">next;",">random",">random)","@param","@return:","^","a+","auto","b","b+","b,","behind","c","c+","class","code","copi","copy;","curr","deep","definit","each","finally,","follow","gener","head","head:","head;","here","https://www.lintcode.com/problem/copi","int","label(x),","label;","link","lintcod","list","list.","need","new","new_head","new_head;","next","next(null),","node","node,","node.","note","null.","nullptr;","on","origin","orign","point","pointer","pointer.","pointer/descript","problem","public:","put","rand","rand;","random","random(null)","randomlistnod","randomlistnode(curr","randomlistnode(int","replic","return","singli","solut","split","step","struct","succ","succ;","then,","to.","v","write","x)","{","{}","|","}","};"],"Linked List/Insert into a Cyclic Sorted List.html":["!=","&&","(!node)","(curr","(pred","(x","*","*/","*next;","/*","/**","//","599.","=",">",">next",">next;",">val","@param","@return:","ascend","auto","break;","class","code","curr","curr;","cyclic","definit","here","https://www.lintcode.com/problem/insert","insert","insert(listnod","int","integ","lintcod","list","list/descript","listnod","listnode(int","listnode(x);","listnode*","new","new_nod","new_node;","node","node);","node,","node:","node;","null;","nullptr;","peak.","pred","problem","public:","return","slope.","solut","sort","val)","val))","val;","write","x","x)","x:","{","||","}","};"],"Linked List/Reverse Linked List II.html":["(!head","(int","*","*/","*next;","/**","//","0","1","1);","2","3","36.","4","5",";","=","==",">",">next",">next;",">val","@param","@return:","auto","cb","ce","class","code","curr_bgn","curr_end","curr_end;","d","definit","delet","dummi","dummy;","head","head,","head:","head;","here","https://www.lintcode.com/problem/revers","ii","ii/descript","int","integ","link","lintcod","list","list:","listnod","listnode(","listnode(int","m","m,","m:","n)","n:","new","new_head","new_head;","next;","node","null;","pb","pe","pred_bgn","pred_end","pred_end;","problem","procedure.","public:","return","revers","reversebetween(listnod","simplifi","singli","solut","succ;","us","val)","val;","write","{","||","}","};"],"Linked List/Partition List.html":["&&","(1","(2","(3","(cl","(cr","(cr)","*","*/","*next;","/**","//","1","1);","2","2)","3","4","4)","5","5)","96.","=",">",">next",">next;",">val","@param","@return:","auto","changes:","cl","cl;","class","code","cr","cr;","d","definit","delet","dummi","dummy;","first","head,","head:","head;","here","https://www.lintcode.com/problem/partit","int","integ","link","lintcod","list","list/descript","list:","listnod","listnode(","listnode(int","new","new_head","new_head;","next;","node","null;","partit","partition(listnod","pr","problem","public:","return","singli","solut","succ;","v","val)","val;","write","x)","x:","{","|","}","};"],"Linked List/Sort List.html":["!=","&&","(!head)","(bgn","(curr","(left","(left)","(right)","*","*/","*next;","/**","//","1);","98.","=","==",">next",">next;",">val","@param","@return:","auto","bgn","bgn,","bgn;","class","code","complexity.","constant","curr","definit","delet","dummi","dummy;","end)","end);","find","head","head)","head:","head;","here","https://www.lintcode.com/problem/sort","int","left","left;","link","lintcod","list","list,","list.","list/leaderboard","list:","listnod","listnode(","listnode(int","listnode*","lists.","merg","mergesort(bgn,","mergesort(head,","mergesort(listnode*","mergesort(pred,","middl","new","node","null;","nullptr);","nullptr;","pred","pred);","private:","problem","public:","return","right","right)","right;","singli","solut","sort","sortlist(listnod","space","two","us","val)","val;","write","{","}","};"],"Linked List/Convert Binary Tree to Linked List by Depth.html":["(!queue.empty())","(!root)","(int","(node","*","*/","*left,","*next;","*right;","/**","//","0","1);","242.",":",";","=",">left",">left)",">left);",">next",">next);",">right",">right)",">right);",">val","@param","@return","ans.push_back(dummi","ans;","auto","binari","binarytreetolists(treenode*","class","code","convert","curr;","definit","delet","depth","depth/descript","dummi","dummy;","here","https://www.lintcode.com/problem/convert","int","link","lintcod","list","list.","listnod","listnode(","listnode(int","n","new","next(null)","null;","pred","problem","public:","queue.push(nod","queue.push(root);","queue.size();","queue;","return","root","root)","singli","solut","std::queue","std::vector","struct","tree","treenod","treenode(int","treenode:","val(x),","val)","val);","val;","vector","write","x)","{","{}","{};","}","};"],"General BFS/Clone Graph.html":["(!node)","(!queue.empty())","(auto","(map.count(neighbor)","*","*/","/*","/**","//","0)","137.",":","=","==",">label);",">neighbors)",">neighbors.push_back(map[neighbor]);","@param","@return:","auto","class","clone","clonegraph(undirectedgraphnode*","code","definit","graph","graph.","graph/descript","here","https://www.lintcode.com/problem/clon","int","label(x)","label;","lintcod","map;","map[neighbor]","map[node]","map[node];","map[origin];","neighbor","neighbors;","new","node","node)","node:","nullptr;","origin","problem","public:","queue.front();","queue.pop();","queue.push(neighbor);","queue.push(node);","queue;","return","solut","std::queue","std::unordered_map","struct","undirect","undirectedgraphnod","undirectedgraphnode(int","undirectedgraphnode(neighbor","undirectedgraphnode(nod","undirectedgraphnode*","vector","write","x)","{","{};","}","};"],"General BFS/The Maze.html":["&&","&destination)","&maze,","&start,","(!queue.empty())","((nx","(const","(num_c","(num_r","*","*/","+","/**","//","0","0)","0},","1,","1},","1}})","787.",":","=","==",">",">=","@param","@return:","auto","auto&","ball","bool","class","code","destin","destination:","direct","direct[0];","direct[1];","directs({{1,","directs)","directs;","false));","false;","haspath(vector>","here","https://www.lintcode.com/problem/th","int","lintcod","maze","maze.size();","maze/descript","maze:","maze[0].size();","num_c","num_r","nx","ny","problem","public:","queue.front();","queue.pop();","queue.push(record(start[0],","queue;","rec","rec.x;","rec.y;","record","record(int","return","solut","solution()","start","start:","start[1]));","std::queue","std::vector(num_c,","std::vector>","stop","struct","true;","vector","visit(num_r,","visit[start[0]][start[1]]","whether","write","x","x(x),","x,","y","y(y)","y)","y;","{","{0,","}","};"],"General BFS/Open the Lock.html":["&deadends,","&target)","(!queue.empty())","(auto&&","(deadlocks.count(target)","(int","*","*/","++step;","/**","//","0","0000","0001","0009","0010","0090","0100","0900","0;","1)","1000","1;","1||","796.","9000",":",";","=","==","@param","@return:","class","code","deadend","deadends)","deadends:","deadlocks.count(\"0000\")","deadlocks.emplace(std::move(word));","deadlocks;","here","https://www.lintcode.com/problem/open","int","lintcod","list","lock","lock/descript","minimum","n","number","open","openlock(vector","problem","public:","queue.push(\"0000\");","queue.size();","queue;","return","solut","std::queue","std::unordered_set","step","string","target:","total","turn","unlock","valu","visit.emplace(\"0000\");","visit;","wheel","word","write","{","}"],"General BFS/Sliding Puzzle II.html":["#","&&","&final_state)","&init_state,","'0'));","(!queue.empty())","(board[i][j]","(int","*","*/","+","++step;","/**","//","0","0;","0},","1,","1},","1}})","794.",":",";","=",">",">=","@param","@return:","auto","board)","chessboard","class","code","denot","directs({{1,","directs;","encode;","final","final_state:","here","https://www.lintcode.com/problem/slid","ii","ii/descript","init","init_state:","initi","int","integer,","lintcod","minimum","minmovestep(vector>","move","n","nc","nr","number","problem","public:","puzzl","queue.push(init);","queue.size();","queue;","return","slide","solut","solution()","state","std::queue","std::string","std:unordered_set","step","tostring(auto&","tostring(final_state);","tostring(init_state);","vector>","visit.insert(init);","visit;","write","{","{0,","}","};"],"General DFS/N Queens.html":["(index","(int","(n","*","*/","/*","//","0","0)","33.",";","=","==","@param","@return:","ans)","ans);","ans;","c","class","code","config(dim,","dim)","dim,","distinct","here","https://www.lintcode.com/problem/n","index,","int","lintcod","n","n)","n,","n:","number","private:","problem","public:","queen","queens,","queens/descript","queens;","return","row);","row;","runbacktracking(","runbacktracking(0,","solut","solvenqueens(int","std::string","std::vector","std::vector>","std::vector>&","vector>","void","write","{","}"],"General DFS/Letter Combinations of a Phone Number.html":["&digits)","'b',","'c'}},","'e',","'f'}},","'h',","'i'}},","'k',","'l'}},","'n',","'o'}},","'q',","'r',","'s'}},","'u',","'v'}},","'x',","'y',","'z'}},","(char","(digits.empty())","(index","*","*/","+","/**","//","1,","425.",":","=","==","@param","@return:","ans)","ans);","ans.push_back(config);","ans;","bound)","bound,","ch","char","class","code","combin","config,","config.pop_back();","config.push_back(ch);","config;","const","digit","digits,","digits.length(),","digits:","digits[index];","here","https://www.lintcode.com/problem/lett","index,","int","letter","lettercombinations(str","lintcod","map({","map;","map[digit])","number","number/descript","phone","posibl","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(0,","runbacktracking(index","solut","solution()","std::string","std::string&","std::unordered_map>","std::vector","std::vector&","string","vector","void","write","{","{'2',","{'3',","{'4',","{'5',","{'6',","{'7',","{'8',","{'9',","{'a',","{'d',","{'g',","{'j',","{'m',","{'p',","{'t',","{'w',","}","})","};"],"General DFS/Sudoku Solver.html":["!=","%","&board)","(board[x][y]","(count","(int","*","*/","+","/","/**","//","0","0)","1,","802.","9;",";","=","==",">&","@param","@return:","board,","board:","bound)","bound,","class","code","count","false));","here","https://www.lintcode.com/problem/sudoku","int","lintcod","noth","problem","public:","puzzl","return","runbacktracking(","solut","solver","solver/descript","solvesudoku(vector>","std::vector(9,","std::vector>","std::vector>&","sudoku","true;","use_cols(9,","use_cols,","use_grids(9,","use_grids)","use_grids);","use_rows(9,","use_rows,","void","write","x","y","{","}"],"General DFS/Palindrome Partitioning.html":["&s)","(index","(int","(n","*","*/","/*","//","0)","0,","136.",";","=","==","@param","@return:","ans,","ans.push_back(collect);","ans;","bound)","bound,","cach","class","code","collect,","collect;","const","content.","empti","here","https://www.lintcode.com/problem/palindrom","index","index,","int","j).","lintcod","list","memo)","memo);","memo;","n","n,","otherwise,","palindrom","palindromic,","partit","partition(str","partitioning/descript","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(s,","s.length();","s:","solut","std::string&","std::unordered_map>","std::unordered_map>&","std::vector","std::vector&","std::vector>","std::vector>&","str(i,","str,","string","substr","token.","vector>","void","write","{","{};","}"],"General DFS/Remove Invalid Parentheses.html":["&&","&str)","'(')","')')","(ch","(char","(count","(l","(r","*","*/","++count;","++l;","++r;","/**","//","0","0)","0,","0;","1);","1,","1])","780.",":","=","==",">","@param","@return:","ans);","ans;","auto","auto&","bgn","bool","ch","class","code","continue;","copy(str);","copy.erase(i,","count","count;","end","here","https://www.lintcode.com/problem/remov","i,","input","int","invalid","isvalid(const","l","l,","l;","lintcod","parenthes","parentheses/descript","possibl","private:","problem","public:","r","r,","remov","removeinvalidparentheses(str","result","return","runbacktracking(copy,","runbacktracking(str,","s:","solut","std::vector","str)","str.length(),","str[i","str[i]","string","vector","write","{","}","};"],"General DFS/Reconstruct Itinerary.html":["\"jfk\",","(auto&","(c","(const","(dst.used)","(res)","+","1,","1288.",":","=","==","[]","ans)","ans);","ans.emplace_back(dst.node);","ans.pop_back();","ans.push_back(\"jfk\");","ans;","auto&","bool","c,","class","const","continue;","dst","dst.node,","dst.use","dsts)","false);","false;","finditinerary(vector>&","https://www.lintcode.com/problem/reconstruct","int","itinerari","itinerary/descript","lhs,","lhs.node","lintcod","map)","map,","map;","map[src];","map[ticket[0]].emplace_back(ticket[1],","n)","n,","node(node),","node,","node;","pair","pair.second.end(),","private:","problem","public:","re","reconstruct","record","record(const","return","rhs)","runbacktracking(","runbacktracking(1,","runbacktracking(c","solut","src,","std::sort(pair.second.begin(),","string","struct","ticket","tickets)","tickets.size()","true;","unordered_map>","used(used)","used)","used;","vector","{","}","};"],"Combination DFS/Subsets.html":["&","&nums)","(int","(k","(n","*","*/","/**","//","0","0)","17.",";","=","==","@param","@return:","ans)","ans.push_back(collect);","ans;","bound,","class","code","collect,","collect;","here","https://www.lintcode.com/problem/subsets/descript","index","index,","int","k,","lintcod","list","n","n)","n,","number","nums,","nums.end());","nums.size();","nums:","problem","public:","return","return;","set","solut","std::sort(nums.begin(),","std::vector","std::vector&","std::vector>","std::vector>&","subset","subsets(vector","vector>","write","{","{{}};","}"],"Combination DFS/Subsets II.html":["&","&&","&nums)","(int","(k","(n","*","*/","+","/**","//","0","0)","1,","18.","1])",";","=","==","@param","@return:","ans)","ans);","ans.push_back(collect);","ans;","bound,","class","code","collect,","collect.pop_back();","collect.push_back(nums[i]);","collect;","continue;","here","https://www.lintcode.com/problem/subset","ii","ii/descript","index","index,","int","k","k,","lintcod","list","lists.","n","n)","n,","numbers.","nums,","nums.end());","nums.size();","nums:","nums[i","nums[i]","problem","public:","return","return;","runbacktracking(nums,","set","solut","std::sort(nums.begin(),","std::vector","std::vector&","std::vector>","std::vector>&","subset","subsets.","subsetswithdup(vector","valid","vector>","write","{","{{}};","}","};"],"Combination DFS/Combination Sum.html":["&&","&cands,","(cands[i]","(int","(n","(target","*","*/","+","/**","//","0)","0,","1,","135.","1])",";","=","==",">","@param","@return:","ans)","ans);","ans.push_back(collect);","ans;","bound,","break;","candidates:","cands,","cands.end());","cands.size();","cands[i","cands[i]","cands[i],","class","code","collect,","collect.pop_back();","collect.push_back(cands[i]);","collect;","combin","combinationsum(vector","const","continue;","depth","depth,","here","https://www.lintcode.com/problem/combin","i,","index","index,","int","integ","lintcod","list","n","n,","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(cands,","solut","std::sort(cands.begin(),","std::vector","std::vector&","std::vector>","std::vector>&","sum","sum/descript","target","target)","target,","target:","vector>","void","write","{","{};","}","};"],"Combination DFS/Combination Sum II.html":["&&","&cands,","(cands[i]","(int","(n","(target","*","*/","+","/**","//","0)","0,","1,","153.","1])",";","=","==",">","@param","@return:","ans)","ans);","ans.push_back(collect);","ans;","bound,","break;","candid","cands,","cands.end());","cands.size();","cands[i","cands[i]","cands[i],","class","code","collect,","collect.pop_back();","collect.push_back(cands[i]);","collect;","combin","combinationsum2(vector","const","continue;","given","here","https://www.lintcode.com/problem/combin","ii","ii/descript","index","index,","int","lintcod","n","n,","num:","number","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(cands,","solut","std::sort(cands.begin(),","std::vector","std::vector&","std::vector>","std::vector>&","sum","target","target)","target,","target:","vector>","void","write","{","{};","}","};"],"Combination DFS/K Sum II.html":["&cands,","(depth","(int","(n","(target","*","+","/*","//","0)","0,","1,","90.",";","=","==",">","@param","a:","ans)","ans);","ans.push_back(collect);","ans;","array","bound,","break;","cands,","cands.end());","cands.size();","cands[i],","class","code","collect,","collect.pop_back();","collect.push_back(cands[i]);","collect;","const","depth","depth,","here","https://www.lintcode.com/problem/k","ii","ii/descript","index","index,","int","integ","k","k)","k,","k:","ksumii(vector","lintcod","n","n,","postiv","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(cands,","solut","std::sort(cands.begin(),","std::vector","std::vector&","std::vector>","std::vector>&","sum","target","target)","target,","void","write","{","{};","}","};"],"Combination DFS/Split String.html":["(index","(n","*","*/","+","/*","//","0)","0,","1","1);","1,","680.",":","=","==","@param","@return:","ans)","ans);","ans.push_back(collect);","ans;","array","auto","bound)","bound,","class","code","collect,","collect.pop_back();","collect.push_back(token);","collect;","const","here","https://www.lintcode.com/problem/split","index","index,","int","lintcod","n","n,","possibl","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(s,","runbacktracking(str,","s)","s.length();","solut","split","splitstring(string&","std::string&","std::vector","std::vector&","std::vector>","std::vector>&","str,","str.substr(index,","string","string/descript","token","vector>","void","write","{","{{}};","}"],"Permutation DFS/Permutations.html":["&nums)","(depth","(int","(n","*","*/","/*","//","0","0)","0,","15.",";","=","==","@param","@return:","ans)","ans);","ans.push_back(perm);","ans;","bound)","bound,","class","code","const","depth,","false);","here","https://www.lintcode.com/problem/permutations/descript","int","integers.","lintcod","list","n","n,","nums,","nums.size();","nums:","perm,","perm;","permut","permutations.","permute(vector","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(nums,","solut","std::vector","std::vector&","std::vector>","std::vector>&","use(n,","use,","vector>","void","write","{","{{}};","}"],"Permutation DFS/Permutations II.html":["!use[i","&&","&nums)","(depth","(int","(n","*","*/","+","/*","//","0","0)","0,","1,","16.","1]","1])",":",";","=","==","@param","@return:","ans)","ans);","ans.push_back(perm);","ans;","bound)","bound,","class","code","const","continue;","depth","depth,","false);","false;","here","https://www.lintcode.com/problem/permut","ii","ii/descript","int","integ","lintcod","list","n","n,","nums,","nums.end());","nums.size();","nums[i","nums[i]","perm,","perm.pop_back();","perm.push_back(nums[i]);","perm;","permut","permuteunique(vector","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(nums,","solut","std::sort(nums.begin(),","std::vector","std::vector&","std::vector>","std::vector>&","true;","uniqu","use(n,","use,","use[i]","vector>","void","write","{","{{}};","}","};"],"Permutation DFS/Next Permutation.html":["&","&&","&nums)","(bgn","(i","(n","*","*/","/**","//","0","0)","0,","1);","1]","52.","=","==",">=","@param","@return:","alreadi","bgn,","class","code","end)","here","https://www.lintcode.com/problem/next","i;","int","integ","lintcod","list","maximum","minimum","n","next","nextpermutation(vector","nums,","nums.size();","nums:","nums;","nums[i","nums[i])","nums[j]","on","permut","permutation,","permutation.","permutation/descript","problem","public:","return","solut","swapsegment(nums,","vector","write","{","}"],"Permutation DFS/Next Closest Time.html":["&","&time)","'0');","(1440","(depth","(hour","(minut","(new_diff","(new_timestamp","(pool[0]","(pool[2]","*","*/","+","/**","//","0,","10","1440)","23)","4,","59)","60","862.","=","==",">","@param","@return:","bound)","bound,","class","closest","code","config,","config;","config[0]","config[1];","config[2]","config[3];","depth,","diff","diff,","given","here","hour","https://www.lintcode.com/problem/next","int","int&","int_max;","lintcod","minut","minute;","new_diff","new_diff;","new_timestamp","new_timestamp;","next","nextclosesttime(str","opt(pool);","opt)","opt);","pool,","pool.push_back(time[0]","pool.push_back(time[1]","pool.push_back(time[3]","pool.push_back(time[4]","pool;","pool[1])","pool[3]);","problem","public:","return;","runbacktracking(pool,","solut","std::stringstream","std::vector","std::vector&","stream","stream;","string","time","time/descript","time:","timestamp","timestamp)","timestamp,","timestamp;","write","{","}"],"Interval Query/Merge Intervals.html":["&intervals)","(const","(int","(n","*","*/","/**","//","0)","1","156.",";","=","==",">end",">start","@param","@return:","[]","ans;","auto&","class","classs","code","const","definit","end)","end;","here","https://www.lintcode.com/problem/merg","int","interv","interval(int","interval:","intervals.end(),","intervals.size();","intervals/descript","intervals:","lhs,","lhs.start","lintcod","list.","merg","merge(intervals[0]);","merge(vector","n","new","problem","public:","return","rhs)","solut","start,","start;","std::sort(intervals.begin(),","vector","write","{","{};","}"],"Interval Query/Insert Interval.html":["&intervals,","(int","(l","(n","*","*/","+","/**","//","0)","0,","1","1;","30.",";","=","==",">end",">start","@param","@return:","ans;","class","classs","code","definit","end)","end;","here","https://www.lintcode.com/problem/insert","insert","insert(vector","int","interv","interval(int","interval.","interval/descript","interval:","intervals.size();","intervals:","l","lintcod","list.","merge(intervals[0]);","n","new","newinterval)","newinterval:","problem","public:","r","return","solut","sort","start,","start;","vector","write","{","{newinterval};","}"],"Sweep Line/Number of Airplanes in the Sky.html":["&airplanes)","(const","(lhs.time","*","***","*******","*******************","*/","/**","//","0","1","10","2","3","391.","4","5","6","7","8","9",":","=","==",">end",">start","@param","@return:","[]","airplan","airplanes)","airplanes:","array","auto&","char","class","classs","code","const","count","countofairplanes(vector","definit","end)","end;","event::land));","event::take_off));","here","https://www.lintcode.com/problem/numb","int","interv","interval(int","interval:","lhs,","lhs.type","lintcod","number","problem","public:","record","record(int","records.end(),","records.push_back(record(airplane.end,","records.push_back(record(airplane.start,","records;","return","rhs)","rhs.time)","ski","sky.","sky/descript","solut","start,","start;","std::sort(records.begin(),","std::vector","struct","time(time),","time,","time;","type(type)","type)","type;","write","{","}","};"],"Sweep Line/Time Intersection.html":["&seqa,","&seqb)","(const","(count","(lhs.time","(rec.ev","*","***","***********","**************","*/","++count;","...","/**","//","0;","1","100","2","2)","3","4","5","6","821.",":","=","==",">end",">start","@param","@return:","[]","ans.push_back(interval);","ans;","auto&","char","class","classs","code","const","count","count;","definit","end)","end;","enum","event","event(event)","event)","event::log_in)","event::log_in));","event::log_out));","event;","here","https://www.lintcode.com/problem/tim","int","intersect","intersection/descript","interv","interval(int","interval.end","interval.start","interval:","interval;","lhs,","lhs.event","lintcod","list","log_in","log_out,","period","private:","problem","public:","rec","rec.time;","record","record(int","recs)","recs.end(),","recs.push_back(record(seq.end,","recs.push_back(record(seq.start,","recs;","return","rhs)","rhs.time)","seq","seqa)","seqa:","seqb)","seqb:","solut","start,","start;","std::sort(recs.begin(),","std::vector","struct","time","time(time),","time,","time;","timeintersection(vector","vector","write","{","}","};"],"Sweep Line/Meeting Rooms.html":["&intervals)","(const","(lhs.start","(n","*","*/","/**","//","0)","920.","=","==",">end",">start","@param","@return:","[]","array","attend","bool","canattendmeetings(vector","class","classs","code","const","definit","end)","end;","here","https://www.lintcode.com/problem/meet","int","interv","interval&","interval(int","interval:","intervals.end(),","intervals.size();","intervals:","lhs,","lhs.end","lintcod","meet","n","person","problem","public:","return","rhs)","rhs.start)","room","rooms/descript","solut","start,","start;","std::sort(intervals.begin(),","time","true;","write","{","}"],"Sweep Line/Meeting Rooms II.html":["&intervals)","(const","(lhs.time","*","****","******************","*/","/**","//","0","10","15","20","25","30","5","919.",":","=","==",">end",">start","@param","@return:","[]","array","auto&","char","class","classs","code","confer","const","definit","end)","end;","event::bgn));","event::end));","here","https://www.lintcode.com/problem/meet","ii","ii/descript","int","interv","interval(int","interval:","intervals)","intervals:","lhs,","lhs.type","lintcod","meet","minimum","minmeetingrooms(vector","number","problem","public:","record","record(int","recs.end(),","recs.push_back(record(interval.end,","recs.push_back(record(interval.start,","recs;","requir","return","rhs)","rhs.time)","room","solut","start,","start;","std::sort(recs.begin(),","std::vector","struct","time","time(time),","time,","time;","type(type)","type)","type;","write","{","}","};"],"Topological Sort/Course Schedule.html":["(!queue.empty())","(const","(indegree[dst]","(int","*","*/","++indegree[dst];","/*","//","0","0)","615.",":",";","=","==","@param","@return:","auto&","bool","canfinish(int","class","code","cours","dst","fals","finish","graph;","graph[src])","graph[src].push_back(dst);","here","https://www.lintcode.com/problem/cours","indegree;","indegree[dst];","int","lintcod","list","n","numcourses,","numcourses:","numcourses;","order.push_back(src);","order.size()","order;","pair","pair.first;","pair.second;","prerequisit","prerequisites)","prerequisites:","problem","public:","queue.front();","queue.pop();","queue.push(dst);","queue;","return","schedul","schedule/descript","solut","src","std::queue","std::unordered_map","std::unordered_map>","total","true","vector>&","write","{","}","};"],"Topological Sort/Sequence Reconstruction.html":["&org,","&seqs)","(!queue.empty())","(const","(count","(int","*","*/","/**","//","0","0;","1","1)","605.",":",";","=",">","@param","@return:","auto&","bool","candid","class","code","count","each","edg","edge.size();","fals","false;","graph;","here","https://www.lintcode.com/problem/sequ","indegree;","int","integ","level.","lintcod","list","multipl","n","nodes.","note","on","order;","org:","pair","permut","problem","public:","queue.size();","queue;","reconstruct","reconstruction/descript","return","seqs)","seqs:","sequenc","sequencereconstruction(vector","singl","size","solut","specif","std::unordered_map","std::unordered_map>","true","vector>","write","{","}"],"Topological Sort/Alien Dictionary.html":["!=","\"\";","&&","&words)","(!queue.empty())","();","(ch_src","(char","(const","(graph.count(ch_dst)","(h","(indeg[ch]","(indeg[dst]","(int","(k","(num","*","*/","++indeg[ch_dst];","/**","//","0)","1","1)","892.",":",";","=","==","?","@param","@return:","alien","alienorder(vector","auto&","break;","ch","ch_dst)","char","class","code","correct","dictionari","dictionary/descript","dst","graph)","graph.size()","graph;","graph[ch_dst]","graph[ch_src].insert(ch_dst);","graph[src])","here","https://www.lintcode.com/problem/alien","indeg;","indeg[dst];","int","lintcod","list","num","order","order.length()","order.push_back(src);","order;","pair","pair.first;","problem","public:","queue.pop();","queue.push(ch);","queue.push(dst);","queue.top();","queue;","return","solut","src","std::greater>","std::priority_queue,","std::string","std::unordered_map","std::unordered_map>","std::unordered_set();","string","word","words.size();","words:","words[0].length()","words[0];","write","{","}","};"],"Graph Theory Basics/Graph Valid Tree.html":["!=","&edges)","(!sets.merge(x,","(const","(edges.size()","(int","(n","*","*/","/**","//","0","0)","1)","1.","178.","2","2.",":",";","=","==","@param","@return:","auto&","bool","check","class","code","component.","connect","data","disjoint","disjointset","disjointset(int","edg","edge[0];","edge[1];","edges)","edges:","fals","false;","find,","follow","fulfil","graph","here","https://www.lintcode.com/problem/graph","int","integ","it'","lintcod","list","n","n)","n,","n:","node","number","on","parents(std::vector(n))","parents;","problem","public:","requirements.","return","set","sets(n);","solut","structure,","suppos","tree","tree,","tree.","tree/descript","true","true;","undirect","union","us","valid","validtree(int","vector>","write","x","y","y))","{","}","};"],"Graph Theory Basics/Minimum Spanning Tree.html":["(ans.size()","(auto&","(const","(int","(lhs.cost","(name_2_id.count(dst)","(name_2_id.count(src)","(order","(set.is_same(src_id,","*","*/","++id;","/**","//","0","0)","0;","1)","629.",":",";","=","==",">city1",">city2",">cost","?","@param","@return","[](const","an","ans.push_back(connection(src,","ans;","auto&","citi","city1,","city1;","city2,","city2;","class","code","connect","connection(string&","connection.","connections)","connections.end(),","const","continue;","cost","cost)","cost;","definit","disjointset","disjointset(int","dst","dst,","dst_id","dst_id))","dst_id);","edg","edge.city1;","edge.city2;","edge.cost));","given","here","https://www.lintcode.com/problem/minimum","id","id;","includ","int","lhs,","lhs.city1.compare(rhs.city1);","lhs.city2","lintcod","list","lowestcost(vector&","minimum","n)","name_2_id;","name_2_id[dst]","name_2_id[dst];","name_2_id[src]","name_2_id[src];","order","parent(std::vector(n))","parent;","problem","public:","result","return","rhs)","rhs.cost)","set(id);","set.unite(src_id,","solut","span","src","src_id","std::sort(connections.begin(),","std::unordered_map","std::vector();","string","string&","tree","tree/descript","two","vector","write","{","}","};"],"Simulation Puzzle/Missing Ranges.html":["\"","&nums,","(bgn","(diff","(lower","(n","(nums[i])","*","*/","+","/*","//","0)","1,","1]","1])","1];","641.","=","==",">\"","@param","@return:","ans.push_back(genrange(nums[n","ans;","array","bgn,","class","code","end)","findmissingranges(vector","genrange(long","here","https://www.lintcode.com/problem/miss","int","integ","lintcod","list","long","lower,","lower:","miss","n","nums.size();","nums:","nums[i","nums[n","private:","problem","public:","rang","ranges/descript","return","solut","sort","std::string","std::to_string(bgn)","std::to_string(bgn);","std::to_string(end);","std::vector","upper)","upper));","upper)};","upper:","vector","write","{","{genrange(lower,","}","};"],"Simulation Puzzle/Integer to Roman.html":["\"c\",","\"cc\",","\"ccc\",","\"cd\",","\"cm\"},","\"d\",","\"dc\",","\"dcc\",","\"dccc\",","\"i\",","\"ii\",","\"iii\",","\"iv\",","\"ix\"},","\"l\",","\"lx\",","\"lxx\",","\"lxxx\",","\"m\",","\"mm\",","\"mmm\"}","\"v\",","\"vi\",","\"vii\",","\"viii\",","\"x\",","\"xc\"},","\"xl\",","\"xx\",","\"xxx\",","%","+","/","//","1","10","100","100)","1000","1000)","1000]","100]","10]","10];","3000","418.","9","90","900",":","class","https://www.lintcode.com/problem/integ","integ","inttoroman(int","lintcod","map({","map;","map[0][num","map[1][(num","map[2][(num","map[3][num","num)","private:","problem","public:","return","roman","roman/descript","solut","solution()","std::vector>","string","{","{\"\",","}","})","};","~"],"Simulation Puzzle/Roman to Integer.html":["&s)","(int","(map[s[i]]","*","*/","+","+=","/**","//","0","1","1.","1000}","100},","10},","1]])","1]];","1},","2","2.","4","419.","5","500},","50},","5},","6","8",":",";","=",">=","@param","@return:","accumul","ad","charact","character.","class","code","current","e.g.:","etual","greater","head.","here","https://www.lintcode.com/problem/roman","i)","int","integ","integer/descript","iv","less","let'","lintcod","map({","map;","map[s[i","map[s[i]];","map[s[n","n","predecessor","predecessor,","private:","problem","public:","represent","return","roman","romantoint(str","s.length();","s:","scan","solut","solution()","std::unordered_map","string","subtract","sum","sum;","tail","valu","vi","viii","write","{","{'c',","{'d',","{'i',","{'l',","{'m',","{'v',","{'x',","}","})","};"],"Simulation Puzzle/Find the Celebrity.html":["(a","*","*/","/**","//","0,","1","1.","1;","2.","645.","=",">","@param","@return","a,","api.","b","b)","b);","bool","celebr","celebrity'","celebrity.","celebrity/descript","class","code","declar","fals","find","findcelebrity(int","forward","here","https://www.lintcode.com/problem/find","int","know","knows(a,","knows(int","label","lintcod","n","n)","parti","peopl","problem","public:","solut","true","write","{"],"Simulation Puzzle/Largest Number.html":["\"0\";","&nums)","'0')","(ans[0]","(const","(int","(num","(radixes.count(num)",");","*","*/","+","+=","/**","//","0)","000...","1","1)","184.","1;","6","65,","656","665",":","=","==","=>",">","?","@param","@return:","[&]","a,","a:","a;","ab","an","ans;","auto&","b","b)","b:","b;","ba","ba;","case","class","code","const","content","continue;","here","https://www.lintcode.com/problem/largest","int","integ","largest","largestnumber(vector","lintcod","list","long","neg","non","num","number","number/descript","nums)","nums.end(),","nums:","problem","public:","radix","radix;","radixes;","radixes[a]))","radixes[b]))","radixes[num]","return","solut","static_cast(std::floor(std::log10(num)))","static_cast(std::pow(10,","std::sort(nums.begin(),","std::string","std::to_string(num);","std::unordered_map","string","write","{","}","};"],"Simulation Puzzle/Strobogrammatic Number.html":["&num)","'0':","'1':","'6':","'8':","'9':","(ch)","(char","*","*/","/**","//","2,","3,","4,","5,","644.","7.",":","==","@param","@return:","bool","break;","case","ch","class","code","default:","fals","false;","here","https://www.lintcode.com/problem/strobogrammat","includ","isstrobogrammatic(str","lintcod","mirror","mirror.end());","mirror.push_back('6');","mirror.push_back('9');","mirror.push_back(ch);","mirror;","num)","num:","num;","number","number/descript","problem","public:","return","simpli","solut","std::reverse(mirror.begin(),","std::string","string","strobogrammat","switch","true","write","{","}","};"],"Simulation Puzzle/Sparse Matrix Multiplication.html":["&a,","&b)","(int","*","*/","/**","//","0","0));","654.",";","=",">","@param","@return:","a.size();","a:","a[0].size();","b","b:","b[0].size();","c(m,","class","code","here","https://www.lintcode.com/problem/spars","int","lintcod","m","matrix","multipl","multiplication/descript","multiply(vector>","n","nonzero(n,","problem","public:","result","solut","spars","std::vector());","std::vector(t,","std::vector>","t","vector>","write","{"],"Simulation Puzzle/Simplify Path.html":["&path)","(i","*","*/","/**","//","1;","421.","=","@param","@return:","class","code","here","https://www.lintcode.com/problem/simplifi","int","lintcod","n","origin","path","path.length();","path/descript","path:","problem","public:","simplifi","simplifypath(str","solut","std::vector","string","tokens;","write","{"],"Data Structure Design/Trie.html":["&prefix)","&word)","(char","(curr","(prefix","*","*/","/*","//","0)","442.",":","=","==",">branch.count(ch)",">branch[ch]",">branch[ch];",">is_word",">is_word;","@param","@return:","auto","bool","branch;","ch","class","code","curr","false;","given","here","https://www.lintcode.com/problem/impl","implement","insert(str","intial","is_word(false)","is_word;","lintcod","necessari","noth","prefix","prefix)","prefix.","prefix:","private:","problem","public:","return","root(std::make_shared())","root;","search(str","solut","start","startswith(str","std::make_shared();","std::shared_ptr","std::unordered_map>","string","struct","tree)","tree/descript","trie","trie()","trie.","trienod","trienode()","true;","void","word","word)","word:","write","{","}","};"],"Data Structure Design/Insert Delete GetRandom.html":["%","(index","(refs.count(val)","*","*/","/*","/**","//","0)","1)","1;","657.","=","==","@param","@return:","alreadi","bool","call","class","clean","code","contain","delet","element","element.","entries.","fals","false;","getrandom","getrandom()","here","https://www.lintcode.com/problem/insert","index","index;","insert","insert(int","instanti","int","intial","last","necessari","new","number","nums.pop_back();","nums.push_back(val);","nums.size()","nums.size();","nums;","nums[index]);","nums[index];","o(1)","o1/descript","obj","obj.getrandom();","obj.insert(val);","obj.remove(val);","object","otherwise,","param","private:","problem","public:","random","random()","randomizedset","randomizedset()","randomizedset();","refs.erase(val);","refs;","refs[nums[index]]","refs[val]","refs[val];","relev","remov","remove(int","return","set","simpli","solut","specifi","srand(time(nullptr));","std::swap(nums.back(),","std::unordered_map","std::vector","structur","such:","swap","true","true;","updat","val)","val:","valu","vector,","want","write","{","}","};"],"Data Structure Design/LRU Cache.html":["#includ","(refs.count(key)","(size","*","*/","*/lrucache(int","+","++size;","/*","//","0)","1)","134.","1;",":","=","==",">first;",">second;","@param","@return:","auto","cach","cache/descript","capac","capacity(capacity)","capacity)","capacity:","capacity;","class","code","expired_key","get(int","here","https://www.lintcode.com/problem/lru","int","integ","intial","iter","key)","key,","key:","list.begin();","list.end();","list.erase(iter);","list.push_front(std::make_pair(key,","list;","lru","lrucach","necessari","noth","private:","problem","public:","refs.erase(expired_key);","refs;","refs[key]","refs[key];","return","return;","set(int","size(0),","size;","solut","std::list>","std::unordered_map>::iterator>","valu","value)","value));","value:","value;","void","write","{","}","};"]},"length":247},"tokenStore":{"root":{"0":{"0":{"0":{"0":{"0":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.040892193308550186}}},"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},"1":{"0":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}},"1":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}},"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},"9":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}},"1":{"0":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},"docs":{}},"9":{"0":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},"docs":{}},"docs":{}},"1":{"0":{"0":{"0":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.026022304832713755}}},"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},"docs":{}},"docs":{}},"9":{"0":{"0":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},"docs":{}},"docs":{}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.028846153846153848},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.01675977653631285},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.0297029702970297},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.029850746268656716},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.034482758620689655},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.03361344537815126},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.014814814814814815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.022556390977443608},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.02857142857142857},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.17692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.034482758620689655},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.03048780487804878},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.033816425120772944},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.026785714285714284},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.1736111111111111},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.018404907975460124},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.14772727272727273},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.013392857142857142},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.028846153846153848},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.01680672268907563},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.01948051948051948},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.012711864406779662},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.03389830508474576},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.02112676056338028},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.038461538461538464},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.04918032786885246},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.04081632653061224},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.03278688524590164},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.05128205128205128},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.025210084033613446},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.023076923076923078},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.022556390977443608},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.034482758620689655},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.024390243902439025},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.03278688524590164},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.015625},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.013452914798206279},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.01948051948051948},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.023076923076923078},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.022988505747126436},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.010869565217391304},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.036585365853658534},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01694915254237288},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.027777777777777776},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.03278688524590164},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.02197802197802198}}},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},")":{"docs":{},";":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}},",":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.05555555555555555},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.02112676056338028},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.02586206896551724},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.05042016806722689},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.0205761316872428},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}},"s":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539}},",":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625}}},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}},"}":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.022988505747126436},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288}}},"}":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}},">":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}},".":{"0":{"0":{"1":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{}},"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"1":{"2":{"5":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{}},"docs":{}},"2":{"5":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{}},"5":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{}}},"1":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"7":{"docs":{},";":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},")":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"]":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"}":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},"4":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625}}}},"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},";":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428}}},")":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"]":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"5":{"docs":{},".":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}},"7":{"5":{"docs":{},".":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282}}}},"docs":{},".":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333}}}},"9":{"2":{"docs":{},".":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}},"docs":{}},"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.024242424242424242},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},"t":{"docs":{},"b":{"docs":{},"+":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},",":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334}}},";":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.047619047619047616},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882}}},")":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}},"]":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},";":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"1":{"0":{"1":{"docs":{},".":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}}},"docs":{}},"3":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}},"5":{"5":{"docs":{},".":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}}},"docs":{}},"8":{"1":{"docs":{},".":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}},"docs":{},".":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}}},"9":{"docs":{},".":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}},"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},"]":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"2":{"0":{"1":{"docs":{},".":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547}}}},"6":{"docs":{},".":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}},"8":{"docs":{},".":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}},"docs":{},".":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}}}},"1":{"docs":{},".":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"2":{"2":{"docs":{},".":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"5":{"docs":{},".":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218}}}},"docs":{},".":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}},"3":{"docs":{},"e":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},"+":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},".":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494}}}},"4":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}},"5":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894}}},"8":{"8":{"docs":{},".":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}},"docs":{},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}},"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}},".":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}},"3":{"1":{"1":{"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542}}}},"2":{"docs":{},".":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}}}},"docs":{}},"2":{"docs":{},".":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}},"4":{"docs":{},".":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}},"5":{"docs":{},".":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936}}}},"6":{"0":{"docs":{},".":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}},"docs":{},".":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}},"7":{"docs":{},".":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}},"8":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}}}},"9":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}},"docs":{}},"4":{"1":{"docs":{},".":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}}}},"4":{"0":{"docs":{},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"docs":{}},"8":{"docs":{},".":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}},"9":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082}}}},"docs":{}},"5":{"0":{"6":{"docs":{},".":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}},"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125}}}},"1":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}},"3":{"docs":{},".":{"docs":{"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936}}}},"4":{"docs":{},".":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}},"5":{"docs":{},".":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588}}}},"6":{"docs":{},".":{"docs":{"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012}}}},"9":{"docs":{},".":{"docs":{"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517}}}},"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}},".":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904}}}},"6":{"2":{"docs":{},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}},"3":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}}},"8":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}},"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},".":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}},"7":{"8":{"4":{"docs":{},".":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}}}},"docs":{},".":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}},"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834}},",":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}},".":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105}}}},"8":{"0":{"docs":{},".":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"3":{"docs":{},".":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}},"4":{"docs":{},".":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251}},".":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616}}}},"9":{"2":{"docs":{},".":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259}}}},"docs":{},".":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.0594059405940594},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.032467532467532464},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.04310344827586207},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.024193548387096774},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.02158273381294964},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.01858736059479554},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.20384615384615384},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.015625},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.028985507246376812},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02631578947368421},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.023622047244094488},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.027777777777777776},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.13068181818181818},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.017793594306049824},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.017482517482517484},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.017857142857142856},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015748031496062992},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.019138755980861243},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.013888888888888888},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.029411764705882353},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"m":{"docs":{},"+":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},")":{"9":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.028846153846153848},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.03345724907063197},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.021739130434782608},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.03937007874015748},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},";":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.02531645569620253},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}},">":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015748031496062992}}},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.01056338028169014},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.03496503496503497},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.03260869565217391},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.028846153846153848},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.03076923076923077},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.013392857142857142},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.03225806451612903},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.03202846975088968},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.025210084033613446},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.02242152466367713}}},")":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},";":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"[":{"docs":{},"j":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.022988505747126436},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},"}":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}}},",":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}},";":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}},")":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}},";":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894}}}},"[":{"docs":{},"h":{"docs":{},"]":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}},";":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}}}},"k":{"docs":{},"]":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}},"h":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},"]":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}},",":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894}}},")":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},";":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}}},";":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.026785714285714284}}},"}":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.014778325123152709},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.05042016806722689},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.02},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.017699115044247787},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.018691588785046728},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.019801980198019802},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.02127659574468085},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.031914893617021274},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.022988505747126436},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.014492753623188406},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.03937007874015748},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.022058823529411766},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.022222222222222223},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.019230769230769232},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.017167381974248927},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.025},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.01680672268907563},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.025},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},"d":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}},"}":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"}":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}},".":{"0":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}},"s":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625}},"t":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},":":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334}}}}},":":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}},"x":{"3":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"6":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"docs":{}},"(":{"3":{"docs":{},")":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}}},"docs":{},"w":{"docs":{},")":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"e":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}},"|":{"docs":{},"|":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}},"2":{"0":{"0":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}},"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},"(":{"1":{"docs":{},")":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}},"docs":{}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}},"1":{"4":{"7":{"4":{"8":{"3":{"6":{"4":{"8":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"5":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}},"docs":{}},"2":{"docs":{},".":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495}}}},"3":{"docs":{},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"4":{"2":{"docs":{},".":{"docs":{"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}},"6":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609}}}},"docs":{}},"5":{"0":{"docs":{},"m":{"docs":{},"+":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},"6":{"docs":{},".":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564}}}},"8":{"docs":{},".":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}},"9":{"docs":{},".":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.039603960396039604},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.04310344827586207},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.024193548387096774},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.050359712230215826},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.024630541871921183},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.022222222222222223},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.041666666666666664},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.0163265306122449},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.017793594306049824},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.024475524475524476},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},",":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},";":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":2}}}}},".":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}},":":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.014388489208633094},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}},"n":{"docs":{},"d":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},":":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334}}}}},"x":{"5":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"docs":{}},"d":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":1.6728016359918199},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":3.3758865248226946},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":3.345238095238095},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":2.5210526315789474}}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306}},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}},")":{"docs":{},";":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"]":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.03571428571428571},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.016129032258064516},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}},";":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894}}},":":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}},",":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.017937219730941704}}},")":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}},"(":{"docs":{},"w":{"docs":{},")":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"}":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}}}},"3":{"0":{"0":{"0":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"docs":{}},"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}},".":{"docs":{"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}}}},"1":{"docs":{},".":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02}}}},"2":{"docs":{},".":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"3":{"docs":{},".":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}},"5":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}},"6":{"0":{"docs":{},".":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}},"2":{"docs":{},".":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}},"7":{"docs":{},".":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}},"8":{"docs":{},".":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}},"9":{"docs":{},".":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}},"docs":{},".":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}}}},"7":{"0":{"docs":{},".":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}}}},"2":{"docs":{},".":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428}}}},"6":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064}}}},"docs":{}},"8":{"4":{"docs":{},".":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082}}}},"6":{"docs":{},".":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306}}}},"docs":{},".":{"docs":{"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}},"9":{"1":{"docs":{},".":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}},"2":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}},"3":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}},"4":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"5":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}},"6":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},"7":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993}}}},"8":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}},"docs":{}},"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.0297029702970297},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.03225806451612903},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.02877697841726619},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.019704433497536946},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.014814814814814815},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.020833333333333332},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.05113636363636364},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.014234875444839857},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.02097902097902098},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":10.008264462809917},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":5.01063829787234}}}}},".":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169}}},",":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},":":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}},"r":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}},":":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334}}}}},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}},"*":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}},"(":{"1":{"docs":{},")":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}}},"docs":{}}},"4":{"0":{"1":{"docs":{},".":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693}}}},"2":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259}}}},"3":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}},"5":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}},"6":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}},"docs":{}},"1":{"4":{"docs":{},".":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}},"7":{"docs":{},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"8":{"docs":{},".":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"9":{"docs":{},".":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},"docs":{},".":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818}}}},"2":{"1":{"docs":{},".":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}},"4":{"docs":{},".":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},"5":{"docs":{},".":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}},"8":{"docs":{},".":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}},"docs":{}},"3":{"0":{"docs":{},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"3":{"docs":{},".":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203}}}},"4":{"docs":{},".":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}},"5":{"docs":{},".":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}},"7":{"docs":{},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}},"8":{"docs":{},".":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}},"docs":{}},"4":{"0":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}},"2":{"docs":{},".":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}},"8":{"docs":{},".":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835}}}},"docs":{}},"5":{"3":{"docs":{},".":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}},"docs":{}},"6":{"0":{"docs":{},".":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}},"1":{"docs":{},".":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}},"5":{"docs":{},".":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"docs":{}},"7":{"4":{"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669}}}},"5":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588}}}},"6":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364}}}},"7":{"docs":{},".":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112}}}},"docs":{}},"8":{"8":{"docs":{},".":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}},"docs":{}},"9":{"1":{"docs":{},".":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}}},"docs":{}},"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.03225806451612903},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.03597122302158273},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.015625},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":3.347222222222222},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.034722222222222224},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.02097902097902098},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":10.007142857142858}}}}},",":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},":":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}},"x":{"2":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"docs":{}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}},".":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},"(":{"docs":{},"w":{"docs":{},")":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"*":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894}}},"}":{"docs":{},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"5":{"0":{"0":{"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"1":{"0":{"docs":{},".":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}},"2":{"docs":{},".":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}},"8":{"docs":{},".":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517}}}},"docs":{}},"2":{"8":{"docs":{},".":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}},"docs":{},".":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}}},"3":{"4":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"5":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}},"9":{"docs":{},".":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808}}}},"docs":{}},"4":{"0":{"docs":{},".":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}},"1":{"docs":{},".":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}},"3":{"docs":{},".":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}},"8":{"docs":{},".":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}},"docs":{},".":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}},"5":{"1":{"docs":{},".":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}},"docs":{}},"6":{"2":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901}}},"3":{"docs":{"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}}},"4":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775}}},"9":{"docs":{},".":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}},"docs":{}},"7":{"3":{"docs":{},".":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}},"7":{"docs":{},".":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}},"8":{"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}},"docs":{},".":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}},"8":{"1":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909}}}},"2":{"docs":{},".":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}},"5":{"docs":{},".":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}},"6":{"docs":{},".":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}}}},"docs":{},".":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}}}},"9":{"3":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"7":{"docs":{},".":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}},"9":{"docs":{},".":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357}}}},"docs":{},".":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}}},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.019801980198019802},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.050359712230215826},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.019704433497536946},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.025925925925925925},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.027777777777777776},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.017793594306049824},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.017482517482517484},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.01764705882352941}},":":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547}}},",":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}},"(":{"1":{"docs":{},")":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}}},"docs":{}},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"6":{"0":{"1":{"docs":{},".":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}},"4":{"docs":{},".":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358}}}},"5":{"docs":{},".":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}},"7":{"docs":{},".":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}}}},"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}},"1":{"2":{"docs":{},".":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}},"3":{"docs":{},".":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}},"5":{"docs":{},".":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}},"7":{"docs":{},".":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}},"docs":{},".":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"2":{"7":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}},"8":{"docs":{},".":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}},"9":{"docs":{},".":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}},"docs":{},".":{"docs":{"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385}}}},"3":{"4":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"7":{"docs":{},".":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}},"9":{"docs":{},".":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}},"docs":{},".":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521}}}},"4":{"0":{"docs":{},".":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}},"1":{"docs":{},".":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},"2":{"docs":{},".":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}},"4":{"docs":{},".":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}},"5":{"docs":{},".":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}},"7":{"docs":{},".":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}},"8":{"docs":{},".":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},"9":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}},"docs":{}},"5":{"0":{"docs":{},".":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}}},"1":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}},"4":{"docs":{},".":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}},"6":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"7":{"docs":{},".":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}},"docs":{},",":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"6":{"1":{"docs":{},".":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909}}}},"3":{"docs":{},".":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}},"5":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"7":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464}}}},"9":{"docs":{},".":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}},"docs":{},".":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909}}}},"7":{"6":{"docs":{},".":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}},"docs":{},".":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356}}}},"8":{"0":{"docs":{},".":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}},"3":{"docs":{},".":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}},"docs":{},".":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}}}},"9":{"1":{"docs":{},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"docs":{}},"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.050359712230215826},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.024630541871921183},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.022222222222222223},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.015625},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},":":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547}}},",":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.018518518518518517},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}}},".":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"x":{"1":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"docs":{}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125}}},"]":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},"}":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428}}},"*":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894}}}},"7":{"1":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}},"2":{"docs":{},".":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}},"3":{"docs":{},".":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}},"4":{"docs":{},".":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}},"7":{"2":{"docs":{},".":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}},"8":{"docs":{},".":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285}}}},"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}},"8":{"0":{"docs":{},".":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}}},"7":{"docs":{},".":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},"docs":{}},"9":{"4":{"docs":{},".":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}},"6":{"docs":{},".":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}},"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}}},"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}},",":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.01764705882352941}}},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}},".":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}},"8":{"0":{"2":{"docs":{},".":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}},"docs":{}},"1":{"docs":{},".":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}},"2":{"1":{"docs":{},".":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}},"8":{"docs":{},".":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}},"9":{"docs":{},".":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}},"docs":{}},"3":{"8":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306}}}},"docs":{}},"5":{"docs":{},".":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757}}}},"6":{"2":{"docs":{},".":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"3":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}},"7":{"docs":{},".":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}},"docs":{}},"7":{"docs":{},".":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}},"8":{"8":{"docs":{},".":{"docs":{"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}}}},"9":{"docs":{},".":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}},"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993}}}},"9":{"2":{"docs":{},".":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}},"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}},"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},".":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428}}},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"9":{"0":{"0":{"0":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},".":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}},"1":{"docs":{},".":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}},"5":{"docs":{},".":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}},"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},".":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}},"1":{"1":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901}}}},"9":{"docs":{},".":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}},"docs":{}},"2":{"0":{"docs":{},".":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}},"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01}}},"4":{"4":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}}},"docs":{},".":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}},"5":{"8":{"docs":{},".":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541}}}},"docs":{},".":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}},"6":{"docs":{},".":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}},"7":{"docs":{},".":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408}}}},"8":{"3":{"docs":{},".":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}},"docs":{},".":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}},"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},",":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}},"}":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.022321428571428572}}},";":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023}}}},"docs":{},"a":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.03636363636363636},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.02097902097902098},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}},".":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}},";":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.014084507042253521},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.021739130434782608},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.03333333333333333},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.0379746835443038},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.021739130434782608},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.020202020202020204},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}}}}}}},"n":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}}}}}}}}}},"p":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}},"d":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495}}}}},"a":{"docs":{},"[":{"docs":{},"l":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}}}},"d":{"docs":{},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}}},"\"":{"docs":{},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219}}}}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}},";":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.016574585635359115},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.029411764705882353},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.022222222222222223},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.013392857142857142},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.016129032258064516},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.01875},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666}}}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547}}},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547}}}}}}},"d":{"docs":{},"]":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}},",":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.025806451612903226},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.022988505747126436},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.016216216216216217},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":3.3661202185792347},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":5},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":5.033333333333333},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":3.355311355311355}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6819338422391856},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.013986013986014},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6957928802588995},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.675840978593272}},"(":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.01056338028169014},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":5.04},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.023529411764706},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":2.5256410256410255},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":2.5806451612903225},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6843137254901959},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":2.5547945205479454},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.028037383177570093},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0555555555555554},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":2.5307692307692307},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.0422535211267605},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}},".":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}},"1":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}}}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}},"/":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}}}}},")":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}},":":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}}}}}}}}},"e":{"docs":{},"a":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}}},"i":{"docs":{},".":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}},"d":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}},"d":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":5.0144927536231885}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":3.3407407407407406}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}}}}}},",":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.02097902097902098},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.022935779816513763},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"k":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259}}},";":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}}}},"docs":{},"l":{"docs":{},"]":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625}}}}},"i":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.02},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.02097902097902098}},"]":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.02},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}},".":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}}},"m":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}}},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521}}}}},"j":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.016483516483516484},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.0189873417721519},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.019230769230769232},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.020242914979757085},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.018404907975460124},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.025380710659898477},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.014150943396226415},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.012711864406779662},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.02127659574468085},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.026785714285714284},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.02108433734939759},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.019138755980861243},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.023809523809523808},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.025423728813559324},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}},"&":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.015384615384615385},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.014084507042253521},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01834862385321101},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.0163265306122449},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.016483516483516484},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.013215859030837005},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.018691588785046728},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.013452914798206279},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.012711864406779662},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.058394160583941604},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.021505376344086023},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.021739130434782608},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.025510204081632654},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.022388059701492536},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.03431372549019608},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}},"&":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":2.521505376344086},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":3.3441441441441437},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":2.5193236714975846}},"e":{"docs":{},"_":{"docs":{},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357}}}}}}},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":2.5285714285714285}},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}}}},"g":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512}}}}}}},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.031496062992125984}},")":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}},":":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}}},"docs":{}},"b":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}},"c":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"d":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},",":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}},".":{"docs":{},"e":{"docs":{},"f":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}},"/":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}},"d":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.018404907975460124}},"e":{"docs":{},"+":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"*":{"docs":{},"+":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"f":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}}}}}}}}},"e":{"docs":{},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}},"o":{"docs":{},"v":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"b":{"docs":{},"r":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}}}}}}},":":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":3.3666666666666663},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":5.013333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":3.3649789029535864}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}}}}}}}}}}}}},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},"[":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}},"l":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521}}}}},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":5.006944444444445}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}},"+":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.015060240963855422}}},"i":{"docs":{},"r":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":3.36231884057971}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}},":":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}}}}},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"b":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.03225806451612903},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.046296296296296294},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.01948051948051948},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.034482758620689655},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.024096385542168676},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.027777777777777776},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.028409090909090908},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.021897810218978103},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.03202846975088968},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.02912621359223301},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.05405405405405406},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.040268456375838924},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"a":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"c":{"docs":{},"k":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":10.02},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":5.017699115044247},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":5.009345794392523},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":5.00990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":5.01063829787234},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":5}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894}}}}}},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}}}}}}}}}},"v":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901}}}}}}}}}}},"v":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}}}}}}}}},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}}}}}}},"[":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}}}}}}},"g":{"docs":{},"(":{"2":{"5":{"6":{"docs":{},",":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082}}}},"docs":{}},"docs":{}},"docs":{}},"_":{"docs":{},"s":{"docs":{},"(":{"2":{"5":{"6":{"docs":{},",":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}},"docs":{}},"docs":{}},"docs":{}},":":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}}}}}},"t":{"docs":{},"(":{"2":{"5":{"6":{"docs":{},",":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}},"docs":{}},"docs":{}},"docs":{}},":":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}}}}}}},"s":{"docs":{},"e":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"l":{"docs":{},"l":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":5.027777777777778}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":3.3396624472573837}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}}}}}},",":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266}}},";":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}},"d":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":3.39047619047619}}},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"f":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":5.008333333333334},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":3.342767295597484},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":3.3501400560224086}},";":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.036585365853658534}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.016574585635359115},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.015384615384615385},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.017167381974248927},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.017699115044247787}}},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494}},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}},")":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},",":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"o":{"docs":{},"l":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01834862385321101},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.012244897959183673},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.016483516483516484},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.029197080291970802},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.02654867256637168}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}},"k":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":5.019354838709678},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":3.348484848484848}},";":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613}}},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613}}},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}}}}}},":":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}}}}}}}},"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}},";":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}}}}},",":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023}}},")":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}},"t":{"docs":{},"h":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}},"k":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}},"d":{"docs":{},"_":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}},"p":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121}}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121}}}}}}},"g":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.017605633802816902},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.012711864406779662}}},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.023529411764705882},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"1":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}}}}},"docs":{}}},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}},"(":{"docs":{},"v":{"2":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}}}}},"docs":{}}},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}},":":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}},",":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}}}},"i":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":2.5060975609756095},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.03333333333333333},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}}}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"(":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}}}}}}}},"t":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}}},"y":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0327868852459017},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6822916666666665},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6785009861932938},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6792452830188678}},"_":{"1":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}},"2":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}},"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":5.018518518518518}}}}}},"e":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0163934426229506},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6744791666666665},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6725838264299802},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6729559748427671}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}},":":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":2.537037037037037},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2.0090909090909093},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2.0082644628099175},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2.0072992700729926},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.0106761565836297},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":2.521978021978022},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":3.3586497890295357},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":3.3579234972677594},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":2.5125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":3.349907918968692},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":2.5220588235294117},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":2.522222222222222},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6819338422391856},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.020979020979021},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6763754045307442},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.675840978593272},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":2.506993006993007},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":1.6813725490196076},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":2.5129032258064514},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":2.0114942528735633},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":2.0044642857142856},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":2.5220588235294117},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":2.508298755186722},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.0055555555555555},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4323450134770888},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":2.513888888888889},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.6743589743589742},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.675250357653791},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6799410029498523},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.0096153846153846},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6747638326585694},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.0337837837837838},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.0122699386503067},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.0120967741935485},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":5.00507614213198},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":1.6853002070393373}}},"y":{"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"2":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609}}}}}}}}}}},"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}}},"docs":{}},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}},"s":{"docs":{},"t":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":3.340425531914893},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":2.518181818181818},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834}},".":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835}}}}}}}}}}},",":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"c":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},"d":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}},"+":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338}}}},"c":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}},")":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.01948051948051948},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.034482758620689655},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.020833333333333332},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.014234875444839857},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253}},"a":{"docs":{},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"l":{"docs":{},"l":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},")":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},":":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}},"c":{"docs":{},"h":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.02531645569620253},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.030303030303030304},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":5.006944444444445}},"e":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}},")":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888}}},"i":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},"s":{"docs":{},":":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936}}}}}}}}},"s":{"docs":{},",":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936}},"]":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936}},",":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}},"s":{"1":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"docs":{}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.014234875444839857},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.06097560975609756}},"s":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}},":":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}},"l":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.04285714285714286}},"o":{"docs":{},"u":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":3.340909090909091},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":5.0212765957446805},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":3.3474178403755865},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.0096153846153846},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6747638326585694},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":2.519230769230769},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":3.351515151515151}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}}}}}}}}},"k":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":5.027777777777778}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"(":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.019417475728155338},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.017857142857142856},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"s":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}},";":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}},"o":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":3.365942028985507},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":3.349081364829396},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":3.3611111111111107},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6819338422391856},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.020979020979021},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6957928802588995},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.6804281345565748}}}}},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"u":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}}}}}}},"a":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408}}}}}}}},"o":{"docs":{},"s":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":3.3497267759562837}}},"x":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.02247191011235955},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.021739130434782608},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":2.5217391304347827},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":5.007936507936508},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":3.349206349206349}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936}}}}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"o":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":3.342592592592592},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":2.5035211267605635},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":1.6789366053169732}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259}}}}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},";":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},".":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}}}}},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.01818181818181818},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.016483516483516484},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.013215859030837005},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.014018691588785047}}},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"&":{"docs":{},">":{"docs":{},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.6705128205128204},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6709585121602288},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6710914454277284},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":3.333333333333333},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":2.53125},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":3.3550724637681157}}}}}},"i":{"docs":{},"d":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}},"s":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}}},"u":{"docs":{},"m":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.023668639053254437},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":2.5090909090909093},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":2.0061349693251533},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":2.0104166666666665},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":1.67287784679089}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},",":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.021739130434782608},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.021739130434782608},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}}}},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"m":{"docs":{},",":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"2":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"3":{"docs":{},"]":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"docs":{}}}},"e":{"docs":{},"r":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.0196078431372549}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}},".":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"s":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}},"d":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.034482758620689655},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.014150943396226415},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.03225806451612903},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.011152416356877323},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.016216216216216217},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}},"_":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}},"s":{"docs":{},";":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}},"t":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}},"d":{"docs":{},"o":{"docs":{},"t":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}},"p":{"docs":{"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}},"(":{"0":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}},",":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}},"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}}}},"s":{"docs":{},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541}}}},",":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811}}}}},"t":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}},"r":{"docs":{},"s":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":5.030612244897959}}}}},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539}},".":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}},"s":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}},"o":{"docs":{},"r":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":5.008620689655173}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}},",":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.023809523809523808},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.023809523809523808},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.024193548387096774},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.031578947368421054}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}}}}},"c":{"docs":{},"t":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}},"s":{"docs":{},"t":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":3.3678160919540225},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},":":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}}}}}},"k":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}},"d":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}},"m":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}},"w":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}},"s":{"docs":{},")":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}}},"i":{"docs":{},"n":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":5.029411764705882},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":5.014598540145985},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":3.354685646500593},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":3.359511343804537}},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}}}}}},":":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549}}}}}},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}},"p":{"docs":{},"i":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":5.006451612903226},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":3.340909090909091},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.047619047619047616},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":2.5301204819277108}},"e":{"docs":{},"r":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152}},"s":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}},"y":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}}}}}}}},";":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125}}}}}}}},".":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125}}}}}}}}}}}}},"g":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}},"(":{"5":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"docs":{}}}},"k":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}},"t":{"docs":{},"_":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082}},"t":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":2.5127388535031847}}}}}}},"h":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}},"a":{"docs":{},"r":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.014925373134328358},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.013888888888888888}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0163934426229506},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.010204081632653},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.023622047244094488},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306}}}}}}}}}}}},".":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}}}}}},"n":{"docs":{},"g":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":5.009803921568627},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131}},".":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}},".":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}}},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062}}}}}},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.0163265306122449},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.02247191011235955},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}}}}},"s":{"docs":{},",":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}},"o":{"docs":{},"s":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},")":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}},"_":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}},":":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.06611570247933884},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.05673758865248227},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.013888888888888888},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.08097165991902834},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.033783783783783786},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.046012269938650305},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.028225806451612902},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.029661016949152543},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.03571428571428571},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0391566265060241},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.025477707006369428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.06779661016949153},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.06779661016949153}},";":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.018404907975460124},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.017857142857142856},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204}}},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258}}},"b":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}},")":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}},";":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.024193548387096774},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622}},";":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622}}}}}}}}},"t":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":5.0055555555555555},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}},"m":{"docs":{},",":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}},")":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}},"e":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}},"l":{"docs":{},"l":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539}}},"e":{"docs":{},"b":{"docs":{},"r":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":5.013513513513513}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"'":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}},".":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}},".":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}},"]":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}},"b":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}},"c":{"docs":{},"e":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}}}},"r":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.04285714285714286}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}}}}}}}}}},";":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.014285714285714285}}}},",":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}},"+":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"y":{"1":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}},"2":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}},"docs":{}}}}},"d":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"t":{"docs":{},"a":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":2.521505376344086},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":2.515267175572519},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":2.020618556701031},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.013888888888888888},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},",":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"y":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.034482758620689655}}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}},"s":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}}}}}}},")":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}},",":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}}},"e":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.02127659574468085},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}},"s":{"docs":{},"c":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":2.0103092783505154},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":2.5185185185185186}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"&":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}}}}}},":":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}},";":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"&":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":5.0144927536231885},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":3.3422619047619047}}},"m":{"docs":{},"p":{"docs":{},"s":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}},"o":{"docs":{},"s":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}}}},")":{"docs":{},";":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":5.0227272727272725},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}}},"a":{"docs":{},"s":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}},"i":{"docs":{},"m":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.012269938650306749},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":2.5267857142857144},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":2.5088495575221237}},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428}}}}}}}}}}}}}}}}},"m":{"docs":{},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}},"m":{"docs":{},"o":{"docs":{},":":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":2.514705882352941},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":2.5148148148148146},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.013392857142857142},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":1.67287784679089},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852}}}},":":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121}}}},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}},"e":{"docs":{},"p":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}},"s":{"docs":{},")":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}},":":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"0":{"0":{"0":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.020408163265306},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":5.017045454545454},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}}}},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},",":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}}}}},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":3.3421052631578942},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":3.351681957186544},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.0120967741935485}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}}}}}}}}},"k":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}}}}}}}}}},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},"(":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{},")":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}}}}}},"o":{"docs":{},"v":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.016216216216216217}}},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}},"[":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"docs":{}},"s":{"docs":{},"(":{"docs":{},"{":{"docs":{},"{":{"1":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}},"docs":{}}}},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}},"c":{"docs":{},"e":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.0229885057471266}},"s":{"docs":{},".":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}}}},"t":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333}},")":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}},":":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":5.006944444444445}}},"y":{"docs":{},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}},",":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519}}},".":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},":":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}}}}}},";":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}}}}}}},")":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}},",":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":5.028985507246377},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406}},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}},"s":{"docs":{},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}}}}}}}}},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.021739130434782608},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.021739130434782608}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}},";":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}},"f":{"docs":{},"f":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},",":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":3.349907918968692}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":3.3455284552845526},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}},"n":{"docs":{},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}},",":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}},":":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}},")":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}},":":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}}},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}},"r":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}},")":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}},";":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}},"_":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":2.508298755186722}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.03225806451612903},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.014084507042253521},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.014423076923076924},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.03007518796992481},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.04597701149425287},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}},"g":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}},"(":{"4":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"docs":{}}},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}},"(":{"3":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"docs":{}}}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"s":{"docs":{},"t":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},")":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}},";":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049}}}},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}},".":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401}}}}}},"s":{"docs":{},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},")":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":2.551282051282051},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":3.3412073490813645},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}},".":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.019138755980861243},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.014285714285714285},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}},"y":{"docs":{},";":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204}}}}}}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},";":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}},"p":{"docs":{"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.027972027972027972}},"u":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}},"(":{"docs":{},"k":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},",":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}},"n":{"1":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}},"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}},")":{"docs":{},";":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}},",":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}},"n":{"docs":{},",":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"a":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775}}}}}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}}}},"d":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}},"[":{"0":{"docs":{},"]":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}},"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}}},"docs":{}}}}}},"i":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}},"]":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}}}},"1":{"docs":{},"]":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"2":{"docs":{},"]":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"docs":{},"i":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.02},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.02654867256637168},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.019801980198019802},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.031914893617021274},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.02247191011235955},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.031914893617021274},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.022988505747126436},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.014492753623188406},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.05803571428571429},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.04597701149425287},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02631578947368421},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.029850746268656716},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.017045454545454544},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.016129032258064516},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.021352313167259787},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}},"]":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.02247191011235955},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.02097902097902098},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}},"[":{"docs":{},"j":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},"]":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.03},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.02654867256637168},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.028037383177570093},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.0297029702970297},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.031914893617021274},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.022988505747126436},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.021505376344086023},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},":":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}},"[":{"docs":{},"h":{"docs":{},"]":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.031914893617021274}},":":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}}}},"k":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357}},"]":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"i":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}}},":":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}},";":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}},"n":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894}},"]":{"docs":{},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}}}}}}}}}},"k":{"docs":{},"]":{"docs":{},"[":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}}}}}}}}}},";":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"y":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775}}}}}}}}}},"d":{"docs":{},"]":{"docs":{},"[":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}}}}}}}}}}},"a":{"docs":{},"y":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}}},"k":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},"]":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}},"c":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.024691358024691357}},"]":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},":":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}},"j":{"docs":{},"]":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666}},")":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333}}},",":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"]":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"p":{"docs":{},"]":{"docs":{},";":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986}}}}},",":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}}},"e":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976}},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.014084507042253521},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.02247191011235955},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.014018691588785047},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.013452914798206279},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.01694915254237288},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.020202020202020204}},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467}}}},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.021505376344086023},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.014925373134328358}}},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}}}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.021621621621621623}}},"}":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}},"(":{"docs":{},"v":{"1":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}}},"docs":{}}},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"v":{"2":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}}},"docs":{}}},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266}}},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}},"[":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"&":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"r":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}},"e":{"docs":{},";":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}},"u":{"docs":{},"m":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":3.344086021505376},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":4.0184049079754605},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":4.03125},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":3.333333333333333},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":3.3419540229885056},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":3.3447619047619046}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.017142857142857144}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}},"*":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},":":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131}}}}},"o":{"docs":{},"n":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494}}}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":2.5306122448979593},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6864686468646863},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},":":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}},".":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}},"t":{"docs":{},"g":{"docs":{},"r":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}},"s":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}},".":{"docs":{},"g":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},".":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755}},":":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":3.35752688172043},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":2.5215827338129495},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":2.5096153846153846},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.02654867256637168}},"s":{"docs":{},":":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}},".":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}},".":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}},"i":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":3.3421052631578942},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":3.3608562691131496}}}},"g":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.02112676056338028},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"1":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}},"2":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}},"docs":{}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}},"docs":{}},"s":{"docs":{},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}},":":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}},"t":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}},":":{"docs":{},":":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}},"o":{"docs":{},"g":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}},")":{"docs":{},";":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}}}}},"(":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}}}}},")":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}},";":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}}},"u":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":3.3406326034063256},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":3.3419540229885056}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802}}}}}},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"&":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}}}}},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}},"g":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}}},"x":{"docs":{},",":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"&":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"&":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"&":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":2.5088495575221237}},"(":{"docs":{},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"v":{"docs":{},"e":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.017699115044247787},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}},"l":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"p":{"docs":{},"h":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":5.027777777777778},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":3.36150234741784}},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.02702702702702703}}},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}},"[":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"_":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"_":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}}},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},"e":{"docs":{},"r":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":3.35752688172043},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":2.5215827338129495},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":2.518181818181818},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}},"i":{"docs":{},"d":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}}}}}},":":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}}}}}}}},"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}},",":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":5.033333333333333}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}},"[":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}},"t":{"docs":{},"e":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":5.0095238095238095}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":5.011363636363637},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":3.349593495934959},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364}}}}}}}}}}},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}},"u":{"docs":{},"i":{"docs":{},"d":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}}}}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},"o":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}},"o":{"docs":{},"d":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"d":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.04}}}}},"h":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"z":{"docs":{},"s":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"z":{"docs":{},"l":{"docs":{},".":{"docs":{},"l":{"docs":{},"a":{"docs":{},"/":{"2":{"docs":{},"f":{"docs":{},"o":{"3":{"docs":{},"b":{"docs":{},"j":{"docs":{},"q":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"docs":{}}}},"docs":{}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"/":{"docs":{},"z":{"docs":{},"s":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"/":{"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}}}}}}}}}}}}},"4":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}}}}}}}}}}}}}}},"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105}}}}}}}}}}}}}}}},"p":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112}}}}}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}},"e":{"docs":{},"t":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},"r":{"docs":{},"i":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521}}}}}},"q":{"docs":{},"u":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"r":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}},"o":{"docs":{},"b":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}},"y":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"x":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}}}}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}},"s":{"docs":{},"s":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}},"a":{"docs":{},"x":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}},"i":{"docs":{},"m":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}},"o":{"docs":{},"v":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012}}}},"e":{"docs":{},"t":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936}}}}}},"i":{"docs":{},"n":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},"p":{"docs":{},"i":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}},"n":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358}}}}}},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}},"o":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}},"r":{"docs":{},"d":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"r":{"docs":{},"u":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}}}}},"h":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},"i":{"docs":{},"m":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}},"w":{"docs":{},"x":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}},"t":{"docs":{},"h":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}}}}},"g":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}},"e":{"docs":{},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}}}},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}}}}}}}},"n":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"s":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}},"u":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334}}}}},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}},"o":{"docs":{},"n":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}},"a":{"docs":{},"l":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}},"d":{"docs":{},"d":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"s":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541}}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.034482758620689655},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.013888888888888888},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}},".":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408}},":":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"c":{"docs":{},",":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}}}}}}},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}}},")":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}},";":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"a":{"docs":{},"d":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.012711864406779662}},":":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}},";":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.009036144578313253},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}},",":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}},")":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}},".":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901}}}}}}}}}}}},"_":{"docs":{},"o":{"docs":{},"d":{"docs":{},"d":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827}},"l":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},",":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}},"r":{"docs":{},"d":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"l":{"docs":{},"f":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}},";":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":5.023529411764706}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}}},"u":{"docs":{},"s":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.03333333333333333},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":5.011904761904762},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":3.3390151515151514},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":3.3374485596707815}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},".":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}}},"3":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}}}}}}}}}}}}},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364}}}}},"r":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}}},"l":{"docs":{},"d":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.027472527472527472},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.022026431718061675},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.02336448598130841}},"s":{"docs":{},",":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364}}}}},"e":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}},"d":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}},"(":{"2":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"docs":{}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":3.3431855500821017},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}}},".":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}}}}}}},"g":{"docs":{},"h":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":5.007518796992481}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}},"f":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}}}}}}}}}}},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}},"(":{"1":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"docs":{}}}},")":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}},";":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408}}}},".":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}},",":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408}}},";":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}}},"i":{"6":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}},"t":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.03333333333333333}}}},"7":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"e":{"docs":{},"e":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"n":{"5":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"6":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":3.3541666666666665},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":3.347319347319347},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":1.6789366053169732},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}},"d":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"e":{"docs":{},"x":{"2":{"docs":{},"]":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.013392857142857142},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}},"docs":{}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}},"docs":{}}}}},"a":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}},"w":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}},",":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}},"[":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}}},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}},"[":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}},"i":{"docs":{},"c":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}},"t":{"4":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"5":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.033707865168539325},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0223463687150838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.030303030303030304},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.04081632653061224},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.04195804195804196},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.04950495049504951},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.05454545454545454},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.025806451612903226},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.03873239436619718},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.03125},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.04477611940298507},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.05511811023622047},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.07692307692307693},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.06557377049180328},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.061224489795918366},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.06557377049180328},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.025974025974025976},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.021505376344086023},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.04580152671755725},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.04132231404958678},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.06428571428571428},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.07446808510638298},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.047619047619047616},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.08},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.09411764705882353},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.07692307692307693},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.02586206896551724},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.034482758620689655},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.014388489208633094},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.014778325123152709},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.03361344537815126},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.06153846153846154},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.052941176470588235},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.07042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.045112781954887216},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.04142011834319527},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.06766917293233082},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.04460966542750929},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.03614457831325301},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.0380952380952381},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.04597701149425287},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.054878048780487805},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.06557377049180328},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.03125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.018867924528301886},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.018691588785046728},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.019801980198019802},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.02127659574468085},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.02247191011235955},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.02127659574468085},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.029411764705882353},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.034482758620689655},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.02830188679245283},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.033816425120772944},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.03409090909090909},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.0205761316872428},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02631578947368421},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.045871559633027525},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.03260869565217391},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.027777777777777776},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.02459016393442623},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.027777777777777776},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.027972027972027972},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.05521472392638037},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.06521739130434782},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.034482758620689655},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.06818181818181818},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.029850746268656716},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.017045454545454544},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.023622047244094488},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.013215859030837005},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.025362318840579712},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.02336448598130841},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.03139013452914798},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.02197802197802198},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.02531645569620253},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.040983606557377046},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.05},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.03314917127071823},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.029411764705882353},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.02962962962962963},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.04296875},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.029411764705882353},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.025806451612903226},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.022988505747126436},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.04017857142857143},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.029411764705882353},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.027777777777777776},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.03461538461538462},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.030042918454935622},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.04424778761061947},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.032432432432432434},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.016129032258064516},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.06547619047619048},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.06315789473684211},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.04081632653061224},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.038461538461538464},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.05555555555555555},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.05660377358490566},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.06153846153846154},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.04225352112676056},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.024390243902439025},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.031746031746031744},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.03333333333333333},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.04516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022727272727272728},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.02247191011235955},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.04054054054054054},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.043478260869565216},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.02962962962962963},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.014150943396226415},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.043010752688172046},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.016216216216216217},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.07142857142857142},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.03389830508474576},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.02127659574468085},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.030303030303030304},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.02390438247011952},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.04395604395604396},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.05},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.018633540372670808},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.05333333333333334},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.030927835051546393},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.025423728813559324},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.030303030303030304},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.06578947368421052},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.04807692307692308},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.047619047619047616},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.03968253968253968},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.06451612903225806},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.031578947368421054},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.03571428571428571},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.025},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.03896103896103896},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.05454545454545454},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.03225806451612903},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.04},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.028985507246376812},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.02040816326530612},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.03260869565217391},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.029850746268656716},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.030612244897959183},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.029411764705882353},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.030303030303030304},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.01764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.04054054054054054},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.04411764705882353},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.022123893805309734},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.041666666666666664}},"r":{"4":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10.013333333333334}}}}}}},"u":{"docs":{},"s":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"e":{"3":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"4":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"g":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.033707865168539325},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.02097902097902098},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.03636363636363636},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.021505376344086023},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.04},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.023529411764705882},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.04838709677419355},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.034482758620689655},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.015384615384615385},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.023529411764705882},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.011152416356877323},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.025},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.028037383177570093},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.0297029702970297},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.031914893617021274},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.033707865168539325},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.0425531914893617},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.021739130434782608},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.02197802197802198},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.013215859030837005},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.014018691588785047},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.038461538461538464},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.046153846153846156},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.028169014084507043},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":3.3455284552845526},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.01935483870967742},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022727272727272728},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":3.3738738738738734},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.023809523809523808},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.025974025974025976},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.030303030303030304},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":5.010309278350515},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":5.011764705882353},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.034722222222222224}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}},"s":{"docs":{},".":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904}}},",":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}}}}}}}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}}}}}}}},"r":{"2":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":2.5161290322580645},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":5.005102040816326}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}}}}}}}}}}}}}},"v":{"1":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}},"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.035502958579882},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":5.053763440860215},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":5.06},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.02040816326530612},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.022388059701492536}},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},":":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}}}}}},":":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012}}}}}}}}}}},")":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}},".":{"docs":{"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}}}}}}}}}}},"&":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608}}}}}},"n":{"1":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}},"e":{"docs":{},"t":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":5.015748031496063}}}}}},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},"g":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}},"n":{"docs":{},"s":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}},";":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},")":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703}},";":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}},"i":{"docs":{},"n":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"&":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.6965174129353233},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.0135135135135136},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":2.5127388535031847},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":5.01},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":2.504424778761062}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757}}}}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}}}}}}}},"i":{"docs":{},"x":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":2},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":2},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":3.333333333333333}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2.024793388429752},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":3.340425531914893},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.6897435897435895},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6881258941344777}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.015384615384615385},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}}}},":":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}},"i":{"docs":{},"t":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}},"i":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049}}}}},"o":{"docs":{},"k":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":3.345833333333333}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539}},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463}}}}}}}},"i":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":3.333333333333333},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":2.5035211267605635},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":2.5161290322580645},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":2.5215827338129495},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":3.3466666666666662},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":3.337050805452292},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":2.5060975609756095},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6744791666666665},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":5.008849557522124},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":3.341463414634146},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":3.3377976190476186},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":3.3390151515151514},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":3.336892052194543},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":3.33695652173913},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.004484304932735},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6763754045307442},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":1.674019607843137},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":2.0057471264367814},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6707152496626179},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":2.5105263157894737},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.0140845070422535},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":5.011494252873563},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":3.333333333333333},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":2.504830917874396},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":3.3380503144654083},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":3.3387387387387384},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":3.3375706214689265},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":3.339393939393939},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":2.5047846889952154},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":3.3418079096045195},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":5.009615384615385},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":3.341269841269841},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":3.3413978494623655},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":5.008333333333334},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":3.3407960199004973}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"?":{"docs":{},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"&":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"=":{"4":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":2.515625},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":2.020618556701031},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6725838264299802},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":5.009345794392523},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":3.3374485596707815},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":3.338568935427574},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.6712538226299694},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":3.341736694677871}},"/":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}}}}}}}}}}},"i":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}}}}}}}}},"d":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},"x":{"docs":{},"_":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.024242424242424242}},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"_":{"docs":{},"a":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}}},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"b":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"_":{"docs":{},"b":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"p":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":5.007518796992481},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":3.340768277571251},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":5.022988505747127}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}}}}}}},"y":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099}}}}}}}}}},")":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099}}},";":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}},"v":{"4":{"docs":{},"(":{"docs":{},"i":{"docs":{},"p":{"docs":{},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}},"6":{"docs":{},"(":{"docs":{},"i":{"docs":{},"p":{"docs":{},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}},"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}}}}}}}}},"d":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.034482758620689655},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.017793594306049824},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},"e":{"docs":{},"m":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.017699115044247787},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901}},"s":{"docs":{},".":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}}}}},"r":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":2.513215859030837},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":5.006329113924051},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":3.3405797101449273},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.034722222222222224}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}}}},"o":{"docs":{},"r":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}}}}}}},"_":{"docs":{},"b":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567}}},"f":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567}}}}}},"_":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245}},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245}}}},",":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}},"'":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":5.007299270072993}}},"y":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}},"v":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6729559748427671},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":5.00990099009901},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":2.0044642857142856},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}}}}}}},")":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},">":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}},".":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333}}},";":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"2":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}}},"docs":{}}}}},"g":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}},"p":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":3.3481481481481477}},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}},":":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}}}},",":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936}}}},"j":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.01675977653631285},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.01935483870967742},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.022988505747126436},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.01675977653631285},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}},".":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}},":":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909}}},"t":{"docs":{},"h":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512}}}},".":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}},"]":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992}}},"u":{"docs":{},"d":{"docs":{},"g":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}},"o":{"docs":{},"b":{"docs":{},".":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"l":{"1":{"docs":{},"/":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"2":{"docs":{},"/":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}},"e":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.03333333333333333}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.027972027972027972},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.02564102564102564},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.015625},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.023809523809523808},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.047619047619047616},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.018867924528301886},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.04780876494023904},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":3.3431855500821017},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":2.541095890410959},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":5.006711409395973}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.026785714285714284},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584}},"_":{"docs":{},"l":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285}},";":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}},"r":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}},";":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.01875},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},"(":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},")":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}}}}}}},"x":{"docs":{},")":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}},",":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}},")":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}},";":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":5.010752688172043},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":3.3441441441441437}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}},"i":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943}},"n":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943}},"k":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.00711743772242},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":2.517857142857143},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":2.5191387559808613},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.012711864406779662},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":1.691511387163561}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"t":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"e":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":5.007299270072993},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":3.340450771055753},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":3.3438045375218146}},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.0177514792899407},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.00355871886121},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":3.3717948717948714},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":2.526431718061674},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":2.52803738317757},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.0179372197309418},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01694915254237288},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":2.517857142857143},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":2.5150602409638556},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":2.5254777070063694},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":2.514354066985646},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":5.0095238095238095},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":5.004237288135593},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":1.691511387163561},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.02631578947368421},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.023809523809523808},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.025974025974025976},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}},".":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616}}}},"/":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}}}}}}}}},".":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.021505376344086023},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.026785714285714284},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.025477707006369428},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.023923444976076555},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.01904761904761905},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.012711864406779662},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204}},"e":{"docs":{},"(":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714}}}}}},"*":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644}}}}}}},":":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}},",":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}}}}}}},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}},")":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}},"m":{"docs":{},"]":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}},"r":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0211864406779661}},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}}}}}},")":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}},",":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}},"_":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}},"e":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}}}}}}}}},";":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644}}}}},"s":{"docs":{},"s":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":2.5384615384615383},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},"n":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.030927835051546393},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082}}}}}},"k":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}},")":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333}}}},"_":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}},"s":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}},",":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}},"t":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}},")":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}},";":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01834862385321101},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}},"p":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.02197802197802198}}},"a":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}},"w":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}},";":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}},"g":{"docs":{},"a":{"docs":{},"l":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"t":{"docs":{},"'":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":2.5144927536231885}},".":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693}}},"v":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":2.5220588235294117}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.016666666666666666},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4587601078167114}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},")":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}},")":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}},";":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112}}}},";":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}},",":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}},".":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125}}},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.03636363636363636}},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818}}}}},"t":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}},"k":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":5.020618556701031}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.03007518796992481},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.04878048780487805},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0163934426229506},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.010204081632653},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":3.3550724637681157},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":3.3541666666666665},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":3.3642611683848793},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":3.3497267759562837},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":3.3402777777777777},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":3.34032634032634},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":1.6728016359918199},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":3.3606060606060604},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":3.344202898550724},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":5.0344827586206895}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.019230769230769232}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}}},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},":":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}}},",":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},":":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},"s":{"docs":{},"t":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.674300254452926},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.006993006993007},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6860841423948218},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.6712538226299694}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}},"s":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"e":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"g":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}},"(":{"4":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"docs":{}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},",":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}}}},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}},"(":{"3":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}},"docs":{}}}},"p":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082}},"s":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}},";":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}}},"s":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082}},"i":{"docs":{},"t":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}},"h":{"docs":{},"s":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},".":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012}}}}}}},"i":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}},"n":{"docs":{},"d":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"1":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"h":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"2":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"docs":{}}}}}}}},"l":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}}},"r":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}},"u":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":5.006944444444445}},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}},"c":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304}},"a":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542}},"(":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}},")":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}},"b":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}},")":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}},";":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943}}},")":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},")":{"docs":{},";":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}},":":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}},"n":{"docs":{},"/":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"]":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}},"m":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},"n":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":3.349081364829396},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":2.5229007633587788}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"m":{"docs":{},"o":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}},";":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.02880658436213992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}},";":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"]":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},";":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}}}}},"s":{"docs":{},"]":{"docs":{},"[":{"docs":{},"t":{"docs":{},"]":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},";":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943}}}}}}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}}}}}}},"r":{"docs":{},"g":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.0059171597633134},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":5.010752688172043}},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}}}}}},"docs":{}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":5.032608695652174},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":3.348258706467661}}}},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}}}},"a":{"docs":{},"n":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.018518518518518517}},".":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259}}}}}}}},"o":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"z":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"'":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"v":{"docs":{},"e":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":2.510752688172043},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":5.023809523809524},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.03225806451612903}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693}}}}},"(":{"1":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"7":{"docs":{},")":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"n":{"docs":{},"e":{"docs":{},"y":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":2.5754716981132075}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}}},"2":{"docs":{},"]":{"docs":{},"[":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}}},"3":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306}}}},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}},"[":{"docs":{},"i":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"]":{"docs":{},"]":{"docs":{},";":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}}},"n":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}}},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"]":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}}},"l":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"]":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}}}}}},"h":{"docs":{},"]":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}},";":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.022058823529411766}}}},"(":{"2":{"5":{"6":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}},"docs":{}},"docs":{}},"docs":{},"{":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"{":{"docs":{},"\"":{"docs":{},"*":{"docs":{},"\"":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.01818181818181818},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.021897810218978103}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":5.018518518518518},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":3.3494623655913975},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.02127659574468085},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}},"docs":{}},"?":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.023076923076923},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":3.3487179487179484},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":1.6666666666666665},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":3.345238095238095},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":2.542105263157895},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":3.3921568627450975}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}}}}}},"docs":{},"m":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}},"docs":{}}}},"r":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}},"docs":{}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}}}}}},")":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285}}},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}},"i":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}},"x":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":2.53125},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":5.007407407407407},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.021739130434782608},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"i":{"docs":{},"m":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":5.016806722689076},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6864686468646863},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":5.0181818181818185},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":5.006451612903226},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.01056338028169014},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":3.3550724637681157},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":2.5125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":2.5074074074074075},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.01953125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":1.6813725490196076},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":5.017391304347826},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":3.349549549549549},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":2.518867924528302},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":2.5096618357487923},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}},".":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083}},"e":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"}":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.022900763358778626}}}}}}}}},";":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}},",":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"2":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588}}}}}}}}}}},"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}}}}}}}}}}}}}}},"{":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.023668639053254437},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}}}}}}}}}}},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.7114427860696515}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}}}}}}}}}}}},"y":{"docs":{},"b":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}},"z":{"docs":{},"e":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":10.013333333333334}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}},":":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}}},"docs":{}}}}},"i":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":5.011494252873563},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.016666666666666666},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"i":{"docs":{},"m":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":2.513986013986014},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":3.346320346320346},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":3.3563218390804597},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":3.350877192982456},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.6965174129353233},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":2.5073529411764706},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0555555555555554},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":3.3382352941176467}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}}}}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}},".":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083}},"e":{"docs":{},")":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}}}}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}}}}}},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},")":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}},";":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}},",":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}}}}}}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588}}}}}}}}}}}}}}},"{":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},"e":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}},"d":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}},"d":{"docs":{},"l":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.06349206349206349},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"'":{"6":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}},"9":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}},"docs":{}},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}},"s":{"docs":{},"s":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":5.02020202020202}}}}},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}}},":":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"1":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}}}}},"docs":{}}}}}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":3.348039215686274}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}},")":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}}},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.023809523809523808},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.031746031746031744},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015748031496062992}}},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}},"*":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.016129032258064516}},"&":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}}}}}}}}},"o":{"1":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.07228915662650602}},"p":{"1":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0364963503649635}}},"2":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802}}}},"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":5.010309278350515}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}}}}}}}}},"r":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}},"s":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}},":":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}}},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176}},"i":{"docs":{},"m":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662}}}}},")":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.01171875},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.022058823529411766},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.02608695652173913},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.016216216216216217},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}},";":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}},")":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}},";":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}}}},".":{"docs":{},"x":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}},"y":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.0166666666666666},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4398921832884095},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.013888888888888888},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}},"n":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}},"g":{"docs":{},":":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}},"(":{"1":{"docs":{},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":2.504424778761062}}}},"docs":{},"c":{"docs":{},"^":{"2":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}},"docs":{}}},"k":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}},"n":{"docs":{},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}},"l":{"docs":{},")":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"n":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":2.53125},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":3.351681957186544},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},"e":{"docs":{},"!":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245}}},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},"t":{"docs":{},"o":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755}}}},"c":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"b":{"docs":{},"j":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125}}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},":":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},".":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}}}}}}},"i":{"docs":{},"c":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":2.5121951219512195},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":3.391666666666666}}}}}},"u":{"docs":{},"t":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"e":{"docs":{},"r":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}},"p":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}},"e":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}},"d":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},"d":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}},"c":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}},"p":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.022900763358778626},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015748031496062992}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"h":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.0234375},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":1.6813725490196076},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":2.5193548387096776},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":2.0172413793103448},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":2.0089285714285716},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":5.073170731707317}},".":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}}}}}},":":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}},"c":{"docs":{},"h":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":5.0212765957446805},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":3.351515151515151}},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}}},":":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}}}}}}}}}}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121}}},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"_":{"docs":{},"p":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993}}},"s":{"docs":{},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.02654867256637168}}}},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},"i":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},"t":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":5.06},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":5.004761904761905},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":5.01010101010101}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02}}}}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.024896265560165973}},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"[":{"docs":{},"p":{"docs":{},"x":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}},"x":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215}},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.04854368932038835}},"e":{"docs":{},":":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669}}}}}}}}}}},")":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":3.339583333333333}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}}}}}}}}}}}}}}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}}}}}},";":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":2.5142857142857142}},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285}}}}},"a":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":3.3745704467353947},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":3.3661202185792347},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":5.0344827586206895},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":5.0227272727272725},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.681592039800995},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":5.031746031746032},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":5.01010101010101}},"i":{"docs":{},"c":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}}},",":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}}},"e":{"docs":{},"/":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}}}}}}}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}},"[":{"docs":{},"i":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}},":":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"g":{"docs":{},"e":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}},"s":{"docs":{},":":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"n":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}}}}}}}},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232}}}}},"l":{"docs":{},"e":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018}},".":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}},"c":{"docs":{},"k":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352}}}},"e":{"docs":{},"c":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.022222222222222223},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}},":":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}},"g":{"docs":{},"e":{"docs":{},"o":{"docs":{},"n":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}}}},"o":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}},"r":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"o":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}},"i":{"docs":{},"t":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}}},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}},":":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428}}}}}}},"b":{"docs":{},"l":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"t":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":2.5121951219512195},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":3.358333333333333}},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}}}}}}}}}}}},"r":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2.021897810218978},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6795422031473533},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6755162241887904}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.017167381974248927}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}}}},":":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}},")":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.017699115044247787}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":2.0061349693251533},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":3.333333333333333}}}}},"i":{"docs":{},"v":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":3.3544600938967135},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169}},"e":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.034482758620689655},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":2.5090361445783134}},"s":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}},".":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.009036144578313253}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}},".":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}}}}}}}}}},"p":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}},"w":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":5}},"(":{"2":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}},"docs":{},"x":{"docs":{},",":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"e":{"docs":{},"r":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.018404907975460124},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.03125},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.021897810218978103}}}}}},"o":{"docs":{},"l":{"docs":{},",":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"1":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"3":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"4":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"docs":{}}}}}}}}}}}}}}}}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"3":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"docs":{}}}}},"r":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.023809523809523808}},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.03125},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":3.3499999999999996},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}},".":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":2.5384615384615383}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":2},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"(":{"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.028846153846153848},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}},"j":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.028846153846153848},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612}}}},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364}},"n":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}}},"r":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}},"j":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.025806451612903226},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.022988505747126436}}},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609}}}}}}}}}}}}}}}}},";":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609}}},":":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}},")":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}}}}}}},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616}}}}}}},"v":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112}}}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}},")":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}},"s":{"docs":{},"s":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2.0272727272727273},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.6820512820512818},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6843657817109143}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}}}}}}}},":":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693}}},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}}}}}}}}}}}}}}},"d":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.033783783783783786},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.03680981595092025},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.026785714285714284},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.025477707006369428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.012711864406779662},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.018633540372670808}},";":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.017482517482517484},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}}}}}}},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387}},";":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}},":":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}},";":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622}}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}}}}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.017699115044247787}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}}}}},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}},"]":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612}}},":":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}}},"m":{"docs":{},"e":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517}},"s":{"docs":{},":":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517}}}}}},"c":{"docs":{},"e":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}}}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082}}}}},"docs":{},"i":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259}},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}},")":{"docs":{},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.023668639053254437}}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}},"}":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}},"[":{"docs":{},"h":{"docs":{},"]":{"docs":{},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},"j":{"docs":{},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},"}":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.019417475728155338},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.017857142857142856},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}},"z":{"docs":{},"z":{"docs":{},"l":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":3.350282485875706},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"s":{"docs":{},"h":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}}}},"t":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}}}}}}}}}},")":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.03278688524590164},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}},".":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}},"n":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}},"_":{"docs":{},"a":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}},"b":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}},")":{"docs":{},";":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}}}}},"y":{"docs":{},"e":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}}}},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}},"e":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":5.022988505747127}},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218}}}}}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}},";":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"m":{"docs":{},",":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.025}}},";":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}},"u":{"docs":{},"t":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":10.011904761904763},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":5.016666666666667},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":5.012987012987013},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904}}}},",":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}},".":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}}}}}}}}}}}}}}},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"k":{"docs":{},".":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357}}}}},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}},"x":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}},"y":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}},":":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}},"[":{"docs":{},"j":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.026881720430107527}},"]":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.027777777777777776},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.016129032258064516}}}},"i":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.022900763358778626},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}},"n":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":2.5144927536231885}}}}}},"b":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622}}}},"q":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.022900763358778626}},"p":{"docs":{},"s":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"u":{"docs":{},"a":{"docs":{},"d":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"&":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693}}}}},"docs":{}}}},"docs":{}}}}}}}},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"docs":{}}},"r":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"docs":{}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}},"o":{"docs":{},"d":{"docs":{"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}}}},"\"":{"0":{"0":{"0":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.014084507042253521},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517}}}}},"docs":{}}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}}}}},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}},"e":{"docs":{},"n":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":5.025316455696203}},"s":{"docs":{},",":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}}}}}}}}},";":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}}}}},"o":{"docs":{},"t":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}},";":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.024390243902439025}}}}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083}}}},":":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542}}}},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.04195804195804196},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.02564102564102564},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.030612244897959183},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.015625},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.03571428571428571},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.030612244897959183},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.028846153846153848},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.047619047619047616},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.04597701149425287},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.022222222222222223},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022727272727272728},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.012711864406779662},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}},"e":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.016483516483516484},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.02608695652173913},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},".":{"docs":{},"i":{"docs":{},"d":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405}}}},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}}},")":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}},";":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}},"&":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}}}}},";":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.02030456852791878},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},";":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939}}}}}},"1":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}},"docs":{}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}},"t":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.014084507042253521},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.025974025974025976},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.030534351145038167},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.022988505747126436},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.014388489208633094},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.03076923076923077},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.02112676056338028},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.01775147928994083},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.011152416356877323},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.022988505747126436},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.028985507246376812},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.01646090534979424},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.03669724770642202},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.024539877300613498},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.0163265306122449},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.02491103202846975},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.02197802197802198},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.02643171806167401},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.03164556962025317},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.018115942028985508},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.018691588785046728},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.027472527472527472},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.0379746835443038},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.027624309392265192},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.022900763358778626},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.04195804195804196},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.03211009174311927},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.02734375},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.013392857142857142},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.023148148148148147},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.019230769230769232},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.022123893805309734},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.02608695652173913},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.035398230088495575},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.016216216216216217},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.052884615384615384},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.02147239263803681},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.02976190476190476},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.017142857142857144},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.03553299492385787},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.05185185185185185},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.02358490566037736},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.01680672268907563},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.025974025974025976},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01694915254237288},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.03546099290780142},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.03636363636363636},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.02},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0211864406779661},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0364963503649635},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.021505376344086023},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.020833333333333332},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.028169014084507043},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.04040404040404041},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.020134228187919462},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.036585365853658534},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.022598870056497175},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.02654867256637168},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.024242424242424242},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}},"c":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.016216216216216217},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},"(":{"0":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.0189873417721519}}}}},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}}}}}}}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}},"e":{"docs":{},">":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}}}}}},"&":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}},"v":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":2.5034965034965033}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":5.007299270072993},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":5.019417475728155}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":3.3481116584564856},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":5.016806722689076}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}},".":{"docs":{},"i":{"docs":{},"d":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}},"c":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203}}},"r":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203}}},"x":{"docs":{},";":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},"y":{"docs":{},";":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},",":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},";":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306}}}}}}}},"s":{"docs":{},")":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}},";":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"a":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},",":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}}}}},")":{"docs":{},";":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":5.00507614213198},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0327868852459017},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":3.3606060606060604}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.009036144578313253}},"a":{"docs":{},"s":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}}}},"a":{"docs":{},"c":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}},"c":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}},"o":{"docs":{},"v":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":2.5256410256410255},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.0092024539877302},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":3.339583333333333},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}},"g":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":5.004016064257028}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":3.3387096774193545}}}}}}},"f":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}},")":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.018404907975460124},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.021897810218978103},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":2.514354066985646}},"e":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112}},";":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.02654867256637168},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0211864406779661}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}}}}}},")":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}},";":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644}}},",":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":5.010204081632653},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":5.02020202020202}},"e":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}}},"d":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}},";":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}},"o":{"docs":{},"m":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":2.5240963855421685},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.009036144578313253}},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}}}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.022123893805309734}},"(":{"docs":{},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521}}}}},"d":{"docs":{},"i":{"docs":{},"x":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"[":{"docs":{},"a":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}},"b":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}},",":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.015384615384615385},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":5.008620689655173},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0555555555555554},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":2.546153846153846},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.028169014084507}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.029197080291970802},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.017793594306049824},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.027472527472527472},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.022900763358778626},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.02097902097902098},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.02734375},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.029411764705882353},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.01935483870967742},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.017241379310344827},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.03636363636363636},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.015384615384615385},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.017167381974248927},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.02608695652173913},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.016216216216216217},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},";":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.014423076923076924},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258}}},":":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}},";":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.02027027027027027},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.015337423312883436},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.022598870056497175}}},".":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":5.010869565217392},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":3.3557213930348255}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}}}}}}}},":":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}}}}}}}}}},"docs":{}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}}}}}}}}}}},"w":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539}},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}},"m":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}},")":{"docs":{},";":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}},";":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}},"l":{"docs":{},"l":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.0229885057471266}}}},"b":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":5.011904761904762},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":3.3446969696969693},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":3.3415637860082303}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":5.010309278350515},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":5.023529411764706}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}}}}}}}}},"(":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}}}},"h":{"docs":{},"s":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},".":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}},"y":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}}}},"l":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}},"r":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}}},"u":{"docs":{},"n":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.024691358024691357},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}},")":{"docs":{},";":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258}},",":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}},"docs":{}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818}},",":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387}}}}}},"m":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}},"1":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}},"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.01818181818181818},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}},"s":{"docs":{},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}}},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"c":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},",":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666}}}}}}},"p":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992}}}}},".":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}},";":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}},"b":{"docs":{},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}},";":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}}}}}},"p":{"docs":{},"n":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}}}}}}}}}}}}},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}},")":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}}}}},"s":{"0":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}}}},"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}},":":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992}}},".":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}}}}}}}}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}},":":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}}}}}}}}}},":":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}},"[":{"docs":{},"i":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992}}}}},"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.02142857142857143},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.012244897959183673},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}},"c":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"e":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}},"s":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405}}}}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"1":{"docs":{},"[":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992}}}},"2":{"docs":{},"[":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}},"docs":{}}}}}}}}}}}}},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":5.024489795918368}}}}}}},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":5.010204081632653}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.02666666666666667},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}},";":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.01509433962264151}}}}}}}}}}}}}}},"r":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.03333333333333333}},"i":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":2.5231481481481484}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}}}}}}}}}},"t":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":3.337179487179487},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.022123893805309734}},")":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}}}}}}},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}},")":{"docs":{},";":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}},"a":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}}}}},"h":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}},";":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}}}}}}}}}}}},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}},"n":{"docs":{},"t":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}},"e":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}},"d":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.03260869565217391}}}},"l":{"docs":{},"l":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0327868852459017},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6822916666666665},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6785009861932938},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6792452830188678}},"_":{"1":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}},"2":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}},"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077}},"s":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125}}},",":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":2.537037037037037},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":2.510989010989011},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6819338422391856},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":2.506993006993007},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.0096153846153846},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6747638326585694},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.0337837837837838},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.0122699386503067},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":3.339285714285714},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":2.5210526315789474},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":5.010204081632653},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":2.5307692307692307},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.0140845070422535},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":5.0064935064935066},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":3.3418079096045195}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494}}}}}}}}}}}}}}},"q":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":3.344202898550724},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":2.5377358490566038},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":5.029126213592233}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},")":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}},":":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}},"b":{"docs":{},")":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}},":":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}},"s":{"docs":{},")":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}},":":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":3.3412073490813645},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":3.344202898550724},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":3.3418079096045195}},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}},"p":{"docs":{},"e":{"docs":{},".":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357}}}}}}},"o":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}}}}}}}}}}}}}},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.02247191011235955},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.01675977653631285},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.03636363636363636},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.03125},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.029850746268656716},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.02564102564102564},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.03278688524590164},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.03278688524590164},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.047619047619047616},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.04},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.023529411764705882},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.05128205128205128},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.014388489208633094},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.015384615384615385},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.037037037037037035},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.022988505747126436},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.03278688524590164},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.015625},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.02},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.017699115044247787},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.018691588785046728},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.019801980198019802},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.02127659574468085},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.02247191011235955},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.02127659574468085},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.022988505747126436},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01834862385321101},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.034482758620689655},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.045454545454545456},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.029850746268656716},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.019417475728155338},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.037037037037037035},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.03773584905660377},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.03076923076923077},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.028169014084507043},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.024390243902439025},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.031746031746031744},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015748031496062992},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.014598540145985401},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.01680672268907563},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.021505376344086023},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.05},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.03333333333333333},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.02197802197802198},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.03333333333333333},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.017857142857142856},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.020618556701030927},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.0379746835443038},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.02631578947368421},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.025974025974025976},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.021505376344086023},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.014925373134328358},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.013888888888888888},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.020202020202020204},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.020618556701030927},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.024390243902439025},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"v":{"1":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}},"docs":{},"e":{"docs":{},"c":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}}},"v":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544}},"e":{"docs":{},"n":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266}}}}}}}}}}}}},"r":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":5.010752688172043}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":5.008620689655173},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":2.551282051282051},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.0153846153846153},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6901960784313723},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.0236686390532546},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0555555555555554},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":2.546153846153846},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.0422535211267605},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":2.5127388535031847},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":5.012711864406779},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},",":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}},"&":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}},">":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"&":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.020618556701030927}},"&":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.02197802197802198},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.01818181818181818},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"&":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.03571428571428571},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.025},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}},">":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.03225806451612903},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"(":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}},"&":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.03225806451612903},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}},"(":{"9":{"docs":{},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.03225806451612903}}}},"docs":{},"n":{"2":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}},"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909}},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"c":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.018292682926829267},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}},",":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}},"n":{"docs":{},",":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}},"b":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}},"m":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}}},",":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"p":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}}}},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406}},">":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}},"&":{"docs":{},"&":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408}}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}}},"docs":{}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"y":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}}}}}}},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"t":{"docs":{},"l":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}},"n":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"y":{"docs":{},"]":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}},"o":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}}},",":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}},"l":{"docs":{},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}}},",":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}}},"w":{"docs":{},"i":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588}}}}}}}},"p":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},">":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992}}}}}}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}},"_":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}}}}},"h":{"docs":{},",":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408}}}}}}},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}},"i":{"docs":{},"v":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},">":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}},">":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},">":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},">":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}}}},"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},",":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}}},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.022988505747126436},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}},"&":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},",":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.02030456852791878},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}},"&":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}},":":{"docs":{},":":{"docs":{},"n":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}},"i":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},",":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},">":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}},",":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827}}}}}}}}}}}}},"c":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}}},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},";":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.021505376344086023},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.014925373134328358}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}},"docs":{}},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"1":{"0":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"1":{"0":{"docs":{},",":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}}}},"docs":{}},"docs":{}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"]":{"docs":{},")":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},")":{"docs":{},";":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}},"e":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288}},",":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"s":{"docs":{},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"c":{"docs":{},"k":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":5.011494252873563},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}}}}}}},":":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}},")":{"docs":{},",":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408}}}},",":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}},".":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.014598540145985401}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.021897810218978103}}}}}}}}},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}},"r":{"docs":{"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.015384615384615385},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.02112676056338028},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"u":{"docs":{},"r":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":2.020618556701031},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"e":{"docs":{},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":3.3661202185792347},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03896103896103896},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":5.008620689655173},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02631578947368421},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.027522935779816515},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.03260869565217391},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.020833333333333332},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.6965174129353233},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.017045454545454544},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":5.047244094488189},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":5.03265306122449},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.027777777777777776},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.016129032258064516},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":3.3603603603603602},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.043010752688172046},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.02702702702702703},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.03546099290780142},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.01818181818181818},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":3.377289377289377},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.05},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":5.031578947368421},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.013888888888888888},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.020134228187919462},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}}}},"s":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"&":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":2.510752688172043},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":2.5076335877862594},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}},")":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"'":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}},"docs":{},"l":{"docs":{},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}}}}}}},":":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.01818181818181818},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},"[":{"0":{"docs":{},"]":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{},"i":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}},"]":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.01875}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.01875}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}},":":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}}}}},"o":{"docs":{},"b":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":5.024390243902439}}}}}}}}}}}}},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}}}},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218}}}}}}},")":{"docs":{},";":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516}}}}}}},"i":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818}},")":{"docs":{},";":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}},"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609}}},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}}}}}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408}},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}}}}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}},"[":{"0":{"docs":{},"]":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}},"docs":{}},")":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}},";":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.014814814814814815},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},"c":{"docs":{},"k":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0163934426229506},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6822916666666665},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6844181459566074},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6792452830188678}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":5.011363636363637},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":3.341463414634146}},"g":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364}}}}}}}}}}}}}}},"p":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},"e":{"docs":{},"p":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.015384615384615385},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.7114427860696515},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.018072289156626505},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},"s":{"docs":{},".":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419}}}}}}},"m":{"docs":{},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},")":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},";":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}},",":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":5.008849557522124}}}}}}}},"i":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}},"z":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":2.520979020979021},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6864686468646863},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.04},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.017699115044247787},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"docs":{}},")":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}},":":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}},"_":{"1":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}},"2":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}},"docs":{},"a":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},"b":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.02197802197802198},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01762114537444934},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.018691588785046728},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"i":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}},"d":{"docs":{},"e":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.01509433962264151}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}},"b":{"docs":{},"l":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}},".":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}}}}}},"g":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"f":{"docs":{},"i":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":5.048780487804878}}},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":5.009615384615385},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":3.3445692883895126},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":3.340909090909091},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":2.520408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":2.527972027972028},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6963696369636962},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":5.036363636363636},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":3.3518518518518516},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":2.517605633802817},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":2.5384615384615383},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":2.5144927536231885}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616}}}}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}}}}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306}}}}}}}}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818}}}}}}}}}}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}},".":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":5.005586592178771},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":5.006451612903226}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0327868852459017},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":3.3398268398268396},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":3.347222222222222},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":3.3579234972677594},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":3.34032634032634},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}}}}}}}},".":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}}},",":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":3.3550724637681157},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":3.353951890034364},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":3.3402777777777777},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":1.6789366053169732},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":3.3606060606060604},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":5.011363636363637}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909}}}}}}}}}}},"'":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464}}},")":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}},"t":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":10.013157894736842},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":5.009615384615385}},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105}}}}}}}}},".":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":5.017391304347826},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":3.3441441441441437}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":5.019230769230769},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":3.3445692883895126},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":5.016759776536313},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":3.3636363636363633},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":2.5510204081632653},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":2.534965034965035},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.7062706270627062},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":3.3518518518518516},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":2.5211267605633805},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":5.044776119402985},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.03225806451612903},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.030927835051546393},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6784313725490194},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.0449438202247191},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":5.01063829787234},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.0689655172413794},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":5.028301886792453},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":2.514018691588785},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.0269058295964126},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.0234375},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":1.7107843137254901},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":2.5258064516129033},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":2.0229885057471266},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":2.017857142857143},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":5.007936507936508},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":3.3571428571428568},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":3.3494623655913975},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.029411764705882353}},"(":{"0":{"docs":{},".":{"0":{"docs":{},")":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}},"docs":{}},")":{"docs":{},",":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}},"docs":{},"i":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352}}},")":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285}},":":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}},"n":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}},"/":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936}}}}}}}}}}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.022058823529411766},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.01935483870967742},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.017241379310344827},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.013392857142857142},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},")":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909}},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02727272727272727}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}},"[":{"docs":{},"n":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}},"docs":{},"i":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}},"]":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.017793594306049824}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}}}}},"n":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894}}}}},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}},"e":{"docs":{},"r":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":3.3703703703703702}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":3.3412073490813645}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}},":":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}},"c":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.02147239263803681},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.015060240963855422}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.028368794326241134}}}}}}},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834}}}}}}}}},":":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":3.333333333333333}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":5.004016064257028}},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":5.021505376344086}}}}}}},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}},"p":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.012244897959183673}},"a":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":3.3431372549019605}}},"c":{"docs":{},"e":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}},"r":{"docs":{},"s":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":3.3774509803921564}}}}},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"i":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},"c":{"docs":{},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":5.031578947368421}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}}},"1":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}}},"2":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}},":":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}}},"3":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}},"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152}},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}},"l":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306}}}}}}},"i":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.022321428571428572}},"]":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012}},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.024154589371980676},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.044642857142857144}}}}},"j":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}},",":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}}}}}},")":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}},":":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112}},"e":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}},"s":{"docs":{},"t":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.0352941176470587},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.023076923076923},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6784313725490194}}}}}}}}},"k":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}},"i":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":3.3405797101449273}}},"y":{"docs":{},".":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}}}}},"j":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}},";":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}}}}}},"i":{"docs":{},",":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},";":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":3.3412073490813645},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541}},"n":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"s":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.012244897959183673}}},"a":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}},":":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}},"m":{"docs":{},"e":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"b":{"docs":{},"'":{"docs":{},"'":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}},":":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"s":{"docs":{},"e":{"docs":{},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}},"(":{"docs":{},"o":{"docs":{},"p":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}},"v":{"docs":{},"n":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"s":{"docs":{},"b":{"docs":{},"a":{"docs":{},"d":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}}}}},"x":{"docs":{},")":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":10.015873015873016},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":5.011494252873563}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":5.00796812749004},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":3.358333333333333}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}}}}}}}}}}}}}}}},";":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"t":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.017045454545454544},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.03125},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"r":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}},"c":{"docs":{},"k":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}},"e":{"docs":{},"(":{"docs":{},"n":{"1":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}},"docs":{}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436}}},"r":{"docs":{},"s":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2.0090909090909093},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2.0082644628099175},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2.0072992700729926},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.011111111111111},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4361185983827491},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.678205128205128},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6795422031473533},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6710914454277284}},"a":{"docs":{},"l":{"docs":{},"/":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}}}}},".":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}}}},"i":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}},"s":{"docs":{},".":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}}}}}},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}},"e":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":10.022598870056497}},"s":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}},",":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.0199203187250996}}},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},"[":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},"]":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}},"(":{"docs":{},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}},".":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}},"u":{"docs":{},"e":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},";":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.021897810218978103},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.0189873417721519},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.025},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.021897810218978103},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584}}},")":{"docs":{},";":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.016483516483516484}}}}}},"e":{"docs":{},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":5.003703703703704},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":2.5246913580246915},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2.0272727272727273},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2.024793388429752},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2.021897810218978},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.0106761565836297},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":2.510989010989011},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":3.3459915611814344},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":3.3497267759562837},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":2.51875},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":3.3443830570902393},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":2.514705882352941},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":2.5074074074074075},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6819338422391856},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.006993006993007},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.7055016181229772},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.6712538226299694},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":2.5104895104895104},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.01171875},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":1.6813725490196076},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":2.5193548387096776},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":2.0172413793103448},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":2.013392857142857},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":2.518181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":2.514705882352941},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":2.512448132780083},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.0166666666666666},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4398921832884095},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":2.509259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.6858974358974357},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6881258941344777},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6799410029498523},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":5.017699115044247},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.0096153846153846},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6747638326585694},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.0135135135135136},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.0061349693251533},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.0120967741935485},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":3.3504761904761904},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":1.6853002070393373},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":3.34037558685446},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":3.3382352941176467}},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}},"/":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}},":":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.03546099290780142},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.03816793893129771},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.04895104895104895},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.03211009174311927},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02727272727272727},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.013888888888888888},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.016216216216216217},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.02702702702702703},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}},":":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}},"*":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.01834862385321101},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258}},"&":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049}}}},",":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}}}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}}}}}}}}}}},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521}}},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}},")":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0327868852459017},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6822916666666665},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6785009861932938},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6792452830188678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022727272727272728},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":3.351515151515151},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":5.010204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},"s":{"docs":{},".":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901}}},":":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.01818181818181818}}},",":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}},")":{"docs":{},";":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}},":":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}}}},";":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":3.3448275862068964},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}},"s":{"docs":{},"/":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.0229885057471266},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":5.028301886792453},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.019230769230769232},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.023809523809523808},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}},".":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}}}}}}}}}},":":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936}}},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.020161290322580645},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516}}},")":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.01935483870967742},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.017241379310344827},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.014423076923076924},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.017857142857142856},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516}},";":{"docs":{"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.01935483870967742},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.017241379310344827},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.028846153846153848},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904}}},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}}},"i":{"docs":{},"l":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},"b":{"docs":{},"l":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}},"s":{"docs":{},"k":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}},"h":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},",":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}}}},"u":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}},"s":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}},"docs":{}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"2":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}}}}}}}}}},"docs":{}}}}}}}}},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}},"docs":{}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.028985507246376812}}}}}},"p":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}}}},"d":{"docs":{},"o":{"docs":{},":":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}},"s":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}},";":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}},".":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}}}}}}}}}}},"o":{"docs":{},".":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},".":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"&":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}},"w":{"docs":{},"o":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":2.532258064516129},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6784313725490194},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":3.357723577235772},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}},"(":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}}}}}}}}}},",":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}},".":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.01171875},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}}}}}},",":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.027522935779816515},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.01171875},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}},"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}}}}},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}},"p":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245}},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"s":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245}},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.0189873417721519},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}},"(":{"0":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}},",":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}},"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},":":{"docs":{},":":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}}}}}}},":":{"docs":{},":":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}}},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406}}}},",":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}},"l":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}},"r":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}}}},":":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}},"m":{"docs":{},"p":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},".":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}},"(":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},")":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}}}},")":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},";":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}},"u":{"docs":{},".":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"p":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.019230769230769232},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}}},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},":":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}}},")":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},"}":{"docs":{},";":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}},":":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":2.508298755186722}},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}},"s":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.018691588785046728},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.019801980198019802},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},"e":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"9":{"docs":{},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}},"docs":{}},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"9":{"docs":{},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}},"docs":{}},")":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}},";":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"(":{"9":{"docs":{},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}},"docs":{}},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023}}}}}}}},"d":{"docs":{},"(":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}}},",":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.025}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666}}}}}}},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":2.5246913580246915},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":3.3459915611814344},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}},"o":{"docs":{},"n":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.023529411764706}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364}}}}}},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.027777777777777776},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}},"o":{"docs":{},"d":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}},"*":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}},"&":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},">":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":3.3466666666666662},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":3.3888888888888884}}}}}},"v":{"1":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}},":":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}},"2":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}},":":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}},"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":5.01063829787234},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.014285714285714285}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993}}}}}},"l":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}},"u":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.018518518518518517},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.02654867256637168},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.019230769230769},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6788124156545208},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.02962962962962963},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.047058823529411764},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"e":{"docs":{},")":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},")":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}}},".":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}},":":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},"s":{"docs":{},".":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}}}},":":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}},"[":{"docs":{},"i":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285}},"]":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},";":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}}},"n":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857}}},"j":{"docs":{},"]":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}}}}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},")":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}},")":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357}}}},":":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.017857142857142856},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.018633540372670808}}},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}},"x":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}},",":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}},"i":{"docs":{},"d":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":2.5054945054945055},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":5.00561797752809},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":3.3407407407407406},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":3.358333333333333},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":5},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":3.3499999999999996},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":3.368544600938967}},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519}},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}},"e":{"docs":{},"c":{"2":{"docs":{},"d":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"2":{"docs":{},"d":{"docs":{},")":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}},"docs":{}}}}},")":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}},";":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}},"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}},"t":{"docs":{},"o":{"docs":{},"r":{"2":{"docs":{},"d":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.06382978723404255}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}}}}}}}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.04918032786885246},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.017699115044247787},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":3.354609929078014},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},">":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.04285714285714286},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353}},"&":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}},"(":{"docs":{},"n":{"2":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992}}},"docs":{},",":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}}}}}}}},"&":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}}}}}}}},",":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"s":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406}}},":":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":3.3619047619047615}},".":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}}}}}}}}}}},"i":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.01509433962264151}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.0166666666666666}},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"i":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":5},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"docs":{}}}},"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"0":{"0":{"0":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}}}}}}},";":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}},"i":{"docs":{},"i":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},":":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}},"[":{"docs":{},"i":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}},"]":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}}}}}}}}}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"i":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"(":{"0":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}},"docs":{},"b":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}},"y":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},",":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}}}}},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.014084507042253521},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},",":{"docs":{"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}}}},"&":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}},"2":{"docs":{},")":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}},"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},")":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}}}},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"a":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},")":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},",":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},")":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}},"i":{"docs":{},"r":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374}}},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}},"z":{"docs":{},"e":{"docs":{},",":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}},"&":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.022988505747126436},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.02197802197802198},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.022222222222222223},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.01875},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.025974025974025976},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}},"s":{"1":{"docs":{},",":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"2":{"docs":{},",":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"3":{"docs":{},")":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}},"docs":{},")":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},",":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}}}},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},")":{"docs":{"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}},"e":{"docs":{},"q":{"docs":{},"a":{"docs":{},",":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}},"b":{"docs":{},")":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}},"s":{"docs":{},")":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}}},")":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}},"b":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}},",":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}},"o":{"docs":{},"k":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}},")":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}}}}},")":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},",":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}}},"h":{"docs":{},")":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}},"g":{"docs":{},",":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},")":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}},",":{"docs":{"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}}},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}}}}}},"v":{"docs":{},")":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894}}},",":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}}}}}},"l":{"docs":{},",":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}},")":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}},",":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.01486988847583643},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}},")":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112}}}},"1":{"4":{"4":{"0":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},"docs":{}},"docs":{}},"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.01764705882352941},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.01858736059479554},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}},")":{"4":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}},"docs":{}}},"2":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125}}},")":{"2":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}},"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}}},"3":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.011152416356877323}}}},"4":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"5":{"docs":{},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"6":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"7":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},"i":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.01675977653631285},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.018292682926829267},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.03409090909090909},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.032520325203252036},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.02197802197802198},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.02631578947368421},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353}},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},"]":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"_":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}},"w":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"[":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}}}},"t":{"docs":{},"_":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}},"f":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}},"+":{"1":{"docs":{},")":{"docs":{},"t":{"docs":{},"h":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285}}}}}},"docs":{}},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085}}}}}}}}}}}}},"d":{"docs":{},"x":{"docs":{},"_":{"docs":{},"p":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121}}}}}}},"l":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818}}}}},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}},"h":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}},"x":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304}}}}}}},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}},")":{"3":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"l":{"docs":{},")":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285}}}},"r":{"docs":{},")":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}}}}}},".":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}},"f":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644}},")":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}},"n":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}},"_":{"docs":{},"t":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}}},"a":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}},"&":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},"&":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}},"r":{"docs":{},"]":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"l":{"docs":{},"]":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521}}}},"j":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669}}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},")":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":3.3468468468468466}}}}}},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"docs":{}}}}},"e":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.01056338028169014},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125}}}},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}},"m":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285}},"i":{"docs":{},"n":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}},".":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}},"_":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083}}}}}},"u":{"docs":{},"t":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"d":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}}}}}}}}}},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}},"n":{"1":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}},"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"u":{"docs":{},"m":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.013888888888888888},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"_":{"docs":{},"c":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},"r":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},"p":{"docs":{},"r":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}},"i":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}},")":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},")":{"docs":{},";":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}}}}}}}}}}},"t":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.01818181818181818}}}}}}}}}}}}}},"o":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}},"d":{"docs":{},"e":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.01509433962264151},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204}}}}},"^":{"2":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}}},"docs":{}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"_":{"2":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}},"docs":{}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901}}}}}},"b":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},"g":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.016483516483516484},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.013215859030837005},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.014018691588785047},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.013452914798206279},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"]":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{},"_":{"docs":{},"s":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}}}}}}}},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}}}}}}}}}},"o":{"docs":{},"k":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}}}}}}}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}},"j":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406}}},"s":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}}}},"2":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}}}},"docs":{},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703}},"[":{"docs":{},"i":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285}}}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993}}}}}}}}}},"c":{"docs":{},"c":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}}}}}},")":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}}}}}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}},"n":{"docs":{},")":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"_":{"docs":{},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},")":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}}}}}}}}},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}}}}}},"r":{"docs":{},"[":{"docs":{},"s":{"1":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454}}}},"docs":{}},"i":{"docs":{},"]":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218}}}},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}}}},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"p":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"j":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}}}}}}},"d":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01834862385321101},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},"v":{"docs":{},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.024390243902439025}}},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}}},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"n":{"docs":{},"b":{"docs":{},"r":{"docs":{},"]":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}},"r":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}},")":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}}}}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993}}},".":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}},")":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}},"t":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}},"c":{"docs":{},".":{"docs":{},"e":{"docs":{},"v":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}},"f":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{},"x":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306}}}}}},"_":{"docs":{},"t":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}},"a":{"docs":{},"c":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}},"h":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.025}},"a":{"docs":{},"r":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}}}},"_":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}},")":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.012711864406779662},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.02040816326530612},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.014925373134328358},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"i":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},",":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.03067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.012711864406779662},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}},")":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.009036144578313253}}},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}}}}}},"l":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}},"r":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}},")":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}},"f":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827}}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}},"g":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"_":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}},"!":{"docs":{},"s":{"docs":{},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}},")":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{},")":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"r":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}},"x":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112}}}},"'":{"0":{"docs":{},"'":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{}},"(":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.016483516483516484},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}}}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"_":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}}}}}}},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},")":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}},")":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}},")":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.010869565217391304}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}},"m":{"docs":{},"p":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}}}}}}}}}},"k":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513}}}}}},"p":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.023622047244094488}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}},"x":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}}},"e":{"docs":{},"d":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894}}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}},"o":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714}}}}},"o":{"docs":{},"l":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"2":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"docs":{}}}}}},"'":{"0":{"docs":{},"'":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"docs":{}},"w":{"docs":{},")":{"2":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"docs":{}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}},"'":{"0":{"docs":{},"'":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"docs":{}},"n":{"docs":{},"x":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}},"x":{"docs":{"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.04597701149425287},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015748031496062992},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357}},",":{"docs":{},"n":{"docs":{},")":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":5}}}}}},")":{"docs":{},":":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.020833333333333332}}}},"h":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}},"*":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.08653846153846154},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.0898876404494382},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.1005586592178771},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.10606060606060606},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.05102040816326531},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.11888111888111888},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.09900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.03636363636363636},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0967741935483871},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.05555555555555555},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.06690140845070422},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.078125},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.04477611940298507},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.023622047244094488},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.10869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.038461538461538464},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.03278688524590164},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.030612244897959183},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.11038961038961038},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.06451612903225806},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.02142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.031914893617021274},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.041237113402061855},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.047619047619047616},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.06},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.1206896551724138},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.03529411764705882},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.04838709677419355},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.10344827586206896},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.04597701149425287},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.07258064516129033},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.08633093525179857},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.4482758620689655},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.15126050420168066},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.16296296296296298},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.023076923076923078},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.08235294117647059},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0410958904109589},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.12},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.05555555555555555},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.04929577464788732},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.09022556390977443},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.05917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.05204460966542751},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.04417670682730924},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.13846153846153847},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.022988505747126436},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.09166666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.03278688524590164},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.3359375},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.1301775147928994},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.0880503144654088},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.07},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.07079646017699115},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.09345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.0891089108910891},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.07446808510638298},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.07865168539325842},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.06382978723404255},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.058823529411764705},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.08490566037735849},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.07954545454545454},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.10569105691056911},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.1388888888888889},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.09876543209876543},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.09178743961352658},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.20089285714285715},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.07142857142857142},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.08522727272727272},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.09876543209876543},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.125},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.08771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.027522935779816515},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.07608695652173914},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.125},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.08247422680412371},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.08196721311475409},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.09722222222222222},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.04895104895104895},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.09090909090909091},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.034482758620689655},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.045454545454545456},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.10227272727272728},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.07874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.08163265306122448},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.08333333333333333},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.06989247311827956},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.1386861313868613},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.08896797153024912},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.1256544502617801},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.11818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.10743801652892562},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0948905109489051},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.09219858156028368},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.18861209964412812},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.0989010989010989},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.09251101321585903},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.06382978723404255},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.05063291139240506},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.050724637681159424},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.08878504672897196},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.053811659192825115},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.07142857142857142},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.08227848101265822},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.07377049180327869},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.09375},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.12154696132596685},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.09558823529411764},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.0962962962962963},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.13740458015267176},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.1258741258741259},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.13592233009708737},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.08256880733944955},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.15034965034965034},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.11328125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.09558823529411764},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.09032258064516129},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.08045977011494253},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.04017857142857143},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.12727272727272726},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.16176470588235295},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.12448132780082988},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.10555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.13962264150943396},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.125},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.07692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.09871244635193133},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.035398230088495575},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.034782608695652174},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.11504424778761062},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.07567567567567568},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.07692307692307693},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.08502024291497975},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.10810810810810811},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.046012269938650305},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.06451612903225806},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.11428571428571428},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.017857142857142856},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.030612244897959183},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.09022556390977443},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.038461538461538464},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.037037037037037035},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.03773584905660377},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.046153846153846156},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.04225352112676056},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.036585365853658534},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.047619047619047616},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.09444444444444444},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.07741935483870968},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.09090909090909091},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.11023622047244094},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.08695652173913043},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.15337423312883436},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.021897810218978103},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.04310344827586207},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.09142857142857143},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.07303370786516854},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.07106598984771574},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.075},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.08018867924528301},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.06722689075630252},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.0967741935483871},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.05405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.01948051948051948},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.012711864406779662},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.02127659574468085},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.01818181818181818},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.08764940239043825},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.05},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.03333333333333333},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.03296703296703297},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.05},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.11333333333333333},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0759493670886076},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.11607142857142858},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.12048192771084337},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.09554140127388536},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.10526315789473684},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.11428571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.059322033898305086},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.11180124223602485},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.07407407407407407},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.02666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.07216494845360824},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.025423728813559324},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.02631578947368421},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.023809523809523808},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.023809523809523808},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.016666666666666666},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.03896103896103896},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.048484848484848485},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.10752688172043011},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.11},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.14492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.08163265306122448},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.10869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.12686567164179105},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.030612244897959183},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.013888888888888888},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.07746478873239436},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.058823529411764705},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.04040404040404041},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.09411764705882353},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.08108108108108109},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.06711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.024390243902439025},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.058823529411764705},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.03389830508474576},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.06637168141592921},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.041666666666666664}},"/":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.021505376344086023},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.034482758620689655},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.014388489208633094},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.015625},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.0189873417721519},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.016574585635359115},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.019417475728155338},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.01171875},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.022058823529411766},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.016666666666666666},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.018518518518518517},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.014423076923076924},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.017142857142857144},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.014150943396226415},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.021505376344086023},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.017857142857142856},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.014285714285714285},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.020618556701030927},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.021505376344086023},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.021739130434782608},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.015306122448979591},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.022388059701492536},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.022123893805309734},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}},";":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},";":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}}}},"*":{"docs":{},"*":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}},"*":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.014925373134328358}},"*":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}},"*":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}},"*":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406}},"*":{"docs":{},"*":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"*":{"docs":{},"*":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},"*":{"docs":{"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"(":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556}}},"@":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}}}}}}},"=":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}},",":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}}},"+":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.0673076923076923},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.03910614525139665},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.022727272727272728},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.025806451612903226},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.03125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015267175572519083},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.02857142857142857},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.023668639053254437},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.018867924528301886},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.03},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.02654867256637168},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.028037383177570093},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.0297029702970297},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.031914893617021274},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.0425531914893617},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.022988505747126436},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.056818181818181816},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.04065040650406504},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.05555555555555555},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.022727272727272728},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.0411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.04597701149425287},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.043859649122807015},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.03260869565217391},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.047244094488188976},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.020833333333333332},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.030927835051546393},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.02097902097902098},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.02727272727272727},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.04477611940298507},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.017045454545454544},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.047244094488188976},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.08540925266903915},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.031413612565445025},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.013452914798206279},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.01875},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.016574585635359115},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.022058823529411766},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.022222222222222223},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0390625},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.017857142857142856},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.018518518518518517},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.019230769230769232},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.022123893805309734},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.021621621621621623},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.027777777777777776},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.05511811023622047},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.06763285024154589},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.03680981595092025},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.025},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.025210084033613446},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.04242424242424243},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.030303030303030304},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.030927835051546393},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.029411764705882353},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.04697986577181208},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"+":{"docs":{},"l":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},";":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}},"n":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.021739130434782608}}}}}},"r":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"[":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306}}}}}}},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}},"c":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"t":{"docs":{},";":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653}}}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"_":{"docs":{},"t":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},"]":{"docs":{},";":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082}}}}}}}},"s":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}},"p":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304}}}}}}}}}},"i":{"docs":{},";":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"[":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"_":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}}}}}},"d":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}}},"j":{"docs":{},";":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505}}}},"d":{"docs":{},"p":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852}}},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"s":{"docs":{},"[":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},";":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}},"=":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"*":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}},"(":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}},"+":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}}}}},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},"/":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.022727272727272728},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.09032258064516129}},".":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.028985507246376812},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.009036144578313253},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.02247191011235955},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.022321428571428572},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.023622047244094488}}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},".":{"docs":{},".":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},".":{"docs":{},".":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}}}}}}}}}}},"/":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.040740740740740744},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.03202846975088968},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.021505376344086023},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.030927835051546393}},"*":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.021505376344086023},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.034482758620689655},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.0189873417721519},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}},"*":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.02247191011235955},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.01935483870967742},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.014388489208633094},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.015625},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.02},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.017699115044247787},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.018691588785046728},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.019801980198019802},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.02127659574468085},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.02247191011235955},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.02127659574468085},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.01818181818181818},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.016574585635359115},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.01171875},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.016666666666666666},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.018518518518518517},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.014423076923076924},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.008097165991902834},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015748031496062992},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.012048192771084338},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.019138755980861243},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.014285714285714285},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.020618556701030927},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.021505376344086023},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.021739130434782608},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.015306122448979591},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.022388059701492536},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}},"/":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.02247191011235955},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.021505376344086023},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.03305785123966942},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.04597701149425287},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.03333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.0163265306122449},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.07142857142857142},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.06607929515418502},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.0189873417721519},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.0514018691588785},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.02074688796680498},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.014423076923076924},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.015337423312883436},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.03296703296703297},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.015060240963855422},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.01910828025477707},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.023923444976076555},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.012711864406779662},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.030303030303030304},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.05194805194805195},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.041237113402061855},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.024390243902439025},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.022598870056497175},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.035398230088495575},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}},"\\":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125}}},"_":{"docs":{},"_":{"docs":{},"\\":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125}}}}},":":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},"=":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.01675977653631285},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.018292682926829267},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.03409090909090909},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.032520325203252036},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.02097902097902098},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.02197802197802198},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.02631578947368421},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353}}},"=":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.09615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.02247191011235955},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0670391061452514},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.045454545454545456},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.061224489795918366},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.04195804195804196},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.06930693069306931},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.05454545454545454},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.03225806451612903},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.09259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.07394366197183098},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.03125},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.04477611940298507},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.07086614173228346},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.07692307692307693},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.06557377049180328},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.07142857142857142},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.08196721311475409},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.032467532467532464},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.03225806451612903},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.030534351145038167},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.03305785123966942},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.04285714285714286},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.05319148936170213},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.07142857142857142},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.06},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.034482758620689655},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.047058823529411764},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.07692307692307693},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.06451612903225806},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.04310344827586207},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.02877697841726619},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.014778325123152709},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.04201680672268908},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.022222222222222223},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.03076923076923077},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.03529411764705882},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.037037037037037035},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.02112676056338028},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.06015037593984962},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.05917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.05263157894736842},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.040892193308550186},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.0321285140562249},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.0380952380952381},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.07142857142857142},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.015384615384615385},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.05747126436781609},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.06707317073170732},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.025},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.06557377049180328},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.03125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.07100591715976332},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.03773584905660377},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.04},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.035398230088495575},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.037383177570093455},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.039603960396039604},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.0425531914893617},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.033707865168539325},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.0425531914893617},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.058823529411764705},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.05747126436781609},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.02830188679245283},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.056818181818181816},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.04878048780487805},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.037037037037037035},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.022321428571428572},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.05952380952380952},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.028409090909090908},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.07407407407407407},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.041666666666666664},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.05747126436781609},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.03508771929824561},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.045871559633027525},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.043478260869565216},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.05511811023622047},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.034722222222222224},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.030927835051546393},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.05737704918032787},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.06944444444444445},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.09090909090909091},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.04294478527607362},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.02727272727272727},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.06521739130434782},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.05172413793103448},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.06818181818181818},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.04477611940298507},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.022727272727272728},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.047244094488188976},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.04081632653061224},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.046296296296296294},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.05913978494623656},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.029197080291970802},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.05338078291814947},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.03664921465968586},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.03636363636363636},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.06611570247933884},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.043795620437956206},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.05673758865248227},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.028469750889679714},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.02197802197802198},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.022026431718061675},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.0379746835443038},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.03271028037383177},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.04035874439461883},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.03296703296703297},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.04430379746835443},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.05625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.03867403314917127},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.03676470588235294},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.037037037037037035},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.022900763358778626},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.03496503496503497},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.019417475728155338},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.05045871559633028},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.038461538461538464},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.046875},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.051470588235294115},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.025806451612903226},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.028735632183908046},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.07142857142857142},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.045454545454545456},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.051470588235294115},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.04149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.06111111111111111},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.026415094339622643},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.027777777777777776},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.03461538461538462},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.030042918454935622},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.030973451327433628},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.043478260869565216},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.02654867256637168},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.06486486486486487},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.03365384615384615},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.06477732793522267},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.06756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.08588957055214724},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.036290322580645164},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.07738095238095238},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.06315789473684211},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.07142857142857142},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.05263157894736842},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.07692307692307693},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.05555555555555555},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.05660377358490566},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.046153846153846156},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.04225352112676056},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.07317073170731707},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.07936507936507936},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.05747126436781609},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.06111111111111111},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.03225806451612903},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.030303030303030304},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.03937007874015748},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.03864734299516908},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.03125},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.043795620437956206},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.04},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.028089887640449437},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.04054054054054054},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.05583756345177665},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.037037037037037035},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.058333333333333334},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.02830188679245283},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.025210084033613446},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.021505376344086023},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.016216216216216217},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.05844155844155844},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.059322033898305086},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.05673758865248227},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.03636363636363636},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.05},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.06593406593406594},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.06666666666666667},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.03164556962025317},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.08928571428571429},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.05421686746987952},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.07006369426751592},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.06220095693779904},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.08571428571428572},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.1016949152542373},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.055900621118012424},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.037037037037037035},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.05333333333333334},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.030927835051546393},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.059322033898305086},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.043010752688172046},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.01875},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.029197080291970802},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.039473684210526314},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.028846153846153848},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.03333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.04242424242424243},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.043010752688172046},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.06},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.025510204081632654},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.03260869565217391},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.014925373134328358},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.04081632653061224},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.06796116504854369},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.034722222222222224},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.02112676056338028},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.06862745098039216},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.040268456375838924},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.07352941176470588},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.04519774011299435},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.05309734513274336},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.05555555555555555}},">":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0111731843575419},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.01935483870967742},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.018518518518518517},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.01486988847583643},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.01606425702811245},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.0163265306122449},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.028469750889679714},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.04716981132075472},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"=":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.014084507042253521},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.029850746268656716},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.01948051948051948},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.01652892561983471},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.02142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.023076923076923078},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.02112676056338028},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.022988505747126436},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.024154589371980676},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.023622047244094488},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.01639344262295082},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.024489795918367346},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.027777777777777776},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.04838709677419355},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0364963503649635},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.010869565217391304},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.015337423312883436},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.023809523809523808},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.03932584269662921},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.01948051948051948},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01694915254237288},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.02127659574468085},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.030303030303030304},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.03164556962025317},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.020618556701030927},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.020202020202020204},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.04375},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.02631578947368421},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.028846153846153848},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.023809523809523808},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.023809523809523808},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.024193548387096774},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.023809523809523808},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.025},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.02040816326530612},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.021739130434782608},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.04861111111111111},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.024509803921568627},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.020202020202020204},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}},"@":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.033707865168539325},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.029850746268656716},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.021739130434782608},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.02564102564102564},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.021505376344086023},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.04},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.023529411764705882},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.015384615384615385},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.01764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.037037037037037035},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.011152416356877323},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.02},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.02654867256637168},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.028037383177570093},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.019801980198019802},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.02127659574468085},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.02247191011235955},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.02127659574468085},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01834862385321101},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.023622047244094488},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.022900763358778626},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.02097902097902098},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.02912621359223301},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.013761467889908258},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.028846153846153848},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.03076923076923077},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.028169014084507043},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.024390243902439025},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.01680672268907563},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.03225806451612903},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.016216216216216217},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.012121212121212121},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.02197802197802198},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.03333333333333333},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.014354066985645933},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.02},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.020618556701030927},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.015873015873015872},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.01020408163265306},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.030303030303030304},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.027777777777777776}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.034482758620689655},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}}}}}}},"f":{"2":{"docs":{},"e":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.03333333333333333}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.02857142857142857},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.031914893617021274},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.034482758620689655},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.015384615384615385},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.025},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.023622047244094488},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.01509433962264151},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":3.3619047619047615},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}}}}}}}}}},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}},"l":{"docs":{},"i":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}}}}},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":3.3497267759562837},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":2.5076335877862594},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":2.5073529411764706},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":2.5096153846153846},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0185185185185186},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":3.3412073490813645},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":3.344322344322344},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":5.013513513513513}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}}}}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}},"y":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}},"s":{"docs":{},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005}}}}}}}}}}},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}}}}}}}},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"2":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406}}}}}}}}}}},"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616}},",":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}},",":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"b":{"docs":{},"a":{"docs":{},"d":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}},"v":{"docs":{},"e":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":5.007518796992481}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095}}},"u":{"docs":{},"l":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}},"l":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}}}}}},"u":{"docs":{},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}}}}},"r":{"docs":{},"m":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625}}}}}},"a":{"docs":{},"t":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}},":":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}}}},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909}},"_":{"docs":{},"a":{"docs":{},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}}}}},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}},"b":{"docs":{},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"b":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}}}}},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.024390243902439025},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.03225806451612903}}}}},";":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.017857142857142856},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.022222222222222223},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.025974025974025976},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.02127659574468085},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.01818181818181818},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.02112676056338028},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}},".":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}},"c":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}},"e":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}},"(":{"2":{"5":{"6":{"docs":{},",":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306}}}},"docs":{}},"docs":{}},"docs":{}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306}}}}}}},"_":{"docs":{},"s":{"docs":{},"(":{"2":{"5":{"6":{"docs":{},",":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}},"docs":{}},"6":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"docs":{}},"docs":{}}},"t":{"docs":{},"(":{"2":{"5":{"6":{"docs":{},",":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082}}}},"docs":{}},"6":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"docs":{}},"docs":{}}},"p":{"docs":{},"(":{"2":{"5":{"6":{"docs":{},",":{"docs":{"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}}},"docs":{}},"docs":{}},"docs":{}}}},")":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464}}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":2.5142857142857142}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"x":{"docs":{},",":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.00355871886121},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":3.3388278388278385},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":2.504405286343612},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":3.354609929078014}},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"e":{"docs":{},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745}}}}}}},",":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}}},"n":{"1":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}},"2":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992}}},"3":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}},")":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.024793388429752067},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.014285714285714285},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.031914893617021274},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.034482758620689655},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":2.541095890410959},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.017699115044247787},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.028409090909090908},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.037037037037037035},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.03773584905660377},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.03076923076923077},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.028169014084507043},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.023622047244094488},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.02030456852791878},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016666666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.014150943396226415},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":5.012658227848101},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.025974025974025976},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.04054054054054054},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.022900763358778626},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.024193548387096774},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.022321428571428572},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616}}}},"1":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616}}}},"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616}}},"j":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.01056338028169014},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.023529411764706},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.023076923076923},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":3.36},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":3.3703703703703702},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":5.007518796992481},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":3.337050805452292},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.02127659574468085},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0196078431372549},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.0229885057471266},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":2.5377358490566038},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":3.3727034120734904},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":5.01123595505618},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":5.031746031746032},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":5.023529411764706},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.01680672268907563},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":2.5072463768115942},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.015873015873015872},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":3.3405797101449273},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":5.006711409395973},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":5.036585365853658},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"s":{"docs":{},":":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}}},",":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}}},".":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616}}}},")":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},":":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},",":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}},"o":{"docs":{},"f":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}}}}}}}}}}}}}}}}}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}},"s":{"1":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}},":":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}},"'":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}},"2":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}},":":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}},"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}},",":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}},";":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}},"]":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943}}}}},"1":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576}}}},"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}},"i":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}},"]":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886}}},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}},")":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304}}}}}}}}}}}}}}}},"f":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}},"]":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425}},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}}}}},"s":{"docs":{},"]":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143}}}},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}},"j":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},"]":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}},"}":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775}}}}},"k":{"docs":{},"]":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},"]":{"docs":{},";":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}},"_":{"docs":{},"c":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},",":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}},"r":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},",":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756}}}}}},"i":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464}}}}},"p":{"docs":{},"r":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584}},")":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947}}}}}}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"2":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775}}}},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}}}}}}}}}}}}},":":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}},":":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.012269938650306749},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258}}},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322}}}}}}},",":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996}}},".":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.01056338028169014},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},";":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}}},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}},"s":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}},"e":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}},")":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"g":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.02247191011235955},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},"y":{"docs":{},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}}}},"w":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.018518518518518517},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.01910828025477707},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.02},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},"_":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}},";":{"docs":{"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}},")":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}},";":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387}}}},";":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}},";":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.025477707006369428}},"e":{"docs":{},";":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.01910828025477707}}}}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}}},":":{"docs":{"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}}}}}}}}}}}},"x":{"docs":{},"t":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":3.3494623655913975},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":2.514388489208633},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":5.025974025974026},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":3.3454545454545452}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012}}}}},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},",":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258}}}}}}}}},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.009569377990430622},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.009523809523809525}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":3.3608058608058604},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":2.5308370044052864},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":2.52803738317757},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.004484304932735}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.038461538461538464},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.02643171806167401},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.028037383177570093},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.013215859030837005}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}},")":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}},":":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}},"a":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}},"m":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"_":{"2":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"[":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}},"docs":{}}}}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},":":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901}}}},"h":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},".":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}},"a":{"docs":{},"t":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.014598540145985401}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804}}}},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.037037037037037035},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.019417475728155338},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.027027027027027},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.01840490797546},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.0120967741935485},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":2.5267857142857144},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.015060240963855422},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.016597510373443983},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}}}},",":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}},";":{"docs":{"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.02027027027027027},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.026785714285714284},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}},"s":{"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}},"'":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}},")":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}},";":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357}}}},":":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}},"w":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"n":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}},"s":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182}}},"t":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},"h":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.037037037037037035}},"u":{"docs":{},"g":{"docs":{},"l":{"docs":{},"y":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"u":{"docs":{},"g":{"docs":{},"l":{"docs":{},"y":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}},":":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}},",":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.019230769230769232},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521}}},"c":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}},"r":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}},"x":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334}}},"y":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334}}},"^":{"2":{"docs":{},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}}}},"4":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}}},"8":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}}},"9":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}},"docs":{}},"b":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444}},"r":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}},";":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015151515151515152}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}}}}}}},"n":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}},")":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}},";":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},",":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.009615384615384616},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.009259259259259259},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.010638297872340425},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.034482758620689655},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.018518518518518517},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.012658227848101266},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}},"l":{"docs":{},"l":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":5.0095238095238095}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":2.5285714285714285}}}}},"y":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018867924528301886},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":5.0144927536231885},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":3.3467261904761902},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.015748031496062992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}},"e":{"docs":{},"l":{"docs":{"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":5.029850746268656},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":3.3569553805774275},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":3.365942028985507},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":3.346320346320346}},".":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.006993006993006993},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099}}},",":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}},":":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}},"e":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0327868852459017},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"i":{"docs":{},"n":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364}}}}}},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":5.0092592592592595}}}}}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":2.53125}},";":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":2.5093457943925235},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.0179372197309418}},"(":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}},")":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}},";":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{},":":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}},"2":{"docs":{},":":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008771929824561403}}}},"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":5.025},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":3.342767295597484},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":3.3585434173669464},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":5.010752688172043},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":3.3387387387387384},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":5.0064935064935066},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":3.346045197740113},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":5.00709219858156},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":3.339393939393939},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":5.047808764940239},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":3.383333333333333},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":3.3666666666666663},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":5.013333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":3.383966244725738},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"3":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}}}}}}}},"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}},")":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.01680672268907563},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},":":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}}}}}}}},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444}}}}},"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}},":":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}}}}},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}}}}}}}},",":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494}}},";":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406}}},":":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494}}},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061}}}}}}}}}}}}}}}}}}},"k":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}},"o":{"docs":{},"d":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":5.016666666666667},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}}}}}}}}}},"{":{"0":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.022988505747126436},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.013392857142857142},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.01694915254237288}}}},"1":{"docs":{},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"3":{"docs":{},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}},"7":{"docs":{},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.019230769230769232},"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.0449438202247191},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.01675977653631285},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.045454545454545456},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.030612244897959183},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.013986013986013986},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.05454545454545454},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.03225806451612903},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.046296296296296294},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.04225352112676056},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.046875},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.04477611940298507},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.05511811023622047},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.05434782608695652},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.038461538461538464},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.04918032786885246},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.05102040816326531},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.06557377049180328},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03896103896103896},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.03225806451612903},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.07633587786259542},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.049586776859504134},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.05},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.05319148936170213},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.05154639175257732},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.047619047619047616},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.04},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.03529411764705882},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.07692307692307693},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.02586206896551724},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.08045977011494253},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.04838709677419355},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.02877697841726619},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.014778325123152709},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.03361344537815126},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.025925925925925925},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.06923076923076923},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.03529411764705882},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0684931506849315},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02666666666666667},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.037037037037037035},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.07746478873239436},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.06015037593984962},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.0650887573964497},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.07518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.055762081784386616},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.040160642570281124},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.0761904761904762},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.07142857142857142},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.015384615384615385},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.06896551724137931},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.06097560975609756},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.016666666666666666},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.04918032786885246},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0234375},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.03773584905660377},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.03},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.02654867256637168},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.028037383177570093},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.0297029702970297},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.031914893617021274},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.0449438202247191},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.031914893617021274},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.049019607843137254},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.04597701149425287},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.02830188679245283},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.03409090909090909},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.027777777777777776},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.037037037037037035},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.043478260869565216},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.017857142857142856},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.03571428571428571},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.03409090909090909},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.037037037037037035},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.041666666666666664},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.034482758620689655},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017543859649122806},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.06422018348623854},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.05511811023622047},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.030927835051546393},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.03278688524590164},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.05555555555555555},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.055944055944055944},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.06748466257668712},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.02727272727272727},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.06521739130434782},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.05172413793103448},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.045454545454545456},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.029850746268656716},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.023622047244094488},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.036734693877551024},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.026881720430107527},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.029197080291970802},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.017793594306049824},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.07272727272727272},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.06611570247933884},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.08759124087591241},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.06382978723404255},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.03202846975088968},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.054945054945054944},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.048458149779735685},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.0425531914893617},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.06329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.06884057971014493},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.0514018691588785},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.06278026905829596},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.06593406593406594},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.06962025316455696},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.07377049180327869},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.03867403314917127},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.0661764705882353},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.06666666666666667},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.04580152671755725},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.055944055944055944},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.05825242718446602},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.06422018348623854},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.045454545454545456},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.03515625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.058823529411764705},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.05806451612903226},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.06896551724137931},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.044642857142857144},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.05454545454545454},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.029411764705882353},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.04149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.05555555555555555},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.045283018867924525},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.037037037037037035},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.03076923076923077},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.02575107296137339},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.030973451327433628},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.06956521739130435},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.061946902654867256},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.05405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.0673076923076923},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.05668016194331984},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.06756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.0705521472392638},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.056451612903225805},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.04285714285714286},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.05952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.06315789473684211},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.061224489795918366},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.03759398496240601},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.038461538461538464},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.037037037037037035},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.03773584905660377},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.046153846153846156},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.056338028169014086},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.04878048780487805},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.06349206349206349},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.05747126436781609},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.05},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.04516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.030303030303030304},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.031496062992125984},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.01932367149758454},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.04294478527607362},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.07291666666666667},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.072992700729927},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.07758620689655173},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.06285714285714286},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0449438202247191},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.08108108108108109},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.06598984771573604},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.047619047619047616},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.07246376811594203},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.07058823529411765},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.0962962962962963},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.041666666666666664},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.05660377358490566},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.058823529411764705},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.053763440860215055},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.05945945945945946},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.06493506493506493},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.07203389830508475},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.07092198581560284},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.06060606060606061},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.0398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.05},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.050724637681159424},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.06666666666666667},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.03296703296703297},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.03333333333333333},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.02},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.04430379746835443},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.05357142857142857},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.02710843373493976},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.050955414012738856},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.023923444976076555},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.02857142857142857},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.059322033898305086},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.055900621118012424},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.06481481481481481},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.06666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.05154639175257732},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.05084745762711865},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.06329113924050633},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.050724637681159424},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.053763440860215055},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.050505050505050504},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0875},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.08759124087591241},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.06578947368421052},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.057692307692307696},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.05555555555555555},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.05555555555555555},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.056451612903225805},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.05263157894736842},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.05952380952380952},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.05},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.06493506493506493},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.06060606060606061},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.06451612903225806},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.05},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.06521739130434782},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.08163265306122448},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.07608695652173914},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.06716417910447761},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.061224489795918366},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.04854368932038835},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.0763888888888889},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.056338028169014086},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.06862745098039216},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.06060606060606061},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.030927835051546393},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.03529411764705882},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.04697986577181208},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.04878048780487805},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.07344632768361582},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.035398230088495575},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.04861111111111111}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"}":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},".":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761}}}}}}}}}},"}":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.014084507042253521},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},";":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.02857142857142857},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.010101010101010102},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"}":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}}}}},"\"":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},"(":{"docs":{},"\"":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}},"/":{"docs":{},"\"":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}},"\"":{"docs":{},"}":{"docs":{},";":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715}}}},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.041237113402061855}}}}},"'":{"2":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"3":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"4":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"5":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"6":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"7":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"8":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"9":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"d":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"g":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"j":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"m":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"p":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"t":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"w":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"c":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"i":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"l":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"v":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"x":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}},"{":{"docs":{},"}":{"docs":{},"}":{"docs":{},";":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.011904761904761904},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"}":{"docs":{},";":{"docs":{"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}},"}":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.0449438202247191},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.015151515151515152},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.02040816326530612},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.012903225806451613},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.018518518518518517},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.035211267605633804},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.046875},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.03937007874015748},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.043478260869565216},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.01639344262295082},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.05102040816326531},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.03278688524590164},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03896103896103896},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.03225806451612903},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.06870229007633588},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.04132231404958678},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.04285714285714286},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.02127659574468085},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.041237113402061855},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.02564102564102564},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.06896551724137931},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.04032258064516129},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.02877697841726619},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.022222222222222223},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.038461538461538464},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0547945205479452},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.04225352112676056},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.045112781954887216},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.047337278106508875},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.03007518796992481},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.03345724907063197},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.01606425702811245},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.0380952380952381},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.04285714285714286},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.034482758620689655},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.03048780487804878},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.031446540880503145},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.04},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.035398230088495575},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.037383177570093455},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.039603960396039604},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.0425531914893617},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.0449438202247191},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.05319148936170213},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.0392156862745098},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.06896551724137931},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009433962264150943},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.033816425120772944},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.022727272727272728},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.03292181069958848},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.06422018348623854},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.03937007874015748},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.04918032786885246},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0625},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.055944055944055944},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.05521472392638037},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.05434782608695652},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.02857142857142857},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.03763440860215054},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.06363636363636363},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.05785123966942149},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.08029197080291971},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.04964539007092199},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.028469750889679714},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.04395604395604396},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.039647577092511016},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.05063291139240506},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.06159420289855073},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.037383177570093455},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.04932735426008968},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.054945054945054944},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.056962025316455694},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.05737704918032787},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.05625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.03314917127071823},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.058823529411764705},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.05925925925925926},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.03816793893129771},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.04895104895104895},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.04854368932038835},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.05504587155963303},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.04195804195804196},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.03125},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.051470588235294115},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.05161290322580645},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.06321839080459771},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.044642857142857144},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.045454545454545456},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.022058823529411766},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.03734439834024896},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.03888888888888889},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.045283018867924525},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.032407407407407406},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.026923076923076925},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.02145922746781116},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.022123893805309734},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.05217391304347826},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.05309734513274336},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.043243243243243246},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.0673076923076923},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.06072874493927125},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.060810810810810814},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.06748466257668712},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.04838709677419355},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.06547619047619048},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.05102040816326531},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.04807692307692308},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.014084507042253521},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.024390243902439025},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.06349206349206349},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.05747126436781609},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.044444444444444446},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.01935483870967742},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022727272727272728},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.023622047244094488},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.028985507246376812},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.024539877300613498},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.041666666666666664},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.06569343065693431},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.0603448275862069},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.06857142857142857},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.028089887640449437},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.06756756756756757},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.06091370558375635},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.057971014492753624},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.058823529411764705},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.06666666666666667},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.05},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.05188679245283019},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.058823529411764705},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.03783783783783784},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.032467532467532464},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.05084745762711865},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.05673758865248227},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.04242424242424243},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.027888446215139442},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.043478260869565216},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.05},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.02},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.03164556962025317},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.044642857142857144},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.02108433734939759},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.044585987261146494},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.028708133971291867},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.03333333333333333},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.05508474576271186},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.049689440993788817},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.046296296296296294},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.02666666666666667},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.020618556701030927},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.03389830508474576},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.02531645569620253},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.043478260869565216},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.021505376344086023},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.030303030303030304},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.08125},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.058394160583941604},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.02631578947368421},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.04807692307692308},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.05555555555555555},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.05555555555555555},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.056451612903225805},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.031578947368421054},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.03571428571428571},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.05},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.025974025974025976},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.03636363636363636},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.03225806451612903},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.03},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.028985507246376812},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.05612244897959184},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.03260869565217391},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.029850746268656716},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.05102040816326531},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.11805555555555555},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.035211267605633804},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.03431372549019608},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.050505050505050504},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.020618556701030927},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.029411764705882353},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.040268456375838924},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.036585365853658534},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.062146892655367235},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.030973451327433628},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.041666666666666664}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Subarray Sum II.html","tf":0.011235955056179775},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015625},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.011494252873563218},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.007194244604316547},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.015384615384615385},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.02112676056338028},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.01775147928994083},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.018404907975460124},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.012658227848101266},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.014018691588785047},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.013452914798206279},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.0125},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00423728813559322},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.012422360248447204},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.00625},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.014598540145985401},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.015306122448979591},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.01020408163265306},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},")":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},";":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}},">":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.0223463687150838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.025806451612903226},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.037037037037037035},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.007042253521126761},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.022900763358778626},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.008064516129032258},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.029411764705882353},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.007518796992481203},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.033816425120772944},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.009174311926605505},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.010869565217391304},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.015267175572519083},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.02097902097902098},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.026785714285714284},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.022641509433962263},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.036585365853658534},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.030456852791878174},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.06927710843373494},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.012738853503184714},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.06698564593301436},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.047619047619047616},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.01875},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.007936507936507936},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.007936507936507936},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.024242424242424242},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.05405405405405406},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.026845637583892617},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"=":{"0":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008032128514056224}}},"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.015037593984962405},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0037174721189591076},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.006993006993006993},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.033816425120772944},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.022222222222222223},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.012987012987012988},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}},"l":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014598540145985401},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.016483516483516484},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.012658227848101266},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.011049723756906077},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.018404907975460124},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.016129032258064516},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.012269938650306749},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.009615384615384616},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258}}},";":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.01652892561983471},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.016194331983805668},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062}}}}}},"]":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}}},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517}}}}}}}}},"r":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.012448132780082987},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.016129032258064516},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.014814814814814815},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007547169811320755},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258}}},";":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.014184397163120567},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.016194331983805668},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.012269938650306749}}}}}}},"]":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.006024096385542169}},")":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.027472527472527472},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.04580152671755725},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.0045871559633027525},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.015625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01818181818181818},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.004149377593360996},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.014423076923076924},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.02027027027027027},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.015337423312883436},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.017857142857142856},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.03184713375796178},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.014285714285714285},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},")":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.007633587786259542},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.00909090909090909},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008264462809917356},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.0072992700729927005},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.005747126436781609},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258}}},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.004807692307692308}}}},",":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.016483516483516484},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.00390625},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.022058823529411766},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.012903225806451613},"Binary Tree/Binary Tree Path Sum II.html":{"ref":"Binary Tree/Binary Tree Path Sum II.html","tf":0.011494252873563218},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.00909090909090909},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.005405405405405406},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.019230769230769232},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428}}}}}},"i":{"docs":{},"d":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},")":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322}}},";":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.007518796992481203}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567}}}}}}}},"y":{"docs":{},"m":{"docs":{},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Interval Query/Insert Interval.html":{"ref":"Interval Query/Insert Interval.html","tf":0.01},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}}}}},">":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682}},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495}}}},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335}}},",":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.005494505494505495},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.004405286343612335},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.019417475728155338}}},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129}}}}}}}}},"&":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012}}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}}}}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00423728813559322},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.00847457627118644},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.017857142857142856},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.018072289156626505},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.025477707006369428},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.028708133971291867},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.05714285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.029661016949152543},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}},")":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428}},";":{"docs":{"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602}}}},";":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.008928571428571428},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.024096385542168676},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.01904761904761905},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.046610169491525424}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"1":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"2":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"docs":{}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},"\"":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}},"k":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.00558659217877095},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":2.5408163265306123},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6864686468646863},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015748031496062992},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":2.5384615384615383},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.020408163265306},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":3.34037558685446},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.0236686390532546},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":5.0212765957446805},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.012145748987854251},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.028225806451613},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":2.5288461538461537},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.01932367149758454},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":3.3413978494623655}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.03125},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.02040816326530612},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.014084507042253521},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}},";":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282}}}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.009900990099009901},"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.010869565217391304},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.01020408163265306},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.008333333333333333},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.004048582995951417},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}},"]":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218}}},")":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}},",":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.008064516129032258},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.013157894736842105},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.03225806451612903}}},"t":{"docs":{},"h":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.023529411764706},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.0153846153846153},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.672549019607843},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":2.5136986301369864},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425}}}}}}}},"o":{"docs":{},"w":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007874015748031496},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.04054054054054054}},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}}}}}},"e":{"docs":{},"y":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":3.3611111111111107},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":3.347222222222222}},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}},")":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},",":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},":":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}},".":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.007575757575757576},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.01020408163265306},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.01818181818181818},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","tf":0.0035211267605633804},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.01639344262295082},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.010752688172043012},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.007633587786259542},"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.020618556701030927},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.016129032258064516},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.007692307692307693},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.02112676056338028},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.015037593984962405},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.022556390977443608},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.01486988847583643},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.012048192771084338},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.01904761904761905},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.011494252873563218},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.018292682926829267},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.012269938650306749},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.017241379310344827},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten 2D Vector.html":{"ref":"Iterator/Flatten 2D Vector.html","tf":0.02127659574468085},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.006329113924050633},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004672897196261682},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.013452914798206279},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.01098901098901099},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.00625},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.009174311926605505},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.005555555555555556},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.019230769230769232},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Subtree with Maximum Average.html":{"ref":"Binary Tree/Subtree with Maximum Average.html","tf":0.010810810810810811},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.004032258064516129},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.034482758620689655},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.024539877300613498},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.04310344827586207},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.03428571428571429},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.02962962962962963},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.025210084033613446},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.010752688172043012},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.012987012987012988},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.025423728813559324},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.03333333333333333},"Word Puzzle/Find All Anagrams in a String.html":{"ref":"Word Puzzle/Find All Anagrams in a String.html","tf":0.01098901098901099},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.018518518518518517},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.02},"General BFS/Open the Lock.html":{"ref":"General BFS/Open the Lock.html","tf":0.010309278350515464},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.0125},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.029197080291970802},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.014492753623188406},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.02040816326530612},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.014925373134328358},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02040816326530612},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.020833333333333332},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.0196078431372549},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.020134228187919462},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.02824858757062147},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576}}}}}}}}},",":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0064516129032258064},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.05803571428571429},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02631578947368421},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010869565217391304},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.006944444444444444},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.005681818181818182},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.016129032258064516},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum II.html","tf":0.007352941176470588},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}},"w":{"docs":{},"e":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436}}}}},"|":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.04032258064516129},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.07913669064748201},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.018867924528301886},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.01},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.008849557522123894},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.009345794392523364},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.009900990099009901},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.010638297872340425},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.011235955056179775},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.00980392156862745},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.05555555555555555},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.041666666666666664},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.08045977011494253},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.043859649122807015},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.021739130434782608},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Increasing Substring.html":{"ref":"String and Sequence Extremum/Longest Increasing Substring.html","tf":0.013986013986013986},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.05454545454545454},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.029850746268656716},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.011363636363636364},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.027777777777777776},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.04838709677419355},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.024896265560165973},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015748031496062992},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.02710843373493976},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.014285714285714285}},"|":{"docs":{"Sliding Window/Window Sum.html":{"ref":"Sliding Window/Window Sum.html","tf":0.014925373134328358},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.007874015748031496},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.014285714285714285},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.018518518518518517},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.021505376344086023},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.01834862385321101},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007692307692307693},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.008583690987124463},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.008849557522123894},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.017699115044247787},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007575757575757576},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008333333333333333},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.004784688995215311}}}},"\"":{"0":{"docs":{},"\"":{"docs":{},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}},"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.009433962264150943},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"\"":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.006493506493506494}},";":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.012987012987012988},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.00819672131147541},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.0070921985815602835},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.013888888888888888}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"\"":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"\"":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}}},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}}}},"\"":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.004081632653061225}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}}}}}},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"*":{"docs":{},"\"":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"?":{"docs":{},"\"":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259}}}},".":{"docs":{},"\"":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"#":{"docs":{},"\"":{"docs":{},")":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},"\"":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.009259259259259259}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}}}}}}}}},"(":{"docs":{},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332}}}}},"+":{"docs":{},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"/":{"docs":{},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"\"":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939}}}}}}}}},"i":{"docs":{},"p":{"docs":{},"v":{"4":{"docs":{},"\"":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"6":{"docs":{},"\"":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{}}},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}},"v":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}},"x":{"docs":{},"\"":{"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.022222222222222223}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"\"":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"e":{"docs":{},"\"":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"\"":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005}}}}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}},"m":{"docs":{},"\"":{"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}},"m":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"m":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"m":{"docs":{},"\"":{"docs":{},"}":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}},"v":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.007142857142857143},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":5.023809523809524},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":3.337179487179487}},".":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008264462809917356}}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}}},"i":{"docs":{},"g":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4285714285714284}},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":5.006329113924051},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":3.33695652173913},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011320754716981131}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.0189873417721519}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"2":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608}}},"docs":{}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4285714285714284}}}}},"!":{"docs":{},"=":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"ref":"String and Sequence Extremum/Longest Repeating Subsequence.html","tf":0.00909090909090909},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.012244897959183673},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Iterator/Flatten Nested List.html":{"ref":"Iterator/Flatten Nested List.html","tf":0.01098901098901099},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00881057268722467},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.02531645569620253},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.009345794392523364},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.0038461538461538464},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.004291845493562232},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012096774193548387},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.0047169811320754715},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005405405405405406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006493506493506494},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.014184397163120567},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006060606060606061},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.00847457627118644},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}}},"p":{"docs":{},")":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835}}}},"r":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"_":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Valid Binary Search Tree.html":{"ref":"Binary Tree/Valid Binary Search Tree.html","tf":0.005494505494505495},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006329113924050633},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0055248618784530384},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.007352941176470588},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.007407407407407408},"Binary Tree/Binary Tree Path Sum.html":{"ref":"Binary Tree/Binary Tree Path Sum.html","tf":0.0064516129032258064},"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.004464285714285714},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008849557522123894}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}},"s":{"docs":{},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.008333333333333333}}}}}}}},"?":{"docs":{"Two Sum/2Sum III Data Structure Design.html":{"ref":"Two Sum/2Sum III Data Structure Design.html","tf":0.010309278350515464},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.034482758620689655},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.006944444444444444},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"%":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.011494252873563218},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037735849056603774},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.030927835051546393},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}},"[":{"0":{"docs":{},",":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.025210084033613446}}}},"1":{"docs":{},",":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.04035874439461883}}},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}},"2":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.008968609865470852}}},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}},"3":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.006944444444444444}}}},"docs":{},"[":{"1":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.004484304932735426}}}},"docs":{}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"1":{"docs":{},",":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"docs":{}}}}}},"+":{"docs":{},"/":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}}},"]":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.0072992700729927005},"Interval Query/Merge Intervals.html":{"ref":"Interval Query/Merge Intervals.html","tf":0.010752688172043012},"Sweep Line/Number of Airplanes in the Sky.html":{"ref":"Sweep Line/Number of Airplanes in the Sky.html","tf":0.007246376811594203},"Sweep Line/Time Intersection.html":{"ref":"Sweep Line/Time Intersection.html","tf":0.00510204081632653},"Sweep Line/Meeting Rooms.html":{"ref":"Sweep Line/Meeting Rooms.html","tf":0.010869565217391304},"Sweep Line/Meeting Rooms II.html":{"ref":"Sweep Line/Meeting Rooms II.html","tf":0.007462686567164179}},":":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"Word Puzzle/Word Break III.html":{"ref":"Word Puzzle/Word Break III.html","tf":0.008403361344537815}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}},"&":{"docs":{},"]":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}},"\\":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.014814814814814815},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.09252669039145907},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0078125},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014705882352941176},"Binary Tree/Binary Tree Upside Down.html":{"ref":"Binary Tree/Binary Tree Upside Down.html","tf":0.008298755186721992},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.011111111111111112},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.027777777777777776},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011538461538461539},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.012875536480686695},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01327433628318584},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.020242914979757085},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.021505376344086023},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.010810810810810811}}},"x":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.2971887550200803},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.009523809523809525},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.034482758620689655},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.03759398496240601},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.010752688172043012},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007042253521126761}},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}},"docs":{},"a":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761}}}}},"x":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.006097560975609756},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.007042253521126761},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"Post Office/Build Post Office II.html":{"ref":"Post Office/Build Post Office II.html","tf":0.012195121951219513},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334}}},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.014084507042253521},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.007434944237918215},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"ref":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","tf":0.006134969325153374},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406}}},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.011152416356877323},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0070921985815602835},"Binary Tree/Complete Binary Tree.html":{"ref":"Binary Tree/Complete Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.004424778761061947},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.031746031746031744},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"ref":"Linked List/Convert Binary Tree to Linked List by Depth.html","tf":0.006211180124223602},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.009259259259259259}}},":":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.006369426751592357},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.004761904761904762}}}},"'":{"0":{"docs":{},"'":{"docs":{},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},")":{"docs":{},";":{"docs":{"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}}}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.024242424242424242}}}},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"1":{"docs":{},"'":{"docs":{},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"2":{"docs":{},"'":{"docs":{},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}},"6":{"docs":{},"'":{"docs":{},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"8":{"docs":{},"'":{"docs":{},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"9":{"docs":{},"'":{"docs":{},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.014598540145985401},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},"o":{"docs":{},"'":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112}},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"x":{"docs":{},"'":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004016064257028112}},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"a":{"docs":{},"'":{"docs":{},"]":{"docs":{},";":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.00816326530612245}}}}}},"*":{"docs":{},"'":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}},")":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010752688172043012}},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"?":{"docs":{},"'":{"docs":{},",":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.009259259259259259}}}}},".":{"docs":{},"'":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}},")":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}},",":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005376344086021506}}}}},",":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629}}}}}},")":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"'":{"docs":{},")":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.01875}}}}},"+":{"docs":{},"'":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"/":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"b":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"c":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"f":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"h":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"i":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"k":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"l":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"n":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"q":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"r":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"s":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"u":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"v":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"y":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"z":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"(":{"docs":{},"'":{"docs":{},")":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.01875}}}}}},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{},"_":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.0078125}}}}}}}}}}}}}}},"^":{"docs":{"Binary Tree/Binary Tree Path Sum IV.html":{"ref":"Binary Tree/Binary Tree Path Sum IV.html","tf":0.008928571428571428},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.012195121951219513},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.0030120481927710845}},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}}}},"#":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.004629629629629629},"General BFS/Sliding Puzzle II.html":{"ref":"General BFS/Sliding Puzzle II.html","tf":0.00847457627118644}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.023148148148148147}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}},"]":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},")":{"docs":{},";":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"~":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.041237113402061855}}}},"length":19205},"corpusTokens":["!=","!curr","!p)","!r.balanced)","!r.is_bst)","!right)","!root","!stk.empty()","!use[i","\"","\"\"","\"\";","\"#\")","\"#\";","\"(\")","\")","\")\")","\"*\"","\"*\")","\"+\")","\",","\",\"","\".\"","\"/\")","\"0\";","\"?\"","\"a\".","\"abc\",","\"abcde\".","\"c\",","\"cc\",","\"ccc\",","\"cd\",","\"cm\"},","\"d\",","\"dc\",","\"dcc\",","\"dccc\",","\"de\",","\"deabc\"","\"deserialize\"","\"error\")","\"error\";","\"i\",","\"ii\",","\"iii\",","\"ipv4\"","\"ipv6\"","\"iv\",","\"ix\"},","\"jfk\",","\"l\",","\"la\".","\"le\"","\"lx\",","\"lxx\",","\"lxxx\",","\"m\",","\"mm\",","\"mmm\"}","\"neither\";","\"one\"","\"serialize\"","\"serialize\",","\"two\"","\"v\",","\"vi\",","\"vii\",","\"viii\",","\"x\",","\"xc\"},","\"xl\",","\"xx\",","\"xxx\",","\"zero\"","#","#,","#includ","%","&","&&","&a)","&a,","&abbr)","&airplanes)","&arrays,","&b)","&b,","&board)","&board,","&books,","&cands,","&coins,","&data)","&deadends,","&destination)","&dict)","&digits)","&edges)","&end,","&exp)","&expression)","&final_state)","&getlist()","&grid)","&heights)","&init_state,","&inorder)","&inorder,","&intervals)","&intervals,","&l,","&matrix)","&matrix,","&maze,","&n)","&nestedlist)","&num)","&nums)","&nums,","&nums1,","&nums2)","&operators)","&org,","&origin,","&p)","&path)","&pattern,","&points,","&postorder)","&prefix)","&preorder,","&prices)","&primes)","&rooms)","&s)","&s,","&s1,","&s2)","&s2,","&s3)","&seqa,","&seqb)","&seqs)","&sourc","&start,","&str)","&str,","&strs)","&t)","&target)","&teststr)","&time)","&times)","&tokens)","&v)","&v,","&values)","&word)","&word,","&worddict)","&words)","'","'(')","')","')')","');","'*'","'*')","'*');","'*':","'+'","'+');","'+':","',');","'.'","'.')","'.',","'/');","'/':","'0')","'0'));","'0');","'0':","'1')","'1':","'2')","'6':","'8':","'9':","':","'?',","'a'];","'b',","'c'}},","'e')","'e',","'f'}},","'h',","'i'}},","'k',","'l'}},","'n',","'o'","'o'}},","'q',","'r',","'s'}},","'u',","'v'}},","'x'","'x',","'y',","'z'}},","(","(!('0'","(!(('0'","(!(nr","(!(nx","(!(valu","(!curr","(!curr)","(!first.empty())","(!head","(!head)","(!l.balanc","(!l.is_bst","(!left","(!list.empty())","(!lower)","(!nestedlist.empty())","(!new_root)","(!node)","(!parent)","(!piece.empty())","(!positive)","(!queue.empty())","(!root","(!root)","(!set.empty())","(!sets.merge(x,","(!src)","(!stk.empty()","(!stk.empty())","(!upper)","(!vec.empty())","('0'","(('0'","((nx","((target","():","();","(0)","(0,","(1","(1)4","(1,","(1440","(2","(2)","(2)2","(2,","(3","(3,","(4,","(5,","(6,","(7,","(a","(a)","(a1","(a[i]","(a[j]","(a[l]","(a[r]","(ans.size()","(ans[0]","(atoi)","(auto","(auto&","(auto&&","(b","(b)","(bag_s[ch]","(bgn","(bgn_first","(bgn_second","(bgns[turn]","(binary)","(board[i][j]","(board[r][c]","(board[x][y]","(book","(books.empty()","(c","(cand","(cands[i]","(canuse(index","(ch","(ch)","(ch_src","(char","(cl","(const","(copi","(count","(countnumber(nums,","(countsmallpieces(l,","(cr","(cr)","(curr","(curr)","(curr.found_a","(d","(deadlocks.count(target)","(demical)","(depth","(deque.front()","(diff","(digits.empty())","(discover[nbr]","(divd","(divisor","(dst.used)","(e","(edges.size()","(end","(fac_part_bin","(fac_part_bin.empty())","(for","(freq[ch]","(freq_t[ch]","(g","(graph.count(ch_dst)","(grid[x][y]","(h","(hour","(i","(i+1)th","(i.hasnext())","(idx_p","(in_bgn","(in_end","(indeg[ch]","(indeg[dst]","(indegree[dst]","(index","(index_row","(index_w","(int","(integer)]","(it_","(it_t","(iter_b","(iter_f","(j","(k","(l","(l)","(l)3","(l.empty()","(l.lca)","(last_l)","(last_r)","(left","(left)","(len","(len_t","(level","(lhs.cost","(lhs.dist","(lhs.interval.start","(lhs.start","(lhs.time","(lhs.x","(local","(longest","(lower","(lower)","(m","(map.count(ch)","(map.count(neighbor)","(map.count(r_index)","(map[id].size()","(map[s[i]]","(matrix[x][y]","(max.empty())","(max_depth","(max_siz","(memo.count(root)","(memo.count(str)","(mid","(min","(min.bgn","(min_siz","(minut","(n","(n1","(n^2","(name_2_id.count(dst)","(name_2_id.count(src)","(nestedlist.empty())","(new_diff","(new_timestamp","(no","(node","(nt","(num","(num_c","(num_in","(num_pr","(num_r","(nums.empty())","(nums[i]","(nums[i])","(nums[i]));","(offset","(one","(order","(p","(parent","(parent[x]","(po","(pool[0]","(pool[2]","(posit","(pre_bgn","(pred","(prefix","(price[j]","(px","(queue.size()","(quot","(r","(r)","(r.lca)","(radixes.count(num)","(real","(rec.ev","(refs.count(key)","(refs.count(val)","(res)","(res.empty())","(ret)","(right","(right)","(root","(root)","(s.empty())","(s.substr(j","(s1[i]","(s2[j]","(s[i","(set.count(b)","(set.count(backward)","(set.count(dst)","(set.count(forward)","(set.count(n)","(set.is_same(src_id,","(size","(size);","(solution.hasnext())","(src","(src)","(stack.top()","(start","(std::abs(p","(stk.empty())","(stk.top()","(str.empty())","(str.length()","(str[i]","(str[s1]","(student_id,","(substring)","(succ","(succ)","(succ.empty())","(sum","(sum[i","(target","(temp","(temp.rem","(test","(the","(times.empty()","(token","(token.empty())","(total","(trace[r][c]","(turn","(upper","(upper)","(valu","(w)2","(word","(words.count(word)","(words.empty())","(x","(x,n)",")",");","*","*(","***","****","*****","******","*******","*********","***********","**************","******************","*******************","*,","*/","*/lrucache(int","*/movingaverage(int","*/validwordabbr(vector","*/zigzagiterator(vector&","*/zigzagiterator2(vector>&","*=","*@param","*@return","*bgn_first;","*bgn_second;","*bgns[turn];","*copyrandomlist(randomlistnod","*dst","*head)","*it;","*left,","*left;","*max.begin();","*next,","*next;","*parent,","*pred","*random;","*right;","*set.begin();","*src","+","+*","+*(","+*(+","++abbrs[abbr];","++bgn;","++bgn_first;","++bgn_second;","++bgns[turn];","++cnt_t;","++count;","++dp;","++end;","++forward;","++freq_p[ch];","++freq_s[ch","++freq_t[ch","++freq_t[ch];","++i;","++id;","++indeg[ch_dst];","++indegree[dst];","++j;","++l;","++len;","++level;","++map[ch];","++map[sum];","++r;","++size;","++step;","++total;","++words[word];","+,","+/","+=",",",",we",".","...","...,","....",".......","........","...........","............","/","/*","/**","//","/:","/=","/\\","/__\\","0","0)","0)));","0));","0);","0,","0.0","0.001","0.125","0.25","0.5","000...","0000","00000","0001","00010","00011","0009","0010","0090","0100","01000","0900","0;","0>","0s","0s,","0s.","0},","0}})","1","1(3)","1(w)","1)","1));","1),","1).","1)9","1);","1)>","1,","1.","1.0","10","10)","10,","100","100)","1000","1000)","1000000007;","1000]","1000}","1004.","100;","100]","100},","105.","107.","1075.","1092.","10;","10]","10];","10tb+","10},","11)","1101.","113","1155.","118.","1181.","119.","11]","12","12.","120.","1201.","1206.","1208.","121.","122.","1222.","1225.","123.","123e","123e+","124.","125","128.","1288.","1311.","1312.","132.","134.","135.","136.","1360.","137.","138.","139.","141.","1440)","148.","149.","15","15,","15.","150.","1506.","151.","153.","154.","155.","156.","159.","16);","16.","162.","163.","168.","17","17,","17.","178.","1784.","18","18.","180.","183.","184.","19.","192.","1:","1;","1]","1])","1]);","1],","1]:","1];","1][h","1][h]","1][j","1][j]","1][j])","1][j]);","1][j],","1][j];","1][j][h]","1][j][h];","1][j]}","1][k]","1]]","1]])","1]]);","1]],","1]];","1]}","1d","1e","1m+","1s","1st","1st:","1x3","1x6","1||","1}","1},","1};","1}})","2","2(w)","2)","2));","2),","2).","2);","2,","2.","20","20(1)","20,","200.","2147483648","215","22.","23)","242.","246.","25","250m+","26.","28.","29.","2:","2;","2]","2])","2],","2]:","2];","2d","2nd","2nd:","2sum","2x5","2},","3","3(1)","3)","3*","3,","3.","30","30.","3000","30]","31.","32.","32;","33.","35","36.","360.","362.","367.","368.","369.","370.","372.","376.","38.","384.","386.","391.","392.","393.","394.","395.","396.","397.","398.","3:","3rd","3rd:","3sum","4","4(w)","4)","4*","4,","4.","401.","402.","403.","405.","406.","41.","414.","417.","418.","419.","421.","424.","425.","428.","430.","433.","434.","435.","437.","438.","440","442.","448.","453.","460.","461.","465.","474.","475.","476.","477.","488.","491.","4:","4sum","4x2","4}.","5","5(1)","5)","5,","500},","50},","510.","512.","518.","52.","528.","534.","535.","539.","54.","540.","541.","543.","548.","551.","562","563","564","569.","57.","573.","577.","578.","58.","581.","582.","585.","586.","59)","59.","593.","597.","599.","5:","5;","5},","6","6)","6*","6,","6.","60","601.","604.","605.","607.","61.","612.","613.","615.","617.","62.","627.","628.","629.","63.","634.","637.","639.","640.","641.","642.","644.","645.","647.","648.","649.","65,","650.","651.","654.","656","657.","66.","661.","663.","665","667.","669.","67.","676.","68.","680.","683.","691.","6:","6]","6x1","6}","7","7)","7,","7.","71.","72.","73.","74.","77.","772.","778.","780.","787.","79.","794.","796.","7]","8","8)","8,","8.","802.","81.","821.","828.","829.","838.","85.","862.","863.","867.","87.","88.","888.","889.","89","892.","9","9,","90","90.","900","900.","9000","901.","905.","911.","919.","92","920.","94.","944.","95.","958.","96.","97.","98.","983.","9;","9}",":","::max();",":times)",";","=","==","=>",">",">\"",">&",">=",">=0",">>",">branch.count(ch)",">branch[ch]",">branch[ch];",">city1",">city2",">cost",">end",">first;",">getinteger()",">getinteger());",">getinteger(),",">getinteger();",">getlist());",">id",">is_word",">is_word)",">is_word;",">isinteger())",">l",">l]",">label);",">left",">left)",">left);",">left,",">left;",">neighbors)",">neighbors.push_back(map[neighbor]);",">next",">next)",">next);",">next;",">parent",">parent,",">parent;",">r",">r]",">random",">random)",">right",">right)",">right);",">right,",">right;",">score",">second)",">second;",">start",">symbol",">val",">val)",">val))",">val);",">val,",">val;","?","@param","@return","@return:","[&]","[+/","[0,","[1,","[1]","[2,","[2]","[3]","[[1,","[]","[](char","[](const","[]:","[expon","[index1,","\\","]","]);","^","^^^^^^^^","_____________","a(0,","a)","a+","a,","a.size();","a1","a1,","a2","a2,","a3","a:","a;","a[0],","a[0].size();","a[0];","a[1]);","a[i","a[i]","a[i].","a[j]","a[l];","a[m])","a[r])","ab","abbr","abbr.length();","abbr:","abbrevi","abbreviation/descript","abbrs.count(abbr)","abbrs;","abbrs[abbr])","abc","abc/","abc/d","abc/de+","abc/de+*+","abc/de+*+f","abcd","abcd,","abcd.ef","abce.","abov","accumul","acquir","activ","ad","add","add(int","adddigits(int","address","address/descript","adjust","adopt","aforement","aggreg","airplan","airplanes)","airplanes:","ak","algorithm","algorithm.","alien","alienorder(vector","allow","alreadi","alway","amount","amount)","amount:","an","anagram","anagrams/descript","ancestor","ancestor(lca)","anoth","ans(n);","ans(n,","ans)","ans);","ans,","ans.emplace_back(dst.node);","ans.emplace_back(std::move(collect));","ans.emplace_back(std::move(pair.second));","ans.emplace_back(std::move(prev));","ans.end());","ans.pop_back();","ans.push_back(","ans.push_back(\"jfk\");","ans.push_back(a[l","ans.push_back(bgn","ans.push_back(closest);","ans.push_back(collect);","ans.push_back(config);","ans.push_back(connection(src,","ans.push_back(curr","ans.push_back(dummi","ans.push_back(genrange(nums[n","ans.push_back(getmedian(min,","ans.push_back(interval);","ans.push_back(map[num]);","ans.push_back(p","ans.push_back(perm);","ans.push_back(points[rec.id]);","ans.push_back(pred.top()","ans.push_back(prefix","ans.push_back(prefix);","ans.push_back(set.getnumberofsets());","ans.push_back(word);","ans;","ans[id]","ans[index]","answer","answer.","apart","api.","appear","appli","approach","approxim","approximation,","area","argument","array","array)","array,","array.","array.size();","array/","array/descript","array[0]","array[1]","array[i];","arraylist","arrays)","arrays/descript","arrays:","ascend","assign","atgre,","atlant","atlantic(m,","atoi(str","atoi/descript","attend","auto","auto&","auto&&","averag","average/descript","average_score)","avoid","b","b(0,","b)","b);","b+","b,","b.size();","b1","b2","b3","b:","b;","b[0],","b[0].size();","b[i]","b[j]","b[j],","ba","ba;","back","backend","backpack","backpack(int","backpackii(int","backpackiii(vector","backpackiv(vector","backpackv(vector","backpackvi(vector","backward","backward.end())","backward.find(token);","backward;","backward[token]","bad","bag(256,","bag_s(256,","bag_s:","bag_s[ch];","bag_t(256,","bag_t:","bag_t[ch]","balanc","balanced(balanced),","balanced,","balanced;","ball","balloon","balloon.","balloons/descript","base","bc","bcd","be","be:","becom","befor","begin","behind","besides,","best","between","bgn","bgn(bgn),","bgn,","bgn;","bgn_first(v1.begin()),","bgn_first,","bgn_second","bgn_second(v2.begin()),","bgn_second,","bgns.emplace_back(vec.begin());","bgns.erase(bgns.begin()","bgns.push_back(vec.begin());","bgns;","binari","binary.","binaryrepresentation(str","binarytreepathsum(treenod","binarytreepathsum2(treenod","binarytreetolists(treenode*","bk","bn","bnd_","bnd_p","bnd_p,","bnd_s)","bnd_s,","board","board)","board,","board.size();","board:","board[0].size();","board[r][c]","board[r][c];","book","book;","books)","books,","books/descript","bool","boolean","boolean,","boost","both","bound","bound)","bound,","bound.","boundari","branch","branch)","branch;","break","break/descript","break;","brief","bst","bst,","bst.","bst/descript","bstswappednode(treenod","build","build(vector","build/descript","buildgraph(","buildgraph(start,","buildtree(","buildtree(const","buildtree(inorder,","buildtree(pre,","buildtree(preorder,","buildtree(rpn);","buildtree(vector","built","burst","buy","buy_1st","buy_1st,","buy_2nd","buy_2nd,","buy_first","buy_second","c","c(c)","c(m,","c)","c));","c+","c,","c.","c1","c1)","c2","c3","c:","c;","c]);","cach","cache)","cache.emplace_back(bgn","cache/descript","cache;","calcul","call","canattendmeetings(vector","cand","cand;","candid","candidate,","candidates:","cands,","cands.end());","cands.size();","cands[i","cands[i]","cands[i],","canfinish(int","canscramble(const","canscramble(s1,","canuse(","capac","capacity(capacity)","capacity(size),","capacity)","capacity:","capacity;","carnegi","case","case:","cases.","cb","cbce","ce","celebr","celebrity'","celebrity.","celebrity/descript","cell","ch","ch)","ch;","ch_dst)","chang","change/descript","changes:","char","charact","character.","characters/descript","check","checkstringswithdifferentlength(s,","checkstringswithsamelength(const","checkstringswithsamelength(s,","chessboard","child","child.","child;","children","children.","choices.","choos","citi","city1,","city1;","city2,","city2;","ck","cl","cl;","class","classs","clean","clone","clonegraph(undirectedgraphnode*","closest","closest/descript","closestkvalues(treenod","closestvalue(treenod","cloud","cn","cnt_","cnt_t","co","cod","code","cog","cog(5)","coin","coin,","coin]);","coinchange(vector","coins.size();","coins:","coins[j]","collect","collect)","collect);","collect,","collect.pop_back();","collect.push_back(bgn);","collect.push_back(cands[i]);","collect.push_back(nums[i]);","collect.push_back(token);","collect;","color","colors/descript","column","column,","column.","columns,","columns.","combin","combinationsum(vector","combinationsum2(vector","commerc","common","compar","comparison","competitor","compil","compiler.","complet","complexity.","component.","compos","composition.","comput","computions.","conduct","confer","config(dim,","config)","config))","config,","config.pop_back();","config.push_back(cand);","config.push_back(ch);","config;","config[0]","config[1];","config[2]","config[3];","connect","connection(string&","connection.","connections)","connections.end(),","conquer","consecut","consid","consist","const","const;","const_cast&>(bgn","const_cast&>(nestedlist);","constant","construct","constructfromprepost(vector&","consum","contain","content","content.","continu","continue;","continuoussubarraysum(vector","continuoussubarraysumii(vector","contribut","control","convert","convertbst(treenod","convertfractionalpart(const","convertfractionalpart(fac_part_dec);","convertintegralpart(const","convertintegralpart(int_part_dec);","convertintegralpart(n);","converttopn(vector","converttorpn(const","converttorpn(expression);","converttorpn(vector","coordin","copi","copier","copiers,","copy(str);","copy.erase(i,","copy;","copybooks(vector","copybooksii(int","corner","correct","correspond","cost","cost(n,","cost)","cost;","cost[d]","cost[i][j]:","cost[k","cost[m]","cost[w]","costs)","count","count(0)","count(0),","count(count),","count,","count;","count_","count_dot","count_num","count_p","count_s;","count_t","counter","countofairplanes(vector","countonedigit(const","counttwodigits(const","counttwodigits(s,","cours","cout","cover","cr","cr;","creat","criterion.","curr","curr)","curr);","curr,","curr.","curr.end);","curr.found_a","curr.found_b","curr.found_b)","curr.lca","curr;","curr_bgn","curr_end","curr_end;","current","cut","cut/descript","cyclic","d","d)","d);","d,","d1","d2","d3","daili","data","data,","day","day,","day.","days)","days,","days.","days.back();","de","deadend","deadends)","deadends:","deadlocks.count(\"0000\")","deadlocks.emplace(std::move(word));","deadlocks;","decim","declar","decod","decompos","decompose(int","decompose(n);","decompose(num);","decomps","decras","decreas","dedup)","dedup);","dedup;","deep","default:","definit","delet","deletenode(listnod","delm)","demo:","denot","depth","depth(depth),","depth);","depth,","depth/descript","depth:","depth;","depthsum(const","depthsuminverse(vector","deque,","deque.front();","deque.pop_back();","deque.pop_front();","deque.push_back(index);","deque.push_back(val);","deque:","deque;","dequeue(auto&","deriv","descpretion.","description.","deseri","deserialize(str","deserializehelper(std::stringstream&","deserializehelper(stream);","design","design/descript","destin","destination:","determin","determinerow(const","determinerow(matrix,","develop","diamet","diameter.","diameterofbinarytree(treenod","diamter","dice","dices.","dict","dict)","dict,","dict.emplace(std::move(norm));","dict.insert(end);","dict.size();","dict:","dict;","dictionari","dictionary)","dictionary,","dictionary.","dictionary/descript","dictionary:","diff","diff,","digit","digit:","digit;","digits,","digits.length(),","digits/descript","digits:","digits[index];","dim)","dim,","dimension,","direct","direct[0];","direct[1];","directs({{1,","directs)","directs;","discov","discover)","discover);","discover,","discover;","discover[bgn]","discrete.)","disjoint","disjointset","disjointset()","disjointset(int","dist(dist),","dist(num_r,","dist,","dist;","distanc","distance/descript","distancek(treenod","distinct","distribut","div_t","divd","divid","divide(int","dividend","dividend,","dividend:","divisor","divisor)","divisor:","divr","divr)","divr;","dn","dog","dog(4)","dollars.","don't","dot","dot(3)","doubl","down","down/descript","dp","dp(amount","dp(d","dp(k","dp(k,","dp(len_","dp(n","dp(n);","dp(n,","dp(n1","dp(na","dp(nn,","dp(num_r,","dp(target","dp);","dp[0]","dp[0][","dp[0][0]","dp[0][i","dp[0][i]","dp[0][nums[0]]","dp[1]","dp[2]","dp[bgn","dp[bgn]","dp[c","dp[c]","dp[c]:","dp[d][target];","dp[day]","dp[i","dp[i]","dp[i]:","dp[i];","dp[i][i]","dp[i][j","dp[i][j]","dp[i][j]:","dp[i][j][h]","dp[i][j][h]:","dp[i][k","dp[i][k]","dp[j]","dp[j])","dp[j],","dp[k","dp[len_s][len_p];","dp[n","dp[n];","dp[n][k][target];","dp[n][m];","dp[n][target];","dp[nx][ny]","dp[nx][ny]);","dp[target];","dp[x][y]","dpulic","dst","dst)","dst);","dst,","dst.node,","dst.use","dst;","dst_id","dst_id))","dst_id);","dsts)","dummi","dummy;","duplic","duplicate.","duplicates.","dynam","e","e)","e.g.","e.g.:","e.g:","each","easili","eatgr","edg","edge.city1;","edge.city2;","edge.cost));","edge.size();","edge[0];","edge[1];","edges)","edges:","edit","elem","elem.num","elem.weight","elem;","element","element(int","element.","elements/descript","elements:","empti","empty.","encod","encode;","encount","end","end(end)","end(end),","end)","end));","end);","end,","end:","end;","end_first","end_first(v1.end()),","end_first)","end_first,","end_second(v2.end()),","end_second)","end_second;","endpoints.","ends.emplace_back(vec.end());","ends.erase(ends.begin()","ends.push_back(vec.end());","ends;","ends[turn])","end};","enqueue(auto&","enqueue(min,","entir","entries.","enum","eqaul","equal","equal.","equal:","essenti","estim","etual","evalrpn(vector","evalu","evaluate(stack,","evaluate(std::stack&","evaluateexpression(vector","evaluaterpn(const","evaluaterpn(rpn);","evaluation/descript","even,","event","event(event)","event)","event::bgn));","event::end));","event::land));","event::log_in)","event::log_in));","event::log_out));","event::take_off));","event;","exactli","examination.","example,","exce","exist","exist(vector>","exp)","exp.size();","exp[i];","experi","expertis","expired_key","explor","expon","exponent.","exponential.","express","expression:","expressiontreenod","expressiontreenode(str","expressiontreenode*","expressiontreenode:","extra","f","f)","f,","f2e","fac_part_bin","fac_part_bin;","fac_part_dec","face","fals","false));","false);","false.","false;","far","far.","fewest","fill","filter","final","final_state:","finally,","find","find(int","find(parent[x]);","find(x);","find(y);","find,","findanagrams(str","findcelebrity(int","findduplicate(vector","findfirstbadversion(int","finditinerary(vector>&","findladders(str","findleaves(treenod","findlowerbound(root","findlowerbound(root,","findlowerbound(treenode*","findmax(const","findmin(vector","findmissingranges(vector","findsubtree(treenod","findsubtree2(treenod","findsuccessor(auto","findsuccessor(root,","findsuccessor(stk.top()","findsuccessor(treenode*","findtargetsumways(vector","findupperbound(root","findupperbound(root,","findupperbound(treenode*","finish","first","first,","first.","first.push(root);","first.size();","first;","firstli","firstwillwin(int","firstwillwin(vector","five","five/descript","flatten","flatten(treenod","flatten(vector","floodandfill(rec.x,","flow","flow/descript","follow","form","format","format:","formula:","forward","forward.end())","forward.find(ch);","forward;","forward[ch]","found","found_a(false),","found_a(found_a),","found_a,","found_a;","found_b(false),","found_b(found_b),","found_b,","found_b;","foursum(vector","fraction","frame.","freq","freq(256,","freq)","freq[ch];","freq_p(256,","freq_s(256,","freq_s(26,","freq_t(256,","freq_t(26,","frequenc","fuction","fulfil","full","full);","futhermore,","futur","g","g)","game","game.","game/descript","gap.","gate","gates/descript","genabbreviation(const","genabbreviation(word);","gener","generateid(m,","genpow(doubl","genpow(x,","genrange(long","get(int","getinteger()","getline(stream,","getmedian(auto&","getnumberofsets()","getpredecessors(pred);","getpredecessors(std::stack&","getrandom","getrandom()","getsuccessors(std::stack&","getsuccessors(succ);","gettoken(const","gettoken(teststr,","github:","give","given","go","god","good","gradual","graduat","graph","graph)","graph,","graph.","graph.size()","graph/descript","graph;","graph[bgn])","graph[ch_dst]","graph[ch_src].insert(ch_dst);","graph[src])","graph[src].push_back(dst);","great","greater","grid","grid(n,","grid,","grid.size();","grid:","grid[0].size();","grid[x][y]","group","groupanagrams(vector","groups)","groups;","groups[key].push_back(word);","guarante","guid","h","h)","h);","h,","h.","h;","half","half;","hand","hand,","handl","happi","hard","has_odd","hash","hashtable(key","hasnext()","haspath(vector>","head","head)","head,","head.","head:","head;","height","height(height)","height)","height:","height;","heights(num_c,","heights.size();","hence,","here","here.","high","highest","highfive(vector&","histogram","histogram.","histogram/descript","hit","hit(1)","hod","hold","holds,","hole","hot","hot(2)","hour","hous","house,","house.","houserobber(vector","houserobber2(vector","houserobber3(treenod","houses.","however,","https://github.com/zsshen","https://leetcode.com/problems/check","https://leetcode.com/problems/construct","https://leetcode.com/problems/max","https://leetcode.com/problems/minimum","https://leetcode.com/problems/numb","https://leetcode.com/problems/remov","https://leetcode.com/problems/shortest","https://mzl.la/2fo3bjq","https://www.linkedin.com/in/zsshen","https://www.lintcode.com/problem/3sum","https://www.lintcode.com/problem/3sum/descript","https://www.lintcode.com/problem/4","https://www.lintcode.com/problem/4sum/descript","https://www.lintcode.com/problem/add","https://www.lintcode.com/problem/al","https://www.lintcode.com/problem/alien","https://www.lintcode.com/problem/backpack","https://www.lintcode.com/problem/backpack/descript","https://www.lintcode.com/problem/balanc","https://www.lintcode.com/problem/best","https://www.lintcode.com/problem/binari","https://www.lintcode.com/problem/build","https://www.lintcode.com/problem/burst","https://www.lintcode.com/problem/clon","https://www.lintcode.com/problem/closest","https://www.lintcode.com/problem/coin","https://www.lintcode.com/problem/combin","https://www.lintcode.com/problem/construct","https://www.lintcode.com/problem/continu","https://www.lintcode.com/problem/convert","https://www.lintcode.com/problem/copi","https://www.lintcode.com/problem/cours","https://www.lintcode.com/problem/decod","https://www.lintcode.com/problem/decreas","https://www.lintcode.com/problem/delet","https://www.lintcode.com/problem/diamet","https://www.lintcode.com/problem/distinct","https://www.lintcode.com/problem/divid","https://www.lintcode.com/problem/edit","https://www.lintcode.com/problem/evalu","https://www.lintcode.com/problem/express","https://www.lintcode.com/problem/find","https://www.lintcode.com/problem/first","https://www.lintcode.com/problem/flatten","https://www.lintcode.com/problem/graph","https://www.lintcode.com/problem/group","https://www.lintcode.com/problem/happi","https://www.lintcode.com/problem/high","https://www.lintcode.com/problem/hous","https://www.lintcode.com/problem/impl","https://www.lintcode.com/problem/inord","https://www.lintcode.com/problem/insert","https://www.lintcode.com/problem/integ","https://www.lintcode.com/problem/interleav","https://www.lintcode.com/problem/intersect","https://www.lintcode.com/problem/island","https://www.lintcode.com/problem/k","https://www.lintcode.com/problem/kth","https://www.lintcode.com/problem/largest","https://www.lintcode.com/problem/lett","https://www.lintcode.com/problem/longest","https://www.lintcode.com/problem/lowest","https://www.lintcode.com/problem/lru","https://www.lintcode.com/problem/max","https://www.lintcode.com/problem/maxim","https://www.lintcode.com/problem/maximum","https://www.lintcode.com/problem/meet","https://www.lintcode.com/problem/merg","https://www.lintcode.com/problem/min","https://www.lintcode.com/problem/minimum","https://www.lintcode.com/problem/miss","https://www.lintcode.com/problem/mov","https://www.lintcode.com/problem/n","https://www.lintcode.com/problem/nest","https://www.lintcode.com/problem/next","https://www.lintcode.com/problem/numb","https://www.lintcode.com/problem/on","https://www.lintcode.com/problem/open","https://www.lintcode.com/problem/pacif","https://www.lintcode.com/problem/palindrom","https://www.lintcode.com/problem/partit","https://www.lintcode.com/problem/permut","https://www.lintcode.com/problem/permutations/descript","https://www.lintcode.com/problem/post","https://www.lintcode.com/problem/powx","https://www.lintcode.com/problem/reconstruct","https://www.lintcode.com/problem/recov","https://www.lintcode.com/problem/regular","https://www.lintcode.com/problem/remov","https://www.lintcode.com/problem/revers","https://www.lintcode.com/problem/roman","https://www.lintcode.com/problem/rot","https://www.lintcode.com/problem/scrambl","https://www.lintcode.com/problem/search","https://www.lintcode.com/problem/sequ","https://www.lintcode.com/problem/seri","https://www.lintcode.com/problem/set","https://www.lintcode.com/problem/simplifi","https://www.lintcode.com/problem/slid","https://www.lintcode.com/problem/sort","https://www.lintcode.com/problem/spars","https://www.lintcode.com/problem/split","https://www.lintcode.com/problem/sqrtx","https://www.lintcode.com/problem/sqrtx/descript","https://www.lintcode.com/problem/ston","https://www.lintcode.com/problem/str","https://www.lintcode.com/problem/strobogrammat","https://www.lintcode.com/problem/subarray","https://www.lintcode.com/problem/submatrix","https://www.lintcode.com/problem/subset","https://www.lintcode.com/problem/subsets/descript","https://www.lintcode.com/problem/subtre","https://www.lintcode.com/problem/sudoku","https://www.lintcode.com/problem/sup","https://www.lintcode.com/problem/surround","https://www.lintcode.com/problem/symmetr","https://www.lintcode.com/problem/target","https://www.lintcode.com/problem/th","https://www.lintcode.com/problem/tim","https://www.lintcode.com/problem/two","https://www.lintcode.com/problem/ugli","https://www.lintcode.com/problem/uniqu","https://www.lintcode.com/problem/valid","https://www.lintcode.com/problem/wal","https://www.lintcode.com/problem/wildcard","https://www.lintcode.com/problem/window","https://www.lintcode.com/problem/wood","https://www.lintcode.com/problem/word","https://www.lintcode.com/problem/zigzag","https://www.slideshare.net/zongshenshen","https://www.zsshen.com","i(nestedlist);","i(vec2d);","i)","i,","i.","i/descript","i6l","i6t","i7n","i;","i>","id","id(id),","id,","id;","ideal","idx_","idx_a(idx_a),","idx_a,","idx_a;","idx_b(idx_b)","idx_b)","idx_b;","idx_p","idx_p,","idx_s)","idx_s,","ieee","ignor","ii","ii/descript","ii/description?_from=ladder&&fromid=4","iii","iii/","iii/descript","implement","implementation,","impli","imposs","in5l","in6n","in_bgn","in_bgn,","in_end)","in_end);","in_end,","includ","increas","indeg;","indeg[dst];","indegree;","indegree[dst];","index","index(index)","index)","index,","index2]","index;","index_a","index_col(0),","index_row(0),","index_w","indic","industri","infix","information.","init","init_state:","initi","inner","inner.end())","inner.find(t);","inord","inorder,","inorder.size();","inorder:","inordersuccessor(treenod","inordertraversal(treenod","input","input.begin(),","input.end()));","insert","insert(int","insert(listnod","insert(str","insert(vector","insertnode(treenod","insid","instanti","int","int&","int4l","int5n","int_max","int_max)","int_max);","int_max;","int_min;","int_part_bin","int_part_bin;","int_part_dec","intcod","inte3l","inte4n","integ","integer,","integer.","integer/descript","integers,","integers.","integers/descript","intens","inter2l","interexchan","interexchang","interfac","interleav","intern","intern1l","internet","intersect","intersection(vector","intersection/descript","interv","interv1l","interval&","interval(int","interval(interval),","interval,","interval.","interval.end","interval.start","interval/descript","interval:","interval;","intervals)","intervals.end(),","intervals.size();","intervals/descript","intervals:","intial","intr4n","introduct","intrus","inttoroman(int","invalid","invers","invok","ip","ip)","ip.find('.');","ip.find(':');","is:","is_bst(is_bst)","is_bst)","is_bst;","is_word(false)","is_word;","isbadversion(int","isbalanced(treenod","iscompletetree(treenode*","ishappy(int","isinteger()","isinterleave(str","island","islandperimeter(vector>","islands/descript","ismatch(str","isnumber(str","isoneeditdistance(str","ispalindrome(int","isscramble(str","isstrobogrammatic(str","issymmetric(treenod","issymmetrichelper(left","issymmetrichelper(root,","issymmetrichelper(treenode*","isunique(str","isv4(ip)","isv6(ip)","isvalid(const","isvalidbst(treenod","it'","it,","it_","it_t","item","items.","iter","iter_b","iter_f","iteration.","iterator/descript","ith","itinerari","itinerary/descript","itself","iv","iv/descript","j","j)","j).","j):","j,","j.","j]","javascript","jit","job.","jth","judg","k","k)","k);","k,","k.","k/descript","k:","k]","k])","k];","kclosest(vector","kclosestnumbers(vector","key","key(word);","key)","key,","key.end());","key:","key;","keyboard","keyboard/solut","keys.","knapsack","know","knows(a,","knows(int","ksumii(vector","kth","kthinarrays(vector>","kthsmallest(int","kthsmallest(vector>","kthsmallestsum(vector","l","l)","l))","l);","l,","l.count","l.found_a","l.found_b","l.max","l.max)","l.min,","l.sum","l1/","l2/","l2e","l:","l;","l[i]","l]","l_index","l_sum","l_sum);","label","label(label)","label(x)","label(x),","label)","label;","ladder","ladder/descript","ladderlength(str","larg","largest","largestnumber(vector","largestrectanglearea(vector","last","last_l","last_l;","last_r","last_r;","later.","lc","lca","lca(lca)","lca(nullptr)","lca)","lca;","lead","leav","leetcod","left","left(null),","left(nullptr),","left)","left,","left.","left;","left_rang","left_range,","legal","len","len)","len);","len;","len_","len_a","len_p","len_s);","len_s,","len_t","len_t)","len_t);","len_t,","len_w","length","lengthoflongestsubstring(str","lengthoflongestsubstringkdistinct(str","lengths.","less","let'","letter","letter.","lettercombinations(str","level","level(level)","level)","level);","level,","level.","level;","lhs,","lhs.city1.compare(rhs.city1);","lhs.city2","lhs.end","lhs.event","lhs.i","lhs.interval.end","lhs.interval.start","lhs.node","lhs.num","lhs.start","lhs.sum","lhs.type","lhs.val","li","lin","line","line.","line/descript","link","linkedin:","lint","lintcod","lis.back())","lis.push_back(nums[0]);","lis.push_back(nums[i]);","lis.size()","lis.size();","lis;","lis[l]","lis[l])","lis[m])","lis[r]","list","list,","list.","list.begin(),","list.begin();","list.end()));","list.end();","list.erase(iter);","list.push_front(std::make_pair(key,","list/","list/descript","list/leaderboard","list:","list;","listnod","listnode(","listnode(int","listnode(x);","listnode*","listpaths(1,","listpaths(depth","lists.","lists/descript","ll","lmax","ln/","local","local);","locat","lock","lock/descript","log","log(4)","log_in","log_out,","long","longest","longestcommonsubsequence(str","longestcommonsubstring(str","longestconsecutive(vector","longestcontinuousincreasingsubsequence2(vector>","longestincreasingcontinuoussubsequence(vector","longestincreasingsubsequence(vector","longestones(vector&","longestpalindrome(str","longestpalindromesubseq(str","longestrepeatingsubsequence(str","loop","losabl","lose","lot","lot(3)","lower","lower,","lower:","lower;","lower_bound:","lowercas","lowest","lowestcommonancestor(root","lowestcommonancestor(treenod","lowestcommonancestorii(parenttreenod","lowestcost(vector&","lp","lps)","lps);","lr","lru","lrucach","ls","lsit","m","m)","m,","m:","m;","main","make","maketrie(const","maketrie(words);","map","map(256,","map({","map({{\"*\",","map)","map);","map,","map;","map[0]","map[0][num","map[1][(num","map[2][(num","map[3][num","map[ch];","map[digit])","map[h].push_back(root","map[id].pop();","map[id].push(score);","map[index]","map[l_index];","map[level].push_back(nod","map[neighbor]","map[node]","map[node];","map[num]","map[origin];","map[r_index];","map[s[i","map[s[i]];","map[s[n","map[src];","map[stk.top()]","map[sum","map[ticket[0]].emplace_back(ticket[1],","match","match;","match?","match[0]","matching/descript","matrix","matrix)","matrix,","matrix.size();","matrix/descript","matrix:","matrix[0].size();","matrix[m][0])","matrix[r][0])","matter","max","max(dp[i","max(max),","max(std::numeric_limits::min()),","max)","max));","max);","max,","max.begin();","max.end};","max.erase(it);","max.insert(num);","max.pop();","max.push(num);","max.size();","max.top();","max;","max_bgn","max_depth","max_end","max_len","max_len)","max_siz","max_size)","maxa(int","maxaverage(vector","maxcoins(vector","maxdepth(treenod","maxdiff","maxdiff,","maxim","maximal.","maximalrectangle(vector>","maximum","maximum/descript","maxpathsum(treenod","maxpathsum2(treenod","maxprofit(int","maxprofit(vector","maxslidingwindow(vector","maxsubarray(vector","maxsubarraylen(vector","maxsubmatrix(vector>","maxtree(vector","max{","mayb","maze","maze.size();","maze/descript","maze:","maze[0].size();","mean","media","median","median/descript","medianii(vector","medianslidingwindow(vector","meet","mellon","memo","memo)","memo);","memo.end())","memo.find(s);","memo;","memo[root]","memo[root];","memo[s][t]","memo[str]","memo[str];","merg","merge(intervals[0]);","merge(vector","mergeksortedintervallists(vector>","mergesort(bgn,","mergesort(head,","mergesort(listnode*","mergesort(pred,","messag","method","method.","mid","mid,","mid;","middl","min","min()","min(min),","min(std::numeric_limits::max()),","min);","min,","min.begin();","min.bgn","min.end","min.erase(it);","min.insert(num);","min.pop();","min.push(num);","min.size();","min.sum)","min.top();","min;","min_bgn","min_diff","min_end","min_end,","min_l_sum","min_l_sum)","min_l_sum;","min_siz","min_size)","min_stk.pop();","min_stk.push(number);","min_stk.push(std::min(number,","min_stk.top()));","min_stk.top();","min_stk;","mincosttickets(vector&","mindepth(treenod","mindistance(str","minim","minimum","minimumsize(vector","mininsertions(str","minmeetingrooms(vector","minmovestep(vector>","minstack","minstack()","minut","minute;","minwindow(str","min{","min{dp[i","mirror","mirror.end());","mirror.push_back('6');","mirror.push_back('9');","mirror.push_back(ch);","mirror;","miss","mobil","mod(1000000007)","modifi","money","more","moreover,","mountain","mountainsequence(vector","move","movement","movezeroes(vector","moving.","movingaverag","movingaverage(size);","mozilla'","mozilla:","multipl","multiplication/descript","multiply(vector>","must_fill_1st_row","mypow(doubl","mytreenod","mytreenode(int","mytreenode(root","mytreenode*","mytreenode*&","n","n)","n);","n,","n.find('.');","n.length()","n.substr(0,","n.substr(pos,","n/descript","n1","n2","n3","n3)","n:","n;","n^2)","n^4","n^8","n^9","na","name","name_2_id;","name_2_id[dst]","name_2_id[dst];","name_2_id[src]","name_2_id[src];","nb","nbr","nbr,","nc","necessari","necessary.","need","need)","neg","negative.","neighbor","neighbors;","nest","nestedinteg","nestediter","nestediterator(vector","nestedlist","nestedlist)","nestedlist.begin(),","nestedlist.end()));","nestedlist:","new","new_diff","new_diff;","new_head","new_head;","new_nod","new_node;","new_root","new_root;","new_target","new_target)","new_target);","new_target;","new_timestamp","new_timestamp;","newinterval)","newinterval:","next","next()","next(int","next(null)","next(null),","next;","nextclosesttime(str","nextgreaterelement(vector","nextgreaterelements(vector","nextpermutation(vector","nn","nn)","nn);","node","node(node),","node)","node);","node,","node.","node:","node;","nodes'","nodes.","non","nonzero(n,","norm(word);","norm.begin(),","norm.end(),","normal","not.","notat","notation/descript","note","note:","noth","now","now.","nr","ns","nt","ntcode","nth","nthsuperuglynumber(int","nthuglynumber(int","null,","null.","null;","nullptr);","nullptr,","nullptr;","num","num(num),","num)","num);","num,","num:","num;","num[0]","num[1]","num[i","num[j]","num];","num_c","num_c,","num_hous","num_in","num_in)","num_post","num_post)","num_pr","num_r","num_r,","number","number)","number,","number.","number/descript","number:","numberofoperations(str","numbers,","numbers.","numbers:","numcourses,","numcourses:","numcourses;","numdecodings(str","numdistinct(str","numislands(vector>","numislands2(int","numrollstotarget(int","nums)","nums,","nums.end());","nums.end(),","nums.pop_back();","nums.push_back(val);","nums.size()","nums.size();","nums1'","nums1)","nums1.end());","nums1.size(),","nums1:","nums2","nums2)","nums2.end());","nums2.size();","nums2:","nums:","nums;","nums[","nums[0]","nums[0],","nums[0];","nums[0]]","nums[1]","nums[bgn","nums[bgn];","nums[deque.back()])","nums[end]);","nums[f","nums[f]","nums[f],","nums[i","nums[i]","nums[i])","nums[i],","nums[i];","nums[i]]","nums[index]);","nums[index];","nums[j","nums[j]","nums[j]}","nums[k]","nums[mid];","nums[n","nums[s]","nums[s],","nums[stk.top()])","numsubarrayproductlessthank(vector","numtrees(int","nx","ny","o","o(1)","o(c^2","o(k","o(klogk)","o(kn)","o(nlogl)","o(nlogn)","o(nlogs)","o(ns)","o1/descript","obj","obj.getrandom();","obj.insert(val);","obj.isunique(word);","obj.next(val);","obj.remove(val);","object","objective:","occurr","od","odd,","offic","offset","offset)","offset.","offset:","offspring,","on","onc","one!","one.","onto","op","op)","op.x;","op.y;","op1","op2","op2;","open","openlock(vector","oper","operations.","operator()","operators)","operators:","opt","opt(int_min,","opt(pool);","opt)","opt);","opt.count","opt.count;","opt.root","opt.root;","opt.sum","opt.sum)","opt;","optim","optimization.","option","orchestr","order","order.length()","order.push_back(src);","order.size()","order;","org:","origin","orign","otherwis","otherwise,","ouptut","out","outer","overrid","p","p)","p,","p.","p.length();","p:","p[i","p[j","p[j]","pacif","pacific(m,","pacificatlantic(vector>&","page","pages:","pair","pair,","pair.first;","pair.second.end(),","pair.second;","pairs.","palin(n,","palin[i","palin[i][j]","palin[i][j]:","palindrom","palindrome/","palindrome/descript","palindromic,","palindromic.","param","parent","parent(nullptr),","parent(std::vector(n))","parent)","parent,","parent;","parent[px]","parent[x]","parent[x];","parenthes","parentheses/descript","parents(std::vector(n))","parents;","parenttreenod","parenttreenode:","part","part.","parti","partit","partition(listnod","partition(str","partitionarray(vector","partitioning/descript","pass","pat,","pat[idx_p];","patch","patent","path","path.","path.length();","path/descript","path:","pathsum(vector","pattern","pattern)","pattern,","pattern.length(),","pattern/descript","pattern:","pb","pe","peak.","peopl","perform","perimet","perimeter/descript","period","period)","period,","period.","period;","perm,","perm.pop_back();","perm.push_back(nums[i]);","perm;","permut","permutation,","permutation.","permutation/descript","permutations.","permute(vector","permuteunique(vector","person","phone","pick","piec","piece);","piece:","pigeon","pile","pile.","pinpoint","pipelin","pivot","place","plan","plan_a","plan_b","plan_b);","player","pleas","pn.push_back(stack.top());","pn;","po","point","point()","point(int","point.","pointer","pointer.","pointer/descript","pointers,","points.size();","points/descript","polish","pool,","pool.push_back(time[0]","pool.push_back(time[1]","pool.push_back(time[3]","pool.push_back(time[4]","pool;","pool[1])","pool[3]);","pop","pop()","pope","portfolio:","portions.","pos);","posibl","posit","position.","position:","positive,","possibl","post","post)","post,","post.size();","post_bgn","post_bgn,","post_end","post_end)","postfix","postiv","postoffice(vector","postord","postorder,","postorder.size();","postorder:","postordertraversal(treenod","pow","pow(2,","pow(x,","power","pr","pre,","pre.size();","pre[pre_bgn","pre[pre_bgn];","pre_bgn","pre_bgn,","pre_end)","pre_end,","precedence)","pred","pred)","pred);","pred,","pred.","pred.pop();","pred.push(curr);","pred.top();","pred:","pred;","pred_bgn","pred_end","pred_end;","predecessor","predecessor,","predict","prefix","prefix(i","prefix(i)","prefix(j)","prefix(n","prefix(nn","prefix)","prefix,","prefix.","prefix.pop_back();","prefix.push_back(root","prefix:","prefix;","prefix[i];","prefix[j","prefix[l],","prefix[r]","prefix_len","prefix_len)","prefix_lens(n);","preix(i)","preorder","preorder,","preorder.size();","preorder:","preorder[pre_bgn];","preordertraversal(treenod","prerequisit","prerequisites)","prerequisites:","present","press","prev","prev.end","prev.end)","previou","price","price);","price:","price[h])","price[j]","price[j]},","prices)","prices.size();","prices:","prices[0];","prices[i","prices[i]","price}","prime","primes:","prioriti","private:","problem","problem/descript","procedure,","procedure.","product","profit","profit[i]","program","projects,","prolif","proper","protect","public:","publications.","purchase.","push","push(int","put","puzzl","puzzles.","px","py","py)","py;","q","q)","q);","q:","qps,","quadruplet","queen","queens,","queens/descript","queens;","queue","queue.front();","queue.insert(1);","queue.pop();","queue.push(\"0000\");","queue.push(ch);","queue.push(dst);","queue.push(init);","queue.push(neighbor);","queue.push(nod","queue.push(node);","queue.push(num);","queue.push(record(a[0]","queue.push(record(bgn,","queue.push(record(matrix[0][0],","queue.push(record(nod","queue.push(record(r,","queue.push(record(root,","queue.push(record(start,","queue.push(record(start[0],","queue.push(root);","queue.size();","queue.top();","queue;","quickselect(auto&","quickselect(nums,","quot","quot;","r","r(r),","r)","r);","r,","r.","r.count","r.found_a;","r.found_b;","r.height)","r.height);","r.sum","r.sum;","r;","r]);","r_index","r_sum","radix","radix;","radixes;","radixes[a]))","radixes[b]))","radixes[num]","rand","rand;","random","random()","random(null)","randomizedset","randomizedset()","randomizedset();","randomlistnod","randomlistnode(curr","randomlistnode(int","rang","range(i,","range.","range/descript","ranges/descript","ratat","re","reach(num_r,","reach);","real","rebalance(min,","rec","rec.c","rec.id;","rec.index;","rec.interval;","rec.level;","rec.node;","rec.r","rec.time;","rec.x;","rec.y,","rec.y;","reconstruct","reconstruction/descript","record","record&","record()","record();","record(0,","record(bool","record(const","record(false,","record(int","record(interv","record(min_bgn,","record(sum,","record(treenode*","record(true,","recordcompar","recordcompare>","records.end(),","records.push_back(record(airplane.end,","records.push_back(record(airplane.start,","records;","recov","recs)","recs.end(),","recs.push_back(record(interval.end,","recs.push_back(record(interval.start,","recs.push_back(record(seq.end,","recs.push_back(record(seq.start,","recs;","rectangl","rectangle/descript","recurs","reduc","redund","ref","ref)","refs.erase(expired_key);","refs.erase(val);","refs;","refs[key]","refs[key];","refs[nums[index]]","refs[val]","refs[val];","region","regions/descript","regular","relev","remain","remained,","remov","removal.","remove(int","removeduplicates(vector&","removeinvalidparentheses(str","removenode(treenod","repeat","replac","replic","replicas.","repres","represent","representation/descript","requir","requirements.","res)","res.balanced;","res.end());","res.first;","res.lca;","res.push_back('0');","res.push_back('1');","res.second","res.second;","res;","research","resolv","respect","respectively.","result","result&","result()","result();","result(bool","result(false);","result(int","result(root","result(sum,","result(true);","result.id;","result.is_bst;","result.push_back(solution.next());","result.score;","result;","results)","ret","ret;","return","return;","revers","reversebetween(listnod","rght","rhs)","rhs.cost)","rhs.dist)","rhs.interval.end)","rhs.interval.end;","rhs.interval.start;","rhs.num;","rhs.start)","rhs.sum;","rhs.time)","rhs.val;","rhs.y)","right","right(null)","right(nullptr),","right)","right,","right;","rl","rl,","rob","rob(const","rob(nums,","robber","robber/descript","roll","roman","roman/descript","romantoint(str","room","rooms.size();","rooms/descript","rooms:","rooms[0].size();","root","root(nullptr)","root(root)","root(std::make_shared())","root)","root);","root,","root.","root:","root;","root_val","rotat","rotatestring(str","round.","row","row);","row,","row.","row;","row[l]","row[m])","row[r])","rpn","rpn)","rpn.push_back(stack.top());","rpn.push_back(stk.top());","rpn;","rr","runbacktracking(","runbacktracking(0,","runbacktracking(1,","runbacktracking(c","runbacktracking(cands,","runbacktracking(copy,","runbacktracking(index","runbacktracking(nums,","runbacktracking(pool,","runbacktracking(s,","runbacktracking(str,","runbacktracking(suffix,","rundfs(curr","rundfs(mytreenode*","rundfs(new_target,","runinorder(","runinorder(curr","runinorder(root,","runpostorder(root","runpostorder(root);","runpostorder(root,","runpostorder(treenode*","runpreorder(","runpreorder(curr","runpreorder(map[1],","runpreorder(root","runpreorder(root,","runpreorder(start,","runpreorder(treenode*","runreversedinorder(root","runreversedinorder(root,","runreversedinorder(treenode*","s","s(i,","s)","s,","s.","s.length()","s.length();","s.substr(bgn,","s.substr(i,","s0","s0,","s1","s1)","s1,","s1.length();","s1:","s1[i]","s2","s2)","s2,","s2.","s2.length();","s2:","s2[j],","s3","s3.length();","s3:","s3[i","s:","s;","s[0]","s[0],","s[1]","s[1],","s[2]","s[2],","s[2]:","s[3]","s[i","s[i]","s[i]:","s[j]","s[j],","s[l++];","s[n","s[n]","sa","sa:","same","sb''.","sb'.","sb:","sc","scalabl","scale","scan","scenario","scenarios.","schedul","schedule/descript","score","score)","score;","scrambl","scs.end());","scs.push_back(s1[","scs.push_back(s2[","scs;","search","search(str","search(vector","search/descript","searchmatrix(vector>","searchrange(vector","searchrow(const","searchrow(matrix[r],","second","second,","second.push(nod","second;","secur","see","seed","segment","segments,","segments.","segments:","select","sell","sell_1st","sell_1st,","sell_1st:","sell_2nd","sell_2nd,","sell_2nd:","sell_first","sell_second","sell_second;","selling.","sentences.","seq","seqa)","seqa:","seqb)","seqb:","seqs)","seqs:","sequenc","sequence/descript","sequencereconstruction(vector","serial","serialize(root","serialize(treenod","serv","servic","set","set(id);","set(int","set)","set.add(id);","set.erase(backward);","set.erase(forward);","set.erase(seed);","set.insert(a);","set.insert(ch);","set.insert(config);","set.insert(n);","set.insert(num);","set.insert(number);","set.size();","set.unite(src_id,","set;","sets(n);","setzeroes(vector>","share","shift","shortest","shortestcommonsupersequence(str","shortestdistance(vector>","show","shown","si","sibl","sibling,","sibling.","side","signs.","simpli","simplifi","simplifypath(str","singl","singli","situat","siutat","size","size(0),","size)","size:","size;","size_1","size_2","size_a","size_b","sj","sk","ski","sky.","sky/descript","slide","slideshare:","slope.","slowest","small","smaller","smallest","sn","social","solut","solution()","solution(v1,","solution(vecs);","solution.","solv","solvenqueens(int","solver","solver/descript","solvesudoku(vector>","sort","sortcolors(vector","sortlist(listnod","sourc","source.length();","sp","space","span","spars","specif","specifi","specific,","specifically,","specul","split","splitstring(string&","sqrt","sqrt(doubl","sqrt(int","sqrt(x)","squar","square/descript","squares/descript","srand(time(nullptr));","src","src,","src;","src_id","ss","stack","stack),","stack,","stack.","stack.pop();","stack.push(result);","stack.push(std::stoi(token));","stack.push(token);","stack.top();","stack/descript","stack:","stack;","start","start)","start,","start:","start;","start[1]));","startswith(str","state","state,","state.","states;","static","static_cast(dividend);","static_cast(divisor);","static_cast(low","static_cast(nums[i","static_cast(nums[i])","static_cast(nums[i]));","static_cast(opt.sum)","static_cast(size);","static_cast(std::floor(std::log10(num)))","static_cast(std::pow(10,","static_cast(sum)","std::abs(l.height","std::abs(len_","std::dequ","std::div(n,","std::greater>","std::greater>>","std::less>","std::list>","std::make_pair(pred,","std::make_shared();","std::map","std::max(","std::max(a[0],","std::max(ans,","std::max(buy_first,","std::max(buy_second,","std::max(dp[i","std::max(dp[nx][ny],","std::max(l,","std::max(l.height,","std::max(max,","std::max(max_depth,","std::max(nums[bgn],","std::max(opt,","std::max(plan_a,","std::max(prev.end,","std::max(r,","std::max(ret,","std::max(rob(nums,","std::max(root","std::max(sell_first,","std::max(sell_second,","std::max(std::max(tl,","std::max(width,","std::min(h,","std::min(min,","std::min(min_l_sum,","std::move(ans);","std::move(bgn),","std::move(curr);","std::move(end)));","std::move(second);","std::multiset>","std::numeric_limits::max();","std::numeric_limits::min();","std::pair","std::priority_queue,","std::queue","std::reverse(ans.begin(),","std::reverse(mirror.begin(),","std::reverse(res.begin(),","std::reverse(scs.begin(),","std::reverse(str.begin()","std::reverse(str.begin(),","std::set>","std::shared_ptr","std::sort(cands.begin(),","std::sort(connections.begin(),","std::sort(intervals.begin(),","std::sort(key.begin(),","std::sort(nums.begin(),","std::sort(nums1.begin(),","std::sort(nums2.begin(),","std::sort(pair.second.begin(),","std::sort(records.begin(),","std::sort(recs.begin(),","std::stack","std::stack&","std::stack::iterator,","std::stod(str);","std::stoi(str);","std::stoi(token);","std::stoi(token,","std::string","std::string&","std::string::npos)","std::stringstream","std::swap(nums.back(),","std::swap(nums[mid],","std::swap(src","std::to_string(bgn)","std::to_string(bgn);","std::to_string(end);","std::to_string(len","std::to_string(num);","std::to_string(root","std::tolower(ch);","std::transform(norm.begin(),","std::unordered_map","std::unordered_map&","std::unordered_map,","std::unordered_map>","std::unordered_map>&","std::unordered_map>::iterator>","std::unordered_multiset","std::unordered_set","std::unordered_set&","std::unordered_set();","std::vector","std::vector&","std::vector());","std::vector();","std::vector(9,","std::vector(len_p","std::vector(m","std::vector(m,","std::vector(n","std::vector(n,","std::vector(n2","std::vector(nb","std::vector(nn,","std::vector(nt","std::vector(num_c,","std::vector(size_b,","std::vector(t,","std::vector(target","std::vector::iter","std::vector::iterator&&","std::vector::iterator>","std::vector::iterator>>","std::vector>","std::vector>&","std::vector>(","std:unordered_set","step","step,","steps.","still","stk)","stk);","stk.back()","stk.back();","stk.pop();","stk.pop_back();","stk.push(curr","stk.push(curr);","stk.push(i);","stk.push(num);","stk.push(number);","stk.push(record(1,","stk.push(record(depth","stk.push(record(depth,","stk.push(root);","stk.push(start","stk.push(std::make_pair(bgn,","stk.push(std::make_pair(list.begin(),","stk.push(std::make_pair(nestedlist.begin(),","stk.push(token);","stk.push_back(curr);","stk.top()","stk.top())","stk.top();","stk;","stk[0]","stock","stock/descript","stone","stonegame(vector","stonegame2(vector","stop","store","str","str(i,","str)","str,","str.begin()","str.end());","str.length(),","str.length();","str.push_back('","str.substr(0,","str.substr(idx_s,","str.substr(index,","str.substr(l,","str:","str;","str[0]","str[i","str[i]","str[len","strategi","stream","stream(data);","stream)","stream/descript","stream;","string","string&","string,","string,denot","string.","string/descript","strings,","strobogrammat","strs)","strs:","struct","structur","structure,","student","subarray","subarray,","subarray.","subarray/descript","subarraysum(","subarraysum(vector","subarraysumclosest(vector","subarraysumequalsk(vector","subarraysumii(vector","submatrix","submatrix/descript","submatrixsum(vector>","subpattern","subproblem","subract","subsequ","subsequence'","subsequence)","subsequence/descript","subsequences/descript","subset","subsets(vector","subsets.","subsetswithdup(vector","substr","substring,","substring.","substring/descript","subtract","subtre","subtree/descript","succ","succ)","succ);","succ.pop();","succ.push(curr);","succ.top();","succ:","succ;","successor","sucessor","such","such:","sudoku","suffix","suffix,","suffix.","sum","sum(0),","sum(0.0)","sum(i","sum(i)","sum(i):","sum(i,","sum(n,","sum(sum)","sum(sum),","sum)","sum);","sum,","sum/","sum/descript","sum;","sum[0];","sum[0][n","sum[i","sum[i]","sum[i][j]","sum[n","super","supersequ","supersequence/","suppos","surround","surroundedregions(vector>","svnrepo","svnrepo::isbadversion(k)","swap","swapsegment(nums,","switch","switch(op)","symbol","symbol)","symbol,","symbol;","symmetr","syn(num_r,","synthet","system","system,","t","t)","t,","t.","t.length();","t:","t[0];","t[j],","tabl","tail","target","target)","target))","target);","target,","target.","target.length();","target:","task","tcode","temp","temp.quot;","test","teststr.length();","teststr:","tgrea","th","that'","then,","theory,","therefore,","this,","those","three","threesum(vector","threesumclosest(vector","thu","thus,","thw","ticket","tickets)","tickets.size()","tickets/","till","time","time(time),","time);","time,","time/descript","time:","time;","timeintersection(vector","times.","times:","timestamp","timestamp)","timestamp,","timestamp;","tl","tlr","tlr);","to.","todo:","token","token)","token,","token.","token.length();","token;","tokens)","tokens:","tokens;","tonight","too.","top","top.bgn;","top.depth;","top.end;","top.first;","top.second;","tostring(auto&","tostring(final_state);","tostring(init_state);","total","total(0),","total;","total_col(0),","total_row(vec2d.size()),","tp","tp,","tr","tr),","trace(n1","track","transact","transform","travel","travers","traversal.","traversal/","traversal/descript","tree","tree)","tree,","tree.","tree/","tree/descript","tree:","treenod","treenode(inorder[in_bgn]);","treenode(int","treenode(num);","treenode(pre[pre_bgn]);","treenode(stoi(token));","treenode*","treenode*&","treenode,","treenode:","trees/descript","tri","trie","trie()","trie,","trie.","trie;","trie[\"\"].insert(word);","trie[key])","trienod","trienode()","tries,","trigger","trim(s);","triplet","triplets.","trival","true","true);","true;","ts","ts,","turn","turn(0)","turn(0),","turn(turn::first)","turn);","turn,","turn::first)","turn::first;","turn::second;","turn;","two","twos,","twosum","twosum(","twosum(const","twosum(nums,","type","type(type)","type)","type;","u.s.","ugli","undefin","undirect","undirectedgraphnod","undirectedgraphnode(int","undirectedgraphnode(neighbor","undirectedgraphnode(nod","undirectedgraphnode*","union","uniqu","unit","unite(int","unlock","unordered_map>","unordered_set","unordered_set&","unsort","until","up","updat","upon","upper","upper)","upper));","upper)};","upper:","upper;","upper_bound:","uppercas","upsid","upsidedownbinarytree(treenod","us","use(n,","use,","use[i]","use_cols(9,","use_cols,","use_grids(9,","use_grids)","use_grids);","use_rows(9,","use_rows,","used(used)","used)","used;","v","v.push_back(i.next());","v/descript","v1,","v1:","v2)","v2);","v2:","v:","v[i","v[i]","val","val(val)","val(x),","val)","val))","val);","val,","val:","val;","valid","validipaddress(str","validtree(int","validwordabbr","validwordabbr(dictionary);","validwordabbreviation(str","validwordsquare(vector","valu","value)","value));","value.","value/descript","value:","value;","values.","values.size();","values:","values[i","values[i]","values[i];","values[j]","values[n","varabl","variou","vec","vec2d(vec2d)","vec2d)","vec2d;","vecs(vecs)","vecs)","vecs:","vecs;","vector","vector&","vector(n,","vector(n2","vector(target","vector,","vector/descript","vector2d","vector2d(vector>&","vector>","vector>&","veri","version","version.","version/descript","vertic","verticalorder(treenod","vi","viii","visit","visit(num_r,","visit(size_a,","visit.emplace(\"0000\");","visit.insert(init);","visit;","visit[0][0]","visit[r][c]","visit[start[0]][start[1]]","visualization:","void","w[i]","wall","wallsandgates(vector>","want","water","way","ways/descript","weight","weight(weight)","weight)","weight;","well.","wheel","whether","white","whitespac","whose","width","width;","widthofbinarytree(treenod","wildcard","win","window","window,","window.","window:","winnabl","winnable.","winsum(vector","within","without","wood","woodcut(vector","word","word(word),","word)","word,","word.length();","word1:","word2:","word:","word;","word[index])","word[index];","wordbreak(str","wordbreak3(string&","worddict,","worddict:","wordpattern(str","wordpatternmatch(str","words)","words.","words.size();","words:","words;","words[0].length()","words[0].size();","words[0];","words[word]","wordsabbreviation(vector","wordsearchii(vector>","wordsquares(vector","work","work.","write","wrong!","x","x(0),","x(a),","x(x),","x)","x,","x:","x;","y","y(0)","y(b)","y(y)","y(y),","y)","y))","y);","y,","y;","year","yourself,","zag","zero","zero.","zeroes/descript","zeros,","zig","zigzag","zigzagiter","zigzagiterator2","zigzaglevelorder(treenod","{","{\"","{\"\",","{\"\"};","{\"(\",","{\"+\",","{\"/\",","{'2',","{'3',","{'4',","{'5',","{'6',","{'7',","{'8',","{'9',","{'a',","{'c',","{'d',","{'g',","{'i',","{'j',","{'l',","{'m',","{'p',","{'t',","{'v',","{'w',","{'x',","{0,","{1,","{3,","{7,","{bgn,","{boolean}","{dp[i","{genrange(lower,","{int}","{max.bgn,","{newinterval};","{{}};","{}","{};","|","||","}","})","});","};","~"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\nBrief memo about common programming puzzles.\nAbout Me\nGraduate student at Carnegie Mellon with expertise in distributed system and compiler optimization. 6-year industry experience in scalable e-Commerce backends serving 1M+ QPS, large-scale data pipeline orchestrating 10TB+ daily generated data, cloud security service protecting 250M+ endpoints.  An active open-source developer contributing to various projects, including Mozilla's JavaScript JIT compiler. A prolific security researcher with U.S. patents and IEEE Transaction on Mobile Computing publications.\nSocial Media\n\nLinkedIn: https://www.linkedin.com/in/zsshen\nGitHub: https://github.com/ZSShen\nSlideShare: https://www.slideshare.net/ZongShenShen\nMozilla: https://mzl.la/2fO3bJQ\nPortfolio: https://www.zsshen.com\n\n"},"Prefix Sum and Subarray/Subarray Sum.html":{"url":"Prefix Sum and Subarray/Subarray Sum.html","title":"Subarray Sum","keywords":"","body":"Problem\nLintCode 138. Subarray Sum\nhttps://www.lintcode.com/problem/subarray-sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integers\n     * @return: A list of integers includes the index of the first number and the index of the last number\n     */\n    vector subarraySum(vector &nums) {\n        // write your code here\n\n        /**\n         *  preix(i) = num[0] + num[1] + ... + nums[i]\n         *  sum(i, j) = prefix(j) - prefix(i - 1)\n         *             = nums[i] + num[i + 1] + ... + num[j]\n         *\n         *  sum(i, j) = 0\n         *  => prefix(j) - prefix(i - 1) = 0\n         *  => prefix(j) = prefix(i - 1)\n         */\n\n        int size = nums.size();\n\n        int sum = 0;\n        std::unordered_map map;\n        map[0] = -1;\n\n        for (int i = 0 ; i \n"},"Prefix Sum and Subarray/Subarray Sum II.html":{"url":"Prefix Sum and Subarray/Subarray Sum II.html","title":"Subarray Sum II","keywords":"","body":"Problem\nLintCode 138. Subarray Sum\nhttps://www.lintcode.com/problem/subarray-sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An integer array\n     * @param start: An integer\n     * @param end: An integer\n     * @return: the number of possible answer\n     */\n    int subarraySumII(vector &A, int start, int end) {\n        // write your code here\n\n        /**\n         *       a1, a2, ..., an\n         *   S0, S1, S2, ..., Sn\n         *\n         *          start  prefix(n + 1, 0);\n        for (int i = 1 ; i = start) {\n                ++r;\n            }\n\n            // Pinpoint the upper bound.\n            while (l  end) {\n                ++l;\n            }\n\n            count += r - l;\n        }\n\n        return count;\n    }\n};\n\n"},"Prefix Sum and Subarray/Submatrix Sum.html":{"url":"Prefix Sum and Subarray/Submatrix Sum.html","title":"Submatrix Sum","keywords":"","body":"Problem\nLintCode 405. Submatrix Sum\nhttps://www.lintcode.com/problem/submatrix-sum/description\nSolution\n\nclass Solution {\npublic:\n    /*\n     * @param matrix: an integer matrix\n     * @return: the coordinate of the left-up and right-down number\n     */\n    vector> submatrixSum(vector> &matrix) {\n        // write your code here\n\n        /**\n         *  prefix(i) = array[0] + array[1] + ... + array[i];\n         *  sum(i, j) = prefix(j) - prefix(i - 1)\n         *  sum(i, j) = 0 => prefix(j) = prefix(i - 1)\n         *\n         *   a b c d      (a + b) -> A\n         *   e f g h  =>  (e + f) -> B\n         *   i j k l      (i + j) -> C\n         *   m n o p      (m + n) -> D\n         *\n         *   Suppose that we want to scan the matrixes spanning from the\n         *   first 2 columns, we can generate a synthetic column which merges\n         *   these 2 columns and then apply the 1D solution we use to solve\n         *   subarray sum problem to scan this synthetic column.\n         *\n         *   O(C^2 * R)\n         */\n\n        int num_r = matrix.size();\n        int num_c = matrix[0].size();\n\n        for (int i = 0 ; i  syn(num_r, 0);\n\n            for (int j = i ; j  subarraySum(\n            const std::vector& array) {\n\n        int size = array.size();\n\n        std::unordered_map match;\n        match[0] = -1;\n\n        int sum = 0;\n        for (int i = 0 ; i \n"},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"url":"Prefix Sum and Subarray/Subarray Sum Closest.html","title":"Subarray Sum Closest","keywords":"","body":"Problem\nLintCode 139. Subarray Sum Closest\nhttps://www.lintcode.com/problem/subarray-sum-closest/description\nSolution\n\n\nstruct Record {\n    int sum;\n    int index;\n\n    Record(int sum, int index)\n      : sum(sum), index(index)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /*\n     * @param nums: A list of integers\n     * @return: A list of integers includes the index of the first number and the index of the last number\n     */\n    vector subarraySumClosest(vector &nums) {\n        // write your code here\n\n        /**\n         * Sort the prefix sums and find the pair of the neighboring prefix\n         * sums that has the minimum gap.\n         *\n         * s[0] = 0\n         * s[1] = nums[0]\n         * s[2] = nums[1] + s[1]\n         *  .\n         *  .\n         *  .\n         * s[n] = nums[n - 1] + s[n - 1]\n         *\n         * s[1], s[2], s[0], s[n - 1], ..., s[3]\n         */\n\n        int n = nums.size();\n        if (n == 0) {\n            return {-1, -1};\n        }\n\n        std::vector prefix(n + 1, Record(0, -1));\n        for (int i = 1 ; i \n"},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"url":"Prefix Sum and Subarray/Subarray Sum Equals K.html","title":"Subarray Sum Equals K","keywords":"","body":"Problem\nLintCode 838. Subarray Sum Equals K\nhttps://www.lintcode.com/problem/subarray-sum-equals-k/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: a list of integer\n     * @param k: an integer\n     * @return: return an integer, denote the number of continuous subarrays whose sum equals to k\n     */\n    int subarraySumEqualsK(vector &nums, int k) {\n        // write your code here\n\n        /**\n         *  sum(i, j) = prefix(j) -  prefix(i - 1) = k\n         *  => prefix(i - 1) = prefix(j) - k\n         */\n\n        std::unordered_map map;\n        map[0] = 1;\n\n        int sum = 0;\n        int count = 0;\n        for (int num : nums) {\n            sum += num;\n            count += map[sum - k];\n            ++map[sum];\n        }\n\n        return count;\n    }\n};\n\n"},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"url":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","title":"Minimum Size Subarray Sum","keywords":"","body":"Problem\nLintCode 406. Minimum Size Subarray Sum\nhttps://www.lintcode.com/problem/minimum-size-subarray-sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array of integers\n     * @param s: An integer\n     * @return: an integer representing the minimum size of subarray\n     */\n    int minimumSize(vector &nums, int s) {\n        // write your code here\n\n        /**\n         *  Use 2 pointers, r and l, to scan the prefix sum array. In the\n         *  procedure, r is the main pointer which controls the movement of\n         *  our sliding window. Each time, when the subarray sum bounded by\n         *  r and l, namely prefix[r] - prefix[l], is less than or eqaul to\n         *  s, we try to adjust l so that we are able to get a smaller window\n         *  that also fulfills the problem descpretion.\n         *\n         *  Note: In real implementation, we may use a single varable to\n         *        represent the prefix sum array.\n         *\n         *    l\n         *          r\n         *  a b c d e f g h i\n         *\n         */\n\n        int n = nums.size();\n        int l = 0;\n        int min = INT_MAX;\n        int sum = 0;\n\n        for (int r = 0 ; r = s && l \n"},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"url":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","title":"Maximum Size Subarray Sum Equals K","keywords":"","body":"Problem\nLintCode 911. Maximum Size Subarray Sum Equals k\nhttps://www.lintcode.com/problem/maximum-size-subarray-sum-equals-k/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array\n     * @param k: a target value\n     * @return: the maximum length of a subarray that sums to k\n     */\n    int maxSubArrayLen(vector &nums, int k) {\n        // Write your code here\n\n        /**\n         *   1  -1  5  -2  3\n         *   1   0  5   3  6\n         *\n         *  -2  -1  2   1\n         *  -2  -3  -1  0\n         *\n         *  HashTable(Key = Prefix Sum) = (Value = Index)\n         */\n\n        int n = nums.size();\n        int sum = 0;\n        int ans = INT_MIN;\n        std::unordered_map map;\n\n        for (int i = 0 ; i \n"},"Prefix Sum and Subarray/Maximum Subarray.html":{"url":"Prefix Sum and Subarray/Maximum Subarray.html","title":"Maximum Subarray","keywords":"","body":"Problem\nLintCode 41. Maximum Subarray\nhttps://www.lintcode.com/problem/maximum-subarray/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integers\n     * @return: A integer indicate the sum of max subarray\n     */\n    int maxSubArray(vector &nums) {\n        // write your code here\n\n        int ans = nums[0];\n        int local = 0;\n\n        for (int num : nums) {\n            local += num;\n\n            ans = std::max(ans, local);\n\n            if (local \n"},"Prefix Sum and Subarray/Maximum Submatrix.html":{"url":"Prefix Sum and Subarray/Maximum Submatrix.html","title":"Maximum Submatrix","keywords":"","body":"Problem\nLintCode 944. Maximum Submatrix\nhttps://www.lintcode.com/problem/maximum-submatrix/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: the given matrix\n     * @return: the largest possible sum\n     */\n    int maxSubmatrix(vector> &matrix) {\n        // write your code here\n\n        /**\n         *\n         *  i        j\n         *  a1  b1  c1  d1      s1 (a1 + b1 + c1)\n         *  a2  b2  c2  d2      s2\n         *  a3  b3  c3  d3      s3                    s2    a2 b2 c2\n         *  .   .   .   .    => .                 =>  .  => .  .  .\n         *  .   .   .   .       .                     sk    ak bk ck\n         *  an  bn  cn  dn      sn\n         *\n         */\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return 0;\n        }\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        int ans = std::numeric_limits::min();\n\n        for (int i = 0 ; i  syn(num_r, 0);\n\n            for (int j = i ; j & array) {\n\n        /**\n         *   A, B\n         *\n         *   A > 0, B > 0           ,  A + B > A\n         *   A > 0, B  A,  A + B \n"},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"url":"Prefix Sum and Subarray/Continuous Subarray Sum.html","title":"Continuous Subarray Sum","keywords":"","body":"Problem\nLintCode 402. Continuous Subarray Sum\nhttps://www.lintcode.com/problem/continuous-subarray-sum/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param A: An integer array\n     * @return: A list of integers includes the index of the first number and the index of the last number\n     */\n    vector continuousSubarraySum(vector &A) {\n        // write your code here\n\n        int n = A.size();\n        if (n == 0) {\n            return {-1, -1};\n        }\n\n        int max = A[0], max_bgn = 0, max_end = 0;\n        int sum = 0, bgn = 0, end = 0;\n\n        while (end  max) {\n                max = sum;\n                max_bgn = bgn;\n                max_end = end;\n            }\n\n            ++end;\n\n            /**\n             * A, B\n             *\n             * A > 0, B > 0,           A + B > A\n             * A > 0, B  A,  A + B \n"},"Prefix Sum and Subarray/Continuous Subarray Sum II.html":{"url":"Prefix Sum and Subarray/Continuous Subarray Sum II.html","title":"Continuous Subarray Sum II","keywords":"","body":"Problem\nLintCode 403. Continuous Subarray Sum II\nhttps://www.lintcode.com/problem/continuous-subarray-sum-ii/description?_from=ladder&&fromId=4\nSolution\nstruct Record {\n    int bgn, end, sum;\n\n    Record(int bgn, int end, int sum)\n      : bgn(bgn), end(end), sum(sum)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /*\n     * @param A: An integer array\n     * @return: A list of integers includes the index of the first number and the index of the last number\n     */\n    vector continuousSubarraySumII(vector &A) {\n        // write your code here\n\n        /**\n         *  Denote the maximum subarray as S(i, j).\n         *  Then, we need to handle 2 scenarios.\n         *\n         *  1. i  j, implying that the subarray exceeds the boundary of the\n         *     input array, thus spanning a cyclic range. However, this also\n         *     implies that the minimum subarray locates in a normal range.\n         *     Thus, to get the maximum subarray, we can subract the total\n         *     sum of the input array with the minimum subarray.\n         *\n         *  Finally, compare the results generated in the aforementioned 2\n         *  scenarios to get the real maximum subarray.\n         *\n         *  e.g:\n         *\n         *       S0\n         *\n         * Sn-1       S1     => S1 -> Si (i  Sj -> S2 (j  total - min.sum) {\n            return {max.bgn, max.end};\n        }\n\n        // All the array numbers are negative.\n        if (min.bgn == 0 && min.end == n - 1) {\n            return {max.bgn, max.end};\n        }\n\n        int bgn = min.end + 1;\n        if (bgn == n) {\n            bgn = 0;\n        }\n\n        int end = min.bgn - 1;\n        if (end == -1) {\n            end = n - 1;\n        }\n\n        return {bgn, end};\n    }\n\nprivate:\n    Record findMax(const std::vector& nums, int n) {\n\n        int max = nums[0], max_bgn = 0, max_end = 0;\n        int sum = 0, bgn = 0, end = 0;\n\n        while (end  max) {\n                max = sum;\n                max_bgn = bgn;\n                max_end = end;\n            }\n\n            ++end;\n\n            if (sum & nums, int n) {\n\n        int min = nums[0], min_bgn = 0, min_end = 0;\n        int sum = 0, bgn = 0, end = 0;\n\n        while (end  0) {\n                sum = 0;\n                bgn = end;\n            }\n        }\n\n        return Record(min_bgn, min_end, min);\n    }\n};\n\n"},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"url":"Prefix Sum and Subarray/Max Consecutive Ones III.html","title":"Max Consecutive Ones III","keywords":"","body":"Problem\nLeetcode 1004. Max Consecutive Ones III\nhttps://leetcode.com/problems/max-consecutive-ones-iii/\nSolution\nclass Solution {\npublic:\n    int longestOnes(vector& A, int K) {\n\n        /**\n         * Since all the elements in the array are either 1s or 0s,\n         * we can transform the problem into finding the longest subarray\n         * that fulfills the following formula:\n         *\n         * (j - i + 1) - SUM(i, j)  K) {\n                sum -= A[l];\n                ++l;\n            }\n\n            max = std::max(max, r - l + 1);\n        }\n\n        return max;\n    }\n};\n\n"},"Sliding Window/Window Sum.html":{"url":"Sliding Window/Window Sum.html","title":"Window Sum","keywords":"","body":"Problem\nLintCode 604. Window Sum\nhttps://www.lintcode.com/problem/window-sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: a list of integers.\n     * @param k: length of window.\n     * @return: the sum of the element inside the window at each moving.\n     */\n    vector winSum(vector &nums, int k) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0 || k == 0) {\n            return {};\n        }\n\n        std::vector ans;\n\n        int sum = 0;\n        for (int i = 0 ; i \n"},"Sliding Window/Sliding Window Median.html":{"url":"Sliding Window/Sliding Window Median.html","title":"Sliding Window Median","keywords":"","body":"Problem\nLintCode 360. Sliding Window Median\nhttps://www.lintcode.com/problem/sliding-window-median/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integers\n     * @param k: An integer\n     * @return: The median of the element inside the window at each moving\n     */\n    vector medianSlidingWindow(vector &nums, int k) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0 || k == 0) {\n            return {};\n        }\n\n        std::multiset> min;\n        std::multiset> max;\n\n        for (int i = 0 ; i  ans;\n        ans.push_back(getMedian(min, max));\n\n        for (int i = k ; i  min_size + 1) {\n            auto it = max.begin();\n            int num = *it;\n            max.erase(it);\n            min.insert(num);\n            return;\n        }\n\n        if (min_size > max_size + 1) {\n            auto it = min.begin();\n            int num = *it;\n            min.erase(it);\n            max.insert(num);\n        }\n    }\n\n    int getMedian(auto& min, auto& max) {\n\n        int max_size = max.size();\n        int min_size = min.size();\n\n        if (max_size > min_size) {\n            return *max.begin();\n        }\n\n        if (max_size \n"},"Sliding Window/Sliding Window Maximum.html":{"url":"Sliding Window/Sliding Window Maximum.html","title":"Sliding Window Maximum","keywords":"","body":"Problem\nLintCode 362. Sliding Window Maximum\nhttps://www.lintcode.com/problem/sliding-window-maximum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integers.\n     * @param k: An integer\n     * @return: The maximum number inside the window at each moving.\n     */\n    vector maxSlidingWindow(vector &nums, int k) {\n        // write your code here\n\n        /**\n         *          1, 2, 7, 7, 8\n         *\n         *  Deque: 1\n         *         1, 2\n         *         2\n         *         2, 7\n         *         7     deque;\n        std::vector ans;\n\n        for (int i = 0 ; i = nums[deque.back()]) {\n            deque.pop_back();\n        }\n        deque.push_back(index);\n    }\n\n    void deQueue(auto& deque, int index) {\n\n        if (deque.front() == index) {\n            deque.pop_front();\n        }\n    }\n};\n\n"},"Sliding Window/Subarray Product Less than K.html":{"url":"Sliding Window/Subarray Product Less than K.html","title":"Subarray Product Less than K","keywords":"","body":"Problem\nLintCode 1075. Subarray Product Less Than K\nhttps://www.lintcode.com/problem/subarray-product-less-than-k/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array\n     * @param k: an integer\n     * @return: the number of subarrays where the product of all the elements in the subarray is less than k\n     */\n    int numSubarrayProductLessThanK(vector &nums, int k) {\n        // Write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int count = 0;\n        int res = 1;\n        int l = 0;\n\n        for (int r = 0 ; r = k && l \n"},"Sliding Window/Longest Substring without Repeating Characters.html":{"url":"Sliding Window/Longest Substring without Repeating Characters.html","title":"Longest Substring without Repeating Characters","keywords":"","body":"Problem\nLintCode 384. Longest Substring Without Repeating Characters\nhttps://www.lintcode.com/problem/longest-substring-without-repeating-characters/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: a string\n     * @return: an integer\n     */\n    int lengthOfLongestSubstring(string &s) {\n        // write your code here\n\n        int n = s.length();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector bag(256, false);\n        int l = 0, r = 0;\n        int ans = 0;\n\n        while (r \n"},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"url":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","title":"Longest Substring with at Most K Distinct Characters","keywords":"","body":"Problem\nLintCode 386. Longest Substring with At Most K Distinct Characters\nhttps://www.lintcode.com/problem/longest-substring-with-at-most-k-distinct-characters/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: A string\n     * @param k: An integer\n     * @return: An integer\n     */\n    int lengthOfLongestSubstringKDistinct(string &s, int k) {\n        // write your code here\n\n        int n = s.length();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector freq(256, 0);\n        int count = 0;\n\n        int max = 0;\n\n        int l = 0;\n        for (int r = 0 ; r  k) {\n                ch = s[l++];\n\n                --freq[ch];\n                if (freq[ch] == 0) {\n                    --count;\n                }\n            }\n\n            max = std::max(max, r - l + 1);\n        }\n\n        return max;\n    }\n};\n\n"},"Sliding Window/Find All Anagrams in a String.html":{"url":"Sliding Window/Find All Anagrams in a String.html","title":"Find All Anagrams in a String","keywords":"","body":"Problem\nLintCode 647. Find All Anagrams in a String\nhttps://www.lintcode.com/problem/find-all-anagrams-in-a-string/description\nSolution\nclass Solution {\npublic:\n    vector findAnagrams(string s, string p) {\n\n        int ls = s.length();\n        int lp = p.length();\n\n        if (ls  freq_s(256, 0);\n        int cnt_s = 0;\n\n        vector freq_t(256, 0);\n        int cnt_t = 0;\n        for (char ch : p) {\n            ++freq_t[ch];\n            if (freq_t[ch] == 1) {\n                ++cnt_t;\n            }\n        }\n\n        vector ans;\n\n        for (int i = 0 ; i \n"},"Sliding Window/Minimum Window Substring.html":{"url":"Sliding Window/Minimum Window Substring.html","title":"Minimum Window Substring","keywords":"","body":"Problem\nLintCode 32. Minimum Window Substring\nhttps://www.lintcode.com/problem/minimum-window-substring/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param source : A string\n     * @param target: A string\n     * @return: A string denote the minimum window, return \"\" if there is no such a string\n     */\n    string minWindow(string &source , string &target) {\n        // write your code here\n\n        /**\n         *                    l\n         *                          r\n         *  A D O B E C O D E B A N C\n         *\n         *  A B C\n         *\n         *  bag_T:  bag_S:\n         *  A: 1    A: 1\n         *  B: 1    B: 0\n         *  C: 1    C: 1\n         *\n         *  T: 3\n         *  S: 2    window: 4\n         *\n         */\n\n        int ns = source.length();\n        if (ns == 0) {\n            return \"\";\n        }\n\n        int nt = target.length();\n        if (nt == 0) {\n            return \"\";\n        }\n\n        std::vector bag_s(256, 0);\n        int count_s = 0;\n\n        std::vector bag_t(256, 0);\n        int count_t = 0;\n        for (int i = 0 ; i  0) {\n                    --bag_s[ch];\n                    if (bag_s[ch] == bag_t[ch] - 1) {\n                        --count_s;\n                    }\n                }\n\n                ++l;\n            }\n\n            ++r;\n        }\n\n        return (min \n"},"Sliding Window/Moving Average from Data Stream.html":{"url":"Sliding Window/Moving Average from Data Stream.html","title":"Moving Average from Data Stream","keywords":"","body":"Problem\nLintCode 642. Moving Average from Data Stream\nhttps://www.lintcode.com/problem/moving-average-from-data-stream/description\nSolution\nclass MovingAverage {\npublic:\n    /*\n    * @param size: An integer\n    */MovingAverage(int size)\n      : capacity(size), size(0), sum(0.0) {\n        // do intialization if necessary\n    }\n\n    /*\n     * @param val: An integer\n     * @return:\n     */\n    double next(int val) {\n        // write your code here\n\n        if (size (size);\n        }\n\n        sum -= deque.front();\n        deque.pop_front();\n        sum += val;\n        deque.push_back(val);\n\n        return sum / static_cast(size);\n    }\n\nprivate:\n    int capacity;\n    int size;\n    double sum;\n    std::deque deque;\n};\n\n/**\n * Your MovingAverage object will be instantiated and called as such:\n * MovingAverage obj = new MovingAverage(size);\n * double param = obj.next(val);\n */\n\n"},"Sliding Window/Find Median from Data Stream.html":{"url":"Sliding Window/Find Median from Data Stream.html","title":"Find Median from Data Stream","keywords":"","body":"Problem\nLintCode 81. Find Median from Data Stream\nhttps://www.lintcode.com/problem/find-median-from-data-stream/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integers\n     * @return: the median of numbers\n     */\n    vector medianII(vector &nums) {\n        // write your code here\n\n        std::priority_queue, std::greater> min;\n        std::priority_queue, std::less> max;\n\n        std::vector ans;\n        for (int num : nums) {\n            enQueue(min, max, num);\n            reBalance(min, max);\n            ans.push_back(getMedian(min, max));\n        }\n\n        return ans;\n    }\n\nprivate:\n    void enQueue(auto& min, auto& max, int num) {\n\n        if (max.empty()) {\n            max.push(num);\n            return;\n        }\n\n        if (num  min_size + 1) {\n            int num = max.top();\n            max.pop();\n            min.push(num);\n        }\n\n        if (min_size > max_size + 1) {\n            int num = min.top();\n            min.pop();\n            max.push(num);\n        }\n    }\n\n    int getMedian(auto& min, auto& max) {\n\n        int max_size = max.size();\n        int min_size = min.size();\n\n        if (max_size > min_size) {\n            return max.top();\n        }\n\n        if (min_size > max_size) {\n            return min.top();\n        }\n\n        return max.top();\n    }\n};\n\n"},"Two Sum/3Sum.html":{"url":"Two Sum/3Sum.html","title":"3Sum","keywords":"","body":"Problem\nLintCode 57. 3Sum\nhttps://www.lintcode.com/problem/3sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: Give an array nums of n integer\n     * @return: Find all unique triplets in the array which gives the sum of zero.\n     */\n    vector> threeSum(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::sort(nums.begin(), nums.end());\n\n        std::vector> ans;\n        for (int i = 0 ; i  0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n\n            // Since the remaining numbers are all positive, it is impossible\n            // to generate the legal triplets. Thus, we break the loop here\n            // to avoid redundant computions.\n            if (nums[i] > 0) {\n                break;\n            }\n\n            twoSum(nums, i + 1, n - 1, -nums[i], ans);\n        }\n\n        return ans;\n    }\n\nprivate:\n    void twoSum(const auto& nums, int bgn, int end, int target, auto& ans) {\n\n        int l = bgn, r = end;\n        while (l \n"},"Two Sum/4Sum.html":{"url":"Two Sum/4Sum.html","title":"4Sum","keywords":"","body":"Problem\nLintCode 58. 4Sum\nhttps://www.lintcode.com/problem/4sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param numbers: Give an array\n     * @param target: An integer\n     * @return: Find all unique quadruplets in the array which gives the sum of zero\n     */\n    vector> fourSum(vector &nums, int target) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::sort(nums.begin(), nums.end());\n\n        std::vector> ans;\n\n        for (int f = 0 ; f  0 && nums[f] == nums[f - 1]) {\n                continue;\n            }\n\n            for (int s = f + 1 ; s  f + 1 && nums[s] == nums[s - 1]) {\n                    continue;\n                }\n\n                twoSum(nums, s + 1, n - 1, nums[f], nums[s], target, ans);\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    void twoSum(\n            const auto& nums, int bgn, int end,\n            int first, int second, int target, auto& ans) {\n\n        int l = bgn, r = end;\n        int cache = first + second;\n\n        while (l  target) {\n                while (l \n"},"Two Sum/3Sum Closest.html":{"url":"Two Sum/3Sum Closest.html","title":"3Sum Closest","keywords":"","body":"Problem\nLintCode 59. 3Sum Closest\nhttps://www.lintcode.com/problem/3sum-closest/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param numbers: Give an array numbers of n integer\n     * @param target: An integer\n     * @return: return the sum of the three integers, the sum closest target.\n     */\n    int threeSumClosest(vector &nums, int target) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::sort(nums.begin(), nums.end());\n\n        int min_diff = INT_MAX;\n        int ans;\n\n        for (int f = 0 ; f  0 && nums[f] == nums[f - 1]) {\n                continue;\n            }\n\n            int l = f + 1;\n            int r = n - 1;\n            while (l  0) {\n                    while (l \n"},"Two Sum/2Sum III Data Structure Design.html":{"url":"Two Sum/2Sum III Data Structure Design.html","title":"2Sum III Data Structure Design","keywords":"","body":"Problem\nLintCode 607. Two Sum III - Data structure design\nhttps://www.lintcode.com/problem/two-sum-iii-data-structure-design/description\nSolution\nclass TwoSum {\npublic:\n    /**\n     * @param number: An integer\n     * @return: nothing\n     */\n    void add(int number) {\n        // write your code here\n\n        set.insert(number);\n    }\n\n    /**\n     * @param value: An integer\n     * @return: Find if there exists any pair of numbers which sum is equal to the value.\n     */\n    bool find(int value) {\n        // write your code here\n\n        for (int src : set) {\n            int dst = value - src;\n            int freq = (src != dst) ? 1 : 2;\n            if (set.count(dst) >= freq) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\nprivate:\n    std::unordered_multiset set;\n};\n\n"},"Element Partition/Move Zeros.html":{"url":"Element Partition/Move Zeros.html","title":"Move Zeros","keywords":"","body":"Problem\nLintCode 539. Move Zeros\nhttps://www.lintcode.com/problem/move-zeroes/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an integer array\n     * @return: nothing\n     */\n    void moveZeroes(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        int l = 0, r = 0;\n\n        while (r \n"},"Element Partition/Partition Array.html":{"url":"Element Partition/Partition Array.html","title":"Partition Array","keywords":"","body":"Problem\nLintCode 31. Partition Array\nhttps://www.lintcode.com/problem/partition-array/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: The integer array you should partition\n     * @param k: An integer\n     * @return: The index after partition\n     */\n    int partitionArray(vector &nums, int k) {\n        // write your code here\n\n        int n = nums.size();\n        int l = 0, r = 0;\n\n        while (r \n"},"Element Partition/Sort Colors.html":{"url":"Element Partition/Sort Colors.html","title":"Sort Colors","keywords":"","body":"Problem\nLintCode 148. Sort Colors\nhttps://www.lintcode.com/problem/sort-colors/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integer which is 0, 1 or 2\n     * @return: nothing\n     */\n    void sortColors(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        int zero = 0, one = 0, two = n - 1;\n\n        /**\n         * We use 3 pointers to track the elements:\n         *\n         *  1. The \"one\" pointer guides the scanning procedure.\n         *  2. The \"zero\" pointer points to tail of the consecutive zeros, which\n         *     are shifted to the left hand side of the array.\n         *  3. The \"two\" pointer points to the tail of the consecutive twos,\n         *     which are shifted to the right hand size of the array.\n         *\n         *       zero     two\n         *          |     |\n         *          v     v\n         *  0 0 0 0 1 1 1 1 2 2 2 2\n         */\n\n        while (one \n"},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"url":"Element Partition/Kth Smallest Number in Unsorted Array.html","title":"Kth Smallest Number in Unsorted Array","keywords":"","body":"Problem\nLintCode 461. Kth Smallest Numbers in Unsorted Array\nhttps://www.lintcode.com/problem/kth-smallest-numbers-in-unsorted-array/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param k: An integer\n     * @param nums: An integer array\n     * @return: kth smallest element\n     */\n    int kthSmallest(int k, vector &nums) {\n        // write your code here\n\n        return quickSelect(nums, 0, nums.size() - 1, k - 1);\n    }\n\nprivate:\n    int quickSelect(auto& nums, int bgn, int end, int k) {\n\n        int mid = (bgn + end) / 2;\n        int pivot = nums[mid];\n\n        std::swap(nums[mid], nums[end]);\n\n        int l = bgn, r = bgn;\n        while (r \n"},"Element Partition/Remove Duplicates from Sorted Array.html":{"url":"Element Partition/Remove Duplicates from Sorted Array.html","title":"Remove Duplicates from Sorted Array","keywords":"","body":"Problem\nLeetCode 26. Remove Duplicates from Sorted Array\nhttps://leetcode.com/problems/remove-duplicates-from-sorted-array/\nSolution\nclass Solution {\npublic:\n    int removeDuplicates(vector& nums) {\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int l = 0, r = 0;\n\n        while (r \n"},"Element Partition/Intersection of Two Arrays II.html":{"url":"Element Partition/Intersection of Two Arrays II.html","title":"Intersection of Two Arrays II","keywords":"","body":"Problem\nLeetCode 548. Intersection of Two Arrays II\nhttps://www.lintcode.com/problem/intersection-of-two-arrays-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums1: an integer array\n     * @param nums2: an integer array\n     * @return: an integer array\n     */\n    vector intersection(vector &nums1, vector &nums2) {\n        // write your code here\n\n        std::sort(nums1.begin(), nums1.end());\n        std::sort(nums2.begin(), nums2.end());\n\n        std::vector ans;\n        int i = 0, j = 0;\n        int size_1 = nums1.size(), size_2 = nums2.size();\n        while (i \n"},"Element Partition/Rotate String.html":{"url":"Element Partition/Rotate String.html","title":"Rotate String","keywords":"","body":"Problem\nLintCode 8. Rotate String\nhttps://www.lintcode.com/problem/rotate-string/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param str: An array of char\n     * @param offset: An integer\n     * @return: nothing\n     */\n    void rotateString(string &str, int offset) {\n        // write your code here\n\n        int n = str.length();\n\n        if (offset == 0 || n == 0) {\n            return;\n        }\n\n        int r = n - (offset % n);\n\n        /**\n         *  a b c d e f g\n         *\n         *  offset = 3\n         *  r = n - offset = 4\n         *\n         *  (a b c d) (e f g)\n         *  (d c b a) (g f e)\n         * => e f g a b c d\n         *\n         */\n\n        std::reverse(str.begin(), str.begin() + r);\n        std::reverse(str.begin() + r, str.end());\n        std::reverse(str.begin(), str.end());\n    }\n};\n\n"},"Monotonous Stack/Min Stack.html":{"url":"Monotonous Stack/Min Stack.html","title":"Min Stack","keywords":"","body":"Problem\nLintCode 12. Min Stack\nhttps://www.lintcode.com/problem/min-stack/description\nSolution\nclass MinStack {\npublic:\n    MinStack() {\n        // do intialization if necessary\n    }\n\n    /*\n     * @param number: An integer\n     * @return: nothing\n     */\n    void push(int number) {\n        // write your code here\n\n        if (stk.empty()) {\n            min_stk.push(number);\n        } else {\n            min_stk.push(std::min(number, min_stk.top()));\n        }\n\n        stk.push(number);\n    }\n\n    /*\n     * @return: An integer\n     */\n    int pop() {\n        // write your code here\n\n        int num = stk.top();\n\n        stk.pop();\n        min_stk.pop();\n\n        return num;\n    }\n\n    /*\n     * @return: An integer\n     */\n    int min() {\n        // write your code here\n\n        return min_stk.top();\n    }\n\nprivate:\n    std::stack stk;\n    std::stack min_stk;\n};\n\n"},"Monotonous Stack/Next Greater Element I.html":{"url":"Monotonous Stack/Next Greater Element I.html","title":"Next Greater Element I","keywords":"","body":"Problem\nLintCode 1206. Next Greater Element I\nhttps://www.lintcode.com/problem/next-greater-element-i/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums1: an array\n     * @param nums2: an array\n     * @return:  find all the next greater numbers for nums1's elements in the corresponding places of nums2\n     */\n    vector nextGreaterElement(vector &nums1, vector &nums2) {\n        // Write your code here\n\n        /**\n         *      1, 3, 4, 2\n         *\n         *  1: 3         Stack:\n         *  3: 4\n         *  4: -1           3       4       2\n         *  2: -2       1 | 1 | 3 | 3 | 4 | 4\n         */\n\n        std::unordered_map map;\n        std::stack stk;\n\n        for (int num : nums2) {\n\n            map[num] = -1;\n\n            if (stk.empty()) {\n                stk.push(num);\n                continue;\n            }\n\n            while (!stk.empty() && num > stk.top()) {\n                map[stk.top()] = num;\n                stk.pop();\n            }\n            stk.push(num);\n        }\n\n        std::vector ans;\n        for (int num : nums1) {\n            ans.push_back(map[num]);\n        }\n\n        return ans;\n    }\n};\n\n"},"Monotonous Stack/Next Greater Element II.html":{"url":"Monotonous Stack/Next Greater Element II.html","title":"Next Greater Element II","keywords":"","body":"Problem\nLintCode 1201. Next Greater Element II\nhttps://www.lintcode.com/problem/next-greater-element-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array\n     * @return: the Next Greater Number for every element\n     */\n    vector nextGreaterElements(vector &nums) {\n        // Write your code here\n\n        /**\n         *   4 3 2 5 6 1 2\n         *\n         *   4: 5           Stack:\n         *   3: 5                       5\n         *   2: 5                   2   2               2\n         *   5: 6               3   3   3   6       1 | 1 | 2\n         *   6: no          4 | 4 | 4 | 4 | 5 | 5 | 6 | 6 | 6 | 6\n         *   1: 2\n         *   2: no\n         *\n         */\n\n        int n = nums.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::vector ans(n, -1);\n        std::stack stk;\n\n        for (int ii = 0 ; ii  nums[stk.top()]) {\n                int index = stk.top();\n                stk.pop();\n                ans[index] = curr;\n            }\n            stk.push(i);\n        }\n\n        return ans;\n    }\n};\n\n"},"Monotonous Stack/Largest Rectangle in Histogram.html":{"url":"Monotonous Stack/Largest Rectangle in Histogram.html","title":"Largest Rectangle in Histogram","keywords":"","body":"Problem\nLintCode 122. Largest Rectangle in Histogram\nhttps://www.lintcode.com/problem/largest-rectangle-in-histogram/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param height: A list of integer\n     * @return: The area of largest rectangle in the histogram\n     */\n    int largestRectangleArea(vector &heights) {\n        // write your code here\n\n        /**\n         *\n         *         *\n         *       * *\n         *       * *\n         *       * *   *\n         *   *   * * * *\n         *   * * * * * *\n         *   2 1 5 6 2 3\n         *\n         *\n         *   Let's consider the siutation that the stack has 1, 5, and 6, and\n         *   then we see 2, the number that is less than 6.\n         *\n         *   1st:   2nd:\n         *\n         *    *\n         *    *     * *\n         *    *     * *\n         *    *     * *\n         *    *     * *\n         *    *     * *\n         *    6     5 6\n         *\n         *    1x6   2x5\n         *\n         *    Let' consider the situation that the stack has 1, 2, 3, and\n         *    then we use a dummy number, -1, to trigger the last examination.\n         *\n         *   1st:   2nd:       3rd:\n         *\n         *    *\n         *    *     * * * *\n         *    *     * * * *    * * * * * *\n         *    3     5 6 2 3    2 1 5 6 2 3\n         *\n         *    1x3   4x2        6x1\n         *\n         */\n\n        int n = heights.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int max = 0;\n        std::stack stk;\n\n        for (int i = 0 ; i \n"},"Monotonous Stack/Maximal Rectangle.html":{"url":"Monotonous Stack/Maximal Rectangle.html","title":"Maximal Rectangle","keywords":"","body":"Problem\nLintCode 510. Maximal Rectangle\nhttps://www.lintcode.com/problem/maximal-rectangle/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: a boolean 2D matrix\n     * @return: an integer\n     */\n    int maximalRectangle(vector> &matrix) {\n        // write your code here\n\n        /**\n         *    Reduce the problem to find the maximal rectangle in a histogram.\n         *\n         *                                 *\n         *    [1, 1, 0, 0, 1],             *\n         *    [0, 1, 0, 0, 1],         * * *\n         *    [0, 0, 1, 1, 1],  =>     * * *\n         *    [0, 0, 1, 1, 1]      0 0 2 2 4\n         *\n         */\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return 0;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        int max = 0;\n        std::vector heights(num_c, 0);\n\n        for (int i = 0 ; i  stk;\n\n        for (int i = 0 ; i \n"},"Monotonous Stack/Max Tree.html":{"url":"Monotonous Stack/Max Tree.html","title":"Max Tree","keywords":"","body":"Problem\nLintCode 128. Max Tree\nhttps://www.lintcode.com/problem/max-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param A: Given an integer array with no duplicates.\n     * @return: The root of max tree.\n     */\n    TreeNode * maxTree(vector &A) {\n        // write your code here\n\n        /**\n         *  1. If the value stored in the new node is greater than the value\n         *     storeed in the previous node (the node on top of the stack),\n         *     we need to pop all the nodes from the stack until that we meet\n         *     a node contains the greater value or the stack is empty.\n         *     Moreover, we need to assign the last poped node as the left\n         *     child of this new node.\n         *\n         *  2. If the value stored in the new node is less than the value\n         *     stored in the previous node (the node on top of the stack),\n         *     we need to assign this new node as the right child of the\n         *     previous node.\n         *\n         *      2, 5, 6, 0, 3, 1\n         *\n         *  Stack: 2,\n         *         2, 5\n         *         5\n         *         5, 6\n         *         6\n         *         6, 0\n         *         6, 0, 3\n         *         6, 3\n         *         6, 3, 1\n         *\n         *  Tree:\n         *\n         *      2 =>  5  =>  6  =>  6    =>  6   =>   6\n         *           /      /      / \\      / \\      / \\\n         *          2      5      5   0    5   3    5   3\n         *                /      /        /   /    /   / \\\n         *               2      2        2   0    2   0   1\n         */\n\n        std::vector stk;\n\n        for (int num : A) {\n\n            auto curr = new TreeNode(num);\n\n            while (!stk.empty() && num > stk.back()->val) {\n                curr->left = stk.back();\n                stk.pop_back();\n            }\n\n            if (!stk.empty()) {\n                stk.back()->right = curr;\n            }\n\n            stk.push_back(curr);\n        }\n\n        return (!stk.empty()) ? stk[0] : nullptr;\n    }\n};\n\n"},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"url":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","title":"Kth Smallest Number in Sorted Matrix","keywords":"","body":"Problem\nLintCode 401. Kth Smallest Number in Sorted Matrix\nhttps://www.lintcode.com/problem/kth-smallest-number-in-sorted-matrix/description\nSolution\n\nstruct Record {\n    int num;\n    int r, c;\n\n    Record(int num, int r, int c)\n      : num(num), r(r), c(c)\n    { }\n};\n\n\nstruct RecordCompare {\n\n    bool operator() (const auto& lhs, const auto& rhs) {\n        return lhs.num > rhs.num;\n    }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param matrix: a matrix of integers\n     * @param k: An integer\n     * @return: the kth smallest number in the matrix\n     */\n    int kthSmallest(vector> &matrix, int k) {\n        // write your code here\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return 0;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        if (k == 0) {\n            return 0;\n        }\n\n        std::priority_queue, RecordCompare> queue;\n        queue.push(Record(matrix[0][0], 0, 0));\n\n        std::vector>\n            visit(num_r, std::vector(num_c, false));\n        visit[0][0] = true;\n\n        for (int i = 0 ; i \n"},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"url":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","title":"Kth Smallest Sum in Two Sorted Arrays","keywords":"","body":"Problem\nLintCode 465. Kth Smallest Sum In Two Sorted Arrays\nhttps://www.lintcode.com/problem/kth-smallest-sum-in-two-sorted-arrays/description\nSolution\n\nstruct Record {\n    int sum;\n    int idx_a;\n    int idx_b;\n\n    Record(int sum, int idx_a, int idx_b)\n      : sum(sum), idx_a(idx_a), idx_b(idx_b)\n    { }\n};\n\n\nstruct RecordCompare {\n\n    bool operator() (const auto& lhs, const auto& rhs) {\n        return lhs.sum > rhs.sum;\n    }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param A: an integer arrays sorted in ascending order\n     * @param B: an integer arrays sorted in ascending order\n     * @param k: An integer\n     * @return: An integer\n     */\n    int kthSmallestSum(vector &A, vector &B, int k) {\n        // write your code here\n\n        /**\n         *  a = [1, 7, 11]\n         *  b = [2, 4, 6]\n         *\n         *\n         *  3, 5, 7, 9\n         *\n         *  (1, 2) -> (1, 4) -> (1, 6) -> (6, 7) -> (2, 11)\n         *            (2, 7)    (4, 7)              (7, 4)\n         *\n         *  O(KlogK)\n         */\n\n        int size_a = A.size();\n        int size_b = B.size();\n\n        std::priority_queue, RecordCompare> queue;\n        queue.push(Record(A[0] + B[0], 0, 0));\n\n        std::vector>\n            visit(size_a, std::vector(size_b, false));\n        visit[0][0] = true;\n\n        for (int i = 0 ; i \n"},"Priority Queue/Kth Largest in N Arrays.html":{"url":"Priority Queue/Kth Largest in N Arrays.html","title":"Kth Largest in N Arrays","keywords":"","body":"Problem\nLintCode 543. Kth Largest in N Arrays\nhttps://www.lintcode.com/problem/kth-largest-in-n-arrays/description\nSolution\n\nclass Solution {\npublic:\n    /**\n     * @param arrays: a list of array\n     * @param k: An integer\n     * @return: an integer, K-th largest element in N arrays\n     */\n    int KthInArrays(vector> &arrays, int k) {\n        // write your code here\n\n        std::priority_queue, std::greater> queue;\n        for (const auto& array : arrays) {\n            for (int num : array) {\n                queue.push(num);\n\n                if (queue.size() > k) {\n                    queue.pop();\n                }\n            }\n        }\n\n        return queue.top();\n    }\n};\n\n"},"Priority Queue/Ugly Number II.html":{"url":"Priority Queue/Ugly Number II.html","title":"Ugly Number II","keywords":"","body":"Problem\nLintCode 4. Ugly Number II\nhttps://www.lintcode.com/problem/ugly-number-ii/description\nSolution\n\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: return a  integer as description.\n     */\n    int nthUglyNumber(int n) {\n        // write your code here\n\n        /**\n         *          Priority Queue\n         *\n         * 1st: 1   2, 3, 5\n         * 2nd: 2   3, 4, 5, 6, 10\n         * 3rd: 3   4, 6, 9, 10, 15\n         *\n         *      ...\n         */\n\n        std::set> queue;\n        queue.insert(1);\n\n        long nth = 0;\n        for (int i = 0 ; i \n"},"Priority Queue/Super Ugly Number.html":{"url":"Priority Queue/Super Ugly Number.html","title":"Super Ugly Number","keywords":"","body":"Problem\nLintCode 518. Super Ugly Number\nhttps://www.lintcode.com/problem/super-ugly-number/description\nSolution\n\nclass Solution {\npublic:\n    /**\n     * @param n: a positive integer\n     * @param primes: the given prime list\n     * @return: the nth super ugly number\n     */\n    int nthSuperUglyNumber(int n, vector &primes) {\n        // write your code here\n\n        std::set> queue;\n        queue.insert(1);\n\n        long nth = 0;\n        for (int i = 0 ; i \n"},"Priority Queue/K Closest Points.html":{"url":"Priority Queue/K Closest Points.html","title":"K Closest Points","keywords":"","body":"Problem\nLintCode 612. K Closest Points\nhttps://www.lintcode.com/problem/k-closest-points/description\nSolution\n/**\n * Definition for a point.\n * struct Point {\n *     int x;\n *     int y;\n *     Point() : x(0), y(0) {}\n *     Point(int a, int b) : x(a), y(b) {}\n * };\n */\n\nstruct Record {\n    int id;\n    double dist;\n    int x;\n    int y;\n\n    Record(int id, double dist, int x, int y)\n      : id(id), dist(dist), x(x), y(y)\n    { }\n};\n\n\nstruct RecordCompare {\n\n    bool operator() (const auto& lhs, const auto& rhs) {\n        if (lhs.dist == rhs.dist) {\n            if (lhs.x == rhs.y) {\n                return lhs.y  kClosest(vector &points, Point &origin, int k) {\n        // write your code here\n\n        int n = points.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::priority_queue, RecordCompare> queue;\n        for (int i = 0 ; i  k) {\n                queue.pop();\n            }\n        }\n\n        std::vector ans;\n        while (!queue.empty()) {\n            auto rec = queue.top();\n            queue.pop();\n            ans.push_back(points[rec.id]);\n        }\n\n        std::reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n\n"},"Priority Queue/High Five.html":{"url":"Priority Queue/High Five.html","title":"High Five","keywords":"","body":"Problem\nLintCode 613. High Five\nhttps://www.lintcode.com/problem/high-five/description\nSolution\n/**\n * Definition for a Record\n * class Record {\n * public:\n *   int id, score;\n *   Record(int id, int score) {\n *     this->id = id;\n *     this->score = score;\n *   }\n * };\n */\nclass Solution {\npublic:\n    /**\n     * @param results a list of \n     * @return find the average of 5 highest scores for each person\n     * map (student_id, average_score)\n     */\n    map highFive(vector& results) {\n        // Write your code here\n\n        std::unordered_map, std::greater>> map;\n\n        for (const auto& result : results) {\n            int id = result.id;\n            int score = result.score;\n\n            map[id].push(score);\n            if (map[id].size() > 5) {\n                map[id].pop();\n            }\n        }\n\n        std::map ans;\n        for (auto& pair : map) {\n            int id = pair.first;\n\n            int sum = 0;\n            auto& queue = pair.second;\n            while (!queue.empty()) {\n                sum += queue.top();\n                queue.pop();\n            }\n\n            ans[id] = static_cast(sum) / 5;\n        }\n\n        return ans;\n    }\n};\n\n"},"Priority Queue/Merge K Sorted Interval Lists.html":{"url":"Priority Queue/Merge K Sorted Interval Lists.html","title":"Merge K Sorted Interval Lists","keywords":"","body":"Problem\nLintCode 577. Merge K Sorted Interval Lists\nhttps://www.lintcode.com/problem/merge-k-sorted-interval-lists/description\nSolution\n/**\n * Definition of Interval:\n * classs Interval {\n *     int start, end;\n *     Interval(int start, int end) {\n *         this->start = start;\n *         this->end = end;\n *     }\n * }\n */\n\n\nstruct Record {\n    Interval interval;\n    int id;\n    int index;\n\n    Record(Interval interval, int id, int index)\n      : interval(interval), id(id), index(index)\n    { }\n};\n\n\nstruct RecordCompare {\n    bool operator() (const auto& lhs, const auto& rhs) {\n        if (lhs.interval.start == rhs.interval.end) {\n            return lhs.interval.end > rhs.interval.end;\n        }\n        return lhs.interval.start > rhs.interval.start;\n    }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param intervals: the given k sorted interval lists\n     * @return:  the new sorted interval list\n     */\n    vector mergeKSortedIntervalLists(vector> &intervals) {\n        // write your code here\n\n        std::priority_queue, RecordCompare> queue;\n        int k = intervals.size();\n        for (int i = 0 ; i  ans;\n\n        while (!queue.empty()) {\n            rec = queue.top();\n            queue.pop();\n\n            auto curr = rec.interval;\n            id = rec.id;\n            index = rec.index;\n\n            if (index  prev.end) {\n                ans.emplace_back(std::move(prev));\n                prev = std::move(curr);\n                continue;\n            }\n\n            prev.end = std::max(prev.end, curr.end);\n        }\n        ans.emplace_back(std::move(prev));\n\n        return ans;\n    }\n};\n\n"},"Flood and Fill/Number of Islands.html":{"url":"Flood and Fill/Number of Islands.html","title":"Number of Islands","keywords":"","body":"Problem\nLintCode 433. Number of Islands\nhttps://www.lintcode.com/problem/number-of-islands/description\nSolution\n\nstruct Record {\n    int r;\n    int c;\n\n    Record(int r, int c)\n      : r(r), c(c)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param grid: a boolean 2D matrix\n     * @return: an integer\n     */\n    int numIslands(vector> &grid) {\n        // write your code here\n\n        int num_r = grid.size();\n        if (num_r == 0) {\n            return 0;\n        }\n\n        int num_c = grid[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        int count = 0;\n\n        for (int r = 0 ; r  queue;\n        queue.push(Record(r, c));\n\n        while (!queue.empty()) {\n            auto rec = queue.front();\n            queue.pop();\n\n            for (const auto& direct : directs) {\n                int nr = rec.r + direct[0];\n                int nc = rec.c + direct[1];\n\n                if (!(nr >= 0 && nc >= 0 && nr > directs;\n};\n\n"},"Flood and Fill/Number of Islands II.html":{"url":"Flood and Fill/Number of Islands II.html","title":"Number of Islands II","keywords":"","body":"Problem\nLintCode 434. Number of Islands II\nhttps://www.lintcode.com/problem/number-of-islands-ii/description\nSolution\nclass DisjointSet {\npublic:\n    DisjointSet()\n      : count(0)\n    { }\n\n    void add(int x) {\n        parent[x] = x;\n        ++count;\n    }\n\n    int find(int x) {\n\n        if (parent[x] == x) {\n            return x;\n        }\n\n        parent[x] = find(parent[x]);\n        return parent[x];\n    }\n\n    void unite(int x, int y) {\n\n        int px = find(x);\n        int py = find(y);\n\n        if (px != py) {\n            parent[px] = py;\n            --count;\n        }\n    }\n\n    int getNumberOfSets() {\n        return count;\n    }\n\nprivate:\n    int count;\n    std::unordered_map parent;\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param n: An integer\n     * @param m: An integer\n     * @param operators: an array of point\n     * @return: an integer array\n     */\n    vector numIslands2(int n, int m, vector &operators) {\n        // write your code here\n\n        /**\n         *  00000       00000       01000        01000        01000\n         *  00000  =>   01000   =>  01000   =>   01000   =>   01000\n         *  00000       00000       00000        00000        00000\n         *  00000       00000       00000        00010        00011\n         *\n         *           1 (1, 1)    2 (0, 1)     1 (1, 1)     1 (1, 1)\n         *                       1 (1, 1)       (0, 1)       (0, 1)\n         *\n         *                       1 (1, 1)     3 (3, 3)     3 (3, 3)\n         *                         (0, 1)                    (3, 4)\n         */\n\n        std::vector ans;\n        std::vector> grid(n, std::vector(m, 0));\n        DisjointSet set;\n\n        for (const auto& op : operators) {\n            int x = op.x;\n            int y = op.y;\n\n            // Should avoid the dpulicated operations.\n            if (grid[x][y] != 0) {\n                ans.push_back(set.getNumberOfSets());\n                continue;\n            }\n\n            int id = generateId(m, x, y);\n            set.add(id);\n            grid[x][y] = id;\n\n            for (const auto& direct : directs) {\n                int nx = x + direct[0];\n                int ny = y + direct[1];\n\n                if (!(nx >=0 && ny >= 0 && nx > directs;\n};\n\n"},"Flood and Fill/Surrounded Regions.html":{"url":"Flood and Fill/Surrounded Regions.html","title":"Surrounded Regions","keywords":"","body":"Problem\nLintCode 477. Surrounded Regions\nhttps://www.lintcode.com/problem/surrounded-regions/description\nSolution\n\nstruct Record {\n    int x;\n    int y;\n\n    Record(int x, int y)\n      : x(x), y(y)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /*\n     * @param board: board a 2D board containing 'X' and 'O'\n     * @return: nothing\n     */\n    void surroundedRegions(vector> &board) {\n        // write your code here\n\n        /**\n         *  X X X X      X X X X      X X X X\n         *  X O O X  =>  X O O X  =>  X X X X\n         *  X X O X      X X O X      X X X X\n         *  X O X X      X B X X      X O X X\n         *\n         *  X X X X      X X X X      X X X X\n         *  X O O X  =>  X B B X  =>  X O O X\n         *  X O O X      X B B X      X O O X\n         *  X O X X      X B X X      X O X X\n         */\n\n        int num_r = board.size();\n        if (num_r == 0) {\n            return;\n        }\n\n        int num_c = board[0].size();\n        if (num_c == 0) {\n            return;\n        }\n\n        std::vector>\n            visit(num_r, std::vector(num_c, false));\n\n        for (int i = 0 ; i  queue;\n        queue.push(Record(r, c));\n\n        while (!queue.empty()) {\n            auto rec = queue.front();\n            queue.pop();\n            int x = rec.x;\n            int y = rec.y;\n\n            for (const auto& direct : directs) {\n                int nx = x + direct[0];\n                int ny = y + direct[1];\n\n                if (!(nx >=0 && ny >=0 && nx > directs;\n};\n\n"},"Flood and Fill/Walls and Gates.html":{"url":"Flood and Fill/Walls and Gates.html","title":"Walls and Gates","keywords":"","body":"Problem\nLintCode 663. Walls and Gates\nhttps://www.lintcode.com/problem/walls-and-gates/description\nSolution\n\nstruct Record {\n    int r, c;\n\n    Record(int r, int c)\n      : r(r), c(c)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param rooms: m x n 2D grid\n     * @return: nothing\n     */\n    void wallsAndGates(vector> &rooms) {\n        // write your code here\n\n        int num_r = rooms.size();\n        if (num_r == 0) {\n            return;\n        }\n\n        int num_c = rooms[0].size();\n        if (num_c == 0) {\n            return;\n        }\n\n        std::vector>\n            visit(num_r, std::vector(num_c, false));\n        std::queue queue;\n\n        for (int r = 0 ; r = 0 && nc >= 0 && nr > directs;\n};\n\n"},"Flood and Fill/Pacific Atlantic Water Flow.html":{"url":"Flood and Fill/Pacific Atlantic Water Flow.html","title":"Pacific Atlantic Water Flow","keywords":"","body":"Problem\nLintCode 778. Pacific Atlantic Water Flow\nhttps://www.lintcode.com/problem/pacific-atlantic-water-flow/description\nSolution\nclass Solution {\npublic:\n    vector> pacificAtlantic(vector>& matrix) {\n\n        int m = matrix.size();\n        if (m == 0) {\n            return {};\n        }\n        int n = matrix[0].size();\n        if (n == 0) {\n            return {};\n        }\n\n        vector> pacific(m, vector(n, false));\n        vector> atlantic(m, vector(n, false));\n\n        for (int i = 0 ; i > ans;\n        for (int i = 0 ; i = m || c >= n) {\n            return;\n        }\n        if (board[r][c] \n"},"Flood and Fill/Set Matrix Zeros.html":{"url":"Flood and Fill/Set Matrix Zeros.html","title":"Set Matrix Zeros","keywords":"","body":"Problem\nLintCode 162. Set Matrix Zeros\nhttps://www.lintcode.com/problem/set-matrix-zeroes/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: A lsit of lists of integers\n     * @return: nothing\n     */\n    void setZeroes(vector> &matrix) {\n        // write your code here\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return;\n        }\n\n\n        /**\n         *    1 1 0 1\n         *    0 1 1 1\n         *    1 0 1 1\n         *    1 1 1 1\n         *\n         *  Step 1. Check the outer frame. To be more specific, if we can find\n         *  a cell containing 0 in the first row, we need to modify that entire\n         *  row. Futhermore, if we can find a cell containing 0 in the first\n         *  column, we need to modify that entire column as well.\n         *\n         *\n         *  Step 2. Check the internal matrix and fill the leading rows and\n         *  columns with 0s for the cells that are now 0s.\n         *\n         *    1 1 0 1      1 0 0 1\n         *    0 1 1 1  =>  0 1 1 1\n         *    1 0 1 1      0 0 1 1\n         *    1 1 1 1      1 1 1 1\n         *\n         *  Step 3. Fill the internal matrix with 0s by checking the leading\n         *  rows and columns.\n         *\n         *    1 0 0 1      1 0 0 1\n         *    0 1 1 1  =>  0 0 0 0\n         *    0 0 1 1      0 0 0 0\n         *    1 1 1 1      1 0 0 1\n         *\n         *  Step 4. Based on the result determined in the first step, we should\n         *  fill the first row and column with 0s if necessary.\n         *\n         *    0 0 0 0\n         *    0 0 0 0\n         *    0 0 0 0\n         *    0 0 0 1\n         */\n\n        bool must_fill_1st_row = false;\n        for (int i = 0 ; i \n"},"Flood and Fill/Island Perimeter.html":{"url":"Flood and Fill/Island Perimeter.html","title":"Island Perimeter","keywords":"","body":"Problem\nLintCode 1225. Island Perimeter\nhttps://www.lintcode.com/problem/island-perimeter/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param grid: a 2D array\n     * @return: the perimeter of the island\n     */\n    int islandPerimeter(vector> &grid) {\n        // Write your code here\n\n        int num_r = grid.size();\n        if (num_r == 0) {\n            return 0;\n        }\n        int num_c = grid[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        int sum = 0;\n        for (int x = 0 ; x = 0 && y >= 0 && x > directs;\n};\n\n"},"Post Office/Build Post Office II.html":{"url":"Post Office/Build Post Office II.html","title":"Build Post Office II","keywords":"","body":"Problem\nLintCode 573. Build Post Office II\nhttps://www.lintcode.com/problem/build-post-office-ii/description\nSolution\n\nstruct Record {\n    int x, y;\n\n    Record(int x, int y)\n      : x(x), y(y)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param grid: a 2D grid\n     * @return: An integer\n     */\n    int shortestDistance(vector> &grid) {\n        // write your code here\n\n        int num_r = grid.size();\n        if (num_r == 0) {\n            return 0;\n        }\n\n        int num_c = grid[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        // Collect the houses.\n        std::vector recs;\n        int num_house = 0;\n        for (int i = 0 ; i > dist(num_r, std::vector(num_c, 0));\n        std::vector> reach(num_r, std::vector(num_c, 0));\n\n        for (const auto& rec : recs) {\n            floodAndFill(rec.x, rec.y, num_r, num_c, grid, dist, reach);\n        }\n\n        int ans = INT_MAX;\n        for (int i = 0 ; i  queue;\n        queue.push(Record(r, c));\n\n        std::vector>\n            visit(num_r, std::vector(num_c, false));\n        visit[r][c] = true;\n\n        int level = 0;\n\n        while (!queue.empty()) {\n            int n = queue.size();\n            ++level;\n\n            for (int i = 0 ; i = 0 && ny >= 0 && nx > directs;\n};\n\n"},"Post Office/Post Office Problem.html":{"url":"Post Office/Post Office Problem.html","title":"Post Office Problem","keywords":"","body":"Problem\nLintCode 435. Post Office Problem\nhttps://www.lintcode.com/problem/post-office-problem/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer array\n     * @param k: An integer\n     * @return: an integer\n     */\n    int postOffice(vector &A, int k) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The minimum cost to build i post offices to serve the first\n         *           j houses -- the first house to the jth house.\n         *\n         * cost[i][j]: The minimum cost to build a post office to serve the\n         *             ith house to the jth house.\n         *\n         * dp[i][j] =     MIN   {dp[i - 1][k] + cost[k + 1][j]}\n         *            (i-1)> cost(n, std::vector(n, 0));\n\n        // An optimal way to build an office to serve the houses within a given\n        // range is to put that office at the middle point of the range.\n        for (int i = 0 ; i > dp(k, std::vector(n, 0));\n\n        // Build an office to serve the first i houses.\n        for (int i = 0 ; i \n"},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"url":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","title":"Best Time to Buy and Sell Stocks","keywords":"","body":"Problem\nLintCode 149. Best Time to Buy and Sell Stocks\nhttps://www.lintcode.com/problem/best-time-to-buy-and-sell-stock/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param prices: Given an integer array\n     * @return: Maximum profit\n     */\n    int maxProfit(vector &prices) {\n        // write your code here\n\n        int size = prices.size();\n        if (size == 0) {\n            return 0;\n        }\n\n        int opt = 0;\n        int min = prices[0];\n\n        for (int i = 1 ; i \n"},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"url":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","title":"Best Time to Buy and Sell Stocks II","keywords":"","body":"Problem\nLintCode 150. Best Time to Buy and Sell Stocks II\nhttps://www.lintcode.com/problem/best-time-to-buy-and-sell-stock-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param prices: Given an integer array\n     * @return: Maximum profit\n     */\n    int maxProfit(vector &prices) {\n        // write your code here\n\n        /**\n         * 1 7 2 4 5 6 1\n         *\n         *   *\n         *   *       *\n         *   *     * *\n         *   *   * * *\n         *   *   * * *\n         *   * * * * *\n         * * * * * * * *\n         * _____________\n         *\n         * Objective: Aggregate all the ascending segments.\n         *\n         *      Segments: (0, 1), (2, 6)\n         *      Value   : 6     , 4\n         */\n\n        int n = prices.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int ans = 0;\n        int bgn = 0, end = 1;\n\n        while (end \n"},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"url":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","title":"Best Time to Buy and Sell Stocks III","keywords":"","body":"Problem\nLintCode 151. Best Time to Buy and Sell Stocks III\nhttps://www.lintcode.com/problem/best-time-to-buy-and-sell-stock-iii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param prices: Given an integer array\n     * @return: Maximum profit\n     */\n    int maxProfit(vector &prices) {\n        // write your code here\n\n        /**\n         *  buy_1st : The maximum profits that we can get after conducting\n         *            the first purchase.\n         *\n         *  sell_1st: The maximum profits that we can get after conducting\n         *            the first selling.\n         *\n         *  buy_2nd : The maximum profits that we can get after conducting\n         *            the second purchase.\n         *\n         *  sell_2nd: The maximum profits that we can get after conducting\n         *            the second selling.\n         *\n         *\n         *  price: The stock price of the ith day.\n         *\n         *  buy_1st  = MAX{ buy_1st, -price }\n         *  sell_1st = MAX{ sell_1st, buy_1st + price}\n         *  buy_2nd  = MAX{ buy_2nd, sell_1st - price }\n         *  sell_2nd = MAX{ sell_2nd, buy_2nd + price }\n         *  ^^^^^^^^\n         */\n\n        int buy_first = std::numeric_limits::min();\n        int buy_second = std::numeric_limits::min();\n\n        int sell_first = 0;\n        int sell_second = 0;\n\n        for (int price : prices) {\n            buy_first = std::max(buy_first, -price);\n            sell_first = std::max(sell_first, buy_first + price);\n\n            buy_second = std::max(buy_second, sell_first - price);\n            sell_second = std::max(sell_second, buy_second + price);\n        }\n\n        return sell_second;\n    }\n};\n\n"},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"url":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","title":"Best Time to Buy and Sell Stocks IV","keywords":"","body":"Problem\nLintCode 393. Best Time to Buy and Sell Stocks IV\nhttps://www.lintcode.com/problem/best-time-to-buy-and-sell-stock-iv/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param K: An integer\n     * @param prices: An integer array\n     * @return: Maximum profit\n     */\n    int maxProfit(int k, vector &prices) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The maximum profits that we can get after we conduct at\n         *           most i transactions in the first j days.\n         *\n         * dp[i][j] = MAX | no transaction on the jth day, dp[i][j - 1]\n         *                | otherwise,\n         *                |     MAX { (price[j] - price[h]) + dp[i - 1][h] }\n         *                     0 price[j] + MaxDiff, determine the optimal value\n         *  => MaxDiff = MAX{ MaxDiff, dp[i - 1][j] - price[j]}, update the cache\n         *\n         *      O(kn)\n         */\n\n        int n = prices.size();\n        if (n == 0 || k == 0) {\n            return 0;\n        }\n\n        if (k >= n / 2) {\n            int sum = 0;\n            for (int i = 1 ; i  prices[i - 1]) {\n                    sum += prices[i] - prices[i - 1];\n                }\n            }\n            return sum;\n        }\n\n        std::vector> dp(k + 1, std::vector(n, 0));\n\n        /*\n            O(k * n^2)\n\n        for (int i = 1 ; i \n"},"Knapsack Problem/Backpack I.html":{"url":"Knapsack Problem/Backpack I.html","title":"Backpack I","keywords":"","body":"Problem\nLintCode 92 Backpack\nhttps://www.lintcode.com/problem/backpack/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param m: An integer m denotes the size of a backpack\n     * @param A: Given n items with size A[i]\n     * @return: The maximum size\n     */\n    int backPack(int m, vector &A) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The maximal size the knapsack which can hold j units of\n         *           weight can aggregate by using the first i items.\n         *\n         * dp[i][j] = | A[i] > dp(n + 1, std::vector(m + 1, 0));\n\n        for (int i = 1 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] =\n                    std::max(dp[i - 1][j], dp[i - 1][j - A[i - 1]] + A[i - 1]);\n            }\n        }\n\n        return dp[n][m];\n    }\n};\n\n"},"Knapsack Problem/Backpack II.html":{"url":"Knapsack Problem/Backpack II.html","title":"Backpack II","keywords":"","body":"Problem\nLintCode 125 Backpack II\nhttps://www.lintcode.com/problem/backpack-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param m: An integer m denotes the size of a backpack\n     * @param A: Given n items with size A[i]\n     * @param V: Given n items with value V[i]\n     * @return: The maximum value\n     */\n    int backPackII(int m, vector &A, vector &V) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The maximal values the knapsack which can hold j units of\n         *           weight can aggregate by using the first i items.\n         *\n         * dp[i][j] = | W[i] > dp(n + 1, std::vector(m + 1, 0));\n\n        for (int i = 1 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = std::max(\n                    V[i - 1] + dp[i - 1][j - A[i - 1]], dp[i - 1][j]);\n            }\n        }\n\n        return dp[n][m];\n    }\n};\n\n"},"Knapsack Problem/Backpack III.html":{"url":"Knapsack Problem/Backpack III.html","title":"Backpack III","keywords":"","body":"Problem\nLintCode 440 Backpack III\nhttps://www.lintcode.com/problem/backpack-iii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer array\n     * @param V: an integer array\n     * @param m: An integer\n     * @return: an array\n     */\n    int backPackIII(vector &A, vector &V, int m) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The maximal values the knapsack which can hod j units of\n         *           weight can aggregate by using the first i items.\n         *\n         * Note: An item can be used multiple times.\n         *\n         * dp[i][j] = | W[i] > dp(n + 1, std::vector(m + 1, 0));\n\n        for (int i = 1 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = std::max(dp[i - 1][j], V[i - 1] + dp[i][j - A[i - 1]]);\n            }\n        }\n\n        return dp[n][m];\n    }\n};\n\n"},"Knapsack Problem/Backpack IV.html":{"url":"Knapsack Problem/Backpack IV.html","title":"Backpack IV","keywords":"","body":"Problem\nLintCode 562 Backpack IV\nhttps://www.lintcode.com/problem/backpack-iv/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an integer array and all positive numbers, no duplicates\n     * @param target: An integer\n     * @return: An integer\n     */\n    int backPackIV(vector &nums, int target) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The number of ways to fill the knapsack which can hold j\n         *           units of weight using the first i items.\n         *\n         * Note: An item can be used multiple times.\n         *\n         * dp[i][j] = | nums[i] > dp(n + 1, std::vector(target + 1, 0));\n\n        for (int i = 0 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = dp[i - 1][j] + dp[i][j - nums[i - 1]];\n            }\n        }\n\n        return dp[n][target];\n    }\n};\n\n"},"Knapsack Problem/Backpack V.html":{"url":"Knapsack Problem/Backpack V.html","title":"Backpack V","keywords":"","body":"Problem\nLintCode 563 Backpack V\nhttps://www.lintcode.com/problem/backpack-v/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an integer array and all positive numbers\n     * @param target: An integer\n     * @return: An integer\n     */\n    int backPackV(vector &nums, int target) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The number of ways to fill the knapsack which can hold j\n         *           units of weight using the first i items.\n         *\n         * dp[i][j] = | nums[i] > dp(n + 1, std::vector(target + 1, 0));\n\n        for (int i = 0 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];\n            }\n        }\n\n        return dp[n][target];\n    }\n};\n\n"},"Knapsack Problem/Backpack VI.html":{"url":"Knapsack Problem/Backpack VI.html","title":"Backpack VI","keywords":"","body":"Problem\nLintCode 564 Combination Sum IV\nhttps://www.lintcode.com/problem/combination-sum-iv/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an integer array and all positive numbers, no duplicates\n     * @param target: An integer\n     * @return: An integer\n     */\n    int backPackVI(vector &nums, int target) {\n        // write your code here\n\n        /**\n         * dp[i]: The number of ways to sum up to i using any combination of numbers.\n         *\n         * dp[i] =  SUM { dp[i - nums[j] | i >= nums[j]}\n         *         0 dp(target + 1, 0);\n        dp[0] = 1;\n\n        for (int i = 1 ; i  i) {\n                    continue;\n                }\n                dp[i] += dp[i - num];\n            }\n        }\n\n        return dp[target];\n    }\n};\n\n"},"Knapsack Problem/K Sum.html":{"url":"Knapsack Problem/K Sum.html","title":"K Sum","keywords":"","body":"Problem\nLintCode 89 K Sum\nhttps://www.lintcode.com/problem/k-sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An integer array\n     * @param k: A positive integer (k  &A, int k, int target) {\n        // write your code here\n\n        /**\n         * dp[i][j][h]: The number of ways to use j integers from the first i\n         *              integers to compose h.\n         *\n         * dp[i][j][h] = | A[i] >>\n            dp(n + 1, std::vector>(\n                k + 1, std::vector(target + 1, 0)));\n\n        for (int i = 0 ; i  h) {\n                        dp[i][j][h] = dp[i - 1][j][h];\n                        continue;\n                    }\n\n                    dp[i][j][h] = dp[i - 1][j][h] + dp[i - 1][j - 1][h - A[i - 1]];\n                }\n            }\n        }\n\n        return dp[n][k][target];\n    }\n};\n\n"},"Knapsack Problem/Coin Change.html":{"url":"Knapsack Problem/Coin Change.html","title":"Coin Change","keywords":"","body":"Problem\nLintCode 669. Coin Change\nhttps://www.lintcode.com/problem/coin-change/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param coins: a list of integer\n     * @param amount: a total amount of money amount\n     * @return: the fewest number of coins that you need to make up\n     */\n    int coinChange(vector &coins, int amount) {\n        // write your code here\n\n        /**\n         * dp[i]: The minimum number of coins that make i dollars.\n         *\n         * dp[i] = MIN { dp[i - coins[j] | 0 = coins[j] } + 1\n         */\n\n        int n = coins.size();\n        if (n == 0) {\n            return -1;\n        }\n\n        std::vector dp(amount + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 1 ; i  i) {\n                    continue;\n                }\n                min = std::min(min, dp[i - coin]);\n            }\n\n            if (min \n"},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"url":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","title":"Number of Dice Rolls with Target Sum","keywords":"","body":"Problem\nLeetCode 1155. Number of Dice Rolls With Target Sum\nhttps://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\nSolution\nclass Solution {\npublic:\n    int numRollsToTarget(int d, int f, int target) {\n\n        /*\n        dp[i][j]: The number of ways to sum up to j using the first i dices.\n\n        dp[i][j] =   SUM { dp[i - 1][j - k] | j >= k }\n                   0> dp(d + 1, vector(target + 1, 0));\n        dp[0][0] = 1;\n\n        for (int i = 1 ; i  j) {\n                        continue;\n                    }\n                    sum += dp[i - 1][j - k];\n                    sum = sum % 1000000007;\n                }\n                dp[i][j] = sum;\n            }\n        }\n\n        return dp[d][target];\n    }\n};\n\n"},"Knapsack Problem/Target Sum.html":{"url":"Knapsack Problem/Target Sum.html","title":"Target Sum","keywords":"","body":"Problem\nLintCode 1208. Target Sum\nhttps://www.lintcode.com/problem/target-sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: the given array\n     * @param s: the given target\n     * @return: the number of ways to assign symbols to make sum of integers equal to target S\n     */\n    int findTargetSumWays(vector &nums, int s) {\n        // Write your code here\n\n        /**\n         * dp[i][j]: The number of ways to sum up to j using the first i numbers.\n         *\n         * dp[i][j] = dp[i - 1][j - nums[i]] + dp[i - 1][j + nums[i]]\n         *\n         * (For the second dimension, we can use hash table because its value\n         *  range is discrete.)\n         */\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        vector> dp(n);\n\n        dp[0][nums[0]] += 1;\n        dp[0][-nums[0]] += 1;\n\n        for (int i = 1 ; i \n"},"Matrix Chain Multiplication/Stone Game.html":{"url":"Matrix Chain Multiplication/Stone Game.html","title":"Stone Game","keywords":"","body":"Problem\nLintCode 476. Stone Game\nhttps://www.lintcode.com/problem/stone-game/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An integer array\n     * @return: An integer\n     */\n    int stoneGame(vector &A) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The minimum cost to merge the piles starting from the\n         *           ith pile to the jth pile.\n         *\n         * dp[i][j] =  MIN { dp[i][k] + dp[k + 1][j] + sum(i, j) }\n         *            i prefix(n + 1, 0);\n        for (int i = 1 ; i > dp(n, std::vector(n, 0));\n\n        for (int i = 1 ; i ::max();\n                int sum = prefix[j + 1] - prefix[i];\n\n                for (int k = i ; k \n"},"Matrix Chain Multiplication/Stone Game II.html":{"url":"Matrix Chain Multiplication/Stone Game II.html","title":"Stone Game II","keywords":"","body":"Problem\nLintCode 593. Stone Game II\nhttps://www.lintcode.com/problem/stone-game-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An integer array\n     * @return: An integer\n     */\n    int stoneGame2(vector &A) {\n        // write your code here\n\n        /**\n         *     A\n         *              A good way to break the loop is to flatten the loop\n         *  B     E     with 2 consecutive replicas.\n         *\n         *   C   D      => A B C D E A B C D E\n         *\n         * dp[i][j]: The minimum cost to merge the piles starting from the\n         *           ith pile to the jth pile.\n         *\n         * dp[i][j] =  MIN { dp[i][k] + dp[k + 1][j] + sum(i, j) }\n         *            i prefix(nn + 1, 0);\n        for (int i = 1 ; i > dp(nn, std::vector(nn, 0));\n        for (int i = 1 ; i ::max();\n                int sum = prefix[j + 1] - prefix[i];\n\n                for (int k = i ; k ::max();\n        for (int i = 0 ; i \n"},"Matrix Chain Multiplication/Burst Balloons.html":{"url":"Matrix Chain Multiplication/Burst Balloons.html","title":"Burst Balloons","keywords":"","body":"Problem\nLintCode 168. Burst Balloons\nhttps://www.lintcode.com/problem/burst-balloons/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integer\n     * @return: An integer, maximum coins\n     */\n    int maxCoins(vector &nums) {\n        // write your code here\n\n        /**\n         * | ........ B ....... |\n         * | .... B ........... |\n         * | ............ B ... |\n         *\n         * dp[i][j]: The maximum score that we can secure among the ith balloon\n         *           to the jth balloon.\n         *\n         * Consider k is the last balloon that we can burst among the range(i, j).\n         *\n         * dp[i][j] =  MAX { dp[i][k - 1] + dp[k + 1][j] + nums[i - 1] * nums[k] * nums[j + 1} }\n         *           i> dp(n + 2, std::vector(n + 2, 0));\n\n        for (int l = 1 ; l \n"},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"url":"Matrix Chain Multiplication/Unique Binary Search Trees.html","title":"Unique Binary Search Trees","keywords":"","body":"Problem\nLintCode 163. Unique Binary Search Trees\nhttps://www.lintcode.com/problem/unique-binary-search-trees/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: An integer\n     */\n    int numTrees(int n) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The number of unique binary search trees generated by\n         *           the nodes starting from the ith node to the jth node.\n         *\n         * dp[i][j] =   SUM { dp[i][k - 1] * dp[k + 1][j] }\n         *            i> dp(n, std::vector(n, 0));\n        for (int i = 0 ; i  i) ? dp[i][k - 1] : 1;\n                    int rght = (k \n"},"Fibonacci Sequence/Decode Ways.html":{"url":"Fibonacci Sequence/Decode Ways.html","title":"Decode Ways","keywords":"","body":"Problem\nLintCode 512. Decode Ways\nhttps://www.lintcode.com/problem/decode-ways/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: a string,  encoded message\n     * @return: an integer, the number of ways decoding\n     */\n    int numDecodings(string &s) {\n        // write your code here\n\n        /**\n         * dp[i]: The number of ways to decode the prefix ending at index i.\n         *\n         * dp[i] = dp[i - 1] + dp[i - 2]\n         *\n         * - Handle 1 digit:\n         *   s[i]: 0              -> 0\n         *   s[i]: {1, 2, ..., 9} -> 1\n         *\n         * - Handle 2 digits:\n         *   s[i - 1]: 0                  -> 0\n         *   s[i - 1]: 1\n         *      - s[i]: {0, 1, 2, ..., 9} -> 1\n         *   s[i - 1]: 2\n         *      - s[i]: {0, 1, 2, ..., 6} -> 1\n         *      - s[i]: {7, 8, 9}         -> 0\n         *   s[i - 1]: {3, 4, ..., 9}     -> 0\n         */\n\n        int n = s.length();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector dp(n + 1, 1);\n\n        for (int i = 1 ; i = 2) {\n                dp[i] += countTwoDigits(s, i - 2, i - 1) * dp[i - 2];\n            }\n        }\n\n        return dp[n];\n    }\n\nprivate:\n    int countOneDigit(const std::string& str, int s1) {\n\n        return (str[s1] == '0') ? 0 : 1;\n    }\n\n    int countTwoDigits(const std::string& str, int s1, int s2) {\n\n        if (str[s1] == '0') {\n            return 0;\n        }\n\n        if (str[s1] == '1') {\n            return 1;\n        }\n\n        if (str[s1] == '2') {\n            return ('0' \n"},"Fibonacci Sequence/Decode Ways II.html":{"url":"Fibonacci Sequence/Decode Ways II.html","title":"Decode Ways II","keywords":"","body":"Problem\nLintCode 676. Decode Ways II\nhttps://www.lintcode.com/problem/decode-ways-ii/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : mod(1000000007)\n    { }\n\n    /**\n     * @param s: a message being encoded\n     * @return: an integer\n     */\n    int numDecodings(string &s) {\n        // write your code here\n\n        /**\n         *            i\n         *      *******\n         *           (i - 1)\n         *  ->  ******\n         *           (i - 2)\n         *  ->  *****\n         *\n         *  dp[i]: The number of ways to decode the given substring ending at\n         *         the ith letter.\n         *\n         *  dp[i] = dp[i - 1] + dp[i - 2]\n         *\n         *\n         *  dp[i - 1]:\n         *      - s[i]: 0           , get 0\n         *      - s[i]: {1, ..., 9} , get dp[i - 1]\n         *      - s[i]: *           , get 9 * dp[i - 1]\n         *\n         *  dp[i - 2]:\n         *      - s[i - 1]: 0           , get 0\n         *      - s[i - 1]: 1\n         *          - s[i]: {0, ..., 9} , get dp[i - 2]\n         *          - s[i]: *           , get 9 * dp[i - 2]\n         *      - s[i - 1]: 2\n         *          - s[i]: {0, ..., 6} , get dp[i - 2]\n         *          - s[i]: {7, 8, 9}   , get 0\n         *          - s[i]: *           , get 6 * dp[i - 2]\n         *      - s[i - 1]: {3, ..., 9} , get 0\n         *      - s[i - 1]: *\n         *          - s[i]: {0, ..., 6} , get 2 * dp[i - 2]\n         *          - s[i]: {7, 8, 9}   , get dp[i - 2]\n         *          - s[2]: *           , get 15 * dp[i - 2]\n         *\n         */\n\n        int n = s.length();\n\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector dp(n + 1, 0);\n        dp[0] = 1;\n\n        for (int i = 0, j = 1 ; i \n"},"Fibonacci Sequence/House Robber.html":{"url":"Fibonacci Sequence/House Robber.html","title":"House Robber","keywords":"","body":"Problem\nLintCode 392. House Robber\nhttps://www.lintcode.com/problem/house-robber/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An array of non-negative integers\n     * @return: The maximum amount of money you can rob tonight\n     */\n    long long houseRobber(vector &A) {\n        // write your code here\n\n        /**\n         * dp[i]: The maximum profits that we can aggregate from the first i\n         *        houses.\n         *\n         * dp[i] = MAX{ profit[i] + dp[i - 2], dp[i - 1] }\n         */\n\n        int n = A.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector dp(n, 0);\n        dp[0] = A[0];\n        dp[1] = std::max(A[0], A[1]);\n\n        for (int i = 2 ; i \n"},"Fibonacci Sequence/House Robber II.html":{"url":"Fibonacci Sequence/House Robber II.html","title":"House Robber II","keywords":"","body":"Problem\nLintCode 534. House Robber II\nhttps://www.lintcode.com/problem/house-robber-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: An array of non-negative integers.\n     * @return: The maximum amount of money you can rob tonight\n     */\n    int houseRobber2(vector &nums) {\n        // write your code here\n\n        /**\n         *       A      =>  The key to break the loop is generating 2\n         *                  subproblems and solving them respectively.\n         *   B       E\n         *              =>  (A B C D) or (B C D E)\n         *     C   D\n         *\n         *  1. Rob the 1st house, solve the problem within the range (0, n - 2).\n         *  2. Rob the last house, solve the problem within the range (1, n - 1).\n         *\n         *  dp[i]: The maximum profits that we can aggregate from the first\n         *         i houses.\n         *\n         *  dp[i] = MAX { profit[i] + dp[i - 2], dp[i - 1] }\n         */\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return nums[0];\n        }\n\n        return std::max(rob(nums, n, 0, n - 2), rob(nums, n, 1, n - 1));\n    }\n\nprivate:\n    int rob(const std::vector& nums, int n, int bgn, int end) {\n\n        std::vector dp(n, 0);\n\n        dp[bgn] = nums[bgn];\n        dp[bgn + 1] = std::max(nums[bgn], nums[bgn + 1]);\n\n        for (int i = bgn + 2 ; i \n"},"Fibonacci Sequence/House Robber III.html":{"url":"Fibonacci Sequence/House Robber III.html","title":"House Robber III","keywords":"","body":"Problem\nLintCode 535. House Robber III\nhttps://www.lintcode.com/problem/house-robber-iii/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: The root of binary tree.\n     * @return: The maximum amount of money you can rob tonight\n     */\n    int houseRobber3(TreeNode * root) {\n        // write your code here\n\n        /**\n         *        A\n         *       / \\\n         *     B     C\n         *    / \\   / \\\n         *   D   E F   G\n         *\n         * dp[c]: The maximum profits that we can aggregate in the subtree\n         *        rooted by c.\n         *\n         * dp[c] = MAX | c->val + dp[c->l->l] + dp[c->l->r] + dp[c->r->r] + dp[c->r->l]\n         *             | dp[c->l] + dp[c->r]\n         */\n\n        std::unordered_map memo;\n        return runPostOrder(root, memo);\n    }\n\nprivate:\n    int runPostOrder(TreeNode* root, std::unordered_map& memo) {\n\n        if (!root) {\n            return 0;\n        }\n\n        if (memo.count(root) == 1) {\n            return memo[root];\n        }\n\n        int l = 0, ll = 0, lr = 0, r = 0, rr = 0, rl = 0;\n\n        if (root->left) {\n            l = runPostOrder(root->left, memo);\n            ll = runPostOrder(root->left->left, memo);\n            lr = runPostOrder(root->left->right, memo);\n        }\n        if (root->right) {\n            r = runPostOrder(root->right, memo);\n            rr = runPostOrder(root->right->right, memo);\n            rl = runPostOrder(root->right->left, memo);\n        }\n\n        int max = std::max(root->val + ll + lr + rr + rl, l + r);\n\n        memo[root] = max;\n        return max;\n    }\n};\n\n"},"Fibonacci Sequence/4 Keys Keyboard.html":{"url":"Fibonacci Sequence/4 Keys Keyboard.html","title":"4 Keys Keyboard","keywords":"","body":"Problem\nLintCode 867. 4 Keys Keyboard\nhttps://www.lintcode.com/problem/4-keys-keyboard/solution\nSolution\nclass Solution {\npublic:\n    /**\n     * @param N: an integer\n     * @return: return an integer\n     */\n    int maxA(int N) {\n        // write your code here\n\n        /**\n         * dp[i]: The maximum number of letters we can get after pressing\n         *        i times of keys.\n         *\n         *\n         * dp[i] = MAX | dp[i - 1] + 1\n         *             | MAX { dp[j] * (i - j - 1) | 0  dp(N);\n        dp[0] = 1;\n\n        for (int i = 1 ; i \n"},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"url":"Fibonacci Sequence/Minimum Cost for Tickets.html","title":"Minimum Cost for Tickets","keywords":"","body":"Problem\nLeetCode 983. Minimum Cost For Tickets\nhttps://leetcode.com/problems/minimum-cost-for-tickets/\nSolution\nclass Solution {\npublic:\n    int mincostTickets(vector& days, vector& costs) {\n\n        /*\n            dp[i]: The minimum cost till the ith day.\n\n            dp[i] = | dp[i - 1]                  ,we don't need to travel in the ith day.\n                    |     | cost[D] + dp[i - 1]\n                    | MIN | cost[W] + dp[i - 7]  ,we must travel in the ith day.\n                    |     | cost[M] + dp[i - 30]\n        */\n\n        int n = days.back();\n\n        vector dp(n + 1, -1);\n        for (int day : days) {\n            dp[day] = 0;\n        }\n\n        dp[0] = 0;\n        for (int i = 1 ; i \n"},"String and Sequence Extremum/Minimum Edit Distance.html":{"url":"String and Sequence Extremum/Minimum Edit Distance.html","title":"Minimum Edit Distance","keywords":"","body":"Problem\nLintCode 119. Edit Distance\nhttps://www.lintcode.com/problem/edit-distance/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param word1: A string\n     * @param word2: A string\n     * @return: The minimum number of steps.\n     */\n    int minDistance(string &s, string &t) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The minimum costs to transform the prefix of A ending at\n         *           the index i to the prefix of B ending at the index j.\n         *\n         *  dp[i][i] = | if A[i] == B[j], dp[i - 1][j - 1]\n         *             | otherwise      , MIN | 1 + dp[i - 1][j - 1], replace A[i].\n         *                                    | 1 + dp[i][j - 1]    , insert a letter.\n         *                                    | 1 + dp[i - 1][j]    , delete a letter.\n         */\n\n        int ns = s.length();\n        int nt = t.length();\n\n        std::vector> dp(ns + 1, std::vector(nt + 1));\n\n        for (int i = 0 ; i \n"},"String and Sequence Extremum/One Edit Distance.html":{"url":"String and Sequence Extremum/One Edit Distance.html","title":"One Edit Distance","keywords":"","body":"Problem\nLintCode 640. One Edit Distance\nhttps://www.lintcode.com/problem/one-edit-distance/description\nSolution\n\nclass Solution {\npublic:\n    /**\n     * @param s: a string\n     * @param t: a string\n     * @return: true if they are both one edit distance apart or false\n     */\n    bool isOneEditDistance(string &s, string &t) {\n        // write your code here\n\n        int len_s = s.length();\n        int len_t = t.length();\n\n        int diff = std::abs(len_s - len_t);\n\n        if (diff > 1) {\n            return false;\n        }\n\n        if (diff == 0) {\n            return checkStringsWithSameLength(s, t, len_s);\n        }\n\n        return checkStringsWithDifferentLength(s, t, len_s, len_t);\n    }\n\nprivate:\n    bool checkStringsWithSameLength(const auto& s, const auto& t, int len) {\n\n        int count = 0;\n\n        for (int i = 0 ; i  len_t) {\n                ++i;\n            } else {\n                ++j;\n            }\n        }\n\n        return true;\n    }\n};\n\n"},"String and Sequence Extremum/Longest Common Subsequence.html":{"url":"String and Sequence Extremum/Longest Common Subsequence.html","title":"Longest Common Subsequence","keywords":"","body":"Problem\nLintCode 77. Longest Common Subsequence\nhttps://www.lintcode.com/problem/longest-common-subsequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: A string\n     * @param B: A string\n     * @return: The length of longest common subsequence of A and B\n     */\n    int longestCommonSubsequence(string &A, string &B) {\n        // write your code here\n\n        /**\n         *  dp[i][j]: The LCS of the prefixes A(0, i) and B(0, j).\n         *\n         *  dp[i][j] = | if A[i] == B[j], dp[i - 1][j - 1] + 1\n         *             | Otherwise      , MAX(dp[i - 1][j], dp[i][j - 1])\n         */\n\n        int na = A.size();\n        int nb = B.size();\n\n        std::vector> dp(na + 1, std::vector(nb + 1, 0));\n\n        for (int i = 1 ; i \n"},"String and Sequence Extremum/Shortest Common Supersequence.html":{"url":"String and Sequence Extremum/Shortest Common Supersequence.html","title":"Shortest Common Supersequence","keywords":"","body":"Problem\nLeetCode 1092. Shortest Common Supersequence\nhttps://leetcode.com/problems/shortest-common-supersequence/\nSolution\nclass Solution {\npublic:\n    string shortestCommonSupersequence(string s1, string s2) {\n\n        /**\n            dp[i][j]: The length of the SCS of the prefix of S1 ending at offset i\n                      and the prefix of S2 ending at offset j.\n\n            dp[i][j] = | if S1[i] == S2[j], 1 + dp[i - 1][j - 1]\n                       | Otherwise        , 1 + MIN{dp[i - 1][j], dp[i][j - 1]}\n         */\n\n        int n1 = s1.length();\n        int n2 = s2.length();\n\n        vector> dp(n1 + 1, vector(n2 + 1, 0));\n        vector> trace(n1 + 1, vector(n2 + 1, 0));\n\n        for (int i = 1 ; i  0 || c > 0) {\n            if (trace[r][c] == S1) {\n                scs.push_back(s1[--r]);\n            } else if (trace[r][c] == S2) {\n                scs.push_back(s2[--c]);\n            } else {\n                scs.push_back(s1[--r]);\n                --c;\n            }\n        }\n\n        std::reverse(scs.begin(), scs.end());\n        return scs;\n    }\n\nprivate:\n    enum {\n        S1 = 1,\n        S2 = 2,\n        C = 3\n    };\n};\n\n"},"String and Sequence Extremum/Longest Common Substring.html":{"url":"String and Sequence Extremum/Longest Common Substring.html","title":"Longest Common Substring","keywords":"","body":"Problem\nLintCode 79. Longest Common Substring\nhttps://www.lintcode.com/problem/longest-common-substring/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: A string\n     * @param B: A string\n     * @return: the length of the longest common substring.\n     */\n    int longestCommonSubstring(string &A, string &B) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The length of the longest common substring of the 2\n         *           prefixes A(0, i) and B(0, j).\n         *\n         * dp[i][j] = | if A[i] == B[j], 1 + dp[i - 1][j - 1]\n         *            | Otherwise      , 0\n         *\n         *\n         *  e.g.: ABCD, CBCE\n         *\n         *      0 A B C D\n         *    0 0 0 0 0 0\n         *    C 0 0 0 1 0\n         *    B 0 0 1 0 0\n         *    C 0 0 0 2 0\n         *    E 0 0 0 0 0\n         */\n\n        int na = A.size();\n        int nb = B.size();\n\n        int ans = 0;\n        std::vector> dp(na + 1, std::vector(nb + 1, 0));\n\n        for (int i = 1 ; i \n"},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"url":"String and Sequence Extremum/Longest Palindromic Subsequence.html","title":"Longest Palindromic Subsequence","keywords":"","body":"Problem\nLintCode 667. Longest Palindromic Subsequence\nhttps://www.lintcode.com/problem/longest-palindromic-subsequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: the maximum length of s is 1000\n     * @return: the longest palindromic subsequence's length\n     */\n    int longestPalindromeSubseq(string &s) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The length of the longest palindromic subsequence in\n         *           the substring starting at the index i and ending at the\n         *           index j.\n         *\n         * dp[i][j] = | if s[i] == s[j], 2 + dp[i + 1][j - 1]\n         *            | otherwise      , max{ dp[i][j - 1], dp[i + 1][j] }\n         */\n\n        int n = s.length();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector> dp(n, std::vector(n, 0));\n\n        for (int i = 0 ; i \n"},"String and Sequence Extremum/Longest Palindromic Substring.html":{"url":"String and Sequence Extremum/Longest Palindromic Substring.html","title":"Longest Palindromic Substring","keywords":"","body":"Problem\nLintCode 200. Longest Palindromic Substring\nhttps://www.lintcode.com/problem/longest-palindromic-substring/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: input string\n     * @return: the longest palindromic substring\n     */\n    string longestPalindrome(string &s) {\n        // write your code here\n\n        /**\n         * palin[i][j]: Whether the substring starting at the index i and\n         *              ending at the index j is palindromic.\n         *\n         * palin[i][j] = s[i] == s[j] && palin[i + 1][j - 1]\n         *\n         * Since the beginning and the ending offsets already show the\n         * length of this palindromic substring, we do not need an extra\n         * data structure to record the length information.\n         */\n\n        int n = s.length();\n        if (n == 0) {\n            return \"\";\n        }\n\n        std::vector> palin(n, std::vector(n, false));\n\n        int lps = 1;\n        int bgn = 0;\n\n        for (int i = 0 ; i  lps) {\n                        lps = l;\n                        bgn = i;\n                    }\n                }\n            }\n        }\n\n        return s.substr(bgn, lps);\n    }\n};\n\n"},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"url":"String and Sequence Extremum/Longest Increasing Subsequence.html","title":"Longest Increasing Subsequence","keywords":"","body":"Problem\nLintCode 77. Longest Increasing Subsequence\nhttps://www.lintcode.com/problem/longest-increasing-subsequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: An integer array\n     * @return: The length of LIS (longest increasing subsequence)\n     */\n    int longestIncreasingSubsequence(vector &nums) {\n        // write your code here\n\n        /**\n         *   4 2 4 5 3 7\n         *\n         *  dp[0] [1] [2] [3]\n         *     4\n         *     2\n         *     2   4\n         *     2   4   5\n         *     2   3   5\n         *     2   3   5   7\n         *\n         *\n         *   O(nlogn)\n         */\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector lis;\n        lis.push_back(nums[0]);\n\n        for (int i = 1 ; i  lis.back()) {\n                lis.push_back(nums[i]);\n                continue;\n            }\n\n            int cand = nums[i];\n\n            int l = 0, r = lis.size() - 1;\n            while (l + 1 = lis[m]) {\n                    l = m;\n                } else {\n                    r = m;\n                }\n            }\n\n            if (cand > lis[l]) {\n                lis[r] = cand;\n            } else {\n                lis[l] = cand;\n            }\n        }\n\n        return lis.size();\n    }\n};\n\n"},"String and Sequence Extremum/Longest Increasing Substring.html":{"url":"String and Sequence Extremum/Longest Increasing Substring.html","title":"Longest Increasing Substring","keywords":"","body":"Problem\nLintCode 397. Longest Increasing Substring\nhttps://www.lintcode.com/problem/longest-continuous-increasing-subsequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An array of Integer\n     * @return: an integer\n     */\n    int longestIncreasingContinuousSubsequence(vector &A) {\n        // write your code here\n\n        /**\n         *  dp[i]: The length of the current continuous subsequence (substring)\n         *         ending at the index i.\n         *\n         *  dp[i] = | if A[i] > A[i + 1] , dp[i] = dp[i - 1] + 1.\n         *          | otherwise          , dp[i] = 1.\n         */\n\n        int n = A.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int ans = 1;\n        int dp = 1;\n        for (int i = 1 ; i  A[i - 1]) {\n                ++dp;\n                ans = std::max(ans, dp);\n            } else {\n                dp = 1;\n            }\n        }\n\n        dp = 1;\n        for (int i = n - 2 ; i >= 0 ; --i) {\n            if (A[i] > A[i + 1]) {\n                ++dp;\n                ans = std::max(ans, dp);\n            } else {\n                dp = 1;\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html":{"url":"String and Sequence Extremum/Longest Increasing Continuous Subsequence in 2D Matrix.html","title":"Longest Increasing Continuous Subsequence in 2D Matrix","keywords":"","body":"Problem\nLintCode 398. Longest Continuous Increasing Subsequence II\nhttps://www.lintcode.com/problem/longest-continuous-increasing-subsequence-ii/description\nSolution\n\nstruct Record {\n    int x;\n    int y;\n    int val;\n\n    Record(int x, int y, int val)\n      : x(x), y(y), val(val)\n    { }\n};\n\n\nstruct RecordCompare {\n    bool operator() (const Record& lhs, const Record& rhs) {\n        return lhs.val > rhs.val;\n    }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param matrix: A 2D-array of integers\n     * @return: an integer\n     */\n    int longestContinuousIncreasingSubsequence2(vector> &matrix) {\n        // write your code here\n\n        // Dynamic Programming + Priority Queue\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return 0;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        int ans = 1;\n\n        std::vector> dp(num_r, std::vector(num_c, 1));\n        std::priority_queue, RecordCompare> queue;\n        for (int i = 0 ; i = 0 && ny >= 0 && nx  val) {\n                    dp[nx][ny] = std::max(dp[nx][ny], dp[x][y] + 1);\n                    ans = std::max(ans, dp[nx][ny]);\n                }\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    std::vector> directs;\n};\n\n"},"String and Sequence Extremum/Longest Repeating Subsequence.html":{"url":"String and Sequence Extremum/Longest Repeating Subsequence.html","title":"Longest Repeating Subsequence","keywords":"","body":"Problem\nLintCode 581. Longest Repeating Subsequence\nhttps://www.lintcode.com/problem/longest-repeating-subsequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param str: a string\n     * @return: the length of the longest repeating subsequence\n     */\n    int longestRepeatingSubsequence(string &str) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The length of the longest common subsequence that can\n         *           be found in the prefix of str ending at the index i and\n         *           the prefix of str ending at the index j.\n         *\n         * dp[i][j] = | if s[i] == s[j], | if i != j, dp[i - 1][j - 1] + 1\n         *            |                  | otherwise, 0\n         *            |\n         *            | otherwise      , MAX{ dp[i][j - 1], dp[i - 1][j] }\n         */\n\n        int n = str.length();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector> dp(n + 1, std::vector(n + 1, 0));\n\n        for (int i = 1 ; i \n"},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"url":"String and Sequence Extremum/Longest Consecutive Sequence.html","title":"Longest Consecutive Sequence","keywords":"","body":"Problem\nLintCode 124. Longest Consecutive Sequence\nhttps://www.lintcode.com/problem/longest-consecutive-sequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param num: A list of integers\n     * @return: An integer\n     */\n    int longestConsecutive(vector &nums) {\n        // write your code here\n\n        std::unordered_set set;\n        for (int num : nums) {\n            set.insert(num);\n        }\n\n        int max = 0;\n        while (!set.empty()) {\n\n            int len = 1;\n            int seed = *set.begin();\n            set.erase(seed);\n\n            int forward = seed + 1;\n            while (set.count(forward) == 1) {\n                set.erase(forward);\n                ++len;\n                ++forward;\n            }\n\n            int backward = seed - 1;\n            while (set.count(backward) == 1) {\n                set.erase(backward);\n                ++len;\n                --backward;\n            }\n\n            max = std::max(max, len);\n        }\n\n        return max;\n    }\n};\n\n"},"String and Sequence Extremum/Longest Palindrome.html":{"url":"String and Sequence Extremum/Longest Palindrome.html","title":"Longest Palindrome","keywords":"","body":"Problem\nLintCode 627. Longest Palindrome\nhttps://www.lintcode.com/problem/longest-palindrome/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: a string which consists of lowercase or uppercase letters\n     * @return: the length of the longest palindromes that can be built\n     */\n    int longestPalindrome(string &s) {\n        // write your code here\n\n        std::vector map(256, 0);\n        for (char ch : s) {\n            ++map[ch];\n        }\n\n        int len = 0;\n        bool has_odd = false;\n        for (int i = 0 ; i \n"},"String and Sequence Extremum/Decrease to be Palindrome.html":{"url":"String and Sequence Extremum/Decrease to be Palindrome.html","title":"Decrease to be Palindrome","keywords":"","body":"Problem\nLintCode 1784. Decrease to be Palindrome\nhttps://www.lintcode.com/problem/decrease-to-be-palindrome/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: the string s\n     * @return: the number of operations at least\n     */\n    int numberOfOperations(string &s) {\n        // Write your code here\n\n        int count = 0;\n\n        int l = 0, r = s.length() - 1;\n        while (l \n"},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"url":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","title":"Minimum Insertion Steps to Make a String Palindrome","keywords":"","body":"Problem\nLeetCode 1312. Minimum Insertion Steps to Make a String Palindrome\nhttps://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\nSolution\nclass Solution {\npublic:\n    int minInsertions(string s) {\n\n        /**\n            dp[i][j]: The minimum number of steps to make the substring s(i, j) palindromic.\n\n            dp[i][j] = | if s[i] == s[j], dp[i + 1][j - 1]\n                       | otherwise,       1 + MIN{ dp[i][j - 1], dp[i + 1][j]}\n        */\n\n        int n = s.length();\n        vector> dp(n, vector(n, 0));\n\n        for (int i = 0 ; i \n"},"String Scramble/Distinct Subsequences.html":{"url":"String Scramble/Distinct Subsequences.html","title":"Distinct Subsequences","keywords":"","body":"Problem\nLintCode 118. Distinct Subsequences\nhttps://www.lintcode.com/problem/distinct-subsequences/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param S: A string\n     * @param T: A string\n     * @return: Count the number of distinct subsequences\n     */\n    int numDistinct(string &S, string &T) {\n        // write your code here\n\n        /**\n         *    0 r a b b b i t\n         *  0 1 1 1 1 1 1 1 1\n         *  r 0 1 1 1 1 1 1 1\n         *  a 0 0 1 1 1 1 1 1\n         *  b 0 0 0 1 2 3 3 3\n         *  b 0 0 0 0 1 3 3 3\n         *  i 0 0 0 0 0 0 3 3\n         *  t 0 0 0 0 0 0 0 3\n         *\n         *  dp[i][j]: The number of distinct ways to form the prefix of T\n         *            ending at the jth position by removing any character\n         *            of the prefix of S ending at the ith position.\n         *\n         *  dp[i][j] = | if S[i] == T[j], dp[i - 1][j - 1] + dp[i - 1][j]\n         *             | otherwise      , dp[i - 1][j]\n         */\n\n        int ns = S.length();\n        int nt = T.length();\n\n        std::vector> dp(ns + 1, std::vector(nt + 1, 0));\n        for (int i = 0 ; i \n"},"String Scramble/Interleaving String.html":{"url":"String Scramble/Interleaving String.html","title":"Interleaving String","keywords":"","body":"Problem\nLintCode 29. Interleaving String\nhttps://www.lintcode.com/problem/interleaving-string/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s1: A string\n     * @param s2: A string\n     * @param s3: A string\n     * @return: Determine whether s3 is formed by interleaving of s1 and s2\n     */\n    bool isInterleave(string &s1, string &s2, string &s3) {\n        // write your code here\n\n        /**\n         * dp[i][j]: Whether we can form the first (i + j) characters of S3\n         *           by using the first i characters of S1 and the first j\n         *           characters of S2.\n         *\n         * dp[i][j] = (S1[i] == S3[i + j] && dp[i - 1][j]) ||\n         *            (S2[j] == S3[i + j] && dp[i][j - 1])\n         */\n\n        int n1 = s1.length();\n        int n2 = s2.length();\n        int n3 = s3.length();\n\n        if (n1 + n2 != n3) {\n            return false;\n        }\n\n        std::vector> dp(n1 + 1, std::vector(n2 + 1, false));\n        dp[0][0] = true;\n        for (int i = 1 ; i \n"},"String Scramble/Scramble String.html":{"url":"String Scramble/Scramble String.html","title":"Scramble String","keywords":"","body":"Problem\nLintCode 430. Scramble String\nhttps://www.lintcode.com/problem/scramble-string/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s1: A string\n     * @param s2: Another string\n     * @return: whether s2 is a scrambled string of s1\n     */\n    bool isScramble(string &s1, string &s2) {\n        // write your code here\n\n        /**\n         *   great\n         *   => atgre, eatgr\n         *             => tgrea\n         *\n         *  A scrambled version of a string can be generated by interexchanging\n         *  its prefix and suffix. For example, \"deabc\" is derived from\n         *  interexchaning \"abc\", the prefix, and \"de\", the suffix, of \"abcde\".\n         *\n         *  Given 2 strings, S and T, we can determine if T is a scrambled version\n         *  of S by decompsing these 2 strings into 2 parts respectively and\n         *  checking if these 2 substrings are equal:\n         *\n         *      S = Sp + Ss\n         *      T = Tp + Ts\n         *\n         *      => Sp == Tp && Ss == Ts, scrambled one!\n         *      => Sp == Ts && Ss == Tp, scrambled one!\n         */\n\n        std::unordered_map> memo;\n        return canScramble(s1, s2, memo);\n    }\n\n\nprivate:\n    bool canScramble(const auto& s, const auto& t, auto& memo) {\n\n        // Check the cached result first.\n        auto it_s = memo.find(s);\n        if (it_s != memo.end()) {\n            auto& inner = it_s->second;\n            auto it_t = inner.find(t);\n            if (it_t != inner.end()) {\n                return it_t->second;\n            }\n        }\n\n        // Check the string lengths.\n        int n = s.length();\n        int m = t.length();\n        if (n != m) {\n            return false;\n        }\n\n        if (n == 1) {\n            bool res = s[0] == t[0];\n            memo[s][t] = res;\n            return res;\n        }\n\n        // Check the character composition.\n        std::vector freq_s(26, 0);\n        std::vector freq_t(26, 0);\n        for (char ch : s) {\n            ++freq_s[ch - 'a'];\n        }\n        for (char ch : t) {\n            ++freq_t[ch - 'a'];\n        }\n        for (int i = 0 ; i \n"},"String Scramble/Wildcard Matching.html":{"url":"String Scramble/Wildcard Matching.html","title":"Wildcard Matching","keywords":"","body":"Problem\nLintCode 192. Wildcard Matching\nhttps://www.lintcode.com/problem/wildcard-matching/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: A string\n     * @param p: A string includes \"?\" and \"*\"\n     * @return: is Match?\n     */\n    bool isMatch(string &s, string &p) {\n        // write your code here\n\n        /**\n         * dp[i][j]: Whether the substring of s ending at the index i can\n         *           be matched by the subpattern of p ending at the index j.\n         *\n         *            | if s[i] == p[j] || p[j] == '?', dp[i - 1][j - 1]\n         * dp[i][j] = | if p[j] == '*'                , dp[i - 1][j] || dp[i][j- 1]\n         *            | otherwise                     , false\n         */\n\n        int len_s = s.length();\n        int len_p = p.length();\n\n        std::vector>\n            dp(len_s + 1, std::vector(len_p + 1, false));\n        dp[0][0] = true;\n\n        for (int i = 1 ; i \n"},"String Scramble/Regular Expression Matching.html":{"url":"String Scramble/Regular Expression Matching.html","title":"Regular Expression Matching","keywords":"","body":"Problem\nLintCode 154. Regular Expression Matching\nhttps://www.lintcode.com/problem/regular-expression-matching/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: A string\n     * @param p: A string includes \".\" and \"*\"\n     * @return: A boolean\n     */\n    bool isMatch(string &s, string &p) {\n        // write your code here\n\n        /**\n         * dp[i][j]: Whether the substring of s ending at the index i can be\n         *           matched by the subpattern of p ending at the index j.\n         *\n         *            | if s[i] == p[j] || p[j] == '.'        , dp[i - 1][j - 1]\n         *            |\n         * dp[i][j] = | if p[j] == '*'\n         *            | |  s[i] == p[j - 1] || p[j - 1] == '.', dp[i - 1][j]\n         *            | |  No plan to match                   , dp[i][j - 2]\n         *            |\n         *            | Otherwise                             , false\n         */\n\n        int len_s = s.length();\n        int len_p = p.length();\n\n        std::vector>\n            dp(len_s + 1, std::vector(len_p + 1, false));\n        dp[0][0] = true;\n\n        for (int i = 1 ; i = 2 && p[i - 1] == '*') {\n                dp[0][i] = dp[0][i - 2];\n            }\n        }\n\n        for (int i = 1 ; i = 2 && p[j - 1] == '*') {\n                    dp[i][j] = dp[i][j - 2];\n                    if (s[i - 1] == p[j - 2] || p[j - 2] == '.') {\n                        dp[i][j] = dp[i][j] || dp[i - 1][j];\n                    }\n                }\n            }\n        }\n\n        return dp[len_s][len_p];\n    }\n};\n\n"},"Game Theory/Coins in a Line.html":{"url":"Game Theory/Coins in a Line.html","title":"Coins in a Line","keywords":"","body":"Problem\nLintCode 394. Coins in a Line\nhttps://www.lintcode.com/problem/coins-in-a-line/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: A boolean which equals to true if the first player will win\n     */\n    bool firstWillWin(int n) {\n        // write your code here\n\n        /**\n         *  A and B 2 competitors\n         *\n         *  1. If A can push B to step into a losable state, A is winnable.\n         *\n         *  2. No matter how hard A tries, B can always step into a winnable\n         *     state. Then, A is guaranteed to lose the game.\n         *\n         *             4(W)\n         *            / \\\n         *        (L)3   2(W)\n         *          / \\\n         *      (W)2   1(W)\n         *\n         *  dp[i]: Whether a player is going to win the game if there are i\n         *         coins in a line.\n         *\n         *  dp[i] = dp[i - 1] == False || dp[i - 2] == False\n         */\n\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1 || n == 2) {\n            return true;\n        }\n\n        std::vector dp(n + 1, false);\n        dp[1] = true;\n        dp[2] = true;\n\n        for (int i = 3 ; i \n"},"Game Theory/Coins in a Line II.html":{"url":"Game Theory/Coins in a Line II.html","title":"Coins in a Line II","keywords":"","body":"Problem\nLintCode 395. Coins in a Line II\nhttps://www.lintcode.com/problem/coins-in-a-line-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param values: a vector of integers\n     * @return: a boolean which equals to true if the first player will win\n     */\n    bool firstWillWin(vector &values) {\n        // write your code here\n\n        /**\n         *  A and B, 2 competitors\n         *\n         *  Sum(i): The total value of the remained coins covering from the\n         *          ith coin to the last one.\n         *\n         *  Sa: The total value A can aggregate in the current iteration.\n         *  Sb: The total value B can aggregate in the next iteration.\n         *\n         *  When there are (n - i + 1) coins remained, player A has 2 choices.\n         *      1. Pick the ith coin,\n         *          Sa = values[i] + Sum(i + 1) - Sb'.\n         *             = Sum(i) - Sb'.\n         *\n         *      2. Pick the ith and the (i+1)th coin,\n         *          Sa = values[i] + values[i + 1] + Sum(i + 2) - Sb''.\n         *             = Sum(i) - Sb''.\n         *\n         * dp[i]: The maximum value that a person can aggregate when there\n         *        are (n - i + 1) coins left.\n         *\n         * dp[i] = MAX | pick the ith coin                , sum[i] - dp[i + 1]\n         *             | pick the ith and the (i+1)th coin, sum[i] - dp[i + 2]\n         */\n\n        int n = values.size();\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1 || n == 2) {\n            return true;\n        }\n\n        std::vector sum(n, 0);\n        std::vector dp(n, 0);\n\n        sum[n - 1] = values[n - 1];\n        sum[n - 2] = sum[n - 1] + values[n - 2];\n        dp[n - 1] = values[n - 1];\n        dp[n - 2] = dp[n - 1] + values[n - 2];\n\n        for (int i = n - 3 ; i >= 0 ; --i) {\n            sum[i] = sum[i + 1] + values[i];\n\n            // values[i] + (sum[i + 1] - dp[i + 1])\n            int plan_a = sum[i] - dp[i + 1];\n\n            // values[i] + values[i + 1] + (sum[i + 2) - dp[i + 2])\n            int plan_b = sum[i] - dp[i + 2];\n\n            dp[i] = std::max(plan_a, plan_b);\n        }\n\n        return dp[0] * 2 > sum[0];\n    }\n};\n\n"},"Game Theory/Coins in a Line III.html":{"url":"Game Theory/Coins in a Line III.html","title":"Coins in a Line III","keywords":"","body":"Problem\nLintCode 396. Coins in a Line III\nhttps://www.lintcode.com/problem/coins-in-a-line-iii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param values: a vector of integers\n     * @return: a boolean which equals to true if the first player will win\n     */\n    bool firstWillWin(vector &values) {\n        // write your code here\n\n        /**\n         *  A and B, 2 competitors\n         *\n         *  Sum(i, j): The total value of the remained coins covering from the\n         *             ith coin to the jth one.\n         *\n         *  Sa: The total value A can aggregate in the current iteration.\n         *  Sb: The total value B can aggregate in the next iteration.\n         *\n         *  When there are (j - i + 1) coins remained, player A has 2 choices.\n         *      1. Pick the ith coin,\n         *          Sa = values[i] + Sum(i + 1, j) - Sb'.\n         *             = Sum(i, j) - Sb'.\n         *\n         *      2. Pick the jth coin,\n         *          Sa = values[j] + Sum(i, j - 1) - Sb''.\n         *             = Sum(i, j) - Sb''.\n         *\n         * dp[i][j]: The maximum value that a person can aggregate when there\n         *           are (j - i + 1) coins left.\n         *\n         * dp[i][j] = MAX | pick the ith coin, sum[i][j] - dp[i + 1][j]\n         *                | pick the jth coin, sum[i][j] - dp[i][j - 1]\n         */\n\n        int n = values.size();\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n\n        std::vector> sum(n, std::vector(n, 0));\n        std::vector> dp(n, std::vector(n, 0));\n\n        for (int i = 0 ; i  sum[0][n - 1];\n    }\n};\n\n"},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"url":"Iterator/Binary Tree Iterative Preorder Traversal.html","title":"Binary Tree Iterative Preorder Traversal","keywords":"","body":"Problem\nLintCode 66. Binary Tree Preorder Traversal\nhttps://www.lintcode.com/problem/binary-tree-preorder-traversal/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: A Tree\n     * @return: Preorder in ArrayList which contains node values.\n     */\n    vector preorderTraversal(TreeNode * root) {\n        // write your code here\n\n        if (!root) {\n            return {};\n        }\n\n        std::vector ans;\n        std::stack stk;\n        stk.push(root);\n\n        while (!stk.empty()) {\n\n            auto curr = stk.top();\n            stk.pop();\n\n            ans.push_back(curr->val);\n\n            if (curr->right) {\n                stk.push(curr->right);\n            }\n            if (curr->left) {\n                stk.push(curr->left);\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"url":"Iterator/Binary Tree Iterative Inorder Traversal.html","title":"Binary Tree Iterative Inorder Traversal","keywords":"","body":"Problem\nLintCode 67. Binary Tree Inorder Traversal\nhttps://www.lintcode.com/problem/binary-tree-inorder-traversal/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: A Tree\n     * @return: Inorder in ArrayList which contains node values.\n     */\n    vector inorderTraversal(TreeNode * root) {\n        // write your code here\n\n        if (!root) {\n            return {};\n        }\n\n        std::vector ans;\n        std::stack stk;\n\n        auto curr = root;\n        while (curr) {\n            stk.push(curr);\n            curr = curr->left;\n        }\n\n        while (!stk.empty()) {\n\n            auto curr = stk.top();\n            stk.pop();\n\n            ans.push_back(curr->val);\n\n            curr = curr->right;\n            while (curr) {\n                stk.push(curr);\n                curr = curr->left;\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"url":"Iterator/Binary Tree Iterative Postorder Traversal.html","title":"Binary Tree Iterative Postorder Traversal","keywords":"","body":"Problem\nLintCode 68. Binary Tree Postorder Traversal\nhttps://www.lintcode.com/problem/binary-tree-postorder-traversal/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: A Tree\n     * @return: Postorder in ArrayList which contains node values.\n     */\n    vector postorderTraversal(TreeNode * root) {\n        // write your code here\n\n        if (!root) {\n            return {};\n        }\n\n        std::vector ans;\n        std::stack stk;\n        findSuccessor(root, stk);\n\n        while (!stk.empty()) {\n\n            auto curr = stk.top();\n            stk.pop();\n\n            ans.push_back(curr->val);\n\n            if (!stk.empty()) {\n                if (stk.top()->left == curr) {\n                    findSuccessor(stk.top()->right, stk);\n                }\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    void findSuccessor(TreeNode* root, std::stack& stk) {\n\n        while (root) {\n            stk.push(root);\n\n            if (root->left) {\n                root = root->left;\n            } else {\n                root = root->right;\n            }\n        }\n    }\n};\n\n"},"Iterator/Inorder Successor in BST.html":{"url":"Iterator/Inorder Successor in BST.html","title":"Inorder Sucessor in BST","keywords":"","body":"Problem\nLintCode 448. Inorder Successor in BST\nhttps://www.lintcode.com/problem/inorder-successor-in-bst/description\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: The root of the BST.\n     * @param p: You need find the successor node of p.\n     * @return: Successor of p.\n     */\n    TreeNode * inorderSuccessor(TreeNode * root, TreeNode * p) {\n        // write your code here\n\n        if (!root || !p) {\n            return nullptr;\n        }\n\n        if (p->right) {\n            auto curr = p->right;\n            TreeNode* pred;\n            while (curr) {\n                pred = curr;\n                curr = curr->left;\n            }\n            return pred;\n        }\n\n        auto curr = root;\n        TreeNode* pred = nullptr;\n        while (curr != p) {\n            if (p->val val) {\n                pred = curr;\n                curr = curr->left;\n            } else {\n                curr = curr->right;\n            }\n        }\n\n        return pred;\n    }\n};\n\n"},"Iterator/Flatten Binary Tree to Linked List.html":{"url":"Iterator/Flatten Binary Tree to Linked List.html","title":"Flatten Binary Tree to Linked List","keywords":"","body":"Problem\nLintCode 453. Flatten Binary Tree to Linked List\nhttps://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: a TreeNode, the root of the binary tree\n     * @return: nothing\n     */\n    void flatten(TreeNode * root) {\n        // write your code here\n\n        /**\n         *  case 1: no child\n         *\n         *      a\n         *\n         *  case 2: Has a left child\n         *\n         *      a    a\n         *     /  =>  \\\n         *    b        b  Return b as the last node.\n         *\n         *\n         *  case 3: Has a right child\n         *\n         *    a      a\n         *     \\  =>  \\\n         *      b      b  Return b as the last node.\n         *\n         *\n         *  case 4: Has two children\n         *\n         *     a         a      a\n         *    / \\   =>  /   =>   \\\n         *   b   c     b          b\n         *              \\          \\\n         *               c          c  Return c as the last node.\n         *\n         *\n         *  Demo:\n         *\n         *      1             1          1              1       1\n         *     / \\           / \\        / \\            /         \\\n         *    2   5    =>   2   5  =>  2   5      =>  2     =>    2\n         *   / \\   \\       /     \\      \\   \\          \\           \\\n         *  3*  4*  6     3       6*     3   6*         3           3\n         *                 \\              \\              \\           \\\n         *                  4*             4*             4           4\n         *                                                 \\           \\\n         *                                                  5           5\n         *                                                   \\           \\\n         *                                                    6           6*\n         */\n\n         runPostOrder(root);\n    }\n\nprivate:\n    TreeNode* runPostOrder(TreeNode* root) {\n\n        if (!root) {\n            return nullptr;\n        }\n\n        auto last_l = runPostOrder(root->left);\n        auto last_r = runPostOrder(root->right);\n\n        if (last_l) {\n            last_l->right = root->right;\n            root->right = root->left;\n            root->left = nullptr;\n        }\n\n        if (last_r) {\n            return last_r;\n        }\n\n        if (last_l) {\n            return last_l;\n        }\n\n        return root;\n    }\n};\n\n"},"Iterator/Flatten Nested List.html":{"url":"Iterator/Flatten Nested List.html","title":"Flatten Nested List","keywords":"","body":"Problem\nLintCode 22. Flatten List\nhttps://www.lintcode.com/problem/flatten-list/description\nSolution\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer,\n *     // rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds,\n *     // if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds,\n *     // if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector &getList() const;\n * };\n */\nclass Solution {\npublic:\n    // @param nestedList a list of NestedInteger\n    // @return a list of integer\n    vector flatten(vector &nestedList) {\n        // Write your code here\n\n        std::vector ans;\n\n        std::stack::iterator,\n                std::vector::iterator>> stk;\n\n        if (!nestedList.empty()) {\n            stk.push(std::make_pair(nestedList.begin(), nestedList.end()));\n        }\n\n        while (!stk.empty()) {\n\n            auto top = stk.top();\n            stk.pop();\n\n            auto& bgn = top.first;\n            auto& end = top.second;\n\n            while (bgn != end) {\n                if (bgn->isInteger()) {\n                    ans.push_back(bgn->getInteger());\n                    ++bgn;\n                } else {\n                    auto& list =\n                        const_cast&>(bgn->getList());\n\n                    ++bgn;\n                    if (bgn != end) {\n                        stk.push(std::make_pair(bgn, end));\n                    }\n\n                    if (!list.empty()) {\n                        stk.push(std::make_pair(list.begin(), list.end()));\n                    }\n                    break;\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Iterator/Flatten Nested List Iterator.html":{"url":"Iterator/Flatten Nested List Iterator.html","title":"Flatten Nested List Iterator","keywords":"","body":"Problem\nLintCode 528. Flatten Nested List Iterator\nhttps://www.lintcode.com/problem/flatten-nested-list-iterator/description\nSolution\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer,\n *     // rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds,\n *     // if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds,\n *     // if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector &getList() const;\n * };\n */\nclass NestedIterator {\npublic:\n    NestedIterator(vector &nestedList) {\n        // Initialize your data structure here.\n\n        if (!nestedList.empty()) {\n            stk.push(std::make_pair(nestedList.begin(), nestedList.end()));\n        }\n    }\n\n    // @return {int} the next element in the iteration\n    int next() {\n        // Write your code here\n\n        return cache;\n    }\n\n    // @return {boolean} true if the iteration has more element or false\n    bool hasNext() {\n        // Write your code here\n\n        while (!stk.empty()) {\n\n            auto top = stk.top();\n            stk.pop();\n            auto& bgn = top.first;\n            auto& end = top.second;\n\n            if (bgn->isInteger()) {\n                cache = bgn->getInteger();\n\n                ++bgn;\n                if (bgn != end) {\n                    stk.push(std::make_pair(bgn, end));\n                }\n\n                return true;\n            }\n\n            auto& list =\n                const_cast&>(bgn->getList());\n\n            ++bgn;\n            if (bgn != end) {\n                stk.push(std::make_pair(bgn, end));\n            }\n\n            if (!list.empty()) {\n                stk.push(std::make_pair(list.begin(), list.end()));\n            }\n        }\n\n        return false;\n    }\n\nprivate:\n    std::stack::iterator,\n            std::vector::iterator>> stk;\n    int cache;\n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) v.push_back(i.next());\n */\n\n"},"Iterator/Flatten 2D Vector.html":{"url":"Iterator/Flatten 2D Vector.html","title":"Flatten 2D Vector","keywords":"","body":"Problem\nLintCode 601. Flatten 2D Vector\nhttps://www.lintcode.com/problem/flatten-2d-vector/description\nSolution\nclass Vector2D {\npublic:\n    Vector2D(vector>& vec2d)\n        : total_row(vec2d.size()), index_row(0), total_col(0), index_col(0),\n          vec2d(vec2d) {\n        // Initialize your data structure here\n\n        if (index_row > vec2d;\n\n    int cache;\n};\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * Vector2D i(vec2d);\n * while (i.hasNext()) cout \n"},"Iterator/ZigZag Iterator.html":{"url":"Iterator/ZigZag Iterator.html","title":"ZigZag Iterator","keywords":"","body":"Problem\nLintCode 540. ZigZag Iterator\nhttps://www.lintcode.com/problem/zigzag-iterator/description\nSolution\nclass ZigzagIterator {\npublic:\n    /*\n    * @param v1: A 1d vector\n    * @param v2: A 1d vector\n    */ZigzagIterator(vector& v1, vector& v2)\n      : bgn_first(v1.begin()),\n        bgn_second(v2.begin()),\n        end_first(v1.end()),\n        end_second(v2.end()),\n        turn(Turn::FIRST) {\n        // do intialization if necessary\n    }\n\n    /*\n     * @return: An integer\n     */\n    int next() {\n        // write your code here\n\n        return cache;\n    }\n\n    /*\n     * @return: True if has next\n     */\n    bool hasNext() {\n        // write your code here\n\n        if (bgn_first != end_first && bgn_second != end_second) {\n            if (turn == Turn::FIRST) {\n                cache = *bgn_first;\n                ++bgn_first;\n                turn = Turn::SECOND;\n            } else {\n                cache = *bgn_second;\n                ++bgn_second;\n                turn = Turn::FIRST;\n            }\n            return true;\n        }\n\n        if (bgn_first != end_first) {\n            cache = *bgn_first;\n            ++bgn_first;\n            return true;\n        }\n\n        if (bgn_second != end_second) {\n            cache = *bgn_second;\n            ++bgn_second;\n            return true;\n        }\n\n        return false;\n    }\n\nprivate:\n    std::vector::iterator bgn_first, bgn_second, end_first, end_second;\n    char turn;\n    int cache;\n\n    enum Turn {\n        FIRST,\n        SECOND\n    };\n};\n\n/**\n * Your ZigzagIterator object will be instantiated and called as such:\n * ZigzagIterator solution(v1, v2);\n * while (solution.hasNext()) result.push_back(solution.next());\n * Ouptut result\n */\n\n"},"Iterator/ZigZag Iterator II.html":{"url":"Iterator/ZigZag Iterator II.html","title":"ZigZag Iterator II","keywords":"","body":"Problem\nLintCode 541. ZigZag Iterator II\nhttps://www.lintcode.com/problem/zigzag-iterator-ii/description\nSolution\nclass ZigzagIterator2 {\npublic:\n    /*\n    * @param vecs: a list of 1d vectors\n    */ZigzagIterator2(vector>& vecs)\n      : turn(0),\n        total(0),\n        vecs(vecs) {\n        // do intialization if necessary\n\n        for (auto& vec : vecs) {\n            if (!vec.empty()) {\n                bgns.push_back(vec.begin());\n                ends.push_back(vec.end());\n                ++total;\n            }\n        }\n    }\n\n    /*\n     * @return: An integer\n     */\n    int next() {\n        // write your code here\n\n        int elem = *bgns[turn];\n        ++bgns[turn];\n\n        if (bgns[turn] == ends[turn]) {\n            bgns.erase(bgns.begin() + turn);\n            ends.erase(ends.begin() + turn);\n\n            --total;\n            if (total > 0) {\n                turn = turn % total;\n            }\n        } else {\n            turn = (turn + 1) % total;\n        }\n\n        return elem;\n    }\n\n    /*\n     * @return: True if has next\n     */\n    bool hasNext() {\n        // write your code here\n\n        return total > 0;\n    }\n\nprivate:\n    int turn, total;\n\n    std::vector::iterator> bgns;\n    std::vector::iterator> ends;\n\n    std::vector> vecs;\n};\n\n/**\n * Your ZigzagIterator2 object will be instantiated and called as such:\n * ZigzagIterator2 solution(vecs);\n * while (solution.hasNext()) result.push_back(solution.next());\n * Ouptut result\n */\n\n\nclass ZigzagIterator2 {\npublic:\n    /*\n    * @param vecs: a list of 1d vectors\n    */ZigzagIterator2(vector>& vecs)\n      : total(0), turn(0) {\n        // do intialization if necessary\n\n        for (auto& vec : vecs) {\n            if (!vec.empty()) {\n                bgns.emplace_back(vec.begin());\n                ends.emplace_back(vec.end());\n                ++total;\n            }\n        }\n    }\n\n    /*\n     * @return: An integer\n     */\n    int next() {\n        // write your code here\n\n        return cache;\n    }\n\n    /*\n     * @return: True if has next\n     */\n    bool hasNext() {\n        // write your code here\n\n        if (total == 0) {\n            return false;\n        }\n\n        cache = *bgns[turn];\n        ++bgns[turn];\n\n        if (bgns[turn] == ends[turn]) {\n            bgns.erase(bgns.begin() + turn);\n            ends.erase(ends.begin() + turn);\n\n            --total;\n            if (total > 0) {\n                turn = turn % total;\n            }\n        } else {\n            turn = (turn + 1) % total;\n        }\n\n        return true;\n    }\n\nprivate:\n    std::vector::iterator> bgns;\n    std::vector::iterator> ends;\n\n    int total;\n    int turn;\n\n    int cache;\n};\n\n/**\n * Your ZigzagIterator2 object will be instantiated and called as such:\n * ZigzagIterator2 solution(vecs);\n * while (solution.hasNext()) result.push_back(solution.next());\n * Ouptut result\n */\n\n"},"Iterator/Nested List Weight Sum.html":{"url":"Iterator/Nested List Weight Sum.html","title":"Nested List Weight Sum","keywords":"","body":"Problem\nLintCode 551. Nested List Weight Sum\nhttps://www.lintcode.com/problem/nested-list-weight-sum/description\nSolution\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer,\n *     // rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds,\n *     // if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds,\n *     // if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector &getList() const;\n * };\n */\n\nstruct Record {\n\n    int depth;\n    std::vector::iterator bgn, end;\n\n    Record(int depth,\n            std::vector::iterator&& bgn,\n            std::vector::iterator&& end)\n      : depth(depth), bgn(bgn), end(end)\n    { }\n};\n\n\nclass Solution {\npublic:\n    int depthSum(const vector& nestedList) {\n        // Write your code here\n\n        int sum = 0;\n\n        std::stack stk;\n        auto& input = const_cast&>(nestedList);\n        stk.push(Record(1, input.begin(), input.end()));\n\n        while (!stk.empty()) {\n\n            auto top = stk.top();\n            stk.pop();\n\n            auto& bgn = top.bgn;\n            auto& end = top.end;\n            int depth = top.depth;\n\n            while (bgn != end) {\n                if (bgn->isInteger()) {\n                    sum += bgn->getInteger() * depth;\n                    ++bgn;\n                } else {\n                    auto& list =\n                        const_cast&>(bgn->getList());\n\n                    ++bgn;\n                    if (bgn != end) {\n                        stk.push(Record(depth, std::move(bgn), std::move(end)));\n                    }\n\n                    if (!list.empty()) {\n                        stk.push(Record(depth + 1, list.begin(), list.end()));\n                    }\n\n                    break;\n                }\n            }\n        }\n\n        return sum;\n    }\n};\n\n"},"Iterator/Nested List Weight Sum II.html":{"url":"Iterator/Nested List Weight Sum II.html","title":"Nested List Weight Sum II","keywords":"","body":"Problem\nLintCode 905. Nested List Weight Sum II\nhttps://www.lintcode.com/problem/nested-list-weight-sum-ii/description\nSolution\n\n\nstruct Record {\n\n    int depth;\n    std::vector::iterator bgn, end;\n\n    Record(int depth, auto&& bgn, auto&& end)\n      : depth(depth), bgn(bgn), end(end)\n    { }\n};\n\n\nstruct Element {\n    int num, weight;\n\n    Element(int num, int weight)\n      : num(num), weight(weight)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param nestedList: a list of NestedInteger\n     * @return: the sum\n     */\n    int depthSumInverse(vector nestedList) {\n        // Write your code here.\n\n        /**\n         *  [[1, 1], 2, [1, 1]]\n         *\n         *  [1, 2], [1, 2], [2, 1], [1, 2], [1, 2]\n         *\n         *  => adjusted weight = maximum depth - original weight + 1\n         *\n         *  [1, 1], [1, 1], [2, 2], [1, 1], [1, 1]\n         *\n         *  => generate the final sum\n         */\n\n        if (nestedList.empty()) {\n            return 0;\n        }\n\n        std::stack stk;\n        stk.push(Record(1, nestedList.begin(), nestedList.end()));\n\n        int max_depth = 0;\n        std::vector cache;\n\n        while (!stk.empty()) {\n\n            auto top = stk.top();\n            stk.pop();\n\n            int depth = top.depth;\n            max_depth = std::max(max_depth, depth);\n\n            auto& bgn = top.bgn;\n            auto& end = top.end;\n\n            while (bgn != end) {\n\n                if (bgn->isInteger()) {\n                    cache.emplace_back(bgn->getInteger(), depth);\n                    ++bgn;\n                } else {\n                    auto& list =\n                        const_cast&>(bgn->getList());\n\n                    ++bgn;\n                    if (bgn != end) {\n                        stk.push(Record(depth, std::move(bgn), std::move(end)));\n                    }\n\n                    if (!list.empty()) {\n                        stk.push(Record(depth + 1, list.begin(), list.end()));\n                    }\n\n                    break;\n                }\n            }\n        }\n\n        int sum = 0;\n        for (auto& elem : cache) {\n            sum += elem.num * (max_depth - elem.weight + 1);\n        }\n\n        return sum;\n    }\n};\n\n"},"Binary Tree/Valid Binary Search Tree.html":{"url":"Binary Tree/Valid Binary Search Tree.html","title":"Valid Binary Search Tree","keywords":"","body":"Problem\nLintCode 95. Valid Binary Search Tree\nhttps://www.lintcode.com/problem/validate-binary-search-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nstruct Result {\n    int max;\n    int min;\n    bool is_bst;\n\n    Result(bool is_bst)\n        : max(std::numeric_limits::min()),\n          min(std::numeric_limits::max()),\n          is_bst(is_bst)\n    { }\n\n    Result(int max, int min, bool is_bst)\n        : max(max), min(min), is_bst(is_bst)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: The root of binary tree.\n     * @return: True if the binary tree is BST, or false\n     */\n    bool isValidBST(TreeNode * root) {\n        // write your code here\n\n        auto result = runPostOrder(root);\n        return result.is_bst;\n    }\n\nprivate:\n    Result runPostOrder(TreeNode* root) {\n\n        if (!root) {\n            return Result(true);\n        }\n\n        if (!root->left && !root->right) {\n            return Result(root->val, root->val, true);\n        }\n\n        auto l = runPostOrder(root->left);\n        auto r = runPostOrder(root->right);\n\n        if (!l.is_bst || !r.is_bst) {\n            return Result(false);\n        }\n\n        if (!root->left && root->val val, true);\n        }\n\n        if (!root->right && root->val > l.max) {\n            return Result(root->val, l.min, true);\n        }\n\n        if (root->val > l.max && root->val \n"},"Binary Tree/Balanced Binary Tree.html":{"url":"Binary Tree/Balanced Binary Tree.html","title":"Balanced Binary Tree","keywords":"","body":"Problem\nLintCode 95. Balanced Binary Tree\nhttps://www.lintcode.com/problem/balanced-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nstruct Record {\n    bool balanced;\n    int height;\n\n    Record(bool balanced, int height)\n      : balanced(balanced), height(height)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: The root of binary tree.\n     * @return: True if this Binary tree is Balanced, or false.\n     */\n    bool isBalanced(TreeNode * root) {\n        // write your code here\n\n        auto res = runPostOrder(root);\n        return res.balanced;\n    }\n\nprivate:\n    Record runPostOrder(TreeNode* root) {\n\n        if (!root) {\n            return Record(true, 0);\n        }\n\n        if (!root->left && !root->right) {\n            return Record(true, 1);\n        }\n\n        auto l = runPostOrder(root->left);\n        auto r = runPostOrder(root->right);\n\n        if (!l.balanced || !r.balanced) {\n            return Record(false, -1);\n        }\n\n        int diff = std::abs(l.height - r.height);\n        if (diff > 1) {\n            return Record(false, -1);\n        }\n\n        return Record(true, std::max(l.height, r.height) + 1);\n    }\n};\n\n"},"Binary Tree/Complete Binary Tree.html":{"url":"Binary Tree/Complete Binary Tree.html","title":"Complete Binary Tree","keywords":"","body":"Problem\nLeetCode 958. Check Completeness of a Binary Tree\nhttps://leetcode.com/problems/check-completeness-of-a-binary-tree/\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nstruct Record {\n    TreeNode* node;\n    int label;\n\n    Record(TreeNode* node, int label)\n      : node(node), label(label)\n    { }\n};\n\n\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n\n        // Level Order Traversal + Label Counter\n\n        if (!root) {\n            return true;\n        }\n\n        int count = 0;\n        std::queue queue;\n        queue.push(Record(root, 1));\n\n        while (!queue.empty()) {\n\n            int size = queue.size();\n            for (int i = 0 ; i left) {\n                    queue.push(Record(node->left, label * 2));\n                }\n                if (node->right) {\n                    queue.push(Record(node->right, label * 2 + 1));\n                }\n            }\n        }\n\n        return true;\n    }\n};\n\n"},"Binary Tree/Maximum Width of Binary Tree.html":{"url":"Binary Tree/Maximum Width of Binary Tree.html","title":"Maximum Width of Binary Tree","keywords":"","body":"Problem\nLintCode 1101. Maximum Width of Binary Tree\nhttps://www.lintcode.com/problem/maximum-width-of-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nstruct Record {\n    TreeNode* node;\n    int label;\n\n    Record(TreeNode* node, int label)\n      : node(node), label(label)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root\n     * @return: the maximum width of the given tree\n     */\n    int widthOfBinaryTree(TreeNode * root) {\n        // Write your code here\n\n        // Level Order Traversal + Tree Label\n\n        if (!root) {\n            return 0;\n        }\n\n        int width = 0;\n\n        std::queue queue;\n        queue.push(Record(root, 1));\n\n        while (!queue.empty()) {\n\n            int max = INT_MIN;\n            int min = INT_MAX;\n            int size = queue.size();\n\n            for (int i = 0 ; i left) {\n                    queue.push(Record(node->left, label * 2));\n                }\n                if (node->right) {\n                    queue.push(Record(node->right, label * 2 + 1));\n                }\n            }\n\n            width = std::max(width, max - min + 1);\n        }\n\n        return width;\n    }\n};\n\n"},"Binary Tree/Diameter of Binary Tree.html":{"url":"Binary Tree/Diameter of Binary Tree.html","title":"Diameter of Binary Tree","keywords":"","body":"Problem\nLintCode 1181. Diameter of Binary Tree\nhttps://www.lintcode.com/problem/diameter-of-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: a root of binary tree\n     * @return: return a integer\n     */\n    int diameterOfBinaryTree(TreeNode * root) {\n        // write your code here\n\n        /**\n         *  Postorder Traversal + Divide and Conquer\n         *\n         *  To get the diameter of the subtree rooted by a node R, we can divide\n         *  the diamter into 2 segments, each of which can be calculated from\n         *  either the left branch or the right branch of R. Then, we merge\n         *  these 2 segments to form the diameter. Please note that the segment\n         *  is essentially the maximum depth of a tree. Therefore, we collect\n         *  the maximum depths from both branches and combine them to form\n         *  a diameter path.\n         */\n\n        int ans = std::numeric_limits::min();\n        runPostOrder(root, ans);\n\n        return ans;\n    }\n\nprivate:\n    int runPostOrder(TreeNode* root, int& ans) {\n\n        if (!root) {\n            return 0;\n        }\n        if (!root->left && !root->right) {\n            return 1;\n        }\n\n        int l = runPostOrder(root->left, ans);\n        int r = runPostOrder(root->right, ans);\n\n        ans = std::max(ans, r + l);\n\n        return std::max(l, r) + 1;\n    }\n};\n\n"},"Binary Tree/Minimum Depth of Binary Tree.html":{"url":"Binary Tree/Minimum Depth of Binary Tree.html","title":"Minimum Depth of Binary Tree","keywords":"","body":"Problem\nLintCode 155. Minimum Depth of Binary Tree\nhttps://www.lintcode.com/problem/minimum-depth-of-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: The root of binary tree\n     * @return: An integer\n     */\n    int minDepth(TreeNode * root) {\n        // write your code here\n\n        // Preorder Traversal + Height Comparison\n\n        if (!root) {\n            return 0;\n        }\n\n        int ans = std::numeric_limits::max();\n        runPreOrder(root, 1, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runPreOrder(TreeNode* root, int h, int& ans) {\n\n        if (!root->left && !root->right) {\n            ans = std::min(h, ans);\n            return;\n        }\n\n        if (root->left) {\n            runPreOrder(root->left, h + 1, ans);\n        }\n        if (root->right) {\n            runPreOrder(root->right, h + 1, ans);\n        }\n    }\n};\n\n"},"Binary Tree/Maximum Depth of Binary Tree.html":{"url":"Binary Tree/Maximum Depth of Binary Tree.html","title":"Maximum Depth of Binary Tree","keywords":"","body":"Problem\nLintCode 97. Maximum Depth of Binary Tree\nhttps://www.lintcode.com/problem/maximum-depth-of-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: The root of binary tree.\n     * @return: An integer\n     */\n    int maxDepth(TreeNode * root) {\n        // write your code here\n\n        // Preorder Traversal + Height Comparison\n\n        if (!root) {\n            return 0;\n        }\n\n        int ans = std::numeric_limits::min();\n        runPreOrder(root, 1, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runPreOrder(TreeNode* root, int h, int& ans) {\n\n        if (!root->left && !root->right) {\n            ans = std::max(ans, h);\n        }\n\n        if (root->left) {\n            runPreOrder(root->left, h + 1, ans);\n        }\n        if (root->right) {\n            runPreOrder(root->right, h + 1, ans);\n        }\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"url":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","title":"Lowest Common Ancestor of a Binary Search Tree","keywords":"","body":"Problem\nLintCode 1311. Lowest Common Ancestor of a Binary Search Tree\nhttps://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-search-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: root of the tree\n     * @param p: the node p\n     * @param q: the node q\n     * @return: find the LCA of p and q\n     */\n    TreeNode * lowestCommonAncestor(TreeNode * root, TreeNode * p, TreeNode * q) {\n        // write your code here\n\n        if (root->val > p->val && root->val > q->val) {\n            return lowestCommonAncestor(root->left, p, q);\n        }\n        if (root->val val && root->val val) {\n            return lowestCommonAncestor(root->right, p, q);\n        }\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"url":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","title":"Lowest Common Ancestor of a Binary Tree","keywords":"","body":"Problem\nLintCode 88. Lowest Common Ancestor of a Binary Tree\nhttps://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: The root of the binary search tree.\n     * @param A: A TreeNode in a Binary.\n     * @param B: A TreeNode in a Binary.\n     * @return: Return the least common ancestor(LCA) of the two nodes.\n     */\n    TreeNode * lowestCommonAncestor(TreeNode * root, TreeNode * A, TreeNode * B) {\n        // write your code here\n\n        if (!root || root == A || root == B) {\n            return root;\n        }\n\n        auto l = lowestCommonAncestor(root->left, A, B);\n        auto r = lowestCommonAncestor(root->right, A, B);\n\n        if (l && r) {\n            return root;\n        }\n\n        if (l) {\n            return l;\n        }\n\n        if (r) {\n            return r;\n        }\n\n        return nullptr;\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"url":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","title":"Lowest Common Ancestor of a Binary Tree II","keywords":"","body":"Problem\nLintCode 474. Lowest Common Ancestor of a Binary Tree II\nhttps://www.lintcode.com/problem/lowest-common-ancestor-ii/description\nSolution\n/**\n * Definition of ParentTreeNode:\n * class ParentTreeNode {\n * public:\n *     int val;\n *     ParentTreeNode *parent, *left, *right;\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: The root of the tree\n     * @param A: node in the tree\n     * @param B: node in the tree\n     * @return: The lowest common ancestor of A and B\n     */\n    ParentTreeNode * lowestCommonAncestorII(ParentTreeNode * root, ParentTreeNode * A, ParentTreeNode * B) {\n        // write your code here\n\n        std::unordered_set set;\n        while (A) {\n            set.insert(A);\n            A = A->parent;\n        }\n\n        while (B) {\n            if (set.count(B) == 1) {\n                break;\n            }\n            B = B->parent;\n        }\n\n        return B;\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"url":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","title":"Lowest Common Ancestor of a Binary Tree III","keywords":"","body":"Problem\nLintCode 578. Lowest Common Ancestor of a Binary Tree III\nhttps://www.lintcode.com/problem/lowest-common-ancestor-iii/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nstruct Record {\n    bool found_a;\n    bool found_b;\n    TreeNode* lca;\n\n    Record()\n      : found_a(false), found_b(false), lca(nullptr)\n    { }\n\n    Record(bool found_a, bool found_b, TreeNode* lca)\n      : found_a(found_a), found_b(found_b), lca(lca)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: The root of the binary search tree.\n     * @param A: A TreeNode in a Binary.\n     * @param B: A TreeNode in a Binary.\n     * @return: Return the least common ancestor(LCA) of the two nodes.\n     */\n    TreeNode * lowestCommonAncestor(TreeNode * root, TreeNode * A, TreeNode * B) {\n        // write your code here\n\n        auto res = runPostOrder(root, A, B);\n        return res.lca;\n    }\n\nprivate:\n    Record runPostOrder(TreeNode* root, TreeNode* A, TreeNode* B) {\n\n        if (!root) {\n            return Record();\n        }\n\n        Record curr;\n        if (root == A) {\n            curr.found_a = true;\n        }\n        if (root == B) {\n            curr.found_b = true;\n        }\n\n        auto l = runPostOrder(root->left, A, B);\n        if (l.lca) {\n            return l;\n        }\n\n        auto r = runPostOrder(root->right, A, B);\n        if (r.lca) {\n            return r;\n        }\n\n        curr.found_a = curr.found_a || l.found_a || r.found_a;\n        curr.found_b = curr.found_b || l.found_b || r.found_b;\n\n        if (curr.found_a && curr.found_b) {\n            curr.lca = root;\n            return curr;\n        }\n\n        return curr;\n    }\n};\n\n"},"Binary Tree/Recover Binary Search Tree.html":{"url":"Binary Tree/Recover Binary Search Tree.html","title":"Recover Binary Search Tree","keywords":"","body":"Problem\nLintCode 691. Recover Binary Search Tree\nhttps://www.lintcode.com/problem/recover-binary-search-tree/description\nSolution\n\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: the given tree\n     * @return: the tree after swapping\n     */\n    TreeNode * bstSwappedNode(TreeNode * root) {\n        // write your code here\n\n        /**\n         *  Apply inorder traversal to finde the inversed number pairs.\n         *\n         *  Specifically, we use 2 pointers curr and pred, which is the inorder\n         *  predecessor of curr, to traverse the tree. For the first time,\n         *  if we find out an inversed number pair, namely pred > curr, we record\n         *  pred. For the second time, if we discover another inversed number\n         *  pair, we record curr.\n         *\n         *    *     *\n         *  1 5 3 4 2  => 5 > 3 => (5, 2)\n         *  1 2 3 4 5     4 > 2\n         *\n         *  *     *    => 4 > 2 => (4, 1)\n         *  4 2 3 1 5     3 > 1\n         *  1 2 3 4 5\n         *\n         */\n\n        TreeNode *pred = nullptr, *src = nullptr, *dst = nullptr;\n        runInOrder(root, pred, src, dst);\n\n        if (src && dst) {\n            std::swap(src->val, dst->val);\n        }\n\n        return root;\n    }\n\nprivate:\n    void runInOrder(\n        TreeNode* curr, TreeNode*& pred, TreeNode*& src, TreeNode*& dst) {\n\n        if (curr->left) {\n            runInOrder(curr->left, pred, src, dst);\n        }\n\n        if (pred && pred->val > curr->val) {\n            if (!src) {\n                src = pred;\n            }\n            if (src) {\n                dst = curr;\n            }\n\n            /**\n             *  This is wrong!\n             *  Consider the trival case like {1, 3, 4}.\n             *\n             *  if (!src) {\n             *      src = pred;\n             *  } else {\n             *      dst = curr;\n             *  }\n             *\n             */\n        }\n        pred = curr;\n\n        if (curr->right) {\n            runInOrder(curr->right, pred, src, dst);\n        }\n    }\n};\n\n"},"Binary Tree/Binary Tree Maximum Path Sum.html":{"url":"Binary Tree/Binary Tree Maximum Path Sum.html","title":"Binary Tree Maximum Path Sum","keywords":"","body":"Problem\nLintCode 94. Binary Tree Maximum Path Sum\nhttps://www.lintcode.com/problem/binary-tree-maximum-path-sum/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: The root of binary tree.\n     * @return: An integer\n     */\n    int maxPathSum(TreeNode * root) {\n        // write your code here\n\n        /**\n         * Consider the following tree rooted by T. If we want to generate\n         * a maximum path sum which passes T, we need to check thw following\n         * cases.\n         *\n         *      T       Let L denote the maximum path sum returned from the\n         *     / \\      left branch of T.\n         *    /   \\\n         *   /\\   /\\    Let R denote the maximum path sum returned from the\n         *  /__\\ /__\\   right branch of T.\n         *\n         *              Then, the candidate sum for T would be:\n         *              MAX { T, T + L, T + R, T + L + R }\n         *\n         *              And the path sum that we need to return to the parent\n         *              level of T is:\n         *              MAX { T, T + L, T + R }\n         */\n\n        if (!root) {\n            return 0;\n        }\n\n        int opt = root->val;\n        runPostOrder(root, opt);\n\n        return opt;\n    }\n\n\nprivate:\n    int runPostOrder(TreeNode* root, int& opt) {\n\n        if (!root) {\n            return 0;\n        }\n\n        int l = runPostOrder(root->left, opt);\n        int r = runPostOrder(root->right, opt);\n\n        int tl = root->val + l;\n        int tr = root->val + r;\n        int tlr = root->val + l + r;\n\n        int ret = std::max(std::max(tl, tr), root->val);\n        int full = std::max(ret, tlr);\n\n        opt = std::max(opt, full);\n        return ret;\n    }\n};\n\n"},"Binary Tree/Binary Tree Maximum Path Sum II.html":{"url":"Binary Tree/Binary Tree Maximum Path Sum II.html","title":"Binary Tree Maximum Path Sum II","keywords":"","body":"Problem\nLintCode 475. Binary Tree Maximum Path Sum II\nhttps://www.lintcode.com/problem/binary-tree-maximum-path-sum-ii/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root of binary tree.\n     * @return: An integer\n     */\n    int maxPathSum2(TreeNode * root) {\n        // write your code here\n\n        if (!root) {\n            return 0;\n        }\n\n        int sum = 0;\n        int opt = root->val;\n        runPreOrder(root, sum, opt);\n\n        return opt;\n    }\n\nprivate:\n    void runPreOrder(TreeNode* root, int& sum, int& opt) {\n\n        sum += root->val;\n        opt = std::max(opt, sum);\n\n        if (root->left) {\n            runPreOrder(root->left, sum , opt);\n        }\n        if (root->right) {\n            runPreOrder(root->right, sum, opt);\n        }\n\n        sum -= root->val;\n    }\n};\n\n"},"Binary Tree/Binary Tree Path Sum.html":{"url":"Binary Tree/Binary Tree Path Sum.html","title":"Binary Tree Path Sum","keywords":"","body":"Problem\nLintCode 376. Binary Tree Path Sum\nhttps://www.lintcode.com/problem/binary-tree-path-sum/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: the root of binary tree\n     * @param target: An integer\n     * @return: all valid paths\n     */\n    vector> binaryTreePathSum(TreeNode * root, int target) {\n        // write your code here\n\n        if (!root) {\n            return {};\n        }\n\n        std::vector prefix;\n        std::vector> ans;\n\n        runPreOrder(root, prefix, ans, 0, target);\n        return ans;\n    }\n\nprivate:\n    void runPreOrder(\n            TreeNode* root, auto& prefix, auto& ans, int sum, int target) {\n\n        sum += root->val;\n        prefix.push_back(root->val);\n\n        if (!root->left && !root->right && sum == target) {\n            ans.push_back(prefix);\n        }\n\n        if (root->left) {\n            runPreOrder(root->left, prefix, ans, sum, target);\n        }\n        if (root->right) {\n            runPreOrder(root->right, prefix, ans, sum, target);\n        }\n\n        sum -= root->val;\n        prefix.pop_back();\n    }\n};\n\n"},"Binary Tree/Binary Tree Path Sum II.html":{"url":"Binary Tree/Binary Tree Path Sum II.html","title":"Binary Tree Path Sum II","keywords":"","body":"Problem\nLintCode 246. Binary Tree Path Sum II\nhttps://www.lintcode.com/problem/binary-tree-path-sum-ii/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: the root of binary tree\n     * @param target: An integer\n     * @return: all valid paths\n     */\n    vector> binaryTreePathSum2(TreeNode * root, int target) {\n        // write your code here\n\n        if (!root) {\n            return {};\n        }\n\n        std::stack stk;\n        stk.push(root);\n\n        std::vector prefix;\n        std::vector> ans;\n\n        while (!stk.empty()) {\n\n            auto start = stk.top();\n            stk.pop();\n\n            runPreOrder(start, prefix, ans, 0, target);\n\n            if (start->right) {\n                stk.push(start->right);\n            }\n            if (start->left) {\n                stk.push(start->left);\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    void runPreOrder(\n        TreeNode* root, auto& prefix, auto& ans, int sum, int target) {\n\n        sum += root->val;\n        prefix.push_back(root->val);\n\n        if (sum == target) {\n            ans.push_back(prefix);\n        }\n\n        if (root->left) {\n            runPreOrder(root->left, prefix, ans, sum, target);\n        }\n        if (root->right) {\n            runPreOrder(root->right, prefix, ans, sum, target);\n        }\n\n        sum -= root->val;\n        prefix.pop_back();\n    }\n};\n\n"},"Binary Tree/Binary Tree Path Sum IV.html":{"url":"Binary Tree/Binary Tree Path Sum IV.html","title":"Binary Tree Path Sum IV","keywords":"","body":"Problem\nLintCode 863. Binary Tree Path Sum IV\nhttps://www.lintcode.com/problem/binary-tree-path-sum-iv/description\nSolution\nclass Solution {\npublic:\n\n    /**\n     * @param nums: a list of integers\n     * @return: return an integer\n     */\n    int pathSum(vector &nums) {\n        // write your code here\n\n        /**\n         *  113 -> depth: 1, position: 1 -> 2 ^ 0 + 0 = 1 -> the 1st node\n         *  215 -> depth: 2, position: 1 -> 2 ^ 1 + 0 = 3 -> the 3rd node\n         *  ...\n         *\n         *  TODO: Clean the tree after resolving the answer.\n         */\n\n        if (nums.empty()) {\n            return 0;\n        }\n\n        std::unordered_map map;\n        for (int num : nums) {\n\n            int depth = num / 100;\n            num -= depth * 100;\n\n            int position = num / 10;\n            num -= position * 10;\n\n            int index = pow(2, depth - 1) + (position - 1);\n\n            map[index] = new TreeNode(num);\n        }\n\n        for (auto& pair : map) {\n            int index = pair.first;\n            auto curr = pair.second;\n\n            int l_index = index left = map[l_index];\n            }\n\n            int r_index = l_index + 1;\n            if (map.count(r_index) == 1) {\n                curr->right = map[r_index];\n            }\n        }\n\n        int ans = 0;\n        runPreOrder(map[1], 0, ans);\n        return ans;\n    }\n\nprivate:\n    void runPreOrder(TreeNode* root, int sum, int& ans) {\n\n        sum += root->val;\n\n        if (!root->left && !root->right) {\n            ans += sum;\n        }\n\n        if (root->left) {\n            runPreOrder(root->left, sum, ans);\n        }\n        if (root->right) {\n            runPreOrder(root->right, sum, ans);\n        }\n\n        sum -= root->val;\n    }\n};\n\n"},"Binary Tree/Convert BST to Greater Tree.html":{"url":"Binary Tree/Convert BST to Greater Tree.html","title":"Convert BST to Greater Tree","keywords":"","body":"Problem\nLintCode 661. Convert BST to Greater Tree\nhttps://www.lintcode.com/problem/convert-bst-to-greater-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root of binary tree\n     * @return: the new root\n     */\n    TreeNode * convertBST(TreeNode * root) {\n        // write your code here\n\n        int sum = 0;\n        runReversedInOrder(root, sum);\n        return root;\n    }\n\nprivate:\n    void runReversedInOrder(TreeNode* root, int& sum) {\n\n        if (!root) {\n            return;\n        }\n\n        runReversedInOrder(root->right, sum);\n        sum += root->val;\n        root->val = sum;\n        runReversedInOrder(root->left, sum);\n    }\n};\n\n"},"Binary Tree/Find Leaves of Binary Tree.html":{"url":"Binary Tree/Find Leaves of Binary Tree.html","title":"Find Leaves of Binary Tree","keywords":"","body":"Problem\nLintCode 650. Find Leaves of Binary Tree\nhttps://www.lintcode.com/problem/find-leaves-of-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: the root of binary tree\n     * @return: collect and remove all leaves\n     */\n    vector> findLeaves(TreeNode * root) {\n        // write your code here\n\n        /**\n         *         1(3)\n         *        / \\\n         *    (2)2   3(1)\n         *      / \\\n         *  (1)4   5(1)\n         *\n         *   1: 4, 5, 3\n         *   2: 2\n         *   3: 1\n         */\n\n        std::unordered_map> map;\n        int h = runPostOrder(root, map);\n\n        std::vector> ans;\n        for (int i = 1 ; i left, map);\n        int r = runPostOrder(root->right, map);\n\n        int h = std::max(l, r) + 1;\n        map[h].push_back(root->val);\n\n        return h;\n    }\n};\n\n"},"Binary Tree/Binary Tree Upside Down.html":{"url":"Binary Tree/Binary Tree Upside Down.html","title":"Binary Tree Upside Down","keywords":"","body":"Problem\nLintCode 649. Binary Tree Upside Down\nhttps://www.lintcode.com/problem/binary-tree-upside-down/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root of binary tree\n     * @return: new root\n     */\n    TreeNode * upsideDownBinaryTree(TreeNode * root) {\n        // write your code here\n\n        /**\n         *\n         *  1 -- 3           1 -- 3      4 -- 2 -- 1         4\n         *  |                |           |    |             / \\\n         *  2 -- 5  =>  4 -- 2       =>  5    3       =>   5   2\n         *  |           |                                     / \\\n         *  4           5                                    3   1\n         *\n         *\n         *  1. Find the very left offspring, which will be the root of the\n         *     up-side-downed tree.\n         *\n         *  2. For each node, if it has the right sibling, we need to change\n         *     the sibling as the left child of the current node.\n         *\n         *     Moreover, if its parent is not null, we need to change the parent\n         *     as the right child of the current node.\n         */\n\n        if (!root) {\n            return nullptr;\n        }\n\n        return runPreOrder(root, nullptr);\n    }\n\nprivate:\n    TreeNode* runPreOrder(TreeNode* curr, TreeNode* parent) {\n\n        TreeNode* new_root = nullptr;\n\n        if (curr->left) {\n            new_root = runPreOrder(curr->left, curr);\n        }\n\n        // To record the new root.\n        if (!new_root) {\n            new_root = curr;\n        }\n\n        // For the original root node.\n        if (!parent) {\n            return new_root;\n        }\n\n        // The current node has a right sibling.\n        if (parent->right) {\n            curr->left = parent->right;\n        }\n\n        // Change the parent as the right child of the current node.\n        curr->right = parent;\n        parent->left = parent->right = nullptr;\n\n        return new_root;\n    }\n};\n\n"},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"url":"Binary Tree/Binary Tree Vertical Order Traversal.html","title":"Binary Tree Vertical Order Traversal","keywords":"","body":"Problem\nLintCode 651. Binary Tree Vertical Order Traversal\nhttps://www.lintcode.com/problem/binary-tree-vertical-order-traversal/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nstruct Record {\n    TreeNode* node;\n    int level;\n\n    Record(TreeNode* node, int level)\n      : node(node), level(level)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root of tree\n     * @return: the vertical order traversal\n     */\n    vector> verticalOrder(TreeNode * root) {\n        // write your code here\n\n        /**\n         *     (0)\n         *      3\n         *     / \\\n         *(-1)9   20(1)\n         *       /  \\\n         *      15   7\n         *     (0)   (2)\n         */\n\n        if (!root) {\n            return {};\n        }\n\n        std::unordered_map> map;\n\n        std::queue queue;\n        queue.push(Record(root, 0));\n        int max = -1, min = 1;\n\n        while (!queue.empty()) {\n            auto rec = queue.front();\n            queue.pop();\n\n            auto node = rec.node;\n            int level = rec.level;\n\n            max = std::max(max, level);\n            min = std::min(min, level);\n\n            map[level].push_back(node->val);\n\n            if (node->left) {\n                queue.push(Record(node->left, level -1));\n            }\n            if (node->right) {\n                queue.push(Record(node->right, level + 1));\n            }\n        }\n\n        std::vector> ans;\n        for (int i = min ; i \n"},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"url":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","title":"Binary Tree Zig Zag Level Order Traversal","keywords":"","body":"Problem\n71. Binary Tree Zigzag Level Order Traversal\nhttps://www.lintcode.com/problem/binary-tree-zigzag-level-order-traversal/description\nSolution\n\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: A Tree\n     * @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.\n     */\n    vector> zigzagLevelOrder(TreeNode * root) {\n        // write your code here\n\n        /**\n         * We can use 2 stacks to control the traversal.\n         *\n         * In a specific level, we consume all the nodes collected in the first\n         * stack and explore the children of those nodes.\n         *\n         * If the level number is even, e.g. 0 and 2, we explore the children\n         * from the very left side to the very right side and push them onto\n         * the second stack.\n         *\n         * If the level number is odd, e.g. 1 and 3, we explore the children\n         * from the very right side to the very left side and push them onto\n         * the second stack.\n         *\n         * Upon finishing consuming the nodes collected in the first stack,\n         * we override the first stack with the content of the second stack.\n         *\n         *      Visualization:\n         *\n         *      ------>-----> level 0  L -> R\n         *                  |\n         *       L\n         *      |\n         *      |----->-----> level 2  L -> R\n         *\n         */\n\n        if (!root) {\n            return {};\n        }\n\n        std::vector> ans;\n\n        std::stack first;\n        first.push(root);\n\n        int level = 0;\n\n        while (!first.empty()) {\n            int n = first.size();\n            std::stack second;\n            std::vector collect;\n\n            for (int i = 0 ; i val);\n\n                if (level % 2 == 0) {\n                    if (node->left) {\n                        second.push(node->left);\n                    }\n                    if (node->right) {\n                        second.push(node->right);\n                    }\n                } else {\n                    if (node->right) {\n                        second.push(node->right);\n                    }\n                    if (node->left) {\n                        second.push(node->left);\n                    }\n                }\n            }\n\n            ans.emplace_back(std::move(collect));\n            first = std::move(second);\n            ++level;\n        }\n\n        return ans;\n    }\n};\n\n"},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"url":"Binary Tree/Serialize and Deserialize Binary Tree.html","title":"Serialize and Deserialize Binary Tree","keywords":"","body":"Problem\nLintCode 7. Serialize and Deserialize Binary Tree\nhttps://www.lintcode.com/problem/serialize-and-deserialize-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /**\n     * This method will be invoked first, you should design your own algorithm\n     * to serialize a binary tree which denote by a root node to a string which\n     * can be easily deserialized by your own \"deserialize\" method later.\n     */\n    string serialize(TreeNode * root) {\n        // write your code here\n\n        /**\n         *      3\n         *     / \\\n         *    9   20\n         *       /  \\\n         *      15   7\n         *\n         *   3, 9, #, #, 20, 15, #, #, 7, #, #\n         */\n\n        if (!root) {\n            return \"#\";\n        }\n\n        return std::to_string(root->val) + \\\n               \",\" + \\\n               serialize(root->left) + \\\n               \",\" + \\\n               serialize(root->right);\n    }\n\n    /**\n     * This method will be invoked second, the argument data is what exactly\n     * you serialized at method \"serialize\", that means the data is not given by\n     * system, it's given by your own serialize method. So the format of data is\n     * designed by yourself, and deserialize it here as you serialize it in\n     * \"serialize\" method.\n     */\n    TreeNode * deserialize(string &data) {\n        // write your code here\n\n        std::stringstream stream(data);\n        return deserializeHelper(stream);\n    }\n\nprivate:\n    TreeNode* deserializeHelper(std::stringstream& stream) {\n\n        std::string token;\n        getline(stream, token, ',');\n        if (token == \"#\") {\n            return nullptr;\n        }\n\n        auto curr = new TreeNode(stoi(token));\n        curr->left = deserializeHelper(stream);\n        curr->right = deserializeHelper(stream);\n\n        return curr;\n    }\n};\n\n"},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"url":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","title":"Construct Binary Tree from Preorder and Inorder Traversal","keywords":"","body":"Problem\nLintCode 73. Construct Binary Tree from Preorder and Inorder Traversal\nhttps://www.lintcode.com/problem/construct-binary-tree-from-preorder-and-inorder-traversal/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     *@param preorder : A list of integers that preorder traversal of a tree\n     *@param inorder : A list of integers that inorder traversal of a tree\n     *@return : Root of a tree\n     */\n    TreeNode * buildTree(vector &preorder, vector &inorder) {\n        // write your code here\n\n        /**\n         *  PreOrder: Root (left Branch) (Right Branch)\n         *  InOrder : (Left Branch) Root (Right Branch)\n         *\n         *       1                    T     L        R\n         *     /   \\        PreOrder: 1, 2, 4, 5, 3, 6, 7\n         *    2     3                    -------  -------\n         *   / \\   / \\                   L     T     R\n         *  4   5 6   7     InOrder : 4, 2, 5, 1, 6, 3, 7\n         *                            -------     -------\n         */\n\n        int num_pre = preorder.size();\n        int num_in = inorder.size();\n\n        if (num_pre == 0 || num_in == 0 || num_pre != num_in) {\n            return nullptr;\n        }\n\n        return buildTree(preorder, 0, num_pre - 1, inorder, 0, num_in - 1);\n    }\n\nprivate:\n    TreeNode* buildTree(\n            const auto& preorder, int pre_bgn, int pre_end,\n            const auto& inorder, int in_bgn, int in_end) {\n\n        if (in_bgn > in_end) {\n            return nullptr;\n        }\n\n        if (in_bgn == in_end) {\n            return new TreeNode(inorder[in_bgn]);\n        }\n\n        int root_val = preorder[pre_bgn];\n        int mid;\n        for (mid = in_bgn ; mid left = buildTree(\n            preorder, pre_bgn + 1, pre_bgn + left_range,\n            inorder, in_bgn, mid - 1);\n        root->right = buildTree(\n            preorder, pre_bgn + 1 + left_range, pre_end,\n            inorder, mid + 1, in_end);\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"url":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","title":"Construct Binary Tree from Postorder and Inorder Traversal","keywords":"","body":"Problem\nLintCode 72. Construct Binary Tree from Postorder and Inorder Traversal\nhttps://www.lintcode.com/problem/construct-binary-tree-from-postorder-and-inorder-traversal/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param inorder: A list of integers that inorder traversal of a tree\n     * @param postorder: A list of integers that postorder traversal of a tree\n     * @return: Root of a tree\n     */\n    TreeNode * buildTree(vector &inorder, vector &postorder) {\n        // write your code here\n\n        /**\n         * PostOrder: (Left Branch) (Right Branch) Root\n         * InOrder  : (Left Branch) Root (Right Branch)\n         *\n         *       1                        L        R     T\n         *     /   \\        PostOrder: 4, 5, 2, 6, 7, 3, 1\n         *    2     3                  -------  -------\n         *   / \\   / \\                    L     T     R\n         *  4   5 6   7     InOrder  : 4, 2, 5, 1, 6, 3, 7\n         *                             -------     -------\n         */\n\n        int num_in = inorder.size();\n        int num_post = postorder.size();\n\n        if (num_in == 0 || num_post == 0 || num_in != num_post) {\n            return nullptr;\n        }\n\n        return buildTree(inorder, 0, num_in - 1, postorder, 0, num_post - 1);\n    }\n\nprivate:\n    TreeNode* buildTree(\n            const auto& inorder, int in_bgn, int in_end,\n            const auto& postorder, int post_bgn, int post_end) {\n\n        if (in_end left = buildTree(\n            inorder, in_bgn, mid - 1,\n            postorder, post_bgn, post_bgn + left_range - 1);\n        root->right = buildTree(\n            inorder, mid + 1, in_end,\n            postorder, post_bgn + left_range, post_end - 1);\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"url":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","title":"Construct Binary Tree from Preorder and Postorder Traversal","keywords":"","body":"Problem\nLeetCode 889. Construct Binary Tree from Preorder and Postorder Traversal\nhttps://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructFromPrePost(vector& pre, vector& post) {\n\n        /**\n            PreOrder : Root (Left Branch) (Right Branch)\n            PostOrder: (Left Branch) (Right Branch) Root\n\n                                          *\n                1                      T  P  L        R\n              /   \\         PreOrder : 1, 2, 4, 5, 3, 6, 7\n             2     3                      -------  -------\n            / \\   / \\                     L  P     R     T\n           4   5 6   7      PostOrder: 4, 5, 2, 6, 7, 3, 1\n                                       -------  -------\n        */\n\n        int num_pre = pre.size();\n        int num_post = post.size();\n\n        if (num_pre == 0 || num_post == 0 || num_pre != num_post) {\n            return nullptr;\n        }\n\n        return buildTree(pre, 0, num_pre - 1, post, 0, num_post - 1);\n    }\n\nprivate:\n    TreeNode* buildTree(\n            const auto& pre, int pre_bgn, int pre_end,\n            const auto& post, int post_bgn, int post_end) {\n\n        if (pre_bgn > pre_end) {\n            return nullptr;\n        }\n\n        if (pre_bgn == pre_end) {\n            return new TreeNode(pre[pre_bgn]);\n        }\n\n        int root_val = pre[pre_bgn];\n        int pivot = pre[pre_bgn + 1];\n\n        int mid;\n        for (mid = post_bgn ; mid left = buildTree(\n            pre, pre_bgn + 1, pre_bgn + left_range,\n            post, post_bgn, mid - 1);\n        root->right = buildTree(\n            pre, pre_bgn + 1 + left_range, pre_end,\n            post, mid, post_end - 1);\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Maximum Subtree.html":{"url":"Binary Tree/Maximum Subtree.html","title":"Maximum Subtree","keywords":"","body":"Problem\nLintCode 628. Maximum Subtree\nhttps://www.lintcode.com/problem/maximum-subtree/description\nSolution\nstruct Result {\n    int sum;\n    TreeNode* root;\n\n    Result()\n      : sum(0), root(nullptr)\n    { }\n\n    Result(int sum, TreeNode* root)\n      : sum(sum), root(root)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root of binary tree\n     * @return: the root of the maximum subtree\n     */\n    TreeNode * findSubtree(TreeNode * root) {\n        // write your code here\n\n        Result opt(INT_MIN, nullptr);\n        runPostOrder(root, opt);\n        return opt.root;\n    }\n\nprivate:\n    Result runPostOrder(TreeNode* root, Result& opt) {\n\n        if (!root) {\n            return Result();\n        }\n\n        auto l = runPostOrder(root->left, opt);\n        auto r = runPostOrder(root->right, opt);\n\n        int sum = root->val + l.sum + r.sum;\n        if (sum > opt.sum) {\n            opt.sum = sum;\n            opt.root = root;\n        }\n\n        return Result(sum, root);\n    }\n};\n\n"},"Binary Tree/Symmetric Tree.html":{"url":"Binary Tree/Symmetric Tree.html","title":"Symmetric Tree","keywords":"","body":"Problem\nLintCode 1360. Symmetric Tree\nhttps://www.lintcode.com/problem/symmetric-tree/description\nSolution\n\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: root of the given tree\n     * @return: whether it is a mirror of itself\n     */\n    bool isSymmetric(TreeNode * root) {\n        // Write your code here\n\n        return !root || isSymmetricHelper(root, root);\n    }\n\nprivate:\n    bool isSymmetricHelper(TreeNode* left, TreeNode* right) {\n\n        if (!left || !right) {\n            return left == right;\n        }\n\n        if (left->val != right->val) {\n            return false;\n        }\n\n        return\n            isSymmetricHelper(left->left, right->right) &&\n            isSymmetricHelper(left->right, right->left);\n    }\n};\n\n"},"Binary Tree/Subtree with Maximum Average.html":{"url":"Binary Tree/Subtree with Maximum Average.html","title":"Subtree with Maximum Average","keywords":"","body":"Problem\nLintCode 597. Subtree with Maximum Average\nhttps://www.lintcode.com/problem/subtree-with-maximum-average/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nstruct Record {\n    int sum;\n    int count;\n    TreeNode* root;\n\n    Record()\n      : sum(0), count(0), root(nullptr)\n    { }\n\n    Record(int sum, int count, TreeNode* root)\n      : sum(sum), count(count), root(root)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root of binary tree\n     * @return: the root of the maximum average of subtree\n     */\n    TreeNode * findSubtree2(TreeNode * root) {\n        // write your code here\n\n        Record opt(INT_MIN, 1, nullptr);\n        runPostOrder(root, opt);\n        return opt.root;\n    }\n\n\nprivate:\n    Record runPostOrder(TreeNode* root, Record& opt) {\n\n        if (!root) {\n            return Record();\n        }\n\n        auto l = runPostOrder(root->left, opt);\n        auto r = runPostOrder(root->right, opt);\n\n        int sum = l.sum + r.sum + root->val;\n        int count = l.count + r.count + 1;\n\n        double test = static_cast(sum) / count;\n        double ref = static_cast(opt.sum) / opt.count;\n        if (test > ref) {\n            opt.sum = sum;\n            opt.count = count;\n            opt.root = root;\n        }\n\n        return Record(sum, count, root);\n    }\n};\n\n"},"Binary Tree/Closest Binary Search Tree Value.html":{"url":"Binary Tree/Closest Binary Search Tree Value.html","title":"Closest Binary Search Tree Value","keywords":"","body":"Problem\nLintCode 900. Closest Binary Search Tree Value\nhttps://www.lintcode.com/problem/closest-binary-search-tree-value/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: the given BST\n     * @param target: the given target\n     * @return: the value in the BST that is closest to the target\n     */\n    int closestValue(TreeNode * root, double target) {\n        // write your code here\n\n        /**\n         * lower_bound: the max value which is less than target.\n         * upper_bound: the min value which is greater than or equal to target.\n         */\n\n        auto lower = findLowerBound(root, target);\n        auto upper = findUpperBound(root, target);\n\n        if (!lower) {\n            return upper->val;\n        }\n        if (!upper) {\n            return lower->val;\n        }\n\n        if ((target - static_cast(lower->val)) (upper->val) - target)) {\n            return lower->val;\n        }\n\n        return upper->val;\n    }\n\nprivate:\n    TreeNode* findLowerBound(TreeNode* root, double target) {\n\n        if (!root) {\n            return nullptr;\n        }\n\n        if (target val) {\n            return findLowerBound(root->left, target);\n        }\n\n        // target > root->val\n        auto lower = findLowerBound(root->right, target);\n        if (lower) {\n            return lower;\n        }\n\n        return root;\n    }\n\n    TreeNode* findUpperBound(TreeNode* root, double target) {\n\n        if (!root) {\n            return nullptr;\n        }\n\n        if (root->val right, target);\n        }\n\n        // target val\n        auto upper = findUpperBound(root->left, target);\n        if (upper) {\n            return upper;\n        }\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Closest Binary Search Tree Value II.html":{"url":"Binary Tree/Closest Binary Search Tree Value II.html","title":"Closest Binary Search Tree Value II","keywords":"","body":"Problem\n901. Closest Binary Search Tree Value II\nhttps://www.lintcode.com/problem/closest-binary-search-tree-value-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param root: the given BST\n     * @param target: the given target\n     * @param k: the given k\n     * @return: k values in the BST that are closest to the target\n     */\n    vector closestKValues(TreeNode * root, double target, int k) {\n        // write your code here\n\n        /**\n         *  target = 19.\n         *  k = 3\n         *\n         *          20\n         *         /  \\\n         *       15    30\n         *      /  \\    \\\n         *    10    17   35\n         *   /  \\    \\\n         *  5   12    18\n         *\n         *\n         *  pred: 20\n         *  succ: 15, 17, 18\n         *\n         *  20 -> 15 -> 17 -> 18\n         */\n\n        std::stack pred;\n        std::stack succ;\n\n        auto curr = root;\n        while (curr) {\n            if (target >= curr->val) {\n                pred.push(curr);\n                curr = curr->right;\n            } else {\n                succ.push(curr);\n                curr = curr->left;\n            }\n        }\n\n        std::vector ans;\n        for (int i = 0 ; i val);\n                getSuccessors(succ);\n                continue;\n            }\n\n            if (succ.empty()) {\n                ans.push_back(pred.top()->val);\n                getPredecessors(pred);\n                continue;\n            }\n\n            auto p = pred.top();\n            auto s = succ.top();\n            if (std::abs(p->val - target) val - target)) {\n                ans.push_back(p->val);\n                getPredecessors(pred);\n            } else {\n                ans.push_back(s->val);\n                getSuccessors(succ);\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    void getPredecessors(std::stack& pred) {\n\n        auto curr = pred.top();\n        pred.pop();\n\n        if (curr->left) {\n            curr = curr->left;\n            pred.push(curr);\n\n            curr = curr->right;\n            while (curr) {\n                pred.push(curr);\n                curr = curr->right;\n            }\n        }\n    }\n\n    void getSuccessors(std::stack& succ) {\n\n        auto curr = succ.top();\n        succ.pop();\n\n        if (curr->right) {\n            curr = curr->right;\n            succ.push(curr);\n\n            curr = curr->left;\n            while (curr) {\n                succ.push(curr);\n                curr = curr->left;\n            }\n        }\n    }\n};\n\n"},"Binary Tree/Insert Node in Binary Search Tree.html":{"url":"Binary Tree/Insert Node in Binary Search Tree.html","title":"Insert Node in Binary Search Tree","keywords":"","body":"Problem\nLintCode 85. Insert Node in Binary Search Tree\nhttps://www.lintcode.com/problem/insert-node-in-a-binary-search-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: The root of the binary search tree.\n     * @param node: insert this node into the binary search tree\n     * @return: The root of the new binary search tree.\n     */\n    TreeNode * insertNode(TreeNode * root, TreeNode * node) {\n        // write your code here\n\n        if (!root) {\n            return node;\n        }\n\n        auto curr = root;\n        auto pred = root;\n        while (curr) {\n            pred = curr;\n            if (curr->val > node->val) {\n                curr = curr->left;\n            } else {\n                curr = curr->right;\n            }\n        }\n\n        if (node->val > pred->val) {\n            pred->right = node;\n        } else {\n            pred->left = node;\n        }\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Remove Node in Binary Search Tree.html":{"url":"Binary Tree/Remove Node in Binary Search Tree.html","title":"Remove Node in Binary Search Tree","keywords":"","body":"Problem\nLintCode 87. Remove Node in Binary Search Tree\nhttps://www.lintcode.com/problem/remove-node-in-binary-search-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: The root of the binary search tree.\n     * @param value: Remove the node with given value.\n     * @return: The root of the binary search tree after removal.\n     */\n    TreeNode * removeNode(TreeNode * root, int value) {\n        // write your code here\n\n        // Find the target node.\n        TreeNode* pred;\n        auto curr = root;\n        while (curr) {\n            if (curr->val == value) {\n                break;\n            }\n\n            pred = curr;\n            if (curr->val > value) {\n                curr = curr->left;\n            } else {\n                curr = curr->right;\n            }\n        }\n\n        if (!curr) {\n            return root;\n        }\n\n        // The node we want to remove has 2 children.\n        if (curr->left && curr->right) {\n            auto res = findSuccessor(root, curr);\n            pred = res.first;\n            curr->val = res.second->val;\n            curr = res.second;\n        }\n\n        // The node has no child.\n        if (!curr->left && !curr->right) {\n\n            if (curr == root) {\n                delete curr;\n                return nullptr;\n            }\n\n            if (curr == pred->left) {\n                pred->left = nullptr;\n            } else {\n                pred->right = nullptr;\n            }\n\n            delete curr;\n            return root;\n        }\n\n        // The node has only 1 child.\n        auto child = (curr->left) ? curr->left : curr->right;\n\n        if (curr == root) {\n            delete curr;\n            return child;\n        }\n\n        if (curr == pred->left) {\n            pred->left = child;\n        } else {\n            pred->right = child;\n        }\n\n        delete curr;\n        return root;\n    }\n\nprivate:\n    std::pair findSuccessor(auto root, auto dst) {\n\n        TreeNode* pred;\n        auto succ = dst;\n\n        if (succ->right) {\n            pred = succ;\n            succ = succ->right;\n\n            while (succ->left) {\n                pred = succ;\n                succ = succ->left;\n            }\n\n            return std::make_pair(pred, succ);\n        }\n\n        pred = succ = nullptr;\n        auto curr = root;\n\n        while (curr != dst) {\n            if (curr->val > dst->val) {\n                pred = succ;\n                succ = curr;\n                curr = curr->left;\n            } else {\n                curr = curr->right;\n            }\n        }\n\n        return std::make_pair(pred, succ);\n    }\n};\n\n"},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"url":"Binary Tree/All Nodes Distance K in Binary Tree.html","title":"All Nodes Distance K in Binary Tree","keywords":"","body":"Problem\nLintCode 1506. All Nodes Distance K in Binary Tree\nhttps://www.lintcode.com/problem/all-nodes-distance-k-in-binary-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nstruct MyTreeNode {\n    MyTreeNode *parent, *left, *right;\n    int val;\n\n    MyTreeNode(int val)\n        : parent(nullptr), left(nullptr), right(nullptr), val(val)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root of the tree\n     * @param target: the target\n     * @param K: the given K\n     * @return: All Nodes Distance K in Binary Tree\n     */\n    vector distanceK(TreeNode * root, TreeNode * target, int K) {\n        // Write your code here\n\n        MyTreeNode* new_target;\n        auto new_root = runPreOrder(root, nullptr, target, new_target);\n\n        vector ans;\n        runDfs(new_target, nullptr, K, ans);\n        return ans;\n    }\n\nprivate:\n    MyTreeNode* runPreOrder(\n        TreeNode* root, MyTreeNode* parent,\n        TreeNode* target, MyTreeNode*& new_target) {\n\n        if (!root) {\n            return nullptr;\n        }\n\n        auto curr = new MyTreeNode(root->val);\n        curr->parent = parent;\n        curr->left = runPreOrder(root->left, curr, target, new_target);\n        curr->right = runPreOrder(root->right, curr, target, new_target);\n\n        if (root == target) {\n            new_target = curr;\n        }\n\n        return curr;\n    }\n\n    void runDfs(MyTreeNode* curr, MyTreeNode* pred, int K, auto& ans) {\n\n        if (K == 0) {\n            ans.push_back(curr->val);\n            return;\n        }\n\n        if (curr->left && curr->left != pred) {\n            runDfs(curr->left, curr, K - 1, ans);\n        }\n        if (curr->right && curr->right != pred) {\n            runDfs(curr->right, curr, K - 1, ans);\n        }\n        if (curr->parent && curr->parent != pred) {\n            runDfs(curr->parent, curr, K - 1, ans);\n        }\n    }\n};\n\n"},"Binary Search/First Bad Version.html":{"url":"Binary Search/First Bad Version.html","title":"First Bad Version","keywords":"","body":"Problem\nLintCode 74. First Bad Version\nhttps://www.lintcode.com/problem/first-bad-version/description\nSolution\n/**\n * class SVNRepo {\n *     public:\n *     static bool isBadVersion(int k);\n * }\n * you can use SVNRepo::isBadVersion(k) to judge whether\n * the kth code version is bad or not.\n*/\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: An integer which is the first bad version.\n     */\n    int findFirstBadVersion(int n) {\n        // write your code here\n\n        int l = 1, r = n;\n        while (l + 1 \n"},"Binary Search/Search a 2D Matrix.html":{"url":"Binary Search/Search a 2D Matrix.html","title":"Search a 2D Matrix","keywords":"","body":"Problem\nLintCode 28. Search a 2D Matrix\nhttps://www.lintcode.com/problem/search-a-2d-matrix/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: matrix, a list of lists of integers\n     * @param target: An integer\n     * @return: a boolean, indicate whether matrix contains target\n     */\n    bool searchMatrix(vector> &matrix, int target) {\n        // write your code here\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return false;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return false;\n        }\n\n        int r = determineRow(matrix, num_r, target);\n        return searchRow(matrix[r], num_c, target);\n    }\n\nprivate:\n    int determineRow(const auto& matrix, int num_r, int target) {\n\n        int l = 0, r = num_r - 1;\n        while (l + 1 = matrix[m][0]) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        return (target >= matrix[r][0]) ? r : l;\n    }\n\n    bool searchRow(const auto& row, int num_c, int target) {\n\n        int l = 0, r = num_c - 1;\n        while (l + 1 = row[m]) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        return (target == row[l] || target == row[r]) ? true : false;\n    }\n};\n\n"},"Binary Search/Search a 2D Matrix II.html":{"url":"Binary Search/Search a 2D Matrix II.html","title":"Search a 2D Matrix II","keywords":"","body":"Problem\nLintCode 38. Search a 2D Matrix II\nhttps://www.lintcode.com/problem/search-a-2d-matrix-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: A list of lists of integers\n     * @param target: An integer you want to search in matrix\n     * @return: An integer indicate the total occurrence of target in the given matrix\n     */\n    int searchMatrix(vector> &matrix, int target) {\n        // write your code here\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return 0;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        int count = 0;\n        int x = 0, y = num_c - 1;\n        while (x = 0) {\n            if (matrix[x][y] == target) {\n                ++count;\n            }\n\n            if (target \n"},"Binary Search/Search for a Range.html":{"url":"Binary Search/Search for a Range.html","title":"Search for a Range","keywords":"","body":"Problem\nLintCode 61. Search for a Range\nhttps://www.lintcode.com/problem/search-for-a-range/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer sorted array\n     * @param target: an integer to be inserted\n     * @return: a list of length 2, [index1, index2]\n     */\n    vector searchRange(vector &A, int target) {\n        // write your code here\n\n        int n = A.size();\n        if (n == 0) {\n            return {-1, -1};\n        }\n\n        // Find the starting position.\n        int l = 0, r = n - 1;\n        while (l + 1 = A[m]) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        int end = (A[r] == target) ? r : l;\n\n        return {bgn, end};\n    }\n};\n\n"},"Binary Search/Pow x n.html":{"url":"Binary Search/Pow x n.html","title":"Pow (x,n)","keywords":"","body":"Problem\nLintCode 428. Pow(x, n)\nhttps://www.lintcode.com/problem/powx-n/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param x: the base number\n     * @param n: the power number\n     * @return: the result\n     */\n    double myPow(double x, int n) {\n        // write your code here\n\n        /**\n         *   n^8 = n^4 x n^4\n         *       = (n^2 x n^2) x (n^2 x n^2)\n         *\n         *   n^9 = n^8 x n\n         *         ---\n         *\n         *  Corner Case: n maybe -2147483648\n         *               That's way we use long type to store the exponential.\n         */\n\n        if (n == 0) {\n            return 1;\n        }\n\n        long nn = n;\n        return (n > 0) ? genPow(x, nn) : 1 / genPow(x, -nn);\n    }\n\nprivate:\n    double genPow(double x, long n) {\n\n        if (n == 1) {\n            return x;\n        }\n\n        long d = n >> 1;\n        double half = genPow(x, d);\n\n        double res = half * half;\n        if (d \n"},"Binary Search/Find K Closest Elements.html":{"url":"Binary Search/Find K Closest Elements.html","title":"Find K Closest Elements","keywords":"","body":"Problem\nLintCode 460. Find K Closest Elements\nhttps://www.lintcode.com/problem/find-k-closest-elements/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer array\n     * @param target: An integer\n     * @param k: An integer\n     * @return: an integer array\n     */\n    vector kClosestNumbers(vector &A, int target, int k) {\n        // write your code here\n\n        int n = A.size();\n        if (n == 0 || k == 0) {\n            return {};\n        }\n\n        int l = 0, r = n - 1;\n        while (l + 1  ans;\n        ans.push_back(closest);\n\n        l = pivot - 1;\n        r = pivot + 1;\n        for (int i = 0 ; i = 0 && r = n) {\n                    ans.push_back(A[l--]);\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"url":"Binary Search/Find Minimum in Rotated Sorted Array.html","title":"Find Minimum in Rotated Sorted Array","keywords":"","body":"Problem\nLintCode 159. Find Minimum in Rotated Sorted Array\nhttps://www.lintcode.com/problem/find-minimum-in-rotated-sorted-array/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: a rotated sorted array\n     * @return: the minimum number in the array\n     */\n    int findMin(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        int l = 0, r = n - 1;\n\n        while (l + 1 \n"},"Binary Search/Maximum Number in Mountain Sequence.html":{"url":"Binary Search/Maximum Number in Mountain Sequence.html","title":"Maximum Number in Mountain Sequence","keywords":"","body":"Problem\nLintCode 585. Maximum Number in Mountain Sequence\nhttps://www.lintcode.com/problem/maximum-number-in-mountain-sequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: a mountain sequence which increase firstly and then decrease\n     * @return: then mountain top\n     */\n    int mountainSequence(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        int l = 0, r = n - 1;\n\n        while (l + 1 \n"},"Binary Search/Search in Rotated Sorted Array.html":{"url":"Binary Search/Search in Rotated Sorted Array.html","title":"Search in Rotated Sorted Array","keywords":"","body":"Problem\nLintCode 62. Search in Rotated Sorted Array\nhttps://www.lintcode.com/problem/search-in-rotated-sorted-array/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer rotated sorted array\n     * @param target: an integer to be searched\n     * @return: an integer\n     */\n    int search(vector &A, int target) {\n        // write your code here\n\n        int n = A.size();\n        if (n == 0) {\n            return -1;\n        }\n\n        int l = 0, r = n - 1;\n\n        while (l + 1 \n"},"Binary Search/Search in Rotated Sorted Array II.html":{"url":"Binary Search/Search in Rotated Sorted Array II.html","title":"Search in Rotated Sorted Array II","keywords":"","body":"Problem\nLintCode 63. Search in Rotated Sorted Array II\nhttps://www.lintcode.com/problem/search-in-rotated-sorted-array-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer ratated sorted array and duplicates are allowed\n     * @param target: An integer\n     * @return: a boolean\n     */\n    bool search(vector &A, int target) {\n        // write your code here\n\n        int n = A.size();\n        if (n == 0) {\n            return false;\n        }\n\n        int l = 0, r = n - 1;\n\n        while (l + 1  A[r]) {\n                if (A[l] \n"},"Binary Search/Divide Two Integers.html":{"url":"Binary Search/Divide Two Integers.html","title":"Divide Two Integers","keywords":"","body":"Problem\nLintCode 414. Divide Two Integers\nhttps://www.lintcode.com/problem/divide-two-integers/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param dividend: the dividend\n     * @param divisor: the divisor\n     * @return: the result\n     */\n    int divide(int dividend, int divisor) {\n        // write your code here\n\n        long divd = static_cast(dividend);\n        long divr = static_cast(divisor);\n\n        if (divd = divr) {\n            long temp = divr;\n            long count = 1;\n\n            while (divd >= (temp  0) ^ (divisor > 0) > 0) {\n            quot = -quot;\n        }\n\n        return (quot > INT_MAX) ? INT_MAX : quot;\n    }\n};\n\n"},"Binary Approximation/Sqrt.html":{"url":"Binary Approximation/Sqrt.html","title":"Sqrt(x)","keywords":"","body":"Problem\nLintCode 141. Sqrt(x)\nhttps://www.lintcode.com/problem/sqrtx/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param x: An integer\n     * @return: The sqrt of x\n     */\n    int sqrt(int x) {\n        // write your code here\n\n        int l = 1, r = x;\n\n        while (l + 1 = m) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        return (r * r > x) ? l : r;\n    }\n};\n\n"},"Binary Approximation/Sqrt II.html":{"url":"Binary Approximation/Sqrt II.html","title":"Sqrt(x) II","keywords":"","body":"Problem\nLintCode 586. Sqrt(x) II\nhttps://www.lintcode.com/problem/sqrtx-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param x: a double\n     * @return: the square root of x\n     */\n    double sqrt(double x) {\n        // write your code here\n\n        if (x == 0) {\n            return 0;\n        }\n\n        double l = (x >= 1) ? 1 : 0;\n        double r = (x >= 1) ? x : 1;\n\n        while (l + 1e-10 = m) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        return (x / r > r) ? r : l;\n    }\n};\n\n"},"Binary Approximation/Wood Cut.html":{"url":"Binary Approximation/Wood Cut.html","title":"Wood Cut","keywords":"","body":"Problem\nLintCode 183. Wood Cut\nhttps://www.lintcode.com/problem/wood-cut/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param L: Given n pieces of wood with length L[i]\n     * @param k: An integer\n     * @return: The maximum length of the small pieces\n     */\n    int woodCut(vector &L, int k) {\n        // write your code here\n\n        /**\n         *  n pieces of woods\n         *\n         *  s: The length of small pieces\n         *  L1/s + L2/s + ... + Ln/s = ?\n         *\n         *  We need to find a s so that the above fuction is equal to k.\n         *  Besides, s should be maximal.\n         *\n         *  For this, we can use binary approximation to gradually approach\n         *  the ideal s:\n         *      l = 1, r = Lmax\n         *      s = (l + r) / 2\n         *\n         *  O(nlogL)\n         */\n\n        if (L.empty() || k == 0) {\n            return 0;\n        }\n\n        int l = 1;\n        int r = 0;\n        for (int len : L) {\n            if (len > r) {\n                r = len;\n            }\n        }\n\n        while (l + 1 = k) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        if (countSmallPieces(L, l) & L, int s) {\n\n        int count = 0;\n        for (int len : L) {\n            count += len / s;\n        }\n\n        return count;\n    }\n};\n\n"},"Binary Approximation/Copy Books.html":{"url":"Binary Approximation/Copy Books.html","title":"Copy Books","keywords":"","body":"Problem\nLintCode 437. Copy Books\nhttps://www.lintcode.com/problem/copy-books/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param pages: an array of integers\n     * @param k: An integer\n     * @return: an integer\n     */\n    int copyBooks(vector &books, int k) {\n        // write your code here\n\n        /**\n         *  Given N books, K copiers, and the total number of pages is S. We\n         *  need to find the shortest time period for the slowest copier to\n         *  finish his work.\n         *\n         *  Let the candidate period be T, we can gradually increase T from 1\n         *  to S to check whether all the copiers can finish their works with\n         *  this time period. Hence, we get an O(NS) algorithm. However, we\n         *  still can boost the performance by estimating the ideal T with\n         *  binary approximation, thus acquiring a O(NlogS) solution.\n         */\n\n        if (books.empty() || k == 0) {\n            return 0;\n        }\n\n        int l = 1, r = 0;\n        for (int book : books) {\n            r += book;\n        }\n\n        while (l + 1 & books, int period, int k) {\n\n        int sum = 1;\n        int left = period;\n\n        for (int book : books) {\n            if (book > period) {\n                return false;\n            }\n\n            left -= book;\n            if (left \n"},"Binary Approximation/Copy Books II.html":{"url":"Binary Approximation/Copy Books II.html","title":"Copy Books II","keywords":"","body":"Problem\nLintCode 438. Copy Books\nhttps://www.lintcode.com/problem/copy-books-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @param times: an array of integers\n     * @return: an integer\n     */\n    int copyBooksII(int n, vector &times) {\n        // write your code here\n\n        /**\n         *  Given N books, K copiers, and the total number of pages is S. We\n         *  need to find the shortest time period for the copiers to finish\n         *  the job.\n         *\n         *  Let the candidate period be T, we can gradually increase T from 1\n         *  to S to check whether all the copiers can finish their tasks with\n         *  this time period. Hence, we get an O(NS) algorithm. However, we\n         *  still can boost the performance by estimating the ideal T with\n         *  binary approximation, thus acquiring a O(NlogS) solution.\n         */\n\n        if (times.empty() || n == 0) {\n            return 0;\n        }\n\n        int l = 1;\n        int r = 0;\n        for (int time :times) {\n            r = std::max(r, time);\n        }\n        r *= n;\n\n        while (l + 1 = n;\n    }\n};\n\n"},"Binary Approximation/Find the Duplicate Number.html":{"url":"Binary Approximation/Find the Duplicate Number.html","title":"Find the Duplicate Number","keywords":"","body":"Problem\nLintCode 183. Wood Cut\nhttps://www.lintcode.com/problem/wood-cut/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array containing n + 1 integers which is between 1 and n\n     * @return: the duplicate one\n     */\n    int findDuplicate(vector &nums) {\n        // write your code here\n\n        /**\n         *  There are (n + 1) numbers, and suppose that p is the duplicate.\n         *  We can divide these numbers into 3 portions.\n         *\n         *  1, 2, ..., (p - 1) | p, ..., p | (p + 1), ..., n\n         *\n         *  Based on the pigeon hole theory,\n         *\n         *  The amount of numbers = (p + 1) at least\n         *  The amount of numbers  p:  >= (x + 1) at least\n         *  The amount of numbers = (x + 1), we know that we\n         *  should decrase the upper bound to find our target. Otherwise,\n         *  if the amount of numbers that are = m + 1) {\n                r = m;\n            } else {\n                l = m;\n            }\n        }\n\n        return (countNumber(nums, l) \n"},"Binary Approximation/Maximum Average Subarray II.html":{"url":"Binary Approximation/Maximum Average Subarray II.html","title":"Maximum Average Subarray II","keywords":"","body":"Problem\nLintCode 617. Maximum Average Subarray II\nhttps://www.lintcode.com/problem/maximum-average-subarray-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array with positive and negative numbers\n     * @param k: an integer\n     * @return: the maximum average\n     */\n    double maxAverage(vector &nums, int k) {\n        // write your code here\n\n        /**\n         * Use binary approximation, and then we transform the problem into\n         * checking if it is possible to find a subarray whose average sum\n         * is equal to or less than T.\n         *\n         *     A[i] + ... + A[j] / (j - i + 1) >= T , (j - i + 1) >= k\n         *  => A[i] + ... + A[j] >= T + ... + T\n         *  => (A[i] - T) + ... + (A[j] - T) >= 0\n         *  => B[i] + ... + B[j] >= 0               , (j - i + 1) >= k\n         *\n         *          j             i\n         *  -------------------------\n         *  | MIN | *     MAX     * |\n         *  -------------------------\n         */\n\n        int n = nums.size();\n        if (n == 0 || k == 0) {\n            return 0;\n        }\n\n        double l = nums[0], r = nums[0];\n        for (int i = 1 ; i (nums[i]));\n            r = std::max(r, static_cast(nums[i]));\n        }\n\n        while (l + 1e-5 (nums[i]) - x;\n        }\n\n        for (int i = k ; i = min_l_sum) {\n                return true;\n            }\n\n            // B[i] ... B[j]\n            r_sum += static_cast(nums[i]) - x;\n            l_sum += static_cast(nums[i - k]) - x;\n            min_l_sum = std::min(min_l_sum, l_sum);\n        }\n\n        return r_sum >= min_l_sum;\n    }\n};\n\n"},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"url":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","title":"Convert Infix Expression to Postfix Expression","keywords":"","body":"Problem\nLintCode 370. Convert Expression to Reverse Polish Notation\nhttps://www.lintcode.com/problem/convert-expression-to-reverse-polish-notation/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({{\"*\", 2}, {\"/\", 2}, {\"+\", 1}, {\"-\", 1}, {\"(\", 0}})\n    { }\n\n    /**\n     * @param expression: A string array\n     * @return: The Reverse Polish notation of this expression\n     */\n    vector convertToRPN(vector &exp) {\n        // write your code here\n\n        /**\n         *  *, /: 2,\n         *  +, -: 1,\n         *  (   : 0\n         *\n         *      A + B / C * (D + E) - F\n         *\n         *  Symbol      Stack       Postfix\n         *    A                     A\n         *    +           +         A\n         *    B           +         AB\n         *    /           +/        AB\n         *    C           +/        ABC\n         *    *           +*        ABC/\n         *    (           +*(       ABC/\n         *    D           +*(       ABC/D\n         *    +           +*(+      ABC/D\n         *    E           +*(+      ABC/DE\n         *    )           +*        ABC/DE+\n         *    -           -         ABC/DE+*+\n         *    F           -         ABC/DE+*+F\n         *                          ABC/DE+*+F-\n         */\n\n        std::vector rpn;\n        std::stack stack;\n\n        for (const auto& token : exp) {\n\n            if (token == \"(\") {\n                stack.push(token);\n\n            } else if (token == \")\") {\n                while (stack.top() != \"(\") {\n                    rpn.push_back(stack.top());\n                    stack.pop();\n                }\n                stack.pop();\n\n            } else if ('0'  map;\n};\n\n"},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"url":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","title":"Convert Infix Expression to Prefix Expression","keywords":"","body":"Problem\nLintCode 369. Convert Expression to Polish Notation\nhttps://www.lintcode.com/problem/convert-expression-to-polish-notation/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({{\"*\", 2}, {\"/\", 2}, {\"+\", 1}, {\"-\", 1}, {\"(\", 0}})\n    { }\n\n    /**\n     * @param expression: A string array\n     * @return: The Polish notation of this expression\n     */\n    vector convertToPN(vector &exp) {\n        // write your code here\n\n        std::stack stack;\n        std::vector pn;\n\n        int n = exp.size();\n        for (int i = n - 1 ; i >= 0 ; --i) {\n            const auto& token = exp[i];\n\n            if (token == \")\") {\n                stack.push(token);\n\n            } else if (token == \"(\") {\n                while (stack.top() != \")\") {\n                    pn.push_back(stack.top());\n                    stack.pop();\n                }\n                stack.pop();\n\n            } else if ('0'  map;\n};\n\n"},"Expression Parsing/Evaluate Postfix Expression.html":{"url":"Expression Parsing/Evaluate Postfix Expression.html","title":"Evaluate Postfix Expression","keywords":"","body":"Problem\nLintCode 424. Evaluate Reverse Polish Notation\nhttps://www.lintcode.com/problem/evaluate-reverse-polish-notation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param tokens: The Reverse Polish Notation\n     * @return: the value\n     */\n    int evalRPN(vector &tokens) {\n        // write your code here\n\n        std::stack stack;\n\n        for (const auto& token : tokens) {\n            if (token == \"+\") {\n                evaluate(stack, '+');\n            } else if (token == \"-\") {\n                evaluate(stack, '-');\n            } else if (token == \"*\") {\n                evaluate(stack, '*');\n            } else if (token == \"/\") {\n                evaluate(stack, '/');\n            } else {\n                stack.push(std::stoi(token));\n            }\n        }\n\n        return stack.top();\n    }\n\nprivate:\n    void evaluate(std::stack& stack, char op) {\n\n        int op2 = stack.top();\n        stack.pop();\n        int op1 = stack.top();\n        stack.pop();\n\n        int result;\n        switch(op) {\n            case '+':\n                result = op1 + op2;\n                break;\n            case '-':\n                result = op1 - op2;\n                break;\n            case '*':\n                result = op1 * op2;\n                break;\n            case '/':\n                result = op1 / op2;\n                break;\n        }\n\n        stack.push(result);\n    }\n};\n\n"},"Expression Parsing/Evaluate Infix Expression.html":{"url":"Expression Parsing/Evaluate Infix Expression.html","title":"Evaluate Infix Expression","keywords":"","body":"Problem\nLintCode 368. Expression Evaluation\nhttps://www.lintcode.com/problem/expression-evaluation/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({{\"*\", 2}, {\"/\", 2}, {\"+\", 1}, {\"-\", 1}, {\"(\", 0}})\n    { }\n\n    /**\n     * @param expression: a list of strings\n     * @return: an integer\n     */\n    int evaluateExpression(vector &expression) {\n        // write your code here\n\n        auto rpn = convertToRPN(expression);\n        return evaluateRPN(rpn);\n    }\n\nprivate:\n    std::vector convertToRPN(const std::vector& exp) {\n\n        /**\n         *  *, /: 2\n         *  +, -: 1\n         *  (   : 0\n         */\n\n        std::vector rpn;\n        std::stack stk;\n\n        for (const auto& token : exp) {\n\n            if ('0' = precedence) {\n                    rpn.push_back(stk.top());\n                    stk.pop();\n                }\n\n                stk.push(token);\n            }\n        }\n\n        while (!stk.empty()) {\n            rpn.push_back(stk.top());\n            stk.pop();\n        }\n\n        return rpn;\n    }\n\n    int evaluateRPN(const std::vector& rpn) {\n\n        std::stack stk;\n\n        for (const auto& token : rpn) {\n\n            if ('0'  map;\n};\n\n"},"Expression Parsing/Expression Tree Construction.html":{"url":"Expression Parsing/Expression Tree Construction.html","title":"Expression Tree Construction","keywords":"","body":"Problem\nLintCode 367. Expression Tree Build\nhttps://www.lintcode.com/problem/expression-tree-build/description\nSolution\n/**\n * Definition of ExpressionTreeNode:\n * class ExpressionTreeNode {\n * public:\n *     string symbol;\n *     ExpressionTreeNode *left, *right;\n *     ExpressionTreeNode(string symbol) {\n *         this->symbol = symbol;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    Solution()\n      : map({{\"*\", 2}, {\"/\", 2}, {\"+\", 1}, {\"-\", 1}, {\"(\", 0}})\n    { }\n\n    /*\n     * @param expression: A string array\n     * @return: The root of expression tree\n     */\n    ExpressionTreeNode * build(vector &expression) {\n        // write your code here\n\n        auto rpn = convertToRPN(expression);\n        return buildTree(rpn);\n    }\n\nprivate:\n    std::vector convertToRPN(const std::vector& exp) {\n\n        /**\n         * *, /: 2\n         * +, -: 1\n         * (   : 0\n         */\n\n        std::vector rpn;\n        std::stack stk;\n\n        for (const auto& token : exp) {\n\n            if ('0' = precedence) {\n                    rpn.push_back(stk.top());\n                    stk.pop();\n                }\n\n                stk.push(token);\n            }\n        }\n\n        while (!stk.empty()) {\n            rpn.push_back(stk.top());\n            stk.pop();\n        }\n\n        return rpn;\n    }\n\n\n    ExpressionTreeNode* buildTree(const std::vector& rpn) {\n\n        std::stack stk;\n\n        for (const auto& token : rpn) {\n\n            if ('0' left = left;\n                root->right = right;\n\n                stk.push(root);\n            }\n        }\n\n        return !stk.empty() ? stk.top() : nullptr;\n    }\n\n\n    std::unordered_map map;\n};\n\n"},"Number Parsing/Valid Number.html":{"url":"Number Parsing/Valid Number.html","title":"Valid Number","keywords":"","body":"Problem\nLintCode 417. Valid Number\nhttps://www.lintcode.com/problem/valid-number/description\nSolution\nclass Solution {\npublic:\n    bool isNumber(string s) {\n\n        /**\n         * Decompose the number format:\n         *\n         * (): Include the necessary part.\n         * []: Include the optional part.\n         *\n         * [+/-] (Real Number) [Exponent [+/-] (Integer)]\n         *                                     *********\n         * Once we encounter a exponent symbol, then the remaining integer\n         * becomes necessary now.\n         *\n         * Real Number: abcd\n         *              abcd.ef\n         *              abce.\n         */\n\n        auto str = trim(s);\n\n        int len = str.length();\n        int i = 0;\n        if (i == len) {\n            return false;\n        }\n\n        // Patch a dummy white space at the back of the string.\n        str.push_back(' ');\n\n        // Check the optional +/- signs.\n        if (str[i] == '+' || str[i] == '-') {\n            ++i;\n        }\n\n        // Check the necessary real number.\n        int count_num = 0;\n        int count_dot = 0;\n        while (('0'  1) {\n            return false;\n        }\n\n        // Step into the checking for the optional exponent.\n        if (str[i] == 'e') {\n            ++i;\n\n            // If we already visit the exponent symbol, the remaining integer\n            // now becomes necessary.\n\n            if (str[i] == '+' || str[i] == '-') {\n                ++i;\n            }\n\n            if (i == len) {\n                // 123e\n                // 123e+\n                // 123e-\n\n                return false;\n            }\n\n            // Check the final necessary integer.\n            while ('0' \n"},"Number Parsing/String to Integer.html":{"url":"Number Parsing/String to Integer.html","title":"String to Integer (atoi)","keywords":"","body":"Problem\nLintCode 54. String to Integer (atoi)\nhttps://www.lintcode.com/problem/string-to-integer-atoi/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param str: A string\n     * @return: An integer\n     */\n    int atoi(string &str) {\n        // write your code here\n\n        int len = str.length();\n        int i = 0;\n\n        if (i == len) {\n            return 0;\n        }\n\n        // Ignore the whitespaces before the first non-whitespace character.\n        while (i  INT_MAX) {\n                break;\n            }\n            ++i;\n        }\n\n        if (!positive) {\n            sum = -sum;\n        }\n\n        if (sum > INT_MAX) {\n            return INT_MAX;\n        }\n        if (sum \n"},"Number Parsing/Binary Representation.html":{"url":"Number Parsing/Binary Representation.html","title":"Binary Representation","keywords":"","body":"Problem\nLintCode 180. Binary Representation\nhttps://www.lintcode.com/problem/binary-representation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: Given a decimal number that is passed in as a string\n     * @return: A string\n     */\n    string binaryRepresentation(string &n) {\n        // write your code here\n\n        /**\n         * The strategy to handle the fractional part.\n         *\n         * e.g: 0.125 (demical)\n         *\n         *      0.25  -> 0\n         *\n         *      0.5   -> 0\n         *\n         *      1.0   -> 1\n         *      0.0   -> end\n         *\n         *      0.001 (binary)\n         */\n\n        auto pos = n.find('.');\n        if (pos == std::string::npos) {\n            return convertIntegralPart(n);\n        }\n\n        auto int_part_dec = n.substr(0, pos);\n        auto fac_part_dec = n.substr(pos, n.length() - pos);\n        auto int_part_bin = convertIntegralPart(int_part_dec);\n        auto fac_part_bin = convertFractionalPart(fac_part_dec);\n\n        if (fac_part_bin == \"ERROR\") {\n            return \"ERROR\";\n        }\n        if (fac_part_bin.empty()) {\n            return int_part_bin;\n        }\n\n        return int_part_bin + \".\" + fac_part_bin;\n    }\n\nprivate:\n    std::string convertIntegralPart(const std::string& str) {\n\n        std::string res;\n\n        int n = std::stoi(str);\n        while (n > 0) {\n            div_t temp = std::div(n, 2);\n            n = temp.quot;\n\n            if (temp.rem == 0) {\n                res.push_back('0');\n            } else {\n                res.push_back('1');\n            }\n        }\n\n        if (res.empty()) {\n            res.push_back('0');\n        }\n\n        std::reverse(res.begin(), res.end());\n        return res;\n    }\n\n    std::string convertFractionalPart(const std::string& str) {\n\n        int max_len = 32;\n        int len = 0;\n        std::string res;\n\n        double n = std::stod(str);\n        while (n > 0) {\n            n *= 2;\n\n            if (n  max_len) {\n                return \"ERROR\";\n            }\n        }\n\n        return res;\n    }\n};\n\n"},"Number Parsing/Palindrome Number.html":{"url":"Number Parsing/Palindrome Number.html","title":"Palindrome Number","keywords":"","body":"Problem\nLintCode 491. Palindrome Number\nhttps://www.lintcode.com/problem/palindrome-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param num: a positive number\n     * @return: true if it's a palindrome or false\n     */\n    bool isPalindrome(int num) {\n        // write your code here\n\n        long mirror = 0;\n\n        long copy = num;\n        while (copy > 0) {\n            mirror *= 10;\n            mirror += copy % 10;\n            copy /= 10;\n        }\n\n        return mirror == num;\n    }\n};\n\n"},"Number Parsing/Add Digits.html":{"url":"Number Parsing/Add Digits.html","title":"Add Digits","keywords":"","body":"Problem\nLintCode 569. Add Digits\nhttps://www.lintcode.com/problem/add-digits/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param num: a non-negative integer\n     * @return: one digit\n     */\n    int addDigits(int num) {\n        // write your code here\n\n        while (num >= 10) {\n            num = decompose(num);\n        }\n\n        return num;\n    }\n\nprivate:\n    int decompose(int n) {\n\n        int res = 0;\n        while (n > 0) {\n            res += n % 10;\n            n /= 10;\n        }\n\n        return res;\n    }\n};\n\n"},"Number Parsing/Happy Number.html":{"url":"Number Parsing/Happy Number.html","title":"Happy Number","keywords":"","body":"Problem\nLintCode 488. Happy Number\nhttps://www.lintcode.com/problem/happy-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: true if this is a happy number or false\n     */\n    bool isHappy(int n) {\n        // write your code here\n\n        std::unordered_set set;\n        while (n != 1) {\n            n = decompose(n);\n            if (set.count(n) == 1) {\n                return false;\n            }\n            set.insert(n);\n        }\n\n        return true;\n    }\n\nprivate:\n    int decompose(int n) {\n\n        int res = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            n /= 10;\n            res += digit * digit;\n        }\n\n        return res;\n    }\n};\n\n"},"Number Parsing/Validate IP Address.html":{"url":"Number Parsing/Validate IP Address.html","title":"Validate IP Address","keywords":"","body":"Problem\nLintCode 1222. Validate IP Address\nhttps://www.lintcode.com/problem/validate-ip-address/description\nSolution\nclass Solution {\npublic:\n    string validIPAddress(string IP) {\n\n        auto pos = IP.find('.');\n        if (pos != std::string::npos) {\n            return isV4(IP) ? \"IPv4\" : \"Neither\";\n        }\n\n        pos = IP.find(':');\n        if (pos != std::string::npos) {\n            return isV6(IP) ? \"IPv6\" : \"Neither\";\n        }\n\n        return \"Neither\";\n    }\n\nprivate:\n    std::string getToken(const auto& str, int& bgn, int end, char delm) {\n\n        if (bgn >= end) {\n            return \"\";\n        }\n\n        int base = bgn;\n        while (bgn  3) {\n            return false;\n        }\n\n        if (str.length() > 1 && str[0] == '0') {\n            return false;\n        }\n\n        for (char ch : str) {\n            if (!('0'  4) {\n            return false;\n        }\n\n        for (char ch : str) {\n            if (!(('0'  4) {\n                break;\n            }\n\n            int value = std::stoi(token);\n            if (!(value >= 0 && value  8) {\n                break;\n            }\n\n            int value = std::stoi(token, 0, 16);\n            if (!(value >= 0 && value \n"},"Word Puzzle/Word Break.html":{"url":"Word Puzzle/Word Break.html","title":"Word Break","keywords":"","body":"Problem\nLintCode 107. Word Break\nhttps://www.lintcode.com/problem/word-break/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param s: A string\n     * @param dict: A dictionary of words dict\n     * @return: A boolean\n     */\n    bool wordBreak(string &s, unordered_set &dict) {\n        // write your code here\n\n        /**\n         * dp[i]: Whether the prefix ending at the ith position can be composed\n         *        by the dictionary words.\n         *\n         * dp[i] =   OR { dp[j] && (s.substr(j + 1, i) in dict) }\n         *         0 i.\n         *\n         */\n\n        /*\n        int n = s.length();\n        if (n == 0) {\n            return true;\n        }\n\n        std::vector dp(n + 1, false);\n        dp[0] = true;\n\n        for (int i = 1 ; i  dp(n + 1, false);\n        dp[0] = true;\n\n        for (int i = 0 ; i  n || dp[j]) {\n                    continue;\n                }\n\n                dp[j] = word == s.substr(i, len);\n            }\n        }\n\n        return dp[n];\n    }\n};\n\n"},"Word Puzzle/Word Break II.html":{"url":"Word Puzzle/Word Break II.html","title":"Word Break II","keywords":"","body":"Problem\nLintCode 582. Word Break II\nhttps://www.lintcode.com/problem/word-break-ii/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param s: A string\n     * @param wordDict: A set of words.\n     * @return: All possible sentences.\n     */\n    vector wordBreak(string &s, unordered_set &wordDict) {\n        // write your code here\n\n        /**\n         *  lintcode => l intcode\n         *           => li ntcode\n         *           => lin tcode\n         *           => lint code\n         *           ...\n         *\n         *  lint => l int   code => c ode\n         *       => li nt        => co de\n         *       => lin t        => cod e\n         */\n\n        if (s.empty()) {\n            return {};\n        }\n\n        std::unordered_map> memo;\n        return runBacktracking(s, wordDict, memo);\n    }\n\nprivate:\n    std::vector runBacktracking(\n            const std::string& str,\n            const std::unordered_set& dict,\n            std::unordered_map>& memo) {\n\n        if (str.empty()) {\n            return {\"\"};\n        }\n\n        if (memo.count(str) == 1) {\n            return memo[str];\n        }\n\n        std::vector ans;\n\n        int n = str.length();\n        for (const auto& word : dict) {\n\n            int l = word.length();\n            if (l > n || l == 0) {\n                continue;\n            }\n\n            auto prefix = str.substr(0, l);\n            if (prefix != word) {\n                continue;\n            }\n\n            auto suffix = str.substr(l, n - l);\n\n            auto res = runBacktracking(suffix, dict, memo);\n\n            /**\n             * prefix:  piece:\n             * a        b c d\n             * a        bc d\n             * a        bcd\n             * ...\n             */\n            for (const auto& piece : res) {\n                if (!piece.empty()) {\n                    ans.push_back(prefix + \" \" + piece);\n                } else {\n                    ans.push_back(prefix);\n                }\n            }\n        }\n\n        memo[str] = std::move(ans);\n        return memo[str];\n    }\n};\n\n"},"Word Puzzle/Word Break III.html":{"url":"Word Puzzle/Word Break III.html","title":"Word Break III","keywords":"","body":"Problem\nLintCode 683. Word Break III\nhttps://www.lintcode.com/problem/word-break-iii/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param : A string\n     * @param : A set of word\n     * @return: the number of possible sentences.\n     */\n    int wordBreak3(string& s, unordered_set& words) {\n        // Write your code here\n\n        /**\n         * dp[i]: The number of ways to decompose the prefix ending at the\n         *        ith offset.\n         *\n         * dp[i] =  SUM { dp[j], if (s.substr(j + 1, i - j) in dict) }\n         *         0 dict;\n\n        for (const auto& word : words) {\n            std::string norm(word);\n\n            std::transform(norm.begin(), norm.end(), norm.begin(),\n                [](char ch) {\n                    return std::tolower(ch);\n                });\n\n            dict.emplace(std::move(norm));\n        }\n\n        std::vector dp(n + 1, 0);\n        dp[0] = 1;\n\n        for (int i = 0 ; i  n) {\n                    continue;\n                }\n\n                if (word == s.substr(i, l)) {\n                    dp[i + l] += dp[i];\n                }\n            }\n        }\n\n        return dp[n];\n    }\n};\n\n"},"Word Puzzle/Word Ladder.html":{"url":"Word Puzzle/Word Ladder.html","title":"Word Ladder","keywords":"","body":"Problem\nLintCode 120. Word Ladder\nhttps://www.lintcode.com/problem/word-ladder/description\nSolution\n\n\nstruct Record {\n    std::string word;\n    int level;\n\n    Record(const auto& word, int level)\n      : word(word), level(level)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /*\n     * @param start: a string\n     * @param end: a string\n     * @param dict: a set of string\n     * @return: An integer\n     */\n    int ladderLength(string &start, string &end, unordered_set &dict) {\n        // write your code here\n\n        /**\n         *              dot -- dog\n         *            /            \\\n         *  hit -- hot              cog\n         *            \\            /\n         *              lot -- log\n         */\n\n        dict.insert(end);\n\n        std::queue queue;\n        queue.push(Record(start, 1));\n\n        while (!queue.empty()) {\n\n            int n = queue.size();\n            for (int i = 0 ; i \n"},"Word Puzzle/Word Ladder II.html":{"url":"Word Puzzle/Word Ladder II.html","title":"Word Ladder II","keywords":"","body":"Problem\nLintCode 121. Word Ladder II\nhttps://www.lintcode.com/problem/word-ladder-ii/description\nSolution\nstruct Record {\n    std::string word;\n    int level;\n\n    Record(const auto& word, int level)\n      : word(word), level(level)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /*\n     * @param start: a string\n     * @param end: a string\n     * @param dict: a set of string\n     * @return: a list of lists of string\n     */\n    vector> findLadders(string &start, string &end, unordered_set &dict) {\n        // write your code here\n\n        /**\n         *                  dot(3) -- dog(4)\n         *                /                 \\\n         * hit(1) - hot(2)                   cog(5)\n         *                \\                 /\n         *                  lot(3) -- log(4)\n         *\n         */\n\n        std::unordered_map> graph;\n        std::unordered_map discover;\n        buildGraph(start, end, dict, graph, discover);\n\n        std::vector> ans;\n        std::vector collect;\n        listPaths(1, start, end, graph, discover, ans, collect);\n\n        return ans;\n    }\n\nprivate:\n    void buildGraph(\n        const std::string& bgn,\n        const std::string& end,\n        std::unordered_set& dict,\n        std::unordered_map>& graph,\n        std::unordered_map& discover) {\n\n        dict.insert(end);\n        discover[bgn] = 1;\n\n        std::queue queue;\n        queue.push(Record(bgn, 1));\n\n        while (!queue.empty()) {\n\n            int n = queue.size();\n            for (int i = 0 ; i >& graph,\n        std::unordered_map& discover,\n        std::vector>& ans,\n        std::vector& collect) {\n\n        collect.push_back(bgn);\n\n        if (bgn == end) {\n            ans.push_back(collect);\n        } else {\n            for (const auto& nbr : graph[bgn]) {\n                if (discover[nbr] != depth + 1) {\n                    continue;\n                }\n                listPaths(depth + 1, nbr, end, graph, discover, ans, collect);\n            }\n        }\n\n        collect.pop_back();\n    }\n};\n\n"},"Word Puzzle/Word Search.html":{"url":"Word Puzzle/Word Search.html","title":"Word Search","keywords":"","body":"Problem\nLintCode 123. Word Search\nhttps://www.lintcode.com/problem/word-search/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param board: A list of lists of character\n     * @param word: A string\n     * @return: A boolean\n     */\n    bool exist(vector> &board, string &word) {\n        // write your code here\n\n        int num_r = board.size();\n        if (num_r == 0) {\n            return false;\n        }\n\n        int num_c = board[0].size();\n        if (num_c == 0) {\n            return false;\n        }\n\n        int len = word.length();\n\n        for (int i = 0 ; i >& board,\n            int r, int c,\n            int num_r, int num_c,\n            const std::string& word,\n            int index,\n            int bound) {\n\n        if (board[r][c] != word[index]) {\n            return false;\n        }\n\n        if (index == bound - 1) {\n            return true;\n        }\n\n        char ch = board[r][c];\n        board[r][c] = 0;\n        bool res = false;\n\n        for (const auto& direct : directs) {\n            int nr = r + direct[0];\n            int nc = c + direct[1];\n\n            if (!(nr >= 0 && nc >= 0 && nr > directs;\n};\n\n"},"Word Puzzle/Word Search II.html":{"url":"Word Puzzle/Word Search II.html","title":"Word Search II","keywords":"","body":"Problem\nLintCode 132. Word Search II\nhttps://www.lintcode.com/problem/word-search-ii/description\nSolution\n\n\nstruct TrieNode {\n    std::unordered_map> branch;\n    bool is_word;\n\n    TrieNode()\n      : is_word(false)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param board: A list of lists of character\n     * @param words: A list of string\n     * @return: A list of string\n     */\n    vector wordSearchII(vector> &board, vector &words) {\n        // write your code here\n\n        int num_r = board.size();\n        if (num_r == 0) {\n            return {};\n        }\n\n        int num_c = board[0].size();\n        if (num_c == 0) {\n            return {};\n        }\n\n        auto trie = makeTrie(words);\n\n        std::unordered_set set;\n        std::string config;\n\n        for (int r = 0 ; r  ans;\n        for (const auto& word : set) {\n            ans.push_back(word);\n        }\n\n        return ans;\n    }\n\nprivate:\n    std::shared_ptr makeTrie(const std::vector& words) {\n\n        auto root = std::make_shared();\n\n        for (const auto& word : words) {\n\n            auto curr = root;\n            for (char ch : word) {\n\n                if (curr->branch.count(ch) == 0) {\n                    curr->branch[ch] = std::make_shared();\n                }\n                curr = curr->branch[ch];\n            }\n\n            curr->is_word = true;\n        }\n\n        return root;\n    }\n\n\n    void runBackTracking(\n            std::shared_ptr curr,\n            int r, int c,\n            int num_r, int num_c,\n            std::vector>& board,\n            std::string& config,\n            std::unordered_set& set) {\n\n        char ch = board[r][c];\n\n        if (curr->branch.count(ch) == 0) {\n            return;\n        }\n        curr = curr->branch[ch];\n\n        config.push_back(ch);\n        board[r][c] = 0;\n\n        if (curr->is_word) {\n            set.insert(config);\n        }\n\n        for (const auto& direct : directs) {\n            int nr = r + direct[0];\n            int nc = c + direct[1];\n\n            if (!(nr >= 0 && nc >= 0 && nr > directs;\n};\n\n"},"Word Puzzle/Word Pattern.html":{"url":"Word Puzzle/Word Pattern.html","title":"Word Pattern","keywords":"","body":"Problem\nLintCode 828. Word Pattern\nhttps://www.lintcode.com/problem/word-pattern/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param pattern: a string, denote pattern string\n     * @param teststr: a string, denote matching string\n     * @return: an boolean, denote whether the pattern string and the matching string match or not\n     */\n    bool wordPattern(string &pattern, string &teststr) {\n        // write your code here\n\n        std::unordered_map forward;\n        std::unordered_map backward;\n\n        int bgn = 0, end = teststr.length();\n\n        for (char ch : pattern) {\n            auto token = getToken(teststr, bgn, end);\n            if (token.empty()) {\n                return false;\n            }\n\n            auto iter_f = forward.find(ch);\n            if (iter_f == forward.end()) {\n                forward[ch] = token;\n            } else if (token != iter_f->second) {\n                return false;\n            }\n\n            auto iter_b = backward.find(token);\n            if (iter_b == backward.end()) {\n                backward[token] = ch;\n            } else if (ch != iter_b->second) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\nprivate:\n    std::string getToken(const std::string& str, int& bgn, int end) {\n\n        if (bgn == end) {\n            return \"\";\n        }\n\n        int curr = bgn;\n        while (curr \n"},"Word Puzzle/Word Pattern II.html":{"url":"Word Puzzle/Word Pattern II.html","title":"Word Pattern II","keywords":"","body":"Problem\nLintCode 829. Word Pattern II\nhttps://www.lintcode.com/problem/word-pattern-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param pattern: a string,denote pattern string\n     * @param str: a string, denote matching string\n     * @return: a boolean\n     */\n    bool wordPatternMatch(string &pattern, string &str) {\n        // write your code here\n\n        std::unordered_map map;\n        std::unordered_set dedup;\n\n        return runBackTracking(\n            0, pattern.length(), pattern, 0, str.length(), str, map, dedup);\n    }\n\nprivate:\n    bool runBackTracking(\n            int idx_p,\n            int bnd_p,\n            const std::string& pat,\n            int idx_s,\n            int bnd_s,\n            const std::string& str,\n            std::unordered_map& map,\n            std::unordered_set& dedup) {\n\n        if (idx_p == bnd_p && idx_s == bnd_s) {\n            return true;\n        }\n\n        if (idx_p == bnd_p || idx_s == bnd_s) {\n            return false;\n        }\n\n        char ch = pat[idx_p];\n\n        if (map.count(ch) == 1) {\n            const auto& token = map[ch];\n            int len_t = token.length();\n\n            if (len_t > bnd_s - idx_s) {\n                return false;\n            }\n\n            auto cand = str.substr(idx_s, len_t);\n            if (cand != token) {\n                return false;\n            }\n\n            auto ret = runBackTracking(\n                idx_p + 1, bnd_p, pat, idx_s + len_t, bnd_s, str, map, dedup);\n            if (ret) {\n                return true;\n            }\n        } else {\n            for (int i = idx_s ; i \n"},"Word Puzzle/Word Squares.html":{"url":"Word Puzzle/Word Squares.html","title":"Word Squares","keywords":"","body":"Problem\nLintCode 634. Word Squares\nhttps://www.lintcode.com/problem/word-squares/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param words: a set of words without duplicates\n     * @return: all word squares\n     */\n    vector> wordSquares(vector &words) {\n        // write your code here\n\n        /**\n         *  1. To choose a proper candidate in the ith recursion step, we need\n         *     to check if there are words starting with the prefix formed by\n         *     the first (i - 1) words collected so far.\n         *\n         *   b a l l\n         *   a       => b a l l => the second word should start with \"a\".\n         *   l\n         *   l\n         *\n         *  2. Once we select a legal candidate, we need to predict if we can\n         *     find the words starting with the prefix formed by the suffixes\n         *     of the i words collected so far in the future round.\n         *\n         *       * *\n         *   b a l l  => b a l l => there must be words starting with \"le\"\n         *   a r e a     a r e a    and \"la\".\n         *   l e\n         *   l a\n         */\n\n        if (words.empty()) {\n            return {};\n        }\n\n        int n = words[0].size();\n\n        // Group the words sharing the same prefix.\n        std::unordered_map> trie;\n        for (const auto& word : words) {\n            trie[\"\"].insert(word);\n\n            int len = word.length();\n            for (int i = 1 ; i  config;\n        std::vector> ans;\n\n        runBackTracking(0, n, trie, config, ans);\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n        int index,\n        int bound,\n        std::unordered_map>& trie,\n        std::vector& config,\n        std::vector>& ans) {\n\n        if (index == bound) {\n            ans.push_back(config);\n            return;\n        }\n\n        // Adopt the 1st filtering criterion.\n        std::string key;\n        for (const auto& word : config) {\n            key += word[index];\n        }\n\n        for (const auto& cand : trie[key]) {\n            config.push_back(cand);\n\n            // Adopt the 2nd filtering criterion.\n            if (canUse(index + 1, bound, trie, config)) {\n                runBackTracking(index + 1, bound, trie, config, ans);\n            }\n\n            config.pop_back();\n        }\n    }\n\n    bool canUse(\n        int index,\n        int bound,\n        std::unordered_map>& trie,\n        std::vector& config) {\n\n        for (int i = index ; i \n"},"Word Puzzle/Valid Word Square.html":{"url":"Word Puzzle/Valid Word Square.html","title":"Valid Word Square","keywords":"","body":"Problem\nLintCode 888. Valid Word Square\nhttps://www.lintcode.com/problem/valid-word-square/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param words: a list of string\n     * @return: a boolean\n     */\n    bool validWordSquare(vector &words) {\n        // Write your code here\n\n        int num_r = words.size();\n\n        for (int i = 0 ; i \n"},"Word Puzzle/Valid Anagram.html":{"url":"Word Puzzle/Valid Anagram.html","title":"Valid Anagram","keywords":"","body":"Problem\nLintCode 425. Letter Combinations of a Phone Number\nhttps://www.lintcode.com/problem/letter-combinations-of-a-phone-number/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({\n          {'2', {'a', 'b', 'c'}},\n          {'3', {'d', 'e', 'f'}},\n          {'4', {'g', 'h', 'i'}},\n          {'5', {'j', 'k', 'l'}},\n          {'6', {'m', 'n', 'o'}},\n          {'7', {'p', 'q', 'r', 's'}},\n          {'8', {'t', 'u', 'v'}},\n          {'9', {'w', 'x', 'y', 'z'}},\n      })\n    { }\n\n    /**\n     * @param digits: A digital string\n     * @return: all posible letter combinations\n     */\n    vector letterCombinations(string &digits) {\n        // write your code here\n\n        std::vector ans;\n        if (digits.empty()) {\n            return ans;\n        }\n\n        std::string config;\n        runBackTracking(0, digits.length(), digits, config, ans);\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            int index, int bound,\n            const std::string& digits,\n            std::string& config,\n            std::vector& ans) {\n\n        if (index == bound) {\n            ans.push_back(config);\n            return;\n        }\n\n        char digit = digits[index];\n        for (char ch : map[digit]) {\n            config.push_back(ch);\n            runBackTracking(index + 1, bound, digits, config, ans);\n            config.pop_back();\n        }\n    }\n\n    std::unordered_map> map;\n};\n\n"},"Word Puzzle/Group Anagrams.html":{"url":"Word Puzzle/Group Anagrams.html","title":"Group Anagrams","keywords":"","body":"Problem\nLintCode 772. Group Anagrams\nhttps://www.lintcode.com/problem/group-anagrams/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param strs: the given array of strings\n     * @return: The anagrams which have been divided into groups\n     */\n    vector> groupAnagrams(vector &strs) {\n        // write your code here\n\n        std::unordered_map> groups;\n\n        for (const auto& word : strs) {\n            auto key(word);\n            std::sort(key.begin(), key.end());\n            groups[key].push_back(word);\n        }\n\n        std::vector> ans;\n        for (auto& pair : groups) {\n            ans.emplace_back(std::move(pair.second));\n        }\n\n        return ans;\n    }\n};\n\n"},"Word Puzzle/Find All Anagrams in a String.html":{"url":"Word Puzzle/Find All Anagrams in a String.html","title":"Find All Anagrams in a String","keywords":"","body":"Problem\nLintCode 647. Find All Anagrams in a String\nhttps://www.lintcode.com/problem/find-all-anagrams-in-a-string/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: a string\n     * @param p: a string\n     * @return: a list of index\n     */\n    vector findAnagrams(string &s, string &p) {\n        // write your code here\n\n        // Construct the histogram of character appearance frequency for p.\n        std::unordered_set set;\n        std::vector freq_p(256, 0);\n        for (char ch : p) {\n            ++freq_p[ch];\n            set.insert(ch);\n        }\n\n        int len_p = p.length();\n        int count_p = set.size();\n\n        // Generate the initial sliding window.\n        std::vector freq_s(256, 0);\n        int count_s = 0;\n        for (int i = 0 ; i  ans;\n\n        int len_s = s.length();\n        for (int i = len_p ; i \n"},"Word Puzzle/Valid Word Abbreviation.html":{"url":"Word Puzzle/Valid Word Abbreviation.html","title":"Valid Word Abbreviation","keywords":"","body":"Problem\nLintCode 637. Valid Word Abbreviation\nhttps://www.lintcode.com/problem/valid-word-abbreviation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param word: a non-empty string\n     * @param abbr: an abbreviation\n     * @return: true if string matches with the given abbr or false\n     */\n    bool validWordAbbreviation(string &word, string &abbr) {\n        // write your code here\n\n        int len_w = word.length();\n        int len_a = abbr.length();\n\n        int index_w = 0, index_a = 0;\n        while (index_w \n"},"Word Puzzle/Word Abbreviation.html":{"url":"Word Puzzle/Word Abbreviation.html","title":"Word Abbreviation","keywords":"","body":"Problem\nLintCode 639. Word Abbreviation\nhttps://www.lintcode.com/problem/word-abbreviation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param dict: an array of n distinct non-empty strings\n     * @return: an array of minimal possible abbreviations for every word\n     */\n    vector wordsAbbreviation(vector &dict) {\n        // write your code here\n\n        /**\n         *   like god internal me internet interval intension face intrusion\n         *\n         *   l2e  god i6l      me i6t      i6l      i7n       f2e  i7n\n         *\n         *   l2e  god in5l     me i6t      in5l     in6n      f2e  in6n\n         *\n         *   l2e  god int4l    me i6t      int4l    int5n     f2e  int5n\n         *\n         *   l2e  god inte3l   me i6t      inte3l   inte4n    f2e  intr4n\n         *\n         *   l2e  god inter2l  me i6t      inter2l  inte4n    f2e  intr4n\n         *\n         *          (no need) => intern1l interv1l\n         *\n         *           internal              interval\n         */\n\n        int n = dict.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::unordered_map states;\n        std::vector prefix_lens(n);\n        std::vector ans(n);\n\n        for (int i = 0 ; i     1\n            // intern1l ->    6\n            return str;\n        }\n\n        return  str.substr(0, prefix_len) +\n                std::to_string(len - prefix_len - 1) +\n                str[len - 1];\n    }\n};\n\n"},"Word Puzzle/Unique Word Abbreviation.html":{"url":"Word Puzzle/Unique Word Abbreviation.html","title":"Unique Word Abbreviation","keywords":"","body":"Problem\nLintCode 648. Unique Word Abbreviation\nhttps://www.lintcode.com/problem/unique-word-abbreviation/description\nSolution\nclass ValidWordAbbr {\npublic:\n    /*\n    * @param dictionary: a list of words\n    */ValidWordAbbr(vector dictionary) {\n        // do intialization if necessary\n\n        for (const auto& word: dictionary) {\n            auto abbr = genAbbreviation(word);\n            ++words[word];\n            ++abbrs[abbr];\n        }\n    }\n\n    /*\n     * @param word: a string\n     * @return: true if its abbreviation is unique or false\n     */\n    bool isUnique(string &word) {\n        // write your code here\n\n        /**\n         * 1. If a word is presented in the word dictionary, it should also be\n         *    stored in the abbreviation dictionary. Moreover, the appearance\n         *    frequencies of the word and its abbreviation must be equal.\n         *\n         * 2. On the other hand, if a word is not shown in the word dictionary,\n         *    it should not be presented in the abbreviation dictionary, too.\n         */\n\n        auto abbr = genAbbreviation(word);\n        if (words.count(word) == 1 && abbrs.count(abbr) == 1 &&\n            words[word] == abbrs[abbr]) {\n            return true;\n        }\n        if (words.count(word) == 0 && abbrs.count(abbr) == 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n\nprivate:\n    std::string genAbbreviation(const std::string& str) {\n\n        int len = str.length();\n        if (len  words;\n    std::unordered_map abbrs;\n};\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr obj = new ValidWordAbbr(dictionary);\n * bool param = obj.isUnique(word);\n */\n\n"},"Linked List/Delete Node in a Linked List.html":{"url":"Linked List/Delete Node in a Linked List.html","title":"Delete Node in a Linked List","keywords":"","body":"Problem\nLintCode 372. Delete Node in a Linked List\nhttps://www.lintcode.com/problem/delete-node-in-a-linked-list/description\nSolution\n/**\n * Definition of ListNode\n * class ListNode {\n * public:\n *     int val;\n *     ListNode *next;\n *     ListNode(int val) {\n *         this->val = val;\n *         this->next = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param node: the node in the list should be deleted\n     * @return: nothing\n     */\n    void deleteNode(ListNode * node) {\n        // write your code here\n\n        if (!node) {\n            return;\n        }\n\n        auto pred = node;\n        auto curr = node;\n        auto last = node;\n\n        while (curr->next) {\n            curr = curr->next;\n            pred->val = curr->val;\n            last = pred;\n            pred = curr;\n        }\n\n        delete curr;\n        last->next = nullptr;\n    }\n};\n\n"},"Linked List/Copy List with Random Pointer.html":{"url":"Linked List/Copy List with Random Pointer.html","title":"Copy List with Random Pointer","keywords":"","body":"Problem\nLintCode 105. Copy List with Random Pointer\nhttps://www.lintcode.com/problem/copy-list-with-random-pointer/description\nSolution\n/**\n * Definition for singly-linked list with a random pointer.\n * struct RandomListNode {\n *     int label;\n *     RandomListNode *next, *random;\n *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * @param head: The head of linked list with a random pointer.\n     * @return: A new head of a deep copy of the list.\n     */\n    RandomListNode *copyRandomList(RandomListNode *head) {\n        // write your code here\n\n        /**\n         *\n         *      A -> B -> C -> ...\n         *\n         *  Step 1. Generate a replicated node for each node and put that copy\n         *  behind the original node.\n         *\n         *      A -> A+ -> B -> B+ -> C -> C+ -> ...\n         *\n         *  Step 2. For an orignal node, follow its random pointer.\n         *  Then, the node next to the pointed node would be the one that the\n         *  random pointer of the replicated node should point to.\n         *\n         *        random\n         *      A ------> C -> C+\n         *   => A+ -> C+\n         *\n         *      -----------------------\n         *      |                     |\n         *      |                     v\n         *      A -> A+ -> B -> B+ -> C -> C+ -> ...\n         *           |                      ^\n         *           |                      |\n         *           ------------------------\n         *\n         *  Step 3. Finally, we need to split the replicated list and the\n         *  original list.\n         */\n\n        if (!head) {\n            return nullptr;\n        }\n\n        // Step 1.\n        auto curr = head;\n        while (curr) {\n            auto succ = curr->next;\n            auto copy = new RandomListNode(curr->label);\n            copy->next = succ;\n            curr->next = copy;\n            curr = succ;\n        }\n\n        // Step 2.\n        curr = head;\n        while (curr) {\n            // Note that the random pointers can be null.\n            if (curr->random) {\n                auto rand = curr->random->next;\n                curr->next->random = rand;\n            }\n            curr = curr->next->next;\n        }\n\n        // Step 3.\n        auto new_head = head->next;\n\n        /**\n         *  curr copy  succ\n         *   |    |     |\n         *   v    v     v\n         *   A -> A+ -> B -> B+\n         *\n         *   A -> B, A+ -> B+\n         */\n\n        curr = head;\n        auto copy = head->next;\n        while (curr) {\n            auto succ = copy->next;\n            curr->next = succ;\n            if (succ) {\n                copy->next = succ->next;\n                copy = succ->next;\n            }\n            curr = succ;\n        }\n\n        return new_head;\n    }\n};\n\n"},"Linked List/Insert into a Cyclic Sorted List.html":{"url":"Linked List/Insert into a Cyclic Sorted List.html","title":"Insert into a Cyclic Sorted List","keywords":"","body":"Problem\nLintCode 599. Insert into a Cyclic Sorted List\nhttps://www.lintcode.com/problem/insert-into-a-cyclic-sorted-list/description\nSolution\n/**\n * Definition of ListNode\n * class ListNode {\n * public:\n *     int val;\n *     ListNode *next;\n *     ListNode(int val) {\n *         this->val = val;\n *         this->next = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param node: a list node in the list\n     * @param x: An integer\n     * @return: the inserted new list node\n     */\n    ListNode * insert(ListNode * node, int x) {\n        // write your code here\n\n        if (!node) {\n            auto new_node = new ListNode(x);\n            new_node->next = new_node;\n            return new_node;\n        }\n\n        ListNode* pred = nullptr;\n        ListNode* curr = node;\n\n        do {\n            pred = curr;\n            curr = curr->next;\n\n            // We are at the ascending slope.\n            if (pred->val val) {\n                break;\n            }\n\n            // We are at the peak.\n            if (pred->val > curr->val && (x > pred->val || x val)) {\n                break;\n            }\n        } while (curr != node);\n\n        auto new_node = new ListNode(x);\n        pred->next = new_node;\n        new_node->next = curr;\n\n        return node;\n    }\n};\n\n"},"Linked List/Reverse Linked List II.html":{"url":"Linked List/Reverse Linked List II.html","title":"Reverse Linked List II","keywords":"","body":"Problem\nLintCode 36. Reverse Linked List II\nhttps://www.lintcode.com/problem/reverse-linked-list-ii/description\nSolution\n/**\n * Definition of singly-linked-list:\n * class ListNode {\n * public:\n *     int val;\n *     ListNode *next;\n *     ListNode(int val) {\n *        this->val = val;\n *        this->next = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param head: ListNode head is the head of the linked list\n     * @param m: An integer\n     * @param n: An integer\n     * @return: The head of the reversed ListNode\n     */\n    ListNode * reverseBetween(ListNode * head, int m, int n) {\n        // write your code here\n\n        if (!head || m == n) {\n            return head;\n        }\n\n        // Use the dummy node to simplify the reversing procedure.\n        auto dummy = new ListNode(-1);\n        dummy->next = head;\n\n        auto pred_bgn = dummy;\n        auto curr_bgn = head;\n\n        /**\n         *       pb   cb\n         *   d -> 1 -> 2 -> 3 -> 4 -> 5\n         */\n        for (int i = 0 ; i next;\n        }\n\n        /**\n         *      pb\n         *  d -> 1 ->\n         *                pe ce\n         *    next;\n            curr_end->next = pred_end;\n            pred_end = curr_end;\n            curr_end = succ;\n        }\n\n        // 2 -> 5\n        pred_bgn->next->next = curr_end;\n\n        // 1 -> 4\n        pred_bgn->next = pred_end;\n\n        // d -> 1 -> 4 -> 3 -> 2 -> 5\n        auto new_head = dummy->next;\n\n        delete dummy;\n        return new_head;\n    }\n};\n\n"},"Linked List/Partition List.html":{"url":"Linked List/Partition List.html","title":"Partition List","keywords":"","body":"Problem\nLintCode 96. Partition List\nhttps://www.lintcode.com/problem/partition-list/description\nSolution\n/**\n * Definition of singly-linked-list:\n * class ListNode {\n * public:\n *     int val;\n *     ListNode *next;\n *     ListNode(int val) {\n *        this->val = val;\n *        this->next = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param head: The first node of linked list\n     * @param x: An integer\n     * @return: A ListNode\n     */\n    ListNode * partition(ListNode * head, int x) {\n        // write your code here\n\n        /**\n         *       cl        pr   cr\n         *        |         |    |\n         *        v         v    v\n         *   d -> 1 -> 4 -> 3 -> 2 -> 5 -> 2 ->\n         *\n         *   Changes:\n         *   pr->next = cr->next  (3 -> 5)\n         *   cl->next = cr        (1 -> 2)\n         *   cr->next = cl->next  (2 -> 4)\n         */\n\n        auto dummy = new ListNode(-1);\n        dummy->next = head;\n\n        auto cl = dummy;\n        while (cl->next && cl->next->val next;\n        }\n\n        auto pr = cl;\n        auto cr = cl->next;\n        while (cr) {\n            if (cr->val next;\n\n                pr->next = succ;\n                cr->next = cl->next;\n                cl->next = cr;\n\n                cl = cr;\n                cr = succ;\n            } else {\n                pr = cr;\n                cr = cr->next;\n            }\n        }\n\n        auto new_head = dummy->next;\n        delete dummy;\n        return new_head;\n    }\n};\n\n"},"Linked List/Sort List.html":{"url":"Linked List/Sort List.html","title":"Sort List","keywords":"","body":"Problem\nLintCode 98. Sort List\nhttps://www.lintcode.com/problem/sort-list/leaderboard\nSolution\n/**\n * Definition of singly-linked-list:\n * class ListNode {\n * public:\n *     int val;\n *     ListNode *next;\n *     ListNode(int val) {\n *        this->val = val;\n *        this->next = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param head: The head of linked list.\n     * @return: You should return the head of the sorted linked list, using constant space complexity.\n     */\n    ListNode * sortList(ListNode * head) {\n        // write your code here\n\n        if (!head) {\n            return nullptr;\n        }\n\n        return mergeSort(head, nullptr);\n    }\n\nprivate:\n    ListNode* mergeSort(ListNode* bgn, ListNode* end) {\n\n        if (bgn->next == end) {\n            bgn->next = nullptr;\n            return bgn;\n        }\n\n        // Find the middle node of the list.\n        auto curr = bgn;\n        auto pred = bgn;\n\n        while (curr != end) {\n            pred = pred->next;\n            curr = curr->next;\n            if (curr != end) {\n                curr = curr->next;\n            }\n        }\n\n        auto left = mergeSort(bgn, pred);\n        auto right = mergeSort(pred, end);\n\n        // Merge two sorted lists.\n        auto dummy = new ListNode(-1);\n        curr = dummy;\n\n        while (left && right) {\n            if (left->val val) {\n                curr->next = left;\n                left = left->next;\n            } else {\n                curr->next = right;\n                right = right->next;\n            }\n            curr = curr->next;\n        }\n\n        while (left) {\n            curr->next = left;\n            curr = curr->next;\n            left = left->next;\n        }\n        while (right) {\n            curr->next = right;\n            curr = curr->next;\n            right = right->next;\n        }\n\n        auto head = dummy->next;\n        delete dummy;\n        return head;\n    }\n};\n\n"},"Linked List/Convert Binary Tree to Linked List by Depth.html":{"url":"Linked List/Convert Binary Tree to Linked List by Depth.html","title":"Convert Binary Tree to Linked List by Depth","keywords":"","body":"Problem\nLintCode 242. Convert Binary Tree to Linked List by Depth\nhttps://www.lintcode.com/problem/convert-binary-tree-to-linked-lists-by-depth/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * @param root the root of binary tree\n     * @return a lists of linked list\n     */\n    vector binaryTreeToLists(TreeNode* root) {\n        // Write your code here\n\n        if (!root) {\n            return {};\n        }\n\n        std::queue queue;\n        queue.push(root);\n\n        auto dummy = new ListNode(-1);\n        std::vector ans;\n\n        while (!queue.empty()) {\n            int n = queue.size();\n            auto pred = dummy;\n\n            for (int i = 0 ; i val);\n                pred->next = curr;\n                pred = curr;\n\n                if (node->left) {\n                    queue.push(node->left);\n                }\n                if (node->right) {\n                    queue.push(node->right);\n                }\n            }\n\n            ans.push_back(dummy->next);\n        }\n\n        delete dummy;\n        return ans;\n    }\n};\n\n"},"General BFS/Clone Graph.html":{"url":"General BFS/Clone Graph.html","title":"Clone Graph","keywords":"","body":"Problem\nLintCode 137. Clone Graph\nhttps://www.lintcode.com/problem/clone-graph/description\nSolution\n/**\n * Definition for undirected graph.\n * struct UndirectedGraphNode {\n *     int label;\n *     vector neighbors;\n *     UndirectedGraphNode(int x) : label(x) {};\n * };\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param node: A undirected graph node\n     * @return: A undirected graph node\n     */\n    UndirectedGraphNode* cloneGraph(UndirectedGraphNode* node) {\n        // write your code here\n\n        if (!node) {\n            return nullptr;\n        }\n\n        std::queue queue;\n        queue.push(node);\n\n        std::unordered_map map;\n        map[node] = new UndirectedGraphNode(node->label);\n\n        while (!queue.empty()) {\n            auto origin = queue.front();\n            queue.pop();\n\n            auto clone = map[origin];\n            for (auto neighbor : origin->neighbors) {\n                if (map.count(neighbor) == 0) {\n                    map[neighbor] = new UndirectedGraphNode(neighbor->label);\n                    queue.push(neighbor);\n                }\n\n                clone->neighbors.push_back(map[neighbor]);\n            }\n        }\n\n        return map[node];\n    }\n};\n\n"},"General BFS/The Maze.html":{"url":"General BFS/The Maze.html","title":"The Maze","keywords":"","body":"Problem\nLintCode 787. The Maze\nhttps://www.lintcode.com/problem/the-maze/description\nSolution\n\nstruct Record {\n    int x, y;\n\n    Record(int x, int y)\n      : x(x), y(y)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param maze: the maze\n     * @param start: the start\n     * @param destination: the destination\n     * @return: whether the ball could stop at the destination\n     */\n    bool hasPath(vector> &maze, vector &start, vector &destination) {\n        // write your code here\n\n        int num_r = maze.size();\n        if (num_r == 0) {\n            return false;\n        }\n\n        int num_c = maze[0].size();\n        if (num_c == 0) {\n            return false;\n        }\n\n        std::vector>\n            visit(num_r, std::vector(num_c, false));\n        visit[start[0]][start[1]] = true;\n\n        std::queue queue;\n        queue.push(Record(start[0], start[1]));\n\n        while (!queue.empty()) {\n\n            auto rec = queue.front();\n            queue.pop();\n\n            int x = rec.x;\n            int y = rec.y;\n\n            for (const auto& direct : directs) {\n                int nx = x + direct[0];\n                int ny = y + direct[1];\n\n                while ((nx >= 0 && ny >= 0 && nx > directs;\n};\n\n"},"General BFS/Open the Lock.html":{"url":"General BFS/Open the Lock.html","title":"Open the Lock","keywords":"","body":"Problem\nLintCode 796. Open the Lock\nhttps://www.lintcode.com/problem/open-the-lock/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param deadends: the list of deadends\n     * @param target: the value of the wheels that will unlock the lock\n     * @return: the minimum total number of turns\n     */\n    int openLock(vector &deadends, string &target) {\n        // Write your code here\n\n        /**\n         *  0000\n         *\n         *  1000 0100 0010 0001\n         *  9000 0900 0090 0009\n         */\n\n        std::unordered_set deadlocks;\n        for (auto&& word : deadends) {\n            deadlocks.emplace(std::move(word));\n        }\n\n        if (deadlocks.count(target) == 1|| deadlocks.count(\"0000\") == 1) {\n            return -1;\n        }\n\n        std::unordered_set visit;\n        visit.emplace(\"0000\");\n\n        std::queue queue;\n        queue.push(\"0000\");\n\n        int step = 0;\n        while (!queue.empty()) {\n\n            ++step;\n            int n = queue.size();\n            for (int i = 0 ; i \n"},"General BFS/Sliding Puzzle II.html":{"url":"General BFS/Sliding Puzzle II.html","title":"Sliding Puzzle II","keywords":"","body":"Problem\nLintCode 794. Sliding Puzzle II\nhttps://www.lintcode.com/problem/sliding-puzzle-ii/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param init_state: the initial state of chessboard\n     * @param final_state: the final state of chessboard\n     * @return: return an integer, denote the number of minimum moving\n     */\n    int minMoveStep(vector> &init_state, vector> &final_state) {\n        // # write your code here\n\n        auto init = toString(init_state);\n        auto final = toString(final_state);\n\n        std::queue queue;\n        queue.push(init);\n\n        std:unordered_set visit;\n        visit.insert(init);\n\n        int step = 0;\n\n        while (!queue.empty()) {\n\n            ++step;\n            int n = queue.size();\n            for (int i = 0 ; i = 0 && nc >= 0 && nr > directs;\n\n    std::string toString(auto& board) {\n\n        std::string encode;\n\n        for (int i = 0 ; i (board[i][j] + '0'));\n            }\n        }\n\n        return encode;\n    }\n};\n\n"},"General DFS/N Queens.html":{"url":"General DFS/N Queens.html","title":"N Queens","keywords":"","body":"Problem\nLintCode 33. N-Queens\nhttps://www.lintcode.com/problem/n-queens/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param n: The number of queens\n     * @return: All distinct solutions\n     */\n    vector> solveNQueens(int n) {\n        // write your code here\n\n        std::vector> ans;\n        if (n == 0) {\n            return ans;\n        }\n\n        std::vector queens;\n        runBackTracking(0, n, queens, ans);\n        return ans;\n    }\n\n\nprivate:\n    void runBackTracking(\n            int index, int dim,\n            std::vector queens,\n            std::vector>& ans) {\n\n        if (index == dim) {\n            std::string row;\n            for (int i = 0 ; i  config(dim, row);\n\n            for (int c = 0 ; c \n"},"General DFS/Letter Combinations of a Phone Number.html":{"url":"General DFS/Letter Combinations of a Phone Number.html","title":"Letter Combination of a Phone Number","keywords":"","body":"Problem\nLintCode 425. Letter Combinations of a Phone Number\nhttps://www.lintcode.com/problem/letter-combinations-of-a-phone-number/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({\n          {'2', {'a', 'b', 'c'}},\n          {'3', {'d', 'e', 'f'}},\n          {'4', {'g', 'h', 'i'}},\n          {'5', {'j', 'k', 'l'}},\n          {'6', {'m', 'n', 'o'}},\n          {'7', {'p', 'q', 'r', 's'}},\n          {'8', {'t', 'u', 'v'}},\n          {'9', {'w', 'x', 'y', 'z'}},\n      })\n    { }\n\n    /**\n     * @param digits: A digital string\n     * @return: all posible letter combinations\n     */\n    vector letterCombinations(string &digits) {\n        // write your code here\n\n        std::vector ans;\n        if (digits.empty()) {\n            return ans;\n        }\n\n        std::string config;\n        runBackTracking(0, digits.length(), digits, config, ans);\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            int index, int bound,\n            const std::string& digits,\n            std::string& config,\n            std::vector& ans) {\n\n        if (index == bound) {\n            ans.push_back(config);\n            return;\n        }\n\n        char digit = digits[index];\n        for (char ch : map[digit]) {\n            config.push_back(ch);\n            runBackTracking(index + 1, bound, digits, config, ans);\n            config.pop_back();\n        }\n    }\n\n    std::unordered_map> map;\n};\n\n"},"General DFS/Sudoku Solver.html":{"url":"General DFS/Sudoku Solver.html","title":"Sudoku Solver","keywords":"","body":"Problem\nLintCode 802. Sudoku Solver\nhttps://www.lintcode.com/problem/sudoku-solver/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param board: the sudoku puzzle\n     * @return: nothing\n     */\n    void solveSudoku(vector> &board) {\n        // write your code here\n\n        std::vector> use_rows(9, std::vector(9, false));\n        std::vector> use_cols(9, std::vector(9, false));\n        std::vector> use_grids(9, std::vector(9, false));\n\n        for (int i = 0 ; i >& board,\n            std::vector>& use_rows,\n            std::vector>& use_cols,\n            std::vector>& use_grids) {\n\n        if (count == bound) {\n            return true;\n        }\n\n        int x = count / 9;\n        int y = count % 9;\n\n        if (board[x][y] != 0) {\n            return runBacktracking(\n                count + 1, bound, board, use_rows, use_cols, use_grids);\n        }\n\n        for (int i = 0 ; i \n"},"General DFS/Palindrome Partitioning.html":{"url":"General DFS/Palindrome Partitioning.html","title":"Palindrome Partitioning","keywords":"","body":"Problem\nLintCode 136. Palindrome Partitioning\nhttps://www.lintcode.com/problem/palindrome-partitioning/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param s: A string\n     * @return: A list of lists of string\n     */\n    vector> partition(string &s) {\n        // write your code here\n\n        int n = s.length();\n        if (n == 0) {\n            return {};\n        }\n\n        std::vector collect;\n        std::vector> ans;\n\n        // Cache the substring str(i, j). If the substring is palindromic, we\n        // cache its content. Otherwise, we cache a empty token.\n        std::unordered_map> memo;\n\n        runBackTracking(s, 0, n, collect, ans, memo);\n\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n        const std::string& str,\n        int index, int bound,\n        std::vector& collect,\n        std::vector>& ans,\n        std::unordered_map>& memo) {\n\n        if (index == bound) {\n            ans.push_back(collect);\n            return;\n        }\n\n        for (int i = index ; i \n"},"General DFS/Remove Invalid Parentheses.html":{"url":"General DFS/Remove Invalid Parentheses.html","title":"Remove Invalid Parentheses","keywords":"","body":"Problem\nLintCode 780. Remove Invalid Parentheses\nhttps://www.lintcode.com/problem/remove-invalid-parentheses/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: The input string\n     * @return: Return all possible results\n     */\n    vector removeInvalidParentheses(string &str) {\n        // Write your code here\n\n        int l = 0, r = 0;\n        for (char ch : str) {\n            if (ch == '(') {\n                ++l;\n            }\n            if (ch == ')') {\n                if (l > 0) {\n                    --l;\n                } else {\n                    ++r;\n                }\n            }\n        }\n\n        std::vector ans;\n        runBackTracking(str, 0, str.length(), l, r, ans);\n        return ans;\n    }\n\nprivate:\n    bool isValid(const auto& str) {\n\n        int count = 0;\n        for (char ch : str) {\n            if (ch == '(') {\n                ++count;\n            }\n            if (ch == ')') {\n                --count;\n            }\n\n            if (count  bgn && str[i] == str[i - 1]) {\n                continue;\n            }\n\n            if (r > 0 && str[i] == ')') {\n                auto copy(str);\n                copy.erase(i, 1);\n                runBackTracking(copy, i, end - 1, l, r - 1, ans);\n            }\n\n            if (l > 0 && str[i] == '(') {\n                auto copy(str);\n                copy.erase(i, 1);\n                runBackTracking(copy, i, end - 1, l - 1, r, ans);\n            }\n        }\n    }\n};\n\n"},"General DFS/Reconstruct Itinerary.html":{"url":"General DFS/Reconstruct Itinerary.html","title":"Reconstruct Itinerary","keywords":"","body":"Problem\nLintCode 1288. Reconstruct Itinerary\nhttps://www.lintcode.com/problem/reconstruct-itinerary/description\nSolution\n\nstruct Record {\n    string node;\n    bool used;\n\n    Record(const auto& node, bool used)\n        : node(node), used(used)\n    { }\n};\n\nclass Solution {\npublic:\n    vector findItinerary(vector>& tickets) {\n\n        unordered_map> map;\n        for (const auto& ticket : tickets) {\n            map[ticket[0]].emplace_back(ticket[1], false);\n        }\n\n        for (auto& pair : map) {\n            std::sort(pair.second.begin(), pair.second.end(),\n                [] (const auto& lhs, const auto& rhs) {\n                    return lhs.node  ans;\n        ans.push_back(\"JFK\");\n        runBackTracking(1, tickets.size() + 1, \"JFK\", map, ans);\n\n        return ans;\n    }\n\nprivate:\n    bool runBackTracking(\n        int c, int n, const auto& src, auto& map, auto& ans) {\n\n        if (c == n) {\n            return true;\n        }\n\n        auto& dsts = map[src];\n        for (auto& dst : dsts) {\n            if (dst.used) {\n                continue;\n            }\n\n            dst.used = true;\n            ans.emplace_back(dst.node);\n\n            bool res = runBackTracking(c + 1, n, dst.node, map, ans);\n            if (res) {\n                return true;\n            }\n\n            ans.pop_back();\n            dst.used = false;\n        }\n\n        return false;\n    }\n};\n\n"},"Combination DFS/Subsets.html":{"url":"Combination DFS/Subsets.html","title":"Subsets","keywords":"","body":"Problem\nLintCode 17. Subsets\nhttps://www.lintcode.com/problem/subsets/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A set of numbers\n     * @return: A list of lists\n     */\n    vector> subsets(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return {{}};\n        }\n\n        std::sort(nums.begin(), nums.end());\n\n        std::vector collect;\n        std::vector> ans;\n        for (int i = 0 ; i & nums,\n            int index, int bound,\n            int k, int n,\n            std::vector& collect,\n            std::vector>& ans) {\n\n        if (k == n) {\n            ans.push_back(collect);\n            return;\n        }\n\n        for (int i = index ; i \n"},"Combination DFS/Subsets II.html":{"url":"Combination DFS/Subsets II.html","title":"Subsets II","keywords":"","body":"Problem\nLintCode 18. Subsets II\nhttps://www.lintcode.com/problem/subsets-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A set of numbers.\n     * @return: A list of lists. All valid subsets.\n     */\n    vector> subsetsWithDup(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return {{}};\n        }\n\n        std::sort(nums.begin(), nums.end());\n\n        std::vector collect;\n        std::vector> ans;\n        for (int i = 0 ; i & nums,\n            int index, int bound,\n            int k, int n,\n            std::vector& collect,\n            std::vector>& ans) {\n\n        if (k == n) {\n            ans.push_back(collect);\n            return;\n        }\n\n        for (int i = index ; i  index && nums[i] == nums[i - 1]) {\n                continue;\n            }\n\n            collect.push_back(nums[i]);\n            runBackTracking(nums, i + 1, bound, k + 1, n, collect, ans);\n            collect.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/Combination Sum.html":{"url":"Combination DFS/Combination Sum.html","title":"Combination Sum","keywords":"","body":"Problem\nLintCode 135. Combination Sum\nhttps://www.lintcode.com/problem/combination-sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param candidates: A list of integers\n     * @param target: An integer\n     * @return: A list of lists of integers\n     */\n    vector> combinationSum(vector &cands, int target) {\n        // write your code here\n\n        int n = cands.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::sort(cands.begin(), cands.end());\n\n        std::vector collect;\n        std::vector> ans;\n        runBackTracking(cands, 0, 0, n, target, collect, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            const std::vector& cands,\n            int index, int depth, int bound,\n            int target,\n            std::vector& collect,\n            std::vector>& ans) {\n\n        if (target == 0) {\n            ans.push_back(collect);\n            return;\n        }\n\n        for (int i = index ; i  index && cands[i] == cands[i - 1]) {\n                continue;\n            }\n\n            if (cands[i] > target) {\n                break;\n            }\n\n            collect.push_back(cands[i]);\n            runBackTracking(\n                cands, i, depth + 1, bound, target - cands[i], collect, ans);\n            collect.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/Combination Sum II.html":{"url":"Combination DFS/Combination Sum II.html","title":"Combination Sum II","keywords":"","body":"Problem\nLintCode 153. Combination Sum II\nhttps://www.lintcode.com/problem/combination-sum-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param num: Given the candidate numbers\n     * @param target: Given the target number\n     * @return: All the combinations that sum to target\n     */\n    vector> combinationSum2(vector &cands, int target) {\n        // write your code here\n\n        int n = cands.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::sort(cands.begin(), cands.end());\n\n        std::vector collect;\n        std::vector> ans;\n        runBackTracking(cands, 0, n, target, collect, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            const std::vector& cands,\n            int index, int bound,\n            int target,\n            std::vector& collect,\n            std::vector>& ans) {\n\n        if (target == 0) {\n            ans.push_back(collect);\n            return;\n        }\n\n        for (int i = index ; i  index && cands[i] == cands[i - 1]) {\n                continue;\n            }\n\n            if (cands[i] > target) {\n                break;\n            }\n\n            collect.push_back(cands[i]);\n            runBackTracking(\n                cands, i + 1, bound, target - cands[i], collect, ans);\n            collect.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/K Sum II.html":{"url":"Combination DFS/K Sum II.html","title":"K Sum II","keywords":"","body":"Problem\nLintCode 90. K Sum II\nhttps://www.lintcode.com/problem/k-sum-ii/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param A: an integer array\n     * @param k: a postive integer > kSumII(vector &cands, int k, int target) {\n        // write your code here\n\n        int n = cands.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::sort(cands.begin(), cands.end());\n\n        std::vector collect;\n        std::vector> ans;\n        runBackTracking(cands, 0, n, 0, k, target, collect, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            const std::vector& cands,\n            int index, int bound, int depth, int k,\n            int target,\n            std::vector& collect,\n            std::vector>& ans) {\n\n        if (depth == k) {\n            if (target == 0) {\n                ans.push_back(collect);\n            }\n            return;\n        }\n\n        for (int i = index ; i  target) {\n                break;\n            }\n\n            collect.push_back(cands[i]);\n            runBackTracking(\n                cands, i + 1, bound, depth + 1, k, target - cands[i], collect, ans);\n            collect.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/Split String.html":{"url":"Combination DFS/Split String.html","title":"Split String","keywords":"","body":"Problem\nLintCode 680. Split String\nhttps://www.lintcode.com/problem/split-string/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param : a string to be split\n     * @return: all possible split string array\n     */\n    vector> splitString(string& s) {\n        // write your code here\n\n        int n = s.length();\n        if (n == 0) {\n            return {{}};\n        }\n\n        std::vector collect;\n        std::vector> ans;\n        runBackTracking(s, 0, n, collect, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            const std::string& str,\n            int index, int bound,\n            std::vector& collect,\n            std::vector>& ans) {\n\n        if (index == bound) {\n            ans.push_back(collect);\n            return;\n        }\n\n        auto token = str.substr(index, 1);\n        collect.push_back(token);\n        runBackTracking(str, index + 1, bound, collect, ans);\n        collect.pop_back();\n\n        if (index + 1 \n"},"Permutation DFS/Permutations.html":{"url":"Permutation DFS/Permutations.html","title":"Permutations","keywords":"","body":"Problem\nLintCode 15. Permutations\nhttps://www.lintcode.com/problem/permutations/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param nums: A list of integers.\n     * @return: A list of permutations.\n     */\n    vector> permute(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return {{}};\n        }\n\n        std::vector use(n, false);\n        std::vector perm;\n        std::vector> ans;\n        runBackTracking(nums, 0, n, use, perm, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            const std::vector& nums,\n            int depth, int bound,\n            std::vector& use,\n            std::vector& perm,\n            std::vector>& ans) {\n\n        if (depth == bound) {\n            ans.push_back(perm);\n            return;\n        }\n\n        for (int i = 0 ; i \n"},"Permutation DFS/Permutations II.html":{"url":"Permutation DFS/Permutations II.html","title":"Permutations II","keywords":"","body":"Problem\nLintCode 16. Permutations II\nhttps://www.lintcode.com/problem/permutations-ii/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param :  A list of integers\n     * @return: A list of unique permutations\n     */\n    vector> permuteUnique(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return {{}};\n        }\n\n        std::sort(nums.begin(), nums.end());\n\n        std::vector use(n, false);\n        std::vector perm;\n        std::vector> ans;\n        runBackTracking(nums, 0, n, use, perm, ans);\n\n        return ans;\n    }\n\n\nprivate:\n    void runBackTracking(\n            const std::vector& nums,\n            int depth, int bound,\n            std::vector& use,\n            std::vector& perm,\n            std::vector>& ans) {\n\n        if (depth == bound) {\n            ans.push_back(perm);\n            return;\n        }\n\n        for (int i = 0 ; i  0 && nums[i] == nums[i - 1] && !use[i - 1]) {\n                continue;\n            }\n\n            use[i] = true;\n            perm.push_back(nums[i]);\n            runBackTracking(nums, depth + 1, bound, use, perm, ans);\n            perm.pop_back();\n            use[i] = false;\n        }\n    }\n};\n\n"},"Permutation DFS/Next Permutation.html":{"url":"Permutation DFS/Next Permutation.html","title":"Next Permutation","keywords":"","body":"Problem\nLintCode 52. Next Permutation\nhttps://www.lintcode.com/problem/next-permutation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integers\n     * @return: A list of integers\n     */\n    vector nextPermutation(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        if (n  0 && nums[i - 1] >= nums[i]) {\n            --i;\n        }\n\n        if (i == 0) {\n            // We already have the maximum permutation, so the next one is\n            // the minimum permutation.\n            swapSegment(nums, 0, n - 1);\n            return nums;\n        }\n\n        //   *  i && nums[j] & nums, int bgn, int end) {\n\n        while (bgn \n"},"Permutation DFS/Next Closest Time.html":{"url":"Permutation DFS/Next Closest Time.html","title":"Next Closest Time","keywords":"","body":"Problem\nLintCode 862. Next Closest Time\nhttps://www.lintcode.com/problem/next-closest-time/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param time: the given time\n     * @return: the next closest time\n     */\n    string nextClosestTime(string &time) {\n        // write your code here\n\n        std::vector pool;\n        pool.push_back(time[0] - '0');\n        pool.push_back(time[1] - '0');\n        pool.push_back(time[3] - '0');\n        pool.push_back(time[4] - '0');\n\n        int timestamp =\n            (pool[0] * 10 + pool[1]) * 60 + (pool[2] * 10 + pool[3]);\n\n        std::vector config;\n        std::vector opt(pool);\n        int diff = INT_MAX;\n\n        runBackTracking(pool, 0, 4, timestamp, diff, config, opt);\n\n        std::stringstream stream;\n        stream & pool,\n            int depth, int bound,\n            int timestamp,\n            int& diff,\n            std::vector& config,\n            std::vector& opt) {\n\n        if (depth == bound) {\n            int hour = config[0] * 10 + config[1];\n            if (hour > 23) {\n                return;\n            }\n\n            int minute = config[2] * 10 + config[3];\n            if (minute > 59) {\n                return;\n            }\n\n            int new_timestamp = hour * 60 + minute;\n            if (new_timestamp > 1440) {\n                return;\n            }\n\n            if (new_timestamp == timestamp) {\n                return;\n            }\n\n            int new_diff;\n            if (new_timestamp > timestamp) {\n                new_diff = new_timestamp - timestamp;\n            } else {\n                new_diff = (1440 - timestamp) + new_timestamp;\n            }\n\n            if (new_diff \n"},"Interval Query/Merge Intervals.html":{"url":"Interval Query/Merge Intervals.html","title":"Merge Intervals","keywords":"","body":"Problem\nLintCode 156. Merge Intervals\nhttps://www.lintcode.com/problem/merge-intervals/description\nSolution\n/**\n * Definition of Interval:\n * classs Interval {\n *     int start, end;\n *     Interval(int start, int end) {\n *         this->start = start;\n *         this->end = end;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param intervals: interval list.\n     * @return: A new interval list.\n     */\n    vector merge(vector &intervals) {\n        // write your code here\n\n        int n = intervals.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::sort(intervals.begin(), intervals.end(),\n            [] (const auto& lhs, const auto& rhs) {\n                return lhs.start  ans;\n        Interval merge(intervals[0]);\n\n        for (int i = 1 ; i \n"},"Interval Query/Insert Interval.html":{"url":"Interval Query/Insert Interval.html","title":"Insert Interval","keywords":"","body":"Problem\nLintCode 30. Insert Interval\nhttps://www.lintcode.com/problem/insert-interval/description\nSolution\n/**\n * Definition of Interval:\n * classs Interval {\n *     int start, end;\n *     Interval(int start, int end) {\n *         this->start = start;\n *         this->end = end;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param intervals: Sorted interval list.\n     * @param newInterval: new interval.\n     * @return: A new interval list.\n     */\n    vector insert(vector &intervals, Interval newInterval) {\n        // write your code here\n\n        int n = intervals.size();\n        if (n == 0) {\n            return {newInterval};\n        }\n\n        int l = 0, r = n - 1;\n        while (l + 1  ans;\n        Interval merge(intervals[0]);\n\n        for (int i = 1 ; i \n"},"Sweep Line/Number of Airplanes in the Sky.html":{"url":"Sweep Line/Number of Airplanes in the Sky.html","title":"Number of Airplanes in the Sky","keywords":"","body":"Problem\nLintCode 391. Number of Airplanes in the Sky\nhttps://www.lintcode.com/problem/number-of-airplanes-in-the-sky/description\nSolution\n/**\n * Definition of Interval:\n * classs Interval {\n *     int start, end;\n *     Interval(int start, int end) {\n *         this->start = start;\n *         this->end = end;\n *     }\n * }\n */\n\n\nstruct Record {\n    int time;\n    char type;\n\n    Record(int time, char type)\n      : time(time), type(type)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param airplanes: An interval array\n     * @return: Count of airplanes are in the sky.\n     */\n    int countOfAirplanes(vector &airplanes) {\n        // write your code here\n\n        /**\n         *\n         *          *******\n         *\n         *            *******\n         *\n         *      ***\n         *\n         *    *******************\n         *  0 1 2 3 4 5 6 7 8 9 10\n         *\n         */\n\n        std::vector records;\n\n        for (const auto& airplane : airplanes) {\n            records.push_back(Record(airplane.start, Event::TAKE_OFF));\n            records.push_back(Record(airplane.end, Event::LAND));\n        }\n\n        std::sort(records.begin(), records.end(),\n            [] (const auto& lhs, const auto& rhs) {\n                if (lhs.time == rhs.time) {\n                    return lhs.type \n"},"Sweep Line/Time Intersection.html":{"url":"Sweep Line/Time Intersection.html","title":"Time Intersection","keywords":"","body":"Problem\nLintCode 821. Time Intersection\nhttps://www.lintcode.com/problem/time-intersection/description\nSolution\n/**\n * Definition of Interval:\n * classs Interval {\n *     int start, end;\n *     Interval(int start, int end) {\n *         this->start = start;\n *         this->end = end;\n *     }\n * }\n */\n\n\nstruct Record {\n    int time;\n    char event;\n\n    Record(int time, char event)\n      : time(time), event(event)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param seqA: the list of intervals\n     * @param seqB: the list of intervals\n     * @return: the time periods\n     */\n    vector timeIntersection(vector &seqA, vector &seqB) {\n        // Write your code here\n\n        /**\n         *  ***********\n         *\n         *  ***     **************\n         *\n         *  1 2 3 4 5 6 ... ... 100\n         */\n\n        std::vector recs;\n\n        for (const auto& seq : seqA) {\n            recs.push_back(Record(seq.start, Event::LOG_IN));\n            recs.push_back(Record(seq.end, Event::LOG_OUT));\n        }\n        for (const auto& seq : seqB) {\n            recs.push_back(Record(seq.start, Event::LOG_IN));\n            recs.push_back(Record(seq.end, Event::LOG_OUT));\n        }\n\n        std::sort(recs.begin(), recs.end(),\n            [] (const auto& lhs, const auto& rhs) {\n                if (lhs.time == rhs.time) {\n                    return lhs.event  ans;\n        Interval interval;\n        int count = 0;\n\n        for (const auto& rec : recs) {\n            if (rec.event == Event::LOG_IN) {\n                ++count;\n                if (count == 2) {\n                    interval.start = rec.time;\n                }\n            } else {\n                if (count == 2) {\n                    interval.end = rec.time;\n                    ans.push_back(interval);\n                }\n                --count;\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    enum Event {\n        LOG_OUT,\n        LOG_IN\n    };\n};\n\n"},"Sweep Line/Meeting Rooms.html":{"url":"Sweep Line/Meeting Rooms.html","title":"Meeting Rooms","keywords":"","body":"Problem\nLintCode 920. Meeting Rooms\nhttps://www.lintcode.com/problem/meeting-rooms/description\nSolution\n/**\n * Definition of Interval:\n * classs Interval {\n *     int start, end;\n *     Interval(int start, int end) {\n *         this->start = start;\n *         this->end = end;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param intervals: an array of meeting time intervals\n     * @return: if a person could attend all meetings\n     */\n    bool canAttendMeetings(vector &intervals) {\n        // Write your code here\n\n        int n = intervals.size();\n        if (n == 0) {\n            return true;\n        }\n\n        std::sort(intervals.begin(), intervals.end(),\n            [] (const Interval& lhs, const Interval& rhs) {\n                if (lhs.start == rhs.start) {\n                    return lhs.end \n"},"Sweep Line/Meeting Rooms II.html":{"url":"Sweep Line/Meeting Rooms II.html","title":"Meeting Rooms II","keywords":"","body":"Problem\nLintCode 919. Meeting Rooms II\nhttps://www.lintcode.com/problem/meeting-rooms-ii/description\nSolution\n/**\n * Definition of Interval:\n * classs Interval {\n *     int start, end;\n *     Interval(int start, int end) {\n *         this->start = start;\n *         this->end = end;\n *     }\n * }\n */\n\nstruct Record {\n    int time;\n    char type;\n\n    Record(int time, char type)\n      : time(time), type(type)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param intervals: an array of meeting time intervals\n     * @return: the minimum number of conference rooms required\n     */\n    int minMeetingRooms(vector &intervals) {\n        // Write your code here\n\n        /**\n         *\n         *    ****  ****\n         *\n         *  ******************\n         *\n         *  0 5 10 15 20 25 30\n         *\n         */\n\n        std::vector recs;\n        for (const auto& interval : intervals) {\n            recs.push_back(Record(interval.start, Event::BGN));\n            recs.push_back(Record(interval.end, Event::END));\n        }\n\n        std::sort(recs.begin(), recs.end(),\n            [] (const auto& lhs, const auto& rhs) {\n                if (lhs.time == rhs.time) {\n                    return lhs.type \n"},"Topological Sort/Course Schedule.html":{"url":"Topological Sort/Course Schedule.html","title":"Course Schedule","keywords":"","body":"Problem\nLintCode 615. Course Schedule\nhttps://www.lintcode.com/problem/course-schedule/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param numCourses: a total of n courses\n     * @param prerequisites: a list of prerequisite pairs\n     * @return: true if can finish all courses or false\n     */\n    bool canFinish(int numCourses, vector>& prerequisites) {\n        // write your code here\n\n        std::unordered_map> graph;\n        std::unordered_map indegree;\n\n        for (const auto& pair : prerequisites) {\n            int src = pair.first;\n            int dst = pair.second;\n\n            graph[src].push_back(dst);\n            ++indegree[dst];\n        }\n\n        std::queue queue;\n        for (int i = 0 ; i  order;\n        while (!queue.empty()) {\n            int src = queue.front();\n            queue.pop();\n\n            order.push_back(src);\n\n            for (int dst : graph[src]) {\n                --indegree[dst];\n                if (indegree[dst] == 0) {\n                    queue.push(dst);\n                }\n            }\n        }\n\n        return order.size() == numCourses;\n    }\n};\n\n"},"Topological Sort/Sequence Reconstruction.html":{"url":"Topological Sort/Sequence Reconstruction.html","title":"Sequence Reconstruction","keywords":"","body":"Problem\nLintCode 605. Sequence Reconstruction\nhttps://www.lintcode.com/problem/sequence-reconstruction/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param org: a permutation of the integers from 1 to n\n     * @param seqs: a list of sequences\n     * @return: true if it can be reconstructed only one or false\n     */\n    bool sequenceReconstruction(vector &org, vector> &seqs) {\n        // write your code here\n\n        std::unordered_map> graph;\n        std::unordered_map indegree;\n        int size = 0;\n\n        for (const auto& edge : seqs) {\n\n            // Note that each single sequence is not an edge or a pair of nodes.\n            int n = edge.size();\n            for (int i = 0 ; i  queue;\n        int count = 0;\n        for (int i = 1 ; i  order;\n\n        while (!queue.empty()) {\n            count = queue.size();\n\n            // Have multiple candidates for a specific level.\n            if (count > 1) {\n                return false;\n            }\n\n            for (int i = 0 ; i \n"},"Topological Sort/Alien Dictionary.html":{"url":"Topological Sort/Alien Dictionary.html","title":"Alien Dictionary","keywords":"","body":"Problem\nLintCode 892. Alien Dictionary\nhttps://www.lintcode.com/problem/alien-dictionary/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param words: a list of words\n     * @return: a string which is correct order\n     */\n    string alienOrder(vector &words) {\n        // Write your code here\n\n        int num = words.size();\n        if (num == 0) {\n            return \"\";\n        }\n        if (num == 1 && words[0].length() == 1) {\n            return words[0];\n        }\n\n        std::unordered_map> graph;\n        std::unordered_map indeg;\n\n        for (int i = 1 ; i ();\n                }\n                if (graph.count(ch_dst) == 0) {\n                    graph[ch_dst] = std::unordered_set();\n                }\n\n                if (ch_src != ch_dst) {\n                    graph[ch_src].insert(ch_dst);\n                    ++indeg[ch_dst];\n                    break;\n                }\n            }\n\n            while (k ();\n                }\n            }\n            while (h ();\n                }\n            }\n        }\n\n        std::priority_queue, std::greater> queue;\n        for (const auto& pair : graph) {\n            char ch = pair.first;\n            if (indeg[ch] == 0) {\n                queue.push(ch);\n            }\n        }\n\n        std::string order;\n\n        while (!queue.empty()) {\n            char src = queue.top();\n            queue.pop();\n\n            order.push_back(src);\n\n            for (char dst : graph[src]) {\n                --indeg[dst];\n                if (indeg[dst] == 0) {\n                    queue.push(dst);\n                }\n            }\n        }\n\n        return order.length() == graph.size() ? order : \"\";\n    }\n};\n\n"},"Graph Theory Basics/Graph Valid Tree.html":{"url":"Graph Theory Basics/Graph Valid Tree.html","title":"Graph Valid Tree","keywords":"","body":"Problem\nLintCode 178. Graph Valid Tree\nhttps://www.lintcode.com/problem/graph-valid-tree/description\nSolution\n\nclass DisjointSet {\n\npublic:\n    DisjointSet(int n)\n      : parents(std::vector(n)) {\n\n        for (int i = 0 ; i  parents;\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @param edges: a list of undirected edges\n     * @return: true if it's a valid tree, or false\n     */\n    bool validTree(int n, vector> &edges) {\n        // write your code here\n\n        /**\n         * We can use the data structure, disjoint set and union find, to check\n         * if a graph is a valid tree. If the graph is a valid tree, it should\n         * fulfill the following 2 requirements.\n         *\n         *  1. Suppose the number of nodes is n, then the number of edges\n         *     should be n - 1.\n         *\n         *  2. The graph has only one connected component.\n         */\n\n        if (n == 0) {\n            return false;\n        }\n        if (edges.size() != n - 1) {\n            return false;\n        }\n\n        DisjointSet sets(n);\n\n        for (const auto& edge : edges) {\n            int x = edge[0];\n            int y = edge[1];\n\n            if (!sets.merge(x, y)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};\n\n"},"Graph Theory Basics/Minimum Spanning Tree.html":{"url":"Graph Theory Basics/Minimum Spanning Tree.html","title":"Minimum Spanning Tree","keywords":"","body":"Problem\nLintCode 629. Minimum Spanning Tree\nhttps://www.lintcode.com/problem/minimum-spanning-tree/description\nSolution\n/**\n * Definition for a Connection.\n * class Connection {\n * public:\n *   string city1, city2;\n *   int cost;\n *   Connection(string& city1, string& city2, int cost) {\n *       this->city1 = city1;\n *       this->city2 = city2;\n *       this->cost = cost;\n * }\n */\n\n\nclass DisjointSet {\npublic:\n    DisjointSet(int n)\n      : parent(std::vector(n)) {\n\n        for (int i = 0 ; i  parent;\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param connections given a list of connections include two cities and cost\n     * @return a list of connections from results\n     */\n    vector lowestCost(vector& connections) {\n        // Write your code here\n\n        std::unordered_map name_2_id;\n\n        int id = 0;\n        for (const auto& edge : connections) {\n            const auto& src = edge.city1;\n            const auto& dst = edge.city2;\n\n            if (name_2_id.count(src) == 0) {\n                name_2_id[src] = id;\n                ++id;\n            }\n            if (name_2_id.count(dst) == 0) {\n                name_2_id[dst] = id;\n                ++id;\n            }\n        }\n\n        DisjointSet set(id);\n\n        std::sort(connections.begin(), connections.end(),\n            [](const auto& lhs, const auto& rhs) {\n            if (lhs.cost == rhs.cost) {\n                int order = lhs.city1.compare(rhs.city1);\n                if (order == 0) {\n                    return lhs.city2  ans;\n        for (auto& edge : connections) {\n            auto& src = edge.city1;\n            auto& dst = edge.city2;\n\n            int src_id = name_2_id[src];\n            int dst_id = name_2_id[dst];\n\n            if (set.is_same(src_id, dst_id)) {\n                continue;\n            }\n            set.unite(src_id, dst_id);\n\n            ans.push_back(Connection(src, dst, edge.cost));\n        }\n\n        return (ans.size() == id - 1) ? ans : std::vector();\n    }\n};\n\n"},"Simulation Puzzle/Missing Ranges.html":{"url":"Simulation Puzzle/Missing Ranges.html","title":"Missing Ranges","keywords":"","body":"Problem\nLintCode 641. Missing Ranges\nhttps://www.lintcode.com/problem/missing-ranges/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param nums: a sorted integer array\n     * @param lower: An integer\n     * @param upper: An integer\n     * @return: a list of its missing ranges\n     */\n    vector findMissingRanges(vector &nums, int lower, int upper) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return {genRange(lower, upper)};\n        }\n\n        std::vector ans;\n\n        if (lower (nums[i]) - nums[i - 1];\n            if (diff  nums[n - 1]) {\n            ans.push_back(genRange(nums[n - 1] + 1, upper));\n        }\n\n        return ans;\n    }\n\nprivate:\n    std::string genRange(long bgn, long end) {\n\n        if (bgn == end) {\n            return std::to_string(bgn);\n        }\n\n        return std::to_string(bgn) + \"->\" + std::to_string(end);\n    }\n};\n\n"},"Simulation Puzzle/Integer to Roman.html":{"url":"Simulation Puzzle/Integer to Roman.html","title":"Integer to Roman","keywords":"","body":"Problem\nLintCode 418. Integer to Roman\nhttps://www.lintcode.com/problem/integer-to-roman/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({\n        {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"}, // 1    ~ 9\n        {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"}, // 10   ~ 90\n        {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}, // 100  ~ 900\n        {\"\", \"M\", \"MM\", \"MMM\"}                                        // 1000 ~ 3000\n      })\n    { }\n\n    string intToRoman(int num) {\n\n        return  map[3][num / 1000] +\n                map[2][(num % 1000) / 100] +\n                map[1][(num % 100) / 10] +\n                map[0][num % 10];\n    }\n\nprivate:\n    std::vector> map;\n};\n\n"},"Simulation Puzzle/Roman to Integer.html":{"url":"Simulation Puzzle/Roman to Integer.html","title":"Roman to Integer","keywords":"","body":"Problem\nLintCode 419. Roman to Integer\nhttps://www.lintcode.com/problem/roman-to-integer/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L', 50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}\n      })\n    { }\n\n    /**\n     * @param s: Roman representation\n     * @return: an integer\n     */\n    int romanToInt(string &s) {\n        // write your code here\n\n        /**\n         * Let's scan the string from the tail to the head.\n         *\n         * 1. If the value of a Roman character is greater than or etual to  the\n         *    value of its predecessor, the accumulative sum is the value of the\n         *    predecessor added by the value of the current character.\n         *\n         *    e.g.: VI = 1 + 5 = 6\n         *          VIII = 1 + 1 + 1 + 5 = 8\n         *\n         * 2. If the value of a Roman character is less than the value of its\n         *    predecessor, the accumulative sum is the value of the predecessor\n         *    subtracted by the value of the current character.\n         *\n         *    e.g.: IV = 5 - 1 = 4\n         */\n\n        int n = s.length();\n\n        int sum = map[s[n - 1]];\n\n        for (int i = n - 2 ; i >= 0 ; --i) {\n            if (map[s[i]] >= map[s[i + 1]]) {\n                sum += map[s[i]];\n            } else {\n                sum -= map[s[i]];\n            }\n        }\n\n        return sum;\n    }\n\nprivate:\n    std::unordered_map map;\n};\n\n"},"Simulation Puzzle/Find the Celebrity.html":{"url":"Simulation Puzzle/Find the Celebrity.html","title":"Find the Celebrity","keywords":"","body":"Problem\nLintCode 645. Find the Celebrity\nhttps://www.lintcode.com/problem/find-the-celebrity/description\nSolution\n// Forward declaration of the knows API.\nbool knows(int a, int b);\n\nclass Solution {\npublic:\n    /**\n     * @param n a party with n people\n     * @return the celebrity's label or -1\n     */\n    int findCelebrity(int n) {\n        // Write your code here\n\n        /**\n         * knows(a, b)\n         *\n         * 1. true  -> a knows b -> a is not the celebrity.\n         * 2. false -> a does not know b -> b is not the celebrity.\n         */\n\n        int a = 0, b = n - 1;\n        while (a \n"},"Simulation Puzzle/Largest Number.html":{"url":"Simulation Puzzle/Largest Number.html","title":"Largest Number","keywords":"","body":"Problem\nLintCode 184. Largest Number\nhttps://www.lintcode.com/problem/largest-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of non negative integers\n     * @return: A string\n     */\n    string largestNumber(vector &nums) {\n        // write your code here\n\n        /**\n         * A: 65, B: 6\n         *\n         * A + B = 656\n         * B + A = 665\n         *\n         * B + A > A + B => B > A\n         */\n\n        std::unordered_map radixes;\n        for (int num : nums) {\n            if (radixes.count(num) == 1) {\n                continue;\n            }\n            int radix = (num > 0) ?\n                static_cast(std::floor(std::log10(num))) + 1 : 1;\n            radixes[num] = radix;\n        }\n\n        std::sort(nums.begin(), nums.end(),\n            [&] (const auto& a, const auto& b) {\n                long ab = a * static_cast(std::pow(10, radixes[b])) + b;\n                long ba = b * static_cast(std::pow(10, radixes[a])) + a;\n                return ab > ba;\n            }\n        );\n\n        std::string ans;\n        for (int num : nums) {\n            ans += std::to_string(num);\n        }\n\n        // For the case that the string content is 000...\n        if (ans[0] == '0') {\n            return \"0\";\n        }\n\n        return ans;\n    }\n};\n\n"},"Simulation Puzzle/Strobogrammatic Number.html":{"url":"Simulation Puzzle/Strobogrammatic Number.html","title":"Strobogrammatic Number","keywords":"","body":"Problem\nLintCode 644. Strobogrammatic Number\nhttps://www.lintcode.com/problem/strobogrammatic-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param num: a string\n     * @return: true if a number is strobogrammatic or false\n     */\n    bool isStrobogrammatic(string &num) {\n        // write your code here\n\n        std::string mirror;\n        for (char ch : num) {\n            switch (ch) {\n                case '6':\n                    mirror.push_back('9');\n                    break;\n                case '9':\n                    mirror.push_back('6');\n                    break;\n                case '0':\n                case '1':\n                case '8':\n                    mirror.push_back(ch);\n                    break;\n                default:\n                // Simply return false for the numbers including 2, 3, 4, 5, and 7.\n                    return false;\n            }\n        }\n\n        std::reverse(mirror.begin(), mirror.end());\n        return mirror == num;\n    }\n};\n\n"},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"url":"Simulation Puzzle/Sparse Matrix Multiplication.html","title":"Sparse Matrix Multiplication","keywords":"","body":"Problem\nLintCode 654. Sparse Matrix Multiplication\nhttps://www.lintcode.com/problem/sparse-matrix-multiplication/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: a sparse matrix\n     * @param B: a sparse matrix\n     * @return: the result of A * B\n     */\n    vector> multiply(vector> &A, vector> &B) {\n        // write your code here\n\n        int m = A.size();\n        int n = A[0].size();\n        int t = B[0].size();\n\n        std::vector> nonzero(n, std::vector());\n        for (int i = 0 ; i > C(m, std::vector(t, 0));\n        for (int i = 0 ; i \n"},"Simulation Puzzle/Simplify Path.html":{"url":"Simulation Puzzle/Simplify Path.html","title":"Simplify Path","keywords":"","body":"Problem\nLintCode 421. Simplify Path\nhttps://www.lintcode.com/problem/simplify-path/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param path: the original path\n     * @return: the simplified path\n     */\n    string simplifyPath(string &path) {\n        // write your code here\n\n        std::vector tokens;\n\n        int n = path.length();\n        int i = 1;\n\n        while (i \n"},"Data Structure Design/Trie.html":{"url":"Data Structure Design/Trie.html","title":"Trie","keywords":"","body":"Problem\nLintCode 442. Implement Trie (Prefix Tree)\nhttps://www.lintcode.com/problem/implement-trie-prefix-tree/description\nSolution\n\nstruct TrieNode {\n    bool is_word;\n    std::unordered_map> branch;\n\n    TrieNode()\n      : is_word(false)\n    { }\n};\n\n\nclass Trie {\npublic:\n    Trie()\n      : root(std::make_shared()) {\n        // do intialization if necessary\n    }\n\n    /*\n     * @param word: a word\n     * @return: nothing\n     */\n    void insert(string &word) {\n        // write your code here\n\n        auto curr = root;\n\n        for (char ch : word) {\n            if (curr->branch.count(ch) == 0) {\n                curr->branch[ch] = std::make_shared();\n            }\n            curr = curr->branch[ch];\n        }\n\n        curr->is_word = true;\n    }\n\n    /*\n     * @param word: A string\n     * @return: if the word is in the trie.\n     */\n    bool search(string &word) {\n        // write your code here\n\n        auto curr = root;\n\n        for (char ch : word) {\n            if (curr->branch.count(ch) == 0) {\n                return false;\n            }\n            curr = curr->branch[ch];\n        }\n\n        return curr->is_word;\n    }\n\n    /*\n     * @param prefix: A string\n     * @return: if there is any word in the trie that starts with the given prefix.\n     */\n    bool startsWith(string &prefix) {\n        // write your code here\n\n        auto curr = root;\n\n        for (char ch : prefix) {\n            if (curr->branch.count(ch) == 0) {\n                return false;\n            }\n            curr = curr->branch[ch];\n        }\n\n        return true;\n    }\n\nprivate:\n    std::shared_ptr root;\n};\n\n"},"Data Structure Design/Insert Delete GetRandom.html":{"url":"Data Structure Design/Insert Delete GetRandom.html","title":"Insert Delete GetRandom O(1)","keywords":"","body":"Problem\n657. Insert Delete GetRandom O(1)\nhttps://www.lintcode.com/problem/insert-delete-getrandom-o1/description\nSolution\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param = obj.insert(val);\n * bool param = obj.remove(val);\n * int param = obj.getRandom();\n */\n\n\nclass RandomizedSet {\npublic:\n    RandomizedSet() {\n        // do intialization if necessary\n        srand(time(nullptr));\n    }\n\n    /*\n     * @param val: a value to the set\n     * @return: true if the set did not already contain the specified element or false\n     */\n    bool insert(int val) {\n        // write your code here\n\n        if (refs.count(val) == 1) {\n            return false;\n        }\n\n        nums.push_back(val);\n        refs[val] = nums.size() - 1;\n        return true;\n    }\n\n    /*\n     * @param val: a value from the set\n     * @return: true if the set contained the specified element or false\n     */\n    bool remove(int val) {\n        // write your code here\n\n        if (refs.count(val) == 0) {\n            return false;\n        }\n\n        // If the number that we want to remove is just the last element of the\n        // vector, we simply clean the relevant entries.\n        int index = refs[val];\n        if (index == nums.size() - 1) {\n            refs.erase(val);\n            nums.pop_back();\n            return true;\n        }\n\n        // Otherwise, we swap the last element with the to be removed element\n        // and update the indexing structure for that last element.\n        std::swap(nums.back(), nums[index]);\n        refs[nums[index]] = index;\n        nums.pop_back();\n        return true;\n    }\n\n    /*\n     * @return: Get a random element from the set\n     */\n    int getRandom() {\n        // write your code here\n\n        int index = random() % nums.size();\n        return nums[index];\n    }\n\nprivate:\n    std::vector nums;\n    std::unordered_map refs;\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param = obj.insert(val);\n * bool param = obj.remove(val);\n * int param = obj.getRandom();\n */\n\n"},"Data Structure Design/LRU Cache.html":{"url":"Data Structure Design/LRU Cache.html","title":"LRU Cache","keywords":"","body":"Problem\n134. LRU Cache\nhttps://www.lintcode.com/problem/lru-cache/description\nSolution\n#include \n\nclass LRUCache {\npublic:\n    /*\n    * @param capacity: An integer\n    */LRUCache(int capacity)\n      : size(0),\n        capacity(capacity) {\n        // do intialization if necessary\n    }\n\n    /*\n     * @param key: An integer\n     * @return: An integer\n     */\n    int get(int key) {\n        // write your code here\n\n        if (refs.count(key) == 0) {\n            return -1;\n        }\n\n        auto iter = refs[key];\n        int value = iter->second;\n\n        list.erase(iter);\n        list.push_front(std::make_pair(key, value));\n        refs[key] = list.begin();\n\n        return value;\n    }\n\n    /*\n     * @param key: An integer\n     * @param value: An integer\n     * @return: nothing\n     */\n    void set(int key, int value) {\n        // write your code here\n\n        if (refs.count(key) == 0) {\n            list.push_front(std::make_pair(key, value));\n            refs[key] = list.begin();\n\n            ++size;\n            if (size == capacity + 1) {\n                auto iter = --list.end();\n                int expired_key = iter->first;\n\n                list.erase(iter);\n                refs.erase(expired_key);\n\n                --size;\n            }\n            return;\n        }\n\n        auto iter = refs[key];\n        list.erase(iter);\n        list.push_front(std::make_pair(key, value));\n        refs[key] = list.begin();\n    }\n\nprivate:\n    int size;\n    int capacity;\n    std::list> list;\n    std::unordered_map>::iterator> refs;\n};\n\n"}}}