{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["10tb+","1m+","250m+","6","activ","backend","brief","carnegi","cloud","commerc","common","compil","compiler.","comput","contribut","daili","data","data,","develop","distribut","e","endpoints.","experi","expertis","gener","github:","graduat","https://github.com/zsshen","https://mzl.la/2fo3bjq","https://www.linkedin.com/in/zsshen","https://www.slideshare.net/zongshenshen","https://www.zsshen.com","ieee","includ","industri","introduct","javascript","jit","larg","linkedin:","media","mellon","memo","mobil","mozilla'","mozilla:","open","optimization.","orchestr","patent","pipelin","portfolio:","program","projects,","prolif","protect","publications.","puzzles.","qps,","research","scalabl","scale","secur","serv","servic","slideshare:","social","sourc","student","system","transact","u.s.","variou","year"],"Prefix Sum and Subarray/Subarray Sum.html":["&nums)","(int","*","*/","+","...","/**","//","0","0;","1)","138.","1;","1]",";","=","=>","@param","@return:","class","code","element","first","here","https://www.lintcode.com/problem/subarray","includ","index","int","integ","j)","last","lintcod","list","map;","map[0]","n","num[0]","num[1]","num[i","num[j]","number","nums.size();","nums:","nums[i]","o(n)","o(n),","prefix","prefix(i","prefix(j)","preix(i)","problem","public:","sc:","solut","subarray","subarraysum(vector","sum","sum(i,","tc:","unordered_map","vector","write","{"],"Prefix Sum and Subarray/Submatrix Sum.html":["&matrix)","(a","(c^2)),","(e","(i","(int","(m","*","*/","+","...","/*","/**","//","0","0;","1)","1;","1d","2","405.",";","=","=>",">","@param","@return:","appli","array[0]","array[1]","array[i];","b","b)","c","c)","class","code","column","column.","columns,","coordin","d","down","e","f","f)","first","g","gener","h","here","https://www.lintcode.com/problem/405","int","integ","j","j)","k","l","left","lintcod","m","map;","map[0]","matrix","matrix.size();","matrix:","matrix[0].size();","merg","n","n)","number","nums)","nums.size();","o","o(r","p","prefix","prefix(i","prefix(i)","prefix(j)","problem","public:","r","right","row","sc:","scan","solut","solv","span","subarray","subarraysum(const","submatrix","submatrixsum(vector>","sum","sum(i,","suppos","syn(m);","synthet","tc:","unordered_map","up","us","vector&","vector>","want","write","{"],"Prefix Sum and Subarray/Subarray Sum Closest.html":["&nums)","(int","*","*/","+",".","...,","/*","/**","//","0","0;","139.","1;","1]","1],","1].second)","1].second);","1});",":",";","=",">","@param","@return:","bgn","class","closest","closest/descript","code","continue;","element","end","end};","find","first","gap.","gap;","here","https://www.lintcode.com/problem/subarray","includ","index","index(index)","index)","index;","int","integ","key","last","lintcod","list","max(sums[i].second,","max_gap","max_gap)","min(sums[i].second,","minimum","n","neighbor","number","nums.size(),","nums:","nums[0]","nums[1]","nums[n","o(n)","o(nlogn),","pair","prefix","problem","public:","record","record(int","return","s[0]","s[0],","s[1]","s[1],","s[2]","s[2],","s[3]","s[n","s[n]","sc:","solut","sort","struct","subarray","subarraysumclosest(vector","sum","sum(sum),","sum,","sum;","sums.push_back({0,","sums;","sums[i","tc:","valu","vector","vector>","write","{","{bgn,","}","};"],"Prefix Sum and Subarray/Subarray Sum Equals K.html":["(int","*","*/","++map[prefix];","+=","/**","//","0,","0;","1)","1;","560.",":","=","=>","an","ans;","array","case","class","element","equal","https://leetcode.com/problems/subarray","i)","int","j)","k","k)","k.","k];","leetcod","map;","map[0]","map[sum","n","num","num;","number","nums)","nums,","o(n)","o(n),","prefix","prefix(i","prefix(j)","problem","public:","return","sc:","set","solut","subarray","subarraysum(vector&","sum","sum(0,","sum(i,","tc:","unordered_map","up","{","}","};"],"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":["%=","(int","(prefix","*","*/","+=","/**","//","0","0,","0;","1","1;","2","2,","3","3,","4","4,","5","5,","6","7,","9,","974.",":","=","an","array","base","case","class","classifi","count:","divid","divis","element","groups(k);","groups[0]","groups[0]:","groups[1]:","groups[2]:","groups[3]:","groups[4]:","https://leetcode.com/problems/subarray","i)","int","k","k)","k.","k/","k:","k;","leetcod","multipl","n","nk.","num","num;","number","nums)","nums,","nums:","o(n)","o(n),","prefix","problem","public:","remaind","remainders:","sc:","set","solut","subarray","subarraysdivbyk(vector&","sum","sum(0,","tc:","up","vector","{"],"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":["&&","(int","*","*/","/**","0","0,","2","209.",";","=","adjust","an","array.","b","bound","c","class","control","d","descpretion.","e","each","element","eqaul","f","fulfil","g","h","https://leetcode.com/problems/minimum","implementation,","int","int_max;","iteration,","l","l,","leetcod","less","main","minimum","minsubarraylen(int","movement","n","name","note:","number","nums)","nums.size();","o(1)","o(n),","pointer","pointers,","prefix","prefix[l],","prefix[r]","problem","procedure,","public:","r","real","repres","s,","sc:","scan","singl","size","slide","smaller","solut","subarray","sum","target","target,","tc:","tri","us","varabl","vector&","window","window.","{"],"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":["(int","*","*/","/**","//","0","0,","1)","1;","911.",";","=","=>","`map[prefix","alway","an","array","case","class","concern","current","element","end","enlarg","equal","first","help","https://www.lintcode.com/problem/maximum","i)","i.","index","index,","int","j)","k","k)","k.","k/descript","k]`,","lintcod","longest","make","map;","map[0]","maximum","maxsubarraylen(vector&","minim","n","number","nums,","nums.size();","o(n)","o(n),","occurrance.","prefix","prefix(i","prefix(j)","problem","public:","queri","record","sc:","set","size","solut","subarray","subarray,","sum","sum(0,","sum(i,","sure","tc:","unordered_map","up","whenev","{"],"Prefix Sum and Subarray/Contiguous Array.html":["(int","*","*/","/**","//","0","0,","0.","1,","1;","994.",";","=","an","array","array/descript","case","class","contigu","convert","element","find","findmaxlength(vector&","https://www.lintcode.com/problem/contigu","i)","int","lintcod","map;","map[0]","maximum","n","number","nums)","nums.size();","o(n)","o(n),","prefix","problem","public:","sc:","set","size","solut","subarray","sum","sum(0,","tc:","transform","unordered_map","up","{"],"Prefix Sum and Subarray/Maximum Subarray.html":["(int","(sum","+=","0;","53.",":","=","an","class","https://leetcode.com/problems/maximum","int","leetcod","max(ans,","maximum","maxsubarray(vector&","num","num;","nums)","nums[0],","problem","public:","solut","subarray","sum","sum);","{"],"Prefix Sum and Subarray/Maximum Submatrix.html":["&matrix)","(a1","(c^2)),","(int","(m","(n","*","*/","+",".","/**","//","0","0)","0;","944.",";","=","==","=>","@param","@return:","a1","a2","a3","ak","b1","b2","b3","bk","bn","c","c)","c1","c1)","c2","c3","ck","class","cn","code","column","d1","d2","d3","dn","given","here","https://www.lintcode.com/problem/maximum","int","j","largest","lintcod","m","matrix","matrix.size();","matrix:","matrix[0].size();","matrix[0][0];","max","maximum","maxsubmatrix(vector>","n","number","o(r","possibl","problem","public:","r","return","row","s1","s2","s3","sc:","sk","sn","solut","submatrix","submatrix/descript","sum","syn(m);","tc:","write","{","}"],"Prefix Sum and Subarray/Maximum Product Subarray.html":["(int","*","*/","/**","1","1,","12","152.","16","1;","2","2,","24","3","3,","4","4,","48","6","96",":","=","an","ans;","class","element","https://leetcode.com/problems/maximum","int","leetcod","max(ans,","max(max(num,","max_curr","max_curr);","max_curr;","max_sofar","max_sofar:","maximum","maxproduct(vector&","min(min(num,","min_curr","min_curr;","min_sofar","min_sofar:","n","num","num),","num);","number","nums)","nums:","nums[0];","o(1)","o(n),","problem","product","public:","return","sc:","solut","subarray","subarray/","tc:","{","}","};"],"Prefix Sum and Subarray/Continuous Subarray Sum.html":["(int","(with","*","*/","/**","//","0","0,","1)","1;","2),","523.",";","=","`map[mod]`,","also,","alway","array","base","bool","case","checksubarraysum(vector&","class","classifi","concern","continu","current","divid","element","end","enlarg","false;","first","help","https://leetcode.com/problems/continu","i)","i.","i;","index","index,","int","k)","k.","leetcod","longer","make","map;","map[0]","map[mod]","minim","mod","multipl","n","nk.","number","nums,","nums.size();","o(n)","o(n),","occurrance.","prefix","problem","public:","queri","record","remaind","return","sc:","set","size","solut","subarray","sum","sum(0,","sure","tc:","true;","unordered_map","up","whenev","{","}","};"],"Prefix Sum and Subarray/Max Consecutive Ones III.html":["(j","*","+","/**","0s,","1)","1);","1004.","1s","=","a,","a[l++];","an","ans;","array","class","consecut","element","equation:","find","fit","follow","https://leetcode.com/problems/max","iii","iii/","int","j)","k)","l","leetcod","longest","longestones(vector&","max","max(ans,","on","problem","public:","r","return","solut","subarray","sum","sum(i,","transform","{","}","};"],"Sliding Window/Subarray Product Less than K.html":["&&","&nums,","(int","(n","*","*/","/**","//","0","0)","0;","1075.","1;",";","=","==","@param","@return:","array","class","code","count","element","here","https://www.lintcode.com/problem/subarray","int","integ","k","k)","k/descript","k:","l","less","lintcod","n","number","nums.size();","nums:","numsubarrayproductlessthank(vector","problem","product","public:","r","re","return","solut","subarray","write","{","}"],"Sliding Window/Longest Substring without Repeating Characters.html":["(int","*","*/","+","/**","0","0,","0;","1)","1);","3.",";","=","an","ans;","charact","characters/","class","freq(128);","freq[s[l++]];","https://leetcode.com/problems/longest","int","l","leetcod","length","lengthoflongestsubstring(str","longest","max(ans,","n","o(1)","o(n),","problem","public:","r","repeat","return","s","s)","s.length(),","sc:","solut","string","substr","tc:","vector","without","{","}","};"],"Sliding Window/Longest Substring with at Most K Distinct Characters.html":["(freq[ch]","(int","*","*/","+","/**","0","0)","0,","0;","1);","340.",";","=","==","an","ans;","ch","charact","class","count","count;","distinct","freq(128);","freq[ch];","https://leetcode.com/problems/longest","int","k","k)","l","leetcod","length","lengthoflongestsubstringkdistinct(str","longest","max(ans,","n","o(1)","o(n),","problem","public:","r","return","s","s,","s.length(),","s[l++];","sc:","solut","string","substr","tc:","vector","{","}","};"],"Sliding Window/Find All Anagrams in a String.html":["(char","(freq_p[ch]","(int","*","*/","++freq_p[ch];","++unique;","/**","0","0,","0;","1)","438.",":",";","=","==","anagram","ans;","ch","class","count","find","findanagrams(str","freq_p(128);","freq_s(128),","https://leetcode.com/problems/find","int","l","leetcod","length","lp","ls","n","o(1)","o(n),","p)","p.length();","problem","public:","r","s","s,","s.length(),","sc:","solut","string","tc:","uniqu","vector","{","}"],"Sliding Window/Minimum Window Substring.html":["(char","(freq_t[ch]","(int","++count_t;","++freq_t[ch];","0","0,","0;","1)","1,","76.",":",";","=","==","bgn","ch","class","count_","count_t","freq_s(128),","freq_t(128);","https://leetcode.com/problems/minimum","int","int_max,","l","leetcod","ls","minimum","minwindow(str","opt","problem","public:","r","s,","s.length(),","solut","string","substr","t)","vector","window","{","}"],"Sliding Window/Moving Average from Data Stream.html":["(size","*","*/","++size;","+=","/","/**","346.",":","=",">",">next(val);","averag","call","capacity(size),","capacity)","capacity,","class","data","dequ","doubl","here.","https://leetcode.com/problems/mov","initi","instanti","int","leetcod","move","movingaverag","movingaverage(int","movingaverage(size);","movingaverage*","new","next(int","obj","object","param_1","private:","problem","public:","q.emplace_back(val);","q.front();","q.pop_front();","q;","return","size(0),","size)","size,","size;","solut","static_cast(sum)","stream","structur","such:","sum","sum(0)","sum;","val)","val;","{","}","};"],"Sliding Window/Find Median from Data Stream.html":["(max_q.empty())","(max_q.size()","(min_q.size()","(num","*","*/","+","/","/**","1)","295.","2;",":","=","==",">",">addnum(num);",">findmedian();","?","addnum(int","call","class","data","doubl","element","find","findmedian()","greater>","here.","https://leetcode.com/problems/find","initi","insert(int","insert(num);","instanti","leetcod","less>","max_q.emplace(min_q.top());","max_q.emplace(num);","max_q.pop();","max_q.size()","max_q.top()","max_q;","median","medianfind","medianfinder()","medianfinder();","medianfinder*","min_q.emplace(max_q.top());","min_q.pop();","min_q.size()","min_q.size())","min_q.top())","min_q.top();","min_q;","n","new","num)","number","o(n)","o(nlogn),","obj","object","param_2","priority_queue,","private:","problem","public:","rebalance();","return","return;","sc:","solut","static_cast(max_q.top()","stream","structur","such:","tc:","void","{","}","};"],"Sliding Window/Sliding Window Median.html":["!=","(a","(c","(int","(it","(m_size","(max_q.empty())","(num","*","*/","*max_q.begin()","*max_q.begin();","*min_q.begin();","+","/","/**","0","0;","1)","2;","480.",":",";","=","==",">",">&","?","ans.emplace_back(query(max_q,","ans;","auto","b","b)","c","c;","class","doubl","element","https://leetcode.com/problems/slid","insert(","int","k","k)","k],","leetcod","m_size","m_size)","max_q,","max_q.begin();","max_q.emplace(*it);","max_q.emplace(num);","max_q.end())","max_q.erase(it);","max_q.find(num);","max_q.size();","max_q;","median","medianslidingwindow(vector&","min_q)","min_q));","min_q);","min_q.begin();","min_q.emplace(*it);","min_q.erase(it);","min_q.find(num);","min_q.size();","min_q;","multiset>","multiset>&","n","num,","number","nums,","nums.size(),","o(k)","o(nlogk),","private:","problem","public:","query(","rebalance(max_q,","remove(","remove(nums[i","return","return;","sc:","size","slide","solut","tc:","vector","void","window","{","}","};"],"Sliding Window/Sliding Window Maximum.html":["&","&&","(!q.empty()","(int","(q.front()","*","*/","/**","0","239.",";","=","==",">","ans.emplace_back(nums[q.front()]);","ans;","class","dequ","element","https://leetcode.com/problems/slid","index)","int","k","k)","leetcod","maximum","maxslidingwindow(vector&","n","num","number","nums,","nums.size();","nums[index];","nums[q.back()])","o(k),","o(n),","problem","public:","q,","q.emplace_back(index);","q.pop_back();","q.pop_front();","q;","remove(deque&","sc:","size","slide","solut","tc:","vector","vector&","void","window","{","}","};"],"Two Sum/3Sum.html":["&&","(","(++l","(int","(l","(nums[i]","(sum","*","*/","+","/**","//","0","0)","1,","15.","1])","1]);","3sum",";","=","==",">","algorithm","ans)","ans);","ans;","break;","class","const","continue;","depend","element","exit","gener","here.","https://leetcode.com/problems/3sum","imposs","int","l","l,","leetcod","legal","loop","n","number","nums)","nums,","nums.end());","nums.size();","nums[i","nums[i]","nums[i],","nums[r","nums[r]","o(logn)","o(n),","o(n^2),","positive,","private:","problem","public:","r","r,","remain","return","sc:","solut","sort","sort(nums.begin(),","t)","t,","tc:","threesum(vector&","thu","triplets.","twosum(","twosum(nums,","underli","vector&","vector>","vector>&","void","{","}"],"Two Sum/4Sum.html":["&&","(int","(l","*","*/","+","/**","0","1","1,","18.","1;","1])","4sum",";","=","==","algorithm","ans)","ans);","ans;","class","const","continue;","depend","element","foursum(vector&","helper(","helper(nums,","https://leetcode.com/problems/4sum","i,","int","j","j,","l","l,","leetcod","n","number","nums,","nums.end());","nums.size();","nums[i","nums[i]","nums[j","nums[j]","nums[j],","o(logn)","o(n),","o(n^3),","private:","problem","public:","r","r,","return","sc:","solut","sort","sort(nums.begin(),","t)","t,","target","target)","tc:","underli","vector&","vector>","vector>&","void","{","}"],"Two Sum/3Sum Closest.html":["(int","*","*/","/**","0","0,","16.","3sum",";","=","algorithm","an","class","closest","depend","element","https://leetcode.com/problems/3sum","int","int_max;","leetcod","n","number","nums,","nums.end());","nums.size();","o(logn)","o(n),","o(n^2),","opt_diff","problem","public:","sc:","solut","sort","sort(nums.begin(),","target)","tc:","threesumclosest(vector&","underli","{"],"Two Sum/3Sum Smaller.html":["(int","*","*/","++l;","+=","/**","0","0;","259.","3sum",";","=","algorithm","an","ans;","class","depend","element","https://leetcode.com/problems/3sum","int","l;","leetcod","n","number","nums,","nums.end());","nums.size();","nums[i];","o(logn)","o(n),","o(n^2),","problem","public:","r","r;","return","sc:","smaller","solut","sort","sort(nums.begin(),","target","target)","tc:","threesumsmaller(vector&","underli","{","}","};"],"Element Partition/Move Zeros.html":["&nums)","(r","*","*/","/**","//","0,","0;","539.","=","@param","@return:","array","class","code","here","https://www.lintcode.com/problem/mov","int","integ","l","lintcod","move","movezeroes(vector","n","noth","nums.size();","nums:","problem","public:","r","solut","void","write","zero","zeroes/descript","{"],"Element Partition/Partition Array.html":["&nums,","(r","*","*/","/**","//","0,","0;","31.","=","@param","@return:","array","array/descript","class","code","here","https://www.lintcode.com/problem/partit","index","int","integ","k)","k:","l","lintcod","n","nums.size();","nums:","partit","partitionarray(vector","problem","public:","r","solut","write","{"],"Element Partition/Sort Colors.html":["\"one\"","\"two\"","\"zero\"","&nums)","(one","*","*/","/**","//","0","0,","1","1.","148.","1;","2","2.","3","3.","=","@param","@return:","array.","class","code","color","colors/descript","consecut","elements:","guid","hand","here","https://www.lintcode.com/problem/sort","int","integ","left","lintcod","list","n","noth","nums.size();","nums:","on","point","pointer","problem","procedure.","public:","right","scan","shift","side","size","solut","sort","sortcolors(vector","tail","track","two","twos,","us","v","void","write","zero","zeros,","{","|"],"Element Partition/Kth Smallest Number in Unsorted Array.html":["&nums)","(bgn","(r","*","*/","+","/","/**","//","0,","1);","1,","2;","461.","=","@param","@return:","array","array/descript","bgn,","bgn;","class","code","element","end)","end,","here","https://www.lintcode.com/problem/kth","int","integ","k","k)","k,","k:","kth","kthsmallest(int","l","lintcod","mid","number","nums,","nums.size()","nums:","nums[end]);","nums[mid];","pivot","private:","problem","public:","quickselect(auto&","quickselect(nums,","r","return","smallest","solut","std::swap(nums[mid],","unsort","vector","write","{","}"],"Element Partition/Remove Duplicates from Sorted Array.html":["&nums)","(int","(n","*","*/","/*","//","0)","0;","1","100.",";","=","==","@param","@return:","array","array/descript","class","code","duplic","here","hhttps://www.lintcode.com/problem/remov","ineg","int","integ","l","lintcod","n","nums.size();","nums:","problem","public:","r","remov","removeduplicates(vector","return","solut","sort","write","{","}"],"Element Partition/Remove Duplicates from Sorted Array II.html":["&nums)","(l","(n","*","*/","/**","//","0)","0;","101.",":","=","==","@param","@return","a:","array","class","code","duplic","here","https://www.lintcode.com/problem/remov","ii","ii/descript","int","integ","l","lintcod","list","n","nums.size();","problem","public:","remov","removeduplicates(vector","return","solut","sort","write","{","}"],"Element Partition/Intersection of Two Arrays II.html":["&nums1,","&nums2)","(i","*","*/","/**","//","0,","0;","548.","=","@param","@return:","ans;","array","class","code","here","https://www.lintcode.com/problem/intersect","ii","ii/descript","int","integ","intersect","intersection(vector","j","leetcod","nums1.end());","nums1.size(),","nums1:","nums2.end());","nums2.size();","nums2:","problem","public:","size_1","size_2","solut","std::sort(nums1.begin(),","std::sort(nums2.begin(),","std::vector","two","vector","write","{"],"Element Partition/Rotate String.html":["%","&str,","(a","(d","(e","(g","(offset","*","*/","+","/**","//","0","0)","3","4","8.","=","==","=>","@param","@return:","a)","array","b","c","char","class","code","d","d)","e","e)","f","g","g)","here","https://www.lintcode.com/problem/rot","int","integ","lintcod","n","n);","noth","offset","offset)","offset:","problem","public:","r","r);","r,","return;","rotat","rotatestring(str","solut","std::reverse(str.begin()","std::reverse(str.begin(),","str.begin()","str.end());","str.length();","str:","string","string/descript","void","write","{","||","}","};"],"Monotonous Stack/Min Stack.html":["(size","*","*/","++size;","/**","0)","155.",":","=","==",">getmin();",">pop();",">push(x);",">top();","call","class","data","dp.back()));","dp.back();","dp.emplace_back(min(x,","dp.emplace_back(x);","dp.pop_back();","dp;","getmin()","here.","https://leetcode.com/problems/min","initi","instanti","int","leetcod","min","minstack","minstack()","minstack();","minstack*","new","obj","object","param_3","param_4","pop()","private:","problem","public:","push(int","return","size(0)","size;","solut","stack","stk.back();","stk.emplace_back(x);","stk.pop_back();","stk;","structur","such:","top()","vector","void","x)","{","}","};"],"Monotonous Stack/Next Greater Element I.html":["&&","(!stk.empty()","(int","(map.count(num)","*","*/",",","/**","1","1)","1,","1;","2","3","4","4,","496.",":","=","==",">","?","ans.emplace_back(next);","ans;","class","element","greater","https://leetcode.com/problems/next","increas","int","leetcod","maintain","map","map;","map[num]","map[stk.top()]","monoton","n","next","next[1]","next[2]","next[3]","next[4]","nextgreaterelement(vector&","non","num","num;","number","nums1","nums1)","nums1,","nums2","nums2)","nums2:","o(n)","o(n),","problem","public:","return","sc:","solut","stack","stk.emplace(num);","stk.pop();","stk.top())","stk:","stk;","tc:","then,","unordered_map","vector","vector&","{","}","};"],"Monotonous Stack/Next Greater Element II.html":["(int","(n)","*","*/","/**","0","1);","1201.",";","=","ans(n,","ans;","ans[stk.top()]","array","check","circular","class","doubl","each","element","flatten","greater","https://www.lintcode.com/problem/next","ii","ii/descript","int","lintcod","n","next","nextgreaterelements(vector&","nn","num;","number","nums)","nums.size();","nums[stk.top()])","o(n),","problem","public:","return","sc:","size","solut","stk.emplace(j);","stk.pop();","stk;","tc:","travers","twice.","vector","{","}","};"],"Monotonous Stack/Largest Rectangle in Histogram.html":["&heights)","(int","(n","*","*/","/**","//","0","0)","0;","1","1,","122.","1st:","1x3","1x6","2","2,","2nd:","2x5","3","3,","3rd:","4x2","5","5,","6","6,","6.","6x1",";","=","==","@param","@return:","area","class","code","consid","dummi","examination.","height:","heights.size();","here","histogram","histogram/descript","https://www.lintcode.com/problem/largest","int","integ","largest","largestrectanglearea(vector","last","less","let'","lintcod","list","max","n","number","number,","problem","public:","rectangl","return","see","situat","siutat","solut","stack","std::stack","stk;","trigger","us","write","{","}"],"Monotonous Stack/Maximal Rectangle.html":["&matrix)","(int","(num_c","(num_r","*","*/","/**","//","0","0)","0);","0,","0;","1,","1]","1],","2","2d","4","510.",";","=","==","=>","@param","@return:","[0,","[1,","boolean","class","code","find","heights(num_c,","here","histogram.","https://www.lintcode.com/problem/maxim","int","integ","lintcod","matrix","matrix.size();","matrix:","matrix[0].size();","max","maxim","maximalrectangle(vector>","num_c","num_r","problem","public:","rectangl","rectangle/descript","reduc","return","solut","std::vector","stk;","write","{","}"],"Monotonous Stack/Max Tree.html":["&&","&a)","(!stk.empty()","(!stk.empty())","(int","(the","*","*/","*left,","*right;","/","/**","//","0","0,","1","1.","128.","2","2,","2.","3","3,","5","5,","6","6,",":","=","=>",">",">left",">right",">val",">val)","?","@param","@return:","\\","a)","a:","array","assign","auto","child","class","code","contain","curr","curr;","definit","duplicates.","empty.","given","greater","here","https://www.lintcode.com/problem/max","int","integ","last","left","less","lintcod","max","maxtree(vector","meet","moreover,","need","new","node","node.","null;","nullptr;","num","pop","pope","previou","problem","public:","return","right","root","solut","stack","stack),","stack:","std::vector","stk.back()","stk.back();","stk.pop_back();","stk.push_back(curr);","stk;","stk[0]","store","top","tree","tree.","tree/descript","tree:","treenod","treenode(int","treenode(num);","treenode:","until","val)","val;","valu","write","{","}","};"],"Priority Queue/Kth Smallest Number in Sorted Matrix.html":["(const","(int","*","*/","/**","0","0);","0,","378.",":",";","=",">","bool","c(c)","c)","c;","class","const","element","heap","https://leetcode.com/problems/kth","int","k","k)","kth","kthsmallest(vector>&","leetcod","lhs,","lhs.num","m","mat,","mat.size();","mat[0].size();","matrix","minimum","n","num(num),","num,","num;","number","o(k)","o(klogk)","operator()","priority_queue,","problem","public:","q.emplace(mat[0][0],","q;","r(r),","r,","r;","record","record&","record(int","recordcompar","recordcompare>","return","rhs)","rhs.num;","sc:","smallest","solut","sort","store","struct","tc:","unordered_set","up","visit.emplace(0);","visit;","{","}","};"],"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":["&a,","&b,","(1,","(2,","(4,","(6,","(7,","(const","(int","*","*/","+","/**","//","0","0));","0,","11)","11]","2)","3,","4)","4,","465.","5,","6)","6]","7)","7,","9",":",";","=",">","@param","@return:","[1,","[2,","a.size();","a:","array","arrays/descript","ascend","auto&","b","b.size();","b:","b[0],","bool","class","code","const","false));","here","https://www.lintcode.com/problem/kth","idx_a(idx_a),","idx_a,","idx_a;","idx_b(idx_b)","idx_b)","idx_b;","int","integ","k)","k:","kth","kthsmallestsum(vector","lhs,","lhs.sum","lintcod","o(klogk)","operator()","order","problem","public:","queue.push(record(a[0]","queue;","record","record(int","recordcompar","recordcompare>","return","rhs)","rhs.sum;","size_a","size_b","smallest","solut","sort","std::priority_queue,","std::vector(size_b,","std::vector>","struct","sum","sum(sum),","sum,","sum;","true;","two","vector","visit(size_a,","visit[0][0]","write","{","}","};"],"Priority Queue/Kth Largest in N Arrays.html":["&arrays,","(const","(int","(queue.size()","*","*/","/**","//","543.",":",">","@param","@return:","array","array)","arrays)","arrays/descript","arrays:","auto&","class","code","element","here","https://www.lintcode.com/problem/kth","int","integ","integer,","k","k)","k:","kth","kthinarrays(vector>","largest","lintcod","list","n","num","problem","public:","queue.pop();","queue.push(num);","queue.top();","queue;","return","solut","std::greater>","std::priority_queue,","th","write","{","}","};"],"Priority Queue/Ugly Number II.html":["(int","*","*/","/**","0","1;","264.",";","=","an","class","https://leetcode.com/problems/ugli","ii","int","leetcod","long","n)","nthuglynumber(int","number","o(n)","o(nlogn)","problem","public:","sc:","set","set.emplace(1);","set;","solut","tc:","ugli","{"],"Priority Queue/Super Ugly Number.html":["(int","*","*/","/**","0","313.",";","=","ans;","class","https://leetcode.com/problems/sup","int","k","k)","k),","leetcod","logn","n,","nthsuperuglynumber(int","number","o(n","prime","primes)","problem","public:","sc:","set","set.emplace(1);","set;","solut","super","tc:","ugli","vector&","{"],"Priority Queue/K Closest Points.html":["(!q.empty())","(const","(q.size()","*","*/","+","/**","973.",":","=",">","ans.push_back({r.x,","ans;","auto","auto&","bool","closest","const","d","d(d)","d)","d));","d;","doubl","https://leetcode.com/problems/k","int","k","k)","kclosest(vector>&","leetcod","lhs,","lhs.d","logk)","o(k)","o(n","operator()","origin","p","p[0],","p[1];","point","points)","points,","priority_queue,","problem","q.pop();","q.push(record(x,","q.top();","q;","r","r.y});","record","record&","record(int","recordcompar","recordcompare>","return","rhs)","sc:","solut","sqrt(x","struct","tc:","vector>","x","x(x),","x,","y","y(y),","y);","y,","y;","{","}","};"],"Priority Queue/High Five.html":["(!queue.empty())","(auto&","(const","(map[id].size()","*","*/","+=","/","/**","0;","1086.","5)",":","=",">","ans.end());","ans.push_back({id,","ans;","auto&","class","entri","entry.first;","entry.second;","five","greater>>","high","highfive(vector>&","https://leetcode.com/problems/high","id","int","item","item[0];","item[1];","items)","leetcod","log5),","map)","map;","map[id].emplace(score);","map[id].pop();","n","number","o(n","o(n)","problem","public:","queue","queue.pop();","queue.size();","queue.top();","return","sc:","score","size","size});","solut","sort(ans.begin(),","tc:","unordered_map,","vector>","{","}","};"],"Priority Queue/Merge K Sorted Interval Lists.html":["&intervals)","(!queue.empty())","(const","(index","(int","(lhs.interval.start","*","*/","/**","//","0","577.",":",";","=","==",">",">end",">start","@param","@return:","ans.emplace_back(std::move(prev));","ans;","auto","auto&","bool","class","classs","code","const","continue;","curr","curr.end);","definit","end)","end;","given","here","https://www.lintcode.com/problem/merg","id","id(id),","id,","id;","index","index(index)","index)","index;","int","interv","interval(int","interval(interval),","interval,","interval:","interval;","intervals.size();","intervals:","k","lhs,","lhs.interval.end","lhs.interval.start","lintcod","list","lists/descript","merg","mergeksortedintervallists(vector>","new","operator()","prev","prev.end","prev.end)","problem","public:","queue.pop();","queue.top();","queue;","rec","rec.id;","rec.index;","rec.interval;","record","record(interv","recordcompar","recordcompare>","return","rhs)","rhs.interval.end)","rhs.interval.end;","rhs.interval.start;","solut","sort","start,","start;","std::max(prev.end,","std::move(curr);","std::priority_queue,","struct","vector","write","{","}","};"],"Greedy/Reorganize String.html":["\"\";","'a'","'a'];","(!q.empty())","(a.first","(b.first","(char","(int","(q.empty())","*","*/","+","++freq[ch","/**","0","0)","1)","1,","767.",":",";","=",">","a.second});","ans.push_back(a.second);","ans.push_back(b.second);","ans;","auto","b","b.second});","break;","ch","class","freq(26);","https://leetcode.com/problems/reorgan","i});","leetcod","length","less<>>","log(26)),","n","o(26)","o(n","pair;","priority_queue,","problem","public:","q.pop();","q.push({a.first","q.push({b.first","q.push({freq[i],","q.top();","q;","reorgan","reorganizestring(str","return","s)","sc:","solut","string","t","tc:","us","vector","{","}","};"],"Greedy/Task Scheduler.html":["#","&&","'a'];","(char","(f_max","(idle_slot","(int","*","*/","+","++freq[ch","/**","0","0)","1)","1,","11","2","24","4","5","945.",":",";","=",">",">=","?","_","a:","b","b:","c","c:","ch","class","f_max","freq(26);","freq.end());","freq[25];","freq[i]","freq[i]);","https://www.lintcode.com/problem/task","i)","idl","idle_slot","int","leastinterval(vector&","lintcod","min(f_max","n","n)","n;","number","o(26)","o(n),","problem","public:","return","sc:","schedul","scheduler/descript","slot","solut","sort(freq.begin(),","task","tasks)","tasks,","tasks.size()","tasks.size();","tc:","vector","{","}","};"],"Greedy/Candy.html":["&&","(0,","(1,","(2,","(first,","(id","(id,","(int","(l_rate","(ratings[i","*/","+","+=","/*","//","0","0)","0),","0);","0,","0;","1","1)","1),","1);","1,","135.","1;","1]","2","2)","2),","2,","2]","2nd",":",";","=","=>",">",">=","?","[1,","an","ans;","c,","c_rate","c_rate)","cand[r]","cand[r])","candi","candies(n,","candies[id","candies[id]","candies[id];","candy(vector&","children;","class","https://leetcode.com/problems/candy/","i)","int","l,","l2r(n,","l_candi","leetcod","max(1,","max(cand[l]","max(cand[l],","max(l_candi","n","problem","public:","r","r2l(n,","r2l[i]","r_candi","r_rate","rate(c)","rate(l)","rate(r)","rate)","ratings)","ratings.size();","ratings[id","return","second)","solut","vector","vector>","{","}"],"Greedy/Maximize Sum Of Array After K Negations.html":["%","(int","(k","*","*min_element(a.begin(),","0","0)","0);","1)","1005.","2","2;",";","=","==","a,","a.end())","a.end());","a.end(),","a.size();","a[i]","a[i];","accumulate(a.begin(),","array","break;","class","https://leetcode.com/problems/maxim","int","k","k)","k;","largestsumafterknegations(vector&","leetcod","maxim","n","negat","negations/","problem","public:","return","solut","sort(a.begin(),","sum","sum;","{","}","};"],"Greedy/Partition Labels.html":["(int","*/","/**","0","0);","0,","0;","11","13","14","15","19","20","22","23","5","7","763.","8",";","=","ans;","b","c","class","d","e","f","g","h","https://leetcode.com/problems/partit","int","j","k","l","label","labels/","last(26,","last[a]","last[b]","last[c]","last[d]","last[e]","last[f]","last[g]","last[h]","last[i]","last[j]","last[k]","leetcod","n","partit","partitionlabels(str","problem","public:","s)","s.length();","solut","vector","window","{"],"Greedy/Minimum Number of Arrows to Burst Balloons.html":["(int","(n","0)","0;","1","452.",";","=","==","an","arrow","balloon","balloons/","base","burst","class","findminarrowshots(vector>&","https://leetcode.com/problems/minimum","int","leetcod","minimum","n","number","points)","points.end());","points.size();","points[0][1];","problem","public:","return","solut","sort(points.begin(),","{","}"],"Flood and Fill/Number of Islands.html":["&&","'0';","(!(nx","(const","(int","*","*/","+","/**","0","0;","0},","1,","1},","1}})","200.",":",";","=",">",">=","an","auto&","class","column","d","d[0];","d[1];","dfs(","directs({{1,","directs)","directs;","grid)","grid,","grid.size();","grid[0].size();","grid[x][y]","https://leetcode.com/problems/numb","int","island","leetcod","m","m,","n","n)","n),","n,","number","numislands(vector>&","nx","ny","o(m","problem","public:","row","sc:","solut","solution()","tc:","vector>&","void","x","x,","y","y)","{","{0,","}"],"Flood and Fill/Number of Islands II.html":["&&","(!(nx","(0,","(1,","(3,","(const","(grid[x][y]","(px","(x","*","*/","+","++count;","/**","//","0","00000","00010","00011","01000","0},","1","1)","1,","1;","1},","1}})","2","3","3)","4)","434.",":","=","==","=>",">",">=","add(int","alreadi","ans.push_back(set.query());","ans;","auto&","avoid","cell","class","column","continue;","count(0)","count;","d","d[0];","d[1];","directs({{1,","directs)","directs;","disjointset","disjointset(int","duplic","find(int","find(parent[x]);","find(x);","find(y);","given","grid","grid(m,","grid[x][y]","https://www.lintcode.com/problem/numb","ii","ii/descript","int","island","island,","k","lintcod","log*(k)),","m","m,","merge(int","n","n)","n),","n);","n,","need","number","numislands2(int","nx","ny","o(k","o(m","parent;","parent[px]","parent[x]","parent[x])","part","positions)","positions,","potenti","private:","problem","public:","px","py","py)","py;","q","q[0];","q[1];","query()","return","return;","row","sc:","set(m","set.add(src_id);","skip","solut","solution()","src_id","tc:","unordered_map","vector","vector(n));","vector>","vector>&","void","x","x)","x,","x;","y","y)","y;","{","{0,","}","};"],"Flood and Fill/Surrounded Regions.html":["&&","'v';","(!(nx","(const","(int","*","*/","+","/**","//","0","0},","1,","130.","1},","1}})",":",";","=","=>",">",">=","auto&","board)","board,","board.size();","board[0].size();","board[x][y]","check","class","column","d","d[0];","d[1];","dfs(","directs({{1,","directs)","directs;","first","https://leetcode.com/problems/surround","int","j","last","leetcod","m","m,","n","n)","n),","number","nx","ny","o","o(m","problem","public:","region","row","rows.","sc:","solut","solution()","solve(vector>&","surround","tc:","v","vector>&","void","x","x,","y","y,","{","{0,","}"],"Flood and Fill/Walls and Gates.html":["&&","(int","*","*/","/**","0","0},","1,","1},","1}})","286.",":",";","=",">",">=","class","column","const","directs({{1,","directs;","gate","gates/","https://leetcode.com/problems/wal","inf","int","int_max;","leetcod","m","n","n)","n),","number","nx","ny","o(m","problem","public:","q;","queue>","rooms)","rooms.size();","rooms[0].size();","row","sc:","solut","solution()","static","tc:","void","wall","wallsandgates(vector>&","{","{0,","}","};"],"Flood and Fill/Pacific Atlantic Water Flow.html":["(board[r][c]","(int","*","*/","/**","0","417.",";","=",">",">=","ans;","atlant","atlantic(m,","c","class","false));","flow","https://leetcode.com/problems/pacif","int","leetcod","m","matrix)","matrix.size();","matrix[0].size();","n","n)","n),","number","o(m","pacif","pacific(m,","pacificatlantic(vector>&","problem","public:","return;","row","sc:","solut","tc:","vector(n,","vector>","water","{","||","}"],"Flood and Fill/Set Matrix Zeros.html":["&matrix)","(int","(num_c","(num_r","*","*/","/**","//","0","0)","0s","0s.","1","1.","162.","2.","3.","4.",";","=","==","=>","@param","@return:","base","bool","cell","check","class","code","column","column,","columns.","contain","determin","entir","false;","fill","find","first","frame.","futhermore,","here","https://www.lintcode.com/problem/set","int","integ","intern","lead","lintcod","list","lsit","matrix","matrix.size();","matrix:","matrix[0].size();","modifi","more","must_fill_1st_row","necessary.","need","noth","now","num_c","num_r","outer","problem","public:","result","return;","row","row,","row.","set","setzeroes(vector>","solut","specific,","step","step,","void","well.","write","zero","zeroes/descript","{","}"],"Flood and Fill/Island Perimeter.html":["(int","(x","*","*/","/**","0","0;","0},","1,","1},","1}})","463.",":",";","=",">","an","bool","class","column","const","directs({{1,","directs;","grid)","grid,","grid.size();","grid[0].size();","https://leetcode.com/problems/island","int","island","islandperimeter(vector>&","iswateredarea(","leetcod","m","m,","n","n)","n),","number","o(1)","o(m","perimet","problem","public:","row","sc:","solut","solution()","tc:","vector>&","x","x,","y,","{","{0,","}"],"Flood and Fill/Making a Large Island.html":["&&","(!(nx","(const","(int","+","0","0;","0},","1,","1;","1},","1}})","2;","827.",":",";","=",">",">=","an","area","areas;","auto&","class","color","color)","color;","d","d[0];","d[1];","directs({{1,","directs)","directs;","grid)","grid,","grid.size();","grid[x][y]","https://leetcode.com/problems/mak","int","island","island/","larg","largestisland(vector>&","leetcod","make","n","n,","nx","ny","problem","public:","rundfs(","select;","solut","solution()","unordered_map","vector>&","x","x,","y","y,","{","{0,","}"],"Post Office/Post Office Problem.html":["(i","(int","*","+","/**","0","0));","1)>","1478.","1][j]}","1][k]",";","=",">","alloc","build","class","cost","cost(n,","cost[i][j]:","cost[k","dp(k,","dp[i][j]","dp[i][j]:","first","hous","houses,","houses.","https://leetcode.com/problems/alloc","int","int_max));","j","j.","k)","leetcod","mailbox","mailboxes/","min","mindistance(vector&","minimum","offic","post","problem","public:","rang","serv","solut","vector(n,","within","{","{dp[i"],"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":["&prices)","(int","(size","*","*/","/**","//","0)","0;","1","149.",";","=","==","@param","@return:","array","best","buy","class","code","given","here","https://www.lintcode.com/problem/best","int","integ","lintcod","maximum","maxprofit(vector","min","opt","prices.size();","prices:","prices[0];","problem","profit","public:","return","sell","size","solut","stock","stock/descript","time","write","{","}"],"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":["(1,","(3,","(int","*","*/","+=",",","/**","0;","1","122.","1])","1];","2),","3","4","4)","5","6","7",":",";","=","an","ans;","best","buy","class","day","https://leetcode.com/problems/best","ii","int","leetcod","maxprofit(vector&","n","number","o(1)","o(n),","prices)","prices.size();","prices[i","prices[i]","problem","profit","public:","return","sc:","segments:","sell","solut","stock","tc:","time","{","}","};"],"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":["&prices)","(int","*","*/","+","/**","//","0;","151.",":","=","@param","@return:","^^^^^^^^","array","best","buy","buy_1st","buy_1st,","buy_2nd","buy_2nd,","buy_first","buy_second","class","code","conduct","day.","first","given","here","https://www.lintcode.com/problem/best","iii","iii/descript","int","integ","ith","lintcod","maximum","maxprofit(vector","max{","price","price);","price:","prices)","prices:","price}","problem","profit","public:","purchase.","return","second","sell","sell_1st","sell_1st,","sell_1st:","sell_2nd","sell_2nd,","sell_2nd:","sell_first","sell_second","sell_second;","selling.","solut","std::max(buy_first,","std::max(buy_second,","std::max(sell_first,","std::max(sell_second,","std::numeric_limits::min();","stock","time","write","{","}","};"],"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":["&prices)","(int","(k","(n","(price[j]","*","*/","+","+=","/","/*","/**","//","0","0)","0));","0;","1","1,","1]","1])","1];","1][h]","1][j]","2)","393.",";","=","==","=>",">=","@param","@return:","array","best","buy","cach","class","code","conduct","day,","days.","determin","dp(k","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","first","here","https://www.lintcode.com/problem/best","int","integ","iv","iv/descript","j","jth","k","k,","k:","lintcod","max","maxdiff","maxdiff,","maximum","maxprofit(int","max{","n","n^2)","o(k","o(kn)","optim","otherwise,","price[h])","price[j]","price[j]},","prices.size();","prices:","prices[i","prices[i]","problem","profit","public:","return","sell","solut","std::vector(n,","std::vector>","stock","sum","sum;","time","transact","updat","valu","vector","write","{","|","||","}"],"Knapsack Problem/Backpack I.html":["&a)","(int","*","*/","+","/**","//","1","1));","1,","1]);","1][j","1][j],","1][j];","1]]","92",";","=",">","@param","@return:","a:","a[i","a[i]","aggreg","backpack","backpack(int","capac","choos","class","code","continue;","denot","dp(n","dp[i","dp[i][j]","dp[i][j]:","dp[n][m];","first","given","here","hold","https://www.lintcode.com/problem/backpack/descript","int","integ","item","items.","j","j)","knapsack","lintcod","m","m,","m:","max(dp[i","maxim","maximum","n","n)","n),","number","o(m","problem","public:","return","sc:","size","solut","tc:","unit","up","vector","vector(m","weight","write","{","|","}","};"],"Knapsack Problem/Backpack II.html":["&a,","&v)","(int","*","*/","+","/**","//","1","1));","1,","125","1]","1][j","1][j]);","1][j];","1]],",";","=",">","@param","@return:","a:","a[i","a[i]","aggreg","backpack","backpackii(int","capac","class","code","continue;","denot","dp(n","dp[i","dp[i][j]","dp[i][j]:","dp[n][m];","first","given","here","hold","https://www.lintcode.com/problem/backpack","ii","ii/descript","int","integ","item","items.","j","j)","knapsack","lintcod","m","m,","m:","max(v[i","maxim","maximum","n","n)","n),","number","o(m","problem","public:","return","sc:","size","solut","tc:","unit","up","us","v:","v[i]","valu","vector","vector(m","w[i]","weight","write","{","|","}","};"],"Knapsack Problem/Backpack III.html":["&a,","&v,","(int","*","*/","+","/**","//","1","1));","1,","1]","1][j],","1][j];","1]]);","440",";","=",">","@param","@return:","a:","a[i","aggreg","array","backpack","backpackiii(vector","capac","class","code","continue;","dp(n","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","dp[n][m];","first","here","hold","https://www.lintcode.com/problem/backpack","iii","iii/descript","int","integ","item","j","j)","knapsack","lintcod","m","m)","m:","max(dp[i","maxim","n","n)","n),","number","o(m","problem","public:","return","sc:","solut","tc:","unit","up","us","v:","v[i","valu","vector","vector(m","w[i]","weight","write","{","|","}","};"],"Knapsack Problem/Backpack IV.html":["&nums,","(int","*","*/","*note:","+","/**","//","0","1));","1,","1][j]","1][j];","1]];","562",";","=",">","@param","@return:","array","backpack","backpackiv(vector","capac","class","code","continue;","dp(n","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","dp[n][target];","duplic","fill","first","here","hold","https://www.lintcode.com/problem/backpack","int","integ","item","items.","iv","iv/descript","j","j)","knapsack","lintcod","m","multipl","n","n)","n),","number","numbers,","nums:","nums[i","nums[i]","o(m","posit","problem","public:","return","sc:","solut","target)","target:","tc:","times.","unit","up","us","vector(target","way","weight","write","{","|","}","};"],"Knapsack Problem/Backpack V.html":["&nums,","(int","*","*/","*note:","+","/**","//","0","1));","1,","1][j","1][j]","1][j];","1]];","563",";","=",">","@param","@return:","array","backpack","backpackv(vector","capac","class","code","continue;","dp(n","dp[i","dp[i][j]","dp[i][j]:","dp[n][target];","fill","first","here","hold","https://www.lintcode.com/problem/backpack","int","integ","item","items.","j","j)","knapsack","lintcod","m","multipl","n","n)","n),","number","nums:","nums[i","nums[i]","o(m","posit","problem","public:","return","sc:","solut","target)","target:","tc:","times.","unit","up","us","v","v/descript","vector(target","way","weight","write","{","|","}","};"],"Knapsack Problem/Backpack VI.html":["&nums,","(int","*","*/","+","+=","/**","//","0","1","1);","1;","564",";","=",">=","@param","@return:","array","backpack","backpackvi(vector","class","code","combin","continue;","dp(target","dp[0]","dp[i","dp[i]","dp[i]:","dp[target];","duplic","element","given","here","https://www.lintcode.com/problem/combin","i)","int","integ","iv","iv/descript","lintcod","n","num];","number","numbers,","numbers.","nums:","nums[j]","nums[j]}","o(n","o(t)","posit","problem","public:","return","sc:","solut","sum","t","t),","target","target)","target:","tc:","up","us","vi","way","write","{","|","}","};"],"Knapsack Problem/K Sum.html":["&a,","(int","(k","*","+","/**","//","0","0)));","1,","1][h","1][j","1][j][h]","1][j][h];","1]];","89",";","=",">>","@param","a:","a[i","a[i]","array","class","code","compos","continue;","dp(n","dp[i","dp[i][j][h]","dp[i][j][h]:","dp[n][k][target];","first","h)","h.","here","https://www.lintcode.com/problem/k","int","integ","j","k","k,","k:","lintcod","number","posit","problem","public:","return","solut","std::vector(target","std::vector>(","sum","sum/descript","target)","us","way","write","{","|","}","};"],"Knapsack Problem/Coin Change.html":["(int","*","*/","+","/**","0","0;","1","1,","322.",":",";","=","amount","amount)","c","c),","chang","class","coin","coinchange(vector&","coins)","coins,","coins[j]","dollars.","dp(amount","dp[0]","dp[i","dp[i]","dp[i]:","given","https://leetcode.com/problems/coin","int","int_max);","leetcod","make","min","minimum","n","number","o(c)","o(n","problem","public:","sc:","solut","tc:","vector","{","|","}"],"Knapsack Problem/Coin Change II.html":["(int","*","+","/**","0","1);","1;","2","518.",":",";","=",">=","amount","amount,","c","c),","chang","change(int","class","coin","coin[k]","coin[k]]","coins)","dollars.","dp(amount","dp[0]","dp[i","dp[i]","dp[i]:","given","https://leetcode.com/problems/coin","ii","int","leetcod","make","n","number","o(c)","o(n","problem","public:","sc:","solut","sum","tc:","vector&","way","{","|","}"],"Knapsack Problem/Number of Dice Rolls with Target Sum.html":["(int","*","+","/**","0>","1","1));","1,","1155.","1;","1][j",";","=",">=","amount","class","d","d,","dice","dices.","dp(d","dp[0][0]","dp[i","dp[i][j]","dp[i][j]:","f","f,","face","first","https://leetcode.com/problems/numb","int","j","k","k]","leetcod","number","numrollstotarget(int","o(d","problem","public:","roll","sc:","solut","sum","sum/","t","t)","t),","target","target)","tc:","up","us","vector(target","way","{","|","}"],"Knapsack Problem/Target Sum.html":["(i","(memo[i].count(sum)","*","*/","+","/**","0,","0;","1)","1,","494.","=","==","class","const","element","findtargetsumways(vector&","https://leetcode.com/problems/target","i,","int","leetcod","long","memo(n);","memo)","memo);","memo[i][sum]","memo[i][sum];","n","n)","n,","number","nums,","nums.size();","nums[i],","o(n","private:","problem","public:","re","res;","return","sc:","solut","sum","sum,","t","t)","t),","target","target)","target,","tc:","topdown(","topdown(nums,","vector&","vector>","vector>&","{","}","};"],"Matrix Chain Multiplication/Stone Game.html":["&a)","(int","*","*/","+","/**","//","0));","0);","1","1,","1]","1][j]","476.","::max();",";","=",">","@param","@return:","a:","array","class","code","cost","dp(n,","dp[i][j]","dp[i][j]:","dp[i][k]","dp[k","game","game/descript","here","https://www.lintcode.com/problem/ston","int","integ","ith","j)","jth","k","lintcod","merg","min","minimum","pile","pile.","prefix(n","prefix[i];","prefix[j","problem","public:","solut","start","std::vector(n,","stone","stonegame(vector","sum","sum(i,","write","{","}"],"Matrix Chain Multiplication/Stone Game II.html":["&a)","(int","*","*/","+","/**","//","0","0));","0);","1","1,","1]","1][j]","2","593.","::max();",";","=","=>",">","@param","@return:","a:","array","b","break","c","class","code","consecut","cost","d","dp(nn,","dp[i][j]","dp[i][j]:","dp[i][k]","dp[k","e","flatten","game","good","here","https://www.lintcode.com/problem/ston","ii","ii/descript","int","integ","ith","j)","jth","k","lintcod","loop","merg","min","minimum","pile","pile.","prefix(nn","prefix[i];","prefix[j","problem","public:","replicas.","solut","start","std::vector(nn,","stone","stonegame2(vector","sum","sum(i,","way","write","{","}"],"Matrix Chain Multiplication/Burst Balloons.html":["&nums)","(int","*","*/","+","...","....",".......","........","...........","............","/**","//","0));","1","168.","1]","1][j]","1}","2,",";","=","@param","@return:","b","balloon","balloon.","balloons/descript","burst","class","code","coin","consid","dp(n","dp[i][j]","dp[i][j]:","dp[i][k","dp[k","here","https://www.lintcode.com/problem/burst","i>","int","integ","integer,","ith","j).","jth","k","l","last","lintcod","list","max","maxcoins(vector","maximum","nums:","nums[i","nums[j","nums[k]","problem","public:","range(i,","score","secur","solut","std::vector(n","write","{","|","}"],"Matrix Chain Multiplication/Unique Binary Search Trees.html":["(int","(k","*","*/","+","/**","//","0","0));","163.","1;","1]","1][j]",":",";","=","?","@param","@return:","binari","class","code","dp(n,","dp[i][j]","dp[i][j]:","dp[i][k","dp[k","gener","here","https://www.lintcode.com/problem/uniqu","i)","i>","int","integ","ith","jth","lintcod","n)","n:","node","node.","number","numtrees(int","problem","public:","rght","search","solut","start","std::vector(n,","sum","tree","trees/descript","uniqu","write","{","}"],"Matrix Chain Multiplication/Palindrome Partitioning III.html":["(int","+","/**","0","0));","0>","1));","1278.","1]","1][i]","2",";","=",">",">>","class","convert","cost","cost(n,","cost[j","dp(n,","dp[i][k]","dp[i][k]:","dp[j][k","each","https://leetcode.com/problems/palindrom","iii","iii/","int","int_max","k","k)","l","length","lintcod","min","minimum","palindrom","palindrome.","palindromepartition(str","partit","problem","public:","s,","solut","string","substr","vector(k,","vector(n,","{","}"],"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":["(!(r1","0));","0,","1))));","741.","=","c1,","c2)","cherri","cherrypickup(vector>&","class","const","dp(n,","dp,","grid)","grid,","grid.size();","https://leetcode.com/problems/cherri","int","leetcod","max(0,","n","n,","pickup","pickup/","private:","problem","public:","r1,","r2,","return","solut","topdown(","topdown(grid,","vector(n,","vector>&","vector>(","vector>>(","vector>>>","vector>>>&","{","}"],"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":["!=","&&","(!(nj","(const","(dp[i][j][k]","(i","(i,","(j","*/","+","...","/**","0","0)","0)));","0,","0;","0},","1)","1),","1);","1,","1463.","1},","1}})",":","=","==",">",">=","auto&","cherri","cherrypickup(vector>&","class","direct","direct[0];","direct[1];","directs({","directs)","directs;","dp(m,","dp,","dp[i][j][k]","dp[i][j][k];","func(i","grid)","grid,","grid.size();","grid[0].size();","grid[i][j]","grid[i][j];","grid[i][k];","https://leetcode.com/problems/cherri","i,","ii","ii/","int","j","j)","j,","k","k)","k),","leetcod","m","m)","m,","max{","n","n,","nj","nk","opt","opt;","pickup","private:","problem","public:","re","return","solut","solution()","topdown(","topdown(grid,","vector(n,","vector>","vector>&","vector>(n,","vector>>","vector>>&","{","{0,","{1,","}"],"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":["(dp[r][c]","(int","(m","(n","(r","+","0","0)","0;","1","1,","1;","329.",";","=","==",">",">&","c","c,","class","dp(m,","dp,","dp[r][c]","dp[r][c];","https://leetcode.com/problems/longest","increas","int","int_min;","leetcod","li","lis;","longest","longestincreasingpath(vector>&","m","matrix","matrix)","matrix,","matrix.size();","matrix/","matrix[0].size();","matrix[r][c])","matrix[r][c]));","max(lis,","n","n,","path","pred)","problem","public:","r","r,","return","solut","topdown(m,","vector(n));","vector>","vector>&","{","}","};"],"Stone Game/Stone Game.html":["!=","(dp[i][j]","(i","(i,",");","*","*/","+",",","/**","0,","0;","1,","1]","1][j]","877.","=","==",">","acquir","bool","class","consid","const","current","differ","dp(n,","dp)","dp),","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","dp[i][j];","game","https://leetcode.com/problems/ston","i,","int","int_min)","int_min));","j","j)","j).","j,","leetcod","max","max(","n","number","o(n^2)","o(n^2),","opt","opt;","optim","piles)","piles,","piles.size();","piles[i]","piles[i];","piles[j]","player","private:","problem","public:","rang","return","sc:","solut","ston","stone","stonegame(vector&","tc:","topdown(","topdown(piles,","valu","vector&","vector(n,","vector>","vector>&","{","|","}","};"],"Stone Game/Stone Game III.html":["!=","\"alice\"","\"bob\";","\"tie\";","(dp[i]","(i","(re","*","*/","+","/**","0","0)","0,","0;","1","1,","1406.","1]","2]","3]",":","=","==",">","?","[i,","acquir","class","consid","const","current","differ","dp(n,","dp)","dp);","dp[i","dp[i]","dp[i]:","dp[i];","game","https://leetcode.com/problems/ston","i,","iii","int","int_min)","int_min);","leetcod","max","n","n)","n,","number","o(n)","o(n),","opt","optim","piles)","piles,","piles.size();","piles[i","piles[i]","piles[i];","player","private:","problem","public:","rang","re","return","sc:","solut","stone","stonegameiii(vector&","string","sum","tc:","topdown(","topdown(piles,","valu","vector","vector&","{","|","}"],"Stone Game/Stone Game IV.html":["!=","(dp[i]","(i","(int","*","*/","+","/**","1","1)","1);","1510.",";","=","==",">=","bool","class","current","dp(n,","dp)","dp);","dp[i","dp[i]","dp[i]:","dp[i];","false;","game","https://leetcode.com/problems/ston","i,","int","iv","j","j]","leetcod","n","n)","n,","number","o(n","o(n)","or{","player","private:","problem","public:","re","remain","return","sc:","solut","sqrt(n)),","stone","tc:","topdown(","topdown(0,","vector","vector&","whether","win","winnersquaregame(int","{","|","}"],"Stone Game/Stone Game V.html":["!=","(dp[i][j]","(i","(int","(right","*","*/","+","/**","0","0,","0;","1)","1));","1);","1,","1563.","2)","3),",";","=","==",">","^","class","const","continue;","dp(n,","dp)","dp));","dp);","dp[i][j]","dp[i][j];","game","https://leetcode.com/problems/ston","i,","int","int_min;","j)","j,","k","k,","leetcod","left","left)","max(opt,","n","number","o(n","opt","opt;","piles)","piles.size();","prefix(n","prefix,","private:","problem","public:","return","right","right)","sc:","solut","stone","stonegamev(vector&","tc:","topdown(","topdown(prefix,","v","vector","vector&","vector(n,","vector>&","{","}","};"],"Jump Game/Jump Game III.html":["!visit[dst])","&&","(!q.empty())","(arr[src]","(dst","*","*/","+","/**","0","0)","1306.","=","==","arr,","arr.size();","arr[src];","bool","canreach(vector&","class","dst","element","false;","game","https://leetcode.com/problems/jump","iii","int","jump","leetcod","n","number","o(n)","o(n),","problem","public:","q.emplace(dst);","q.emplace(start);","q.front();","q.pop();","q;","queue","return","sc:","solut","src","start)","tc:","true;","vector","visit(n);","visit[dst]","{","}","};"],"Jump Game/Jump Game IV.html":["!visit[src","&&","(!queue.empty())","(int","(src","*","*/","/**","0","0;","1);","1345.","1]","1])",";","=","arr)","arr.size();","class","element","game","https://leetcode.com/problems/jump","int","iv","jump","leetcod","level","map;","minjumps(vector&","n","number","o(n)","o(n),","problem","public:","queue","queue.emplace(0);","queue.emplace(src","queue.size();","queue;","sc:","size","solut","tc:","true;","unordered_map>","visit(n);","visit[0]","visit[src","{","}"],"Jump Game/Jump Game V.html":["&","(arr[i]","(dp[bgn]","(int","*","*/","+","/**","//","0","0)","0);","1","1);","1340.","1;",";","=",">",">=","an","arr,","arr.size();","arr[i],","bar","bgn","bgn,","break;","check","class","d","d)","d),","d,","dp(n);","dp)","dp));","dp[bgn]","dp[bgn];","end","game","given","h)","h,","https://leetcode.com/problems/jump","i)","i,","int","jump","leetcod","left","max(bgn","max(opt,","maxjumps(vector&","min(bgn","n","n,","neighbors.","number","o(n","o(n)","opt","opt;","problem","public:","rang","return","sc:","solut","tc:","topdown(arr,","v","v/","vector","vector&","{","}","};"],"Jump Game/Frog Jump.html":["!=","&&","(i","(int","(memo[i].count(k)","(next","(res)","(stones[0]","*","*/","+","/**","//","0","0,","1","1)","1,","1;","403.",";","=","==",">","bool","cancross(vector&","class","dp[i][j]:","false;","frog","hop","https://leetcode.com/problems/frog","i,","int","ith","j","jump","k","k,","k;","leetcod","map;","memo(n);","memo)","memo);","memo[i][k]","memo[i][k];","n","n,","next","next,","num","num,","number","o(n^2)","o(n^2),","private:","problem","public:","re","reach","return","sc:","solut","step","stones)","stones,","stones.count(next)","stones.size();","stones[1]","stones[next],","take","target","tc:","topdown(","topdown(map,","topdown(stones,","true;","unit","unordered_map","unordered_map&","vector>&","whether","{","||","}","};"],"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":["!=","%","(dp[i][j]","(i","(re","*","*/","+","/","/**","0;","1)","1));","1,","1269.","1;","1]","1][j","2","7)",":","=","array","class","dp(","dp)","dp);","dp[0][0]","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","dp[i][j];","https://leetcode.com/problems/numb","i,","index","int","j","j)","j,","leetcod","length","long","min(n,","mod(1e9","mod);","mod;","n","n)","n,","number","numways(int","o(","o(s^2)","place","private:","problem","public:","re","reach","return","s","s)),","s,","same","sc:","solut","solution()","stay","step","steps.","steps/","take","tc:","topdown(","topdown(0,","topdown(i","topdown(i,","vector(","vector>","vector>&","way","{","||","}","};"],"Fibonacci Sequence/Min Cost Climbing Stairs.html":["(int","*","*/","+","/**","1);","1]","2","2]","746.",";","=","cell","class","climb","cost","cost)","cost.size();","cost[i","dp(n","dp[i","dp[i]","dp[i]:","hop.","https://leetcode.com/problems/min","int","ith","leetcod","min","mincostclimbingstairs(vector&","minimum","n","number","o(n)","o(n),","problem","public:","reach","sc:","solut","stair","tc:","vector","{","|"],"Fibonacci Sequence/Decode Ways.html":["&s)","'0')","'1')","'2')","('0'","(int","(n","(str[s1]","*","*/","+","+=","...,","/**","//","0","0)","0;","1","1)","1);","1,","1;","1]","1]:","2","2)","2,","2]","2];","4,","512.","6}","8,","9}",":",";","=","==",">","?","@param","@return:","class","code","countonedigit(const","counttwodigits(const","counttwodigits(s,","decod","digit:","digits:","dp(n","dp[i","dp[i]","dp[i]:","dp[n];","encod","end","handl","here","https://www.lintcode.com/problem/decod","i.","index","int","integer,","lintcod","messag","n","number","numdecodings(str","prefix","private:","problem","public:","return","s.length();","s1)","s1,","s2)","s:","s[i","s[i]:","solut","std::string&","std::vector","str,","string,","way","ways/descript","write","{","{0,","{1,","{3,","{7,","}"],"Fibonacci Sequence/Decode Ways II.html":["&s)","(i","(int","(n","*","*****","******","*******","*/","+",",","...,","/**","//","0","0)","0);","0,","0;","1","1)","1,","15","1;","1]","1]:","2","2)","2]","2]:","6","676.","6}","8,","9","9}",":",";","=","==",">","@param","@return:","be","class","code","decod","dp(n","dp[0]","dp[i","dp[i]","dp[i]:","encod","end","given","here","https://www.lintcode.com/problem/decod","ii","ii/descript","int","integ","ith","j","letter.","lintcod","messag","mod(1000000007)","n","number","numdecodings(str","problem","public:","return","s.length();","s:","s[2]:","s[i","s[i]:","solut","solution()","std::vector","substr","way","write","{","{0,","{1,","{3,","{7,","}"],"Fibonacci Sequence/House Robber.html":["&a)","(int","(n","*","*/","+","/**","//","0)","0);","0;","1]","2","2],","392.",";","=","==","@param","@return:","a.size();","a:","a[0];","a[1]);","aggreg","amount","array","class","code","dp(n,","dp[0]","dp[1]","dp[i","dp[i]","dp[i]:","first","here","hous","houserobber(vector","houses.","https://www.lintcode.com/problem/hous","int","integ","lintcod","long","maximum","max{","money","n","neg","non","problem","profit","profit[i]","public:","return","rob","robber","robber/descript","solut","std::max(a[0],","std::vector","tonight","write","{","}"],"Fibonacci Sequence/House Robber II.html":["&nums)","(0,","(1,","(a","(b","(int","(n","*","*/","+","/**","//","0)","0);","0,","0;","1)","1));","1).","1,","1.","1]","1]);","1st","2","2),","2).","2.","2],","534.",";","=","==","=>","@param","@return:","aggreg","amount","array","b","bgn","bgn,","break","c","class","code","d","d)","dp(n,","dp[bgn","dp[bgn]","dp[i","dp[i]","dp[i]:","e","e)","end)","first","gener","here","hous","house,","houserobber2(vector","houses.","https://www.lintcode.com/problem/hous","ii","ii/descript","int","integers.","key","last","lintcod","loop","max","maximum","money","n","n,","neg","non","nums,","nums.size();","nums:","nums[0];","nums[bgn","nums[bgn];","private:","problem","profit","profit[i]","public:","rang","respectively.","return","rob","rob(const","rob(nums,","robber","solut","solv","std::max(nums[bgn],","std::max(rob(nums,","std::vector","std::vector&","subproblem","tonight","within","write","{","}"],"Fibonacci Sequence/House Robber III.html":["(!root)","(memo.count(root)","(root","*","*/","*left,","*right;","+","/","/**","//","0,","0;","1)","535.","=","==",">l",">l]",">left",">left)",">left,",">r",">r]",">right",">right)",">right,",">val","@param","@return:","\\","aggreg","amount","b","binari","c","c.","class","code","d","definit","dp[c","dp[c]","dp[c]:","e","f","g","here","hous","houserobber3(treenod","https://www.lintcode.com/problem/hous","iii","iii/descript","int","l","lintcod","ll","lr","max","max;","maximum","memo)","memo);","memo;","memo[root]","memo[root];","money","null;","private:","problem","profit","public:","r","r);","return","rl","rl,","rob","robber","root","root)","root,","root:","rr","runpostorder(root","runpostorder(root,","runpostorder(treenode*","solut","std::max(root","std::unordered_map","std::unordered_map&","subtre","tonight","tree.","treenod","treenode(int","treenode:","val)","val;","write","{","|","}","};"],"Fibonacci Sequence/4 Keys Keyboard.html":["(i","(int","*","*/","+","/**","//","0","1","1)","1;","1]","4","867.",";","=","@param","@return:","class","code","dp(n);","dp[0]","dp[i","dp[i]","dp[i]:","dp[j]","here","https://www.lintcode.com/problem/4","int","integ","j","key","keyboard","keyboard/solut","keys.","letter","lintcod","max","maxa(int","maximum","n)","n:","number","press","problem","public:","return","solut","time","write","{","|"],"Fibonacci Sequence/Minimum Cost for Tickets.html":["(int","*/","+",",we","/*","0;","1","1);","1,","1]","30]","7]","983.",":",";","=","class","cost","cost[d]","cost[m]","cost[w]","costs)","day","day.","days)","days,","days.back();","don't","dp(n","dp[0]","dp[day]","dp[i","dp[i]","dp[i]:","https://leetcode.com/problems/minimum","int","ith","leetcod","min","mincosttickets(vector&","minimum","n","need","problem","public:","solut","ticket","tickets/","till","travel","vector","vector&","{","|","}"],"Fibonacci Sequence/Paint Fence.html":["(diff_color","(int","(k","(n","*","*/","+","/**","0)","0;","1","1)","1st","2)","276.","2nd","3","3rd",";","=","==","=>","class","color","diff","diff_color","differ","fenc","fence/","https://leetcode.com/problems/paint","int","k","k)","k;","k^2","leetcod","make","n,","numways(int","on","paint","problem","public:","return","same","same_color","same_color)","solut","{","}"],"String and Sequence Extremum/Minimum Edit Distance.html":["(int","*","*/","+",",","/**","0","1","1));","1,","1]","1],","1][j","1][j]","72.",";","=","==","a[i]","a[i].","b","b[j],","class","cost","delet","distanc","dp(n","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","edit","end","https://leetcode.com/problems/edit","index","insert","int","j.","leetcod","length","letter.","min","mindistance(str","minimum","ns","nt","o(","otherwis","prefix","problem","public:","replac","s","s,","s.length();","sc:","solut","string","t","t)","t),","t.length();","tc:","transform","vector(nt","vector>","{","|"],"String and Sequence Extremum/One Edit Distance.html":["&s,","&t)","(diff","(int","*","*/","+","++i;","++j;","/**","0","0)","0;","1)","161.",";","=","==",">","bool","checkstringswithdifferentlength(s,","checkstringswithsamelength(","checkstringswithsamelength(s,","class","const","count","diff","distanc","edit","false;","https://leetcode.com/problems/on","int","isoneeditdistance(str","leetcod","len)","len_","len_s);","len_s,","len_t","len_t)","len_t);","length","o(","on","private:","problem","public:","return","s","s,","s.length();","sc:","solut","std::abs(len_","string","string&","t","t)","t),","t,","t.length();","tc:","true;","{","}","};"],"String and Sequence Extremum/Longest Common Subsequence.html":["(int","*","*/","+",",","/**","0));","1","1,","1143.","1]","1])","1][j","1][j],",";","=","==","a(0,","a[i]","b(0,","b[j],","class","common","dp(n1","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","first","https://leetcode.com/problems/longest","i)","int","j).","lc","leetcod","length","longest","longestcommonsubsequence(str","max(dp[i","n1","n2","o(","otherwis","prefix","problem","public:","s","sc:","second","solut","string","subsequ","t","t)","t),","tc:","text1,","text1.length();","text2)","text2.length();","vector(n2","vector>","{","|"],"String and Sequence Extremum/Shortest Common Supersequence.html":["(int","(trace[r][c]","*/","+",",","/**","0","0)","0));","1","1,","1092.","1]","1][j","1][j],","1]}","2,","3",";","=","==",">","c","c;","c]);","class","common","dp(n1","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","end","enum","https://leetcode.com/problems/shortest","int","j.","leetcod","length","min{dp[i","n1","n2","offset","otherwis","prefix","private:","problem","public:","r]);","return","s1","s1)","s1,","s1.length();","s1[i]","s2","s2)","s2.length();","s2[j],","sc","scs.end());","scs.push_back(s1[","scs.push_back(s2[","scs;","shortest","shortestcommonsupersequence(str","solut","std::reverse(scs.begin(),","string","supersequ","supersequence/","trace(n1","vector(n2","vector>","{","|","||","}","};"],"String and Sequence Extremum/Longest Common Substring.html":["&a,","&b)","(int","*","*/","+",",","/**","//","0","0));","0;","1","1,","1]","1][j","2","79.",";","=","==","@param","@return:","a(0,","a.size();","a:","a[i]","abcd,","an","b","b(0,","b.size();","b:","b[j],","c","cbce","class","code","common","d","dp(na","dp[i","dp[i][j]","dp[i][j]:","e","e.g.:","here","https://www.lintcode.com/problem/longest","i)","int","j).","length","lintcod","longest","longestcommonsubstring(str","na","nb","o(","otherwis","prefix","problem","public:","s","sc:","solut","string","substr","substring.","substring/descript","t","t)","t),","tc:","vector(nb","vector>","write","{","|"],"String and Sequence Extremum/Longest Palindromic Subsequence.html":["&s)","(int","(n","*","*/","+",",","/**","//","0","0)","0));","0;","1000","1]","1],","1][j","1][j]","2","667.",";","=","==","@param","@return:","class","code","dp(n,","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","end","here","https://www.lintcode.com/problem/longest","index","int","j.","length","lintcod","longest","longestpalindromesubseq(str","maximum","max{","n","otherwis","palindrom","problem","public:","return","s","s.length();","s:","s[i]","s[j],","solut","start","std::vector(n,","std::vector>","subsequ","subsequence'","subsequence/descript","substr","write","{","|","}"],"String and Sequence Extremum/Longest Palindromic Substring.html":["&&","(int","*","*/","+","/**","0","0;","1,","1]","1][j","5.",";","=","==","alreadi","begin","bgn","class","data","dp(n,","end","extra","https://leetcode.com/problems/longest","index","information.","int","j","keep","leetcod","len","length","longest","longestpalindrome(str","n","need","o(s^2)","o(s^2),","offset","palin[i","palin[i][j]","palin[i][j]:","palindrom","palindromic.","problem","public:","s","s)","s.length();","s[i]","s[j]","sc:","show","solut","start","string","structur","substr","substring,","tc:","track","vector(n));","vector>","whether","{"],"String and Sequence Extremum/Longest Increasing Subsequence.html":["(int","(l","*","+","/**","0","0,","1","1;","300.",";","=","class","continue;","element","elements.","end","https://leetcode.com/problems/longest","increas","index","int","l","l[i]","l[i]:","l[j]","last","leetcod","length","lengthoflis(vector&","li","lis.","lis.back())","lis.emplace_back(nums[0]);","lis.emplace_back(nums[i]);","lis.size()","lis;","longest","max{","n","number","nums)","nums.size();","nums[i]","o(n)","o(nlogn),","problem","public:","r","sc:","solut","subsequ","such","tc:","{","|","}","},"],"String and Sequence Extremum/Longest Repeating Substring.html":["(int","*","+","/**","0;","1","1));","1,","1062.",";","=","==",">","an","class","common","dp(n","dp[i][j]","dp[i][j]:","end","https://leetcode.com/problems/longest","index","int","j","j.","leetcod","length","longest","longestrepeatingsubstring(str","o(s^2)","o(s^2),","on","problem","public:","repeat","s","s)","s[i]","s[j]","sc:","share","solut","string","substr","substring/","tc:","vector(n","{","|"],"String and Sequence Extremum/Longest Consecutive Sequence.html":["(!set.empty())","(set.count(next)","*","*/","*it;","+","++local;","++next;","/**","0;","1)","128.","1;","=","==","an","ans;","auto","class","consecut","element","https://leetcode.com/problems/longest","int","leetcod","local","local);","longest","longestconsecutive(vector&","max(ans,","n","next","next;","num","number","nums)","nums.end());","o(n)","o(n),","problem","public:","return","sc:","sequenc","set(nums.begin(),","set.begin();","set.erase(it);","set.erase(next);","solut","tc:","unordered_set","{","}","};"],"String and Sequence Extremum/Longest Palindrome.html":["%","(char","(f","(has_odd)","(int","++freq[ch];","++len;","+=","0);","0;","1)","1;","2","409.",":","=","==","bool","ch","class","f","f;","false;","freq(128,","freq)","has_odd","https://leetcode.com/problems/longest","int","leetcod","len","len;","longest","longestpalindrome(str","palindrom","problem","public:","return","s)","solut","true;","vector","{","}","};"],"String and Sequence Extremum/Decrease to be Palindrome.html":["&s)","(l","*","*/","/**","//","0,","0;","1784.","1;","=","@param","@return:","class","code","count","decreas","here","https://www.lintcode.com/problem/decreas","int","l","lintcod","number","numberofoperations(str","oper","palindrom","palindrome/descript","problem","public:","r","s","s.length()","s:","solut","string","write","{"],"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":["(int","*","*/","+",",","/**","0","0));","1","1312.","1]","1],","1][j","1][j],",";","=","==","behind","class","dp(n,","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","front","https://leetcode.com/problems/minimum","insert","int","j)","leetcod","length","letter","make","min","minimum","mininsertions(str","n","number","o(s^2)","o(s^2),","otherwis","palindrom","palindrome/","palindromic.","problem","public:","s","s(i,","s)","s.length();","s[i]","s[j]","s[j],","sc:","solut","step","string","substr","tc:","vector(n,","vector>","{","|"],"String and Sequence Extremum/Uncrossed Lines.html":["(int","*","*/","+",",","/**","1","1));","1,","1035.","1]","1][j","1][j]",";","=","==","b.","class","dp(n","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","first","https://leetcode.com/problems/uncross","int","j","leetcod","length","line","lines/","max","maxuncrossedlines(vector&","ns","nt","number","o(","otherwis","problem","produc","public:","s","s,","s.size();","s[i]","sc:","solut","string","t","t)","t),","t.size();","t[j],","tc:","uncross","us","vector&","vector(nt","vector>","{","|"],"String and Sequence Properties/Is Subsequence.html":["(int","*","*/","/**","0","0;","392.",";","=","bool","class","https://leetcode.com/problems/i","int","issubsequence(str","j","leetcod","length","ls","lt","o(1)","o(t),","problem","public:","s,","s.length();","sc:","solut","string","subsequ","t","t)","t.length();","tc:","{"],"String Scramble/Distinct Subsequences.html":["(int","*","*/","+",",","/**","0","1","1));","1,","115.","1]","1][j","1][j]","1e9","2","3","7;",";","=","==","b","charact","class","distinct","dp(n","dp[i","dp[i][j]","dp[i][j]:","end","https://leetcode.com/problems/distinct","int","ith","jth","leetcod","length","long","mod","ns","nt","number","numdistinct(str","o(","otherwis","posit","position.","prefix","problem","produc","public:","r","remov","s","s,","s.length();","s[i]","sc:","solut","string","subsequ","t","t)","t),","t.length();","t[j],","tc:","vector(nt","vector>","way","{","|"],"String Scramble/Interleaving String.html":["!=","&&","(i","(int","(n1","(s1[i]","(s2[j]","*","*/","+","/**","1","1));","1,","1])","1][j])","97.",";","=","==","bool","charact","class","dp(n1","dp[0][0]","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","false;","first","form","https://leetcode.com/problems/interleav","int","interleav","isinterleave(str","j","j)","j]","leetcod","length","n1","n2","n3","n3)","o(s1","problem","public:","return","s1","s1,","s1.length();","s2","s2)","s2),","s2,","s2.","s2.length();","s3","s3)","s3.length();","s3[i","sc:","solut","string","tc:","true;","us","vector(n2","vector>","whether","{","||","}"],"String Scramble/Scramble String.html":["!=","\"abc\",","\"abcde\".","\"de\",","\"deabc\"","&&","'a'];","(char","(freq(s1)","(int","(memo.count(s1)","(s1","*","*/","+","++f[ch","/**","1","1)","2","87.",":",";","=","==","=>","atgre,","bool","ch","check","class","const","decomps","deriv","determin","eatgr","equal:","example,","f(26);","f;","false;","freq(const","freq(s2))","gener","given","great","helper(const","helper(s1,","https://leetcode.com/problems/scrambl","int","interexchan","interexchang","isscramble(str","leetcod","length","memo)","memo);","memo;","memo[s1].count(s2)","memo[s1][s2]","memo[s1][s2];","n","o(n^4)","o(n^5),","one!","part","prefix","prefix,","private:","problem","public:","respect","return","s","s)","s1,","s1.length();","s2)","s2,","sc:","scrambl","solut","sp","ss","string","string&","strings,","substr","suffix,","suffix.","t","t,","tc:","tgrea","tp","tp,","true;","ts","ts,","unordered_map>","unordered_map>&","vector","version","{","}","};"],"String Scramble/Wildcard Matching.html":["'*'","'?',","(int","*","***a","**,","*,","*/","+",",","/**","//","1","1));","1,","1]","1][j","1][j]","44.",";","=","==","bool","class","dp(l","dp[0][0...lp]","dp[0][0]","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","end","fals","https://leetcode.com/problems/wildcard","index","int","ismatch(str","j.","leetcod","length","lp","ls","match","o(","otherwis","p","p)","p),","p.length();","p:","p[j]","pattern","prefix","problem","public:","s","s,","s.length();","s:","s[i]","sc:","solut","string","tc:","true;","vector(lp","vector>","whether","wildcard","{","|","||"],"String Scramble/Regular Expression Matching.html":["&&","'*'","'*')","'.'","'.')","'.',","(int","(s[i","*","*/","*c**","+",",",".*c*","/**","//","1));","1,","10.","1]","1][j","1][j]","1][j];","2","2]","2];",";","=","==","a*b*,","assign","bool","class","default,","dp(l","dp[0][0...lp]","dp[0][0]","dp[0][i]","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","dp[ls][lp];","end","express","fals","https://leetcode.com/problems/regular","index","int","ismatch(str","j.","leetcod","length","lp","ls","match","match.","o(","otherwis","p","p)","p),","p.length();","p:","p[j","p[j]","pattern","plan","prefix","problem","public:","regular","reson","return","s","s,","s.length();","s:","s[i]","sc:","solut","string","tc:","true:","true;","vector(lp","vector>","whether","{","|","||","}","};"],"Game Theory/Coins in a Line.html":["(int","(l)3","(n","(w)2","*","*/","+","/","/**","//","0)","1","1(w)","1,","1.","1]","2","2(w)","2)","2.","2]","3","394.","4(w)",";","=","==","@param","@return:","\\","alway","b","bool","boolean","class","code","coin","competitor","dp(n","dp[1]","dp[2]","dp[i","dp[i]","dp[i]:","equal","fals","false);","false;","first","firstwillwin(int","game","game.","go","guarante","hard","here","https://www.lintcode.com/problem/coin","integ","line","line.","line/descript","lintcod","losabl","lose","matter","n","n)","n:","player","problem","public:","push","return","solut","state,","state.","std::vector","step","then,","tries,","true","true;","whether","win","winnabl","winnable.","write","{","||","}"],"Game Theory/Coins in a Line II.html":["&values)","(i+1)th","(int","(n","(sum[i","*","*/","+",",","/**","//","0","0)","0);","1","1)","1.","1]","1])","1];","2","2)","2.","2]","2])","2];","3","395.",";","=","==",">",">=","@param","@return:","aggreg","b","b,","bool","boolean","choices.","class","code","coin","coin,","competitor","cover","current","dp(n,","dp[0]","dp[i","dp[i]","dp[i]:","dp[n","equal","false;","first","firstwillwin(vector","here","https://www.lintcode.com/problem/coin","i)","ii","ii/descript","int","integ","iteration.","ith","last","left.","line","lintcod","max","maximum","n","next","one.","person","pick","plan_a","plan_b","plan_b);","player","problem","public:","remain","remained,","return","sa","sa:","sb''.","sb'.","sb:","solut","std::max(plan_a,","std::vector","sum(i","sum(i)","sum(i):","sum(n,","sum[0];","sum[i","sum[i]","sum[n","total","true","true;","valu","values.size();","values:","values[i","values[i]","values[i];","values[n","vector","win","write","{","|","||","}","};"],"Game Theory/Coins in a Line III.html":["&values)","(int","(j","(n","*","*/","+","/**","//","0","0)","0));","1)","1,","1.","1]","1];","1][j]","2","2.","396.",";","=","==","@param","@return:","aggreg","b","b,","bool","boolean","choices.","class","code","coin","coin,","competitor","cover","current","dp(n,","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","equal","false;","first","firstwillwin(vector","here","https://www.lintcode.com/problem/coin","iii","iii/descript","int","integ","iteration.","ith","j","j)","j):","jth","left.","line","lintcod","max","maximum","n","next","one.","person","pick","player","problem","public:","remain","remained,","return","sa","sa:","sb''.","sb'.","sb:","solut","std::vector(n,","std::vector>","sum(i","sum(i,","sum(n,","sum[0][n","sum[i][j]","total","true","true;","valu","values.size();","values:","values[i]","values[j]","vector","win","write","{","|","}","};"],"Game Theory/Stones in a Line.html":["(int","*/","+","/**","0","0));","0;","1))","1,","1]","1][j]","877.",";","=",">","alex","bool","class","differ","dp(n,","dp[i","dp[i][j","dp[i][j]","dp[i][j]:","end","function","game","game/","https://leetcode.com/problems/ston","i,","index","int","j","j),","j):","j.","line","lintcod","max","max(piles[i]","maximum","n","object","pile","piles)","piles.size();","piles[i]","piles[j]","problem","public:","score","select(piles,","solut","start","stone","stonegame(vector&","vector(n,","vector>","{","|","}","};"],"Iterator/Binary Tree Iterative Preorder Traversal.html":["(!stk.empty())","(node","(root)","*","*/","*left,","*left;","*right)","*right;","/**","144.",":","=",">left)",">left);",">right)",">right);",">val);","ans.emplace_back(nod","ans;","auto","binari","class","definit","https://leetcode.com/problems/binari","int","iter","leetcod","left(left),","left(nullptr),","n","node","node.","nodes.","number","o(n)","o(n),","preorder","preordertraversal(treenode*","problem","public:","return","right(nullptr)","right(right)","root)","sc:","solut","stack","stk.emplace(nod","stk.emplace(root);","stk.pop();","stk.top();","stk;","struct","tc:","travers","tree","treenod","treenode()","treenode(int","val(0),","val(x),","val;","vector","x)","x,","{","{}","}","};"],"Iterator/Binary Tree Iterative Inorder Traversal.html":["(!stk.empty())","(node)","(root)","*","*/","*left,","*left;","*right)","*right;","/**","94.",":","=",">left;",">right;",">val);","ans.emplace_back(nod","ans;","auto","binari","class","definit","https://leetcode.com/problems/binari","inord","inordertraversal(treenode*","int","iter","leetcod","left(left),","left(nullptr),","n","node","node.","number","o(n)","o(n),","problem","public:","return","right(nullptr)","right(right)","root","root)","sc:","solut","stack","stk.emplace(node);","stk.emplace(root);","stk.pop();","stk.top();","stk;","struct","tc:","travers","tree","treenod","treenode()","treenode(int","val(0),","val(x),","val;","vector","x)","x,","{","{}","}","};"],"Iterator/Binary Tree Iterative Postorder Traversal.html":["&&","(!stk.empty()","(!stk.empty())","(root","(root)","*","*/","*left,","*left;","*right)","*right;","/**","145.",":","=","==",">left)",">left;",">right,",">right;",">val);","ans.emplace_back(nod","ans;","auto","binari","class","collectnodes(root,","collectnodes(stk.top()","collectnodes(treenode*","definit","https://leetcode.com/problems/binari","int","iter","leetcod","left(left),","left(nullptr),","n","node","node.","number","o(n)","o(n),","postord","postordertraversal(treenode*","private:","problem","public:","return","right(nullptr)","right(right)","root","root)","root,","sc:","solut","stack","stack&","stk)","stk);","stk.emplace(root);","stk.pop();","stk.top()","stk.top();","stk;","struct","tc:","travers","tree","treenod","treenode()","treenode(int","val(0),","val(x),","val;","vector","void","x)","x,","{","{}","}","};"],"Iterator/Inorder Successor in BST.html":["(root","(root)","*","*/","*left;","*right;","/**","285.",":","=",">",">left;",">right;",">val",">val)","binari","bst","class","definit","h","height","https://leetcode.com/problems/inord","inord","inordersuccessor(treenode*","int","leetcod","left(null),","node.","nullptr;","o(1)","o(h),","p","p)","problem","public:","return","right(null)","root","root,","root;","sc:","solut","struct","succ","succ;","successor","sucessor","tc:","tree","treenod","treenode(int","treenode*","val(x),","val;","x)","{","{}","}","};"],"Iterator/Flatten Binary Tree to Linked List.html":["(!root)","(last_l)","(last_r)","*","*/","*left,","*right;","/","/**","//","1","1:","2","2:","3","3*","3:","4","4*","453.","4:","5","6","6*","=","=>",">left",">left);",">left;",">right",">right);",">right;",">val","@param","@return:","\\","auto","b","binari","c","case","child","children","class","code","definit","demo:","flatten","flatten(treenod","here","https://www.lintcode.com/problem/flatten","int","last","last_l","last_l;","last_r","last_r;","left","link","lintcod","list","list/","node.","noth","null;","nullptr;","private:","problem","public:","return","right","root","root)","root:","root;","runpostorder(root","runpostorder(root);","runpostorder(treenode*","solut","tree","treenod","treenode(int","treenode*","treenode,","treenode:","two","val)","val;","void","write","{","}","};"],"Iterator/Flatten Nested List Iterator.html":["&getlist()","&list)","(!stk.empty())","(i.hasnext())","(int","(stk.top().isinteger())","*","*/","/**","//","0","1","341.",";","=",">=","allow","auto","bool","call","class","const","const;","cout","creat","elem","elem;","false;","flatten","getinteger()","hasnext()","hold","holds,","https://leetcode.com/problems/flatten","i(nestedlist);","i)","implement","instanti","int","integ","integer,","interfac","isinteger()","it,","iter","leetcod","list","list.","list.size();","lists.","n","nest","nestedinteg","nestediter","nestediterator(vector","next()","object","private:","problem","public:","result","return","singl","solut","specul","stack","stk.emplace(move(list[i]));","stk.pop();","stk.top().getinteger();","stk.top().getlist();","stk;","such:","true","true;","undefin","vector","{","}","};"],"Iterator/ZigZag Iterator.html":["(!v1.empty())","(!v2.empty())","(i.hasnext())","(rover","(vec_bgn","*","*vec_bgn++;","++k;","++rover;","/**","0;","281.","=","==",">",">first;",">second;","auto&","bool","call","class","cout","elem","elem;","end","end)","end;","hasnext()","https://leetcode.com/problems/zigzag","i(v1,","instanti","int","iter","k","k;","leetcod","list::iterator,","next()","object","private:","problem","public:","return","rover","rover,","slots.begin();","slots.end();","slots.erase(rover);","slots.push_back({v1.begin(),","slots.push_back({v2.begin(),","slots;","solut","such:","v1,","v1.end()});","v2)","v2);","v2.end()});","vec_bgn","vec_end","vec_end)","vector&","vector::iterator>>","vector::iterator>>::iter","zigzag","zigzagiter","zigzagiterator(vector&","{","}","};"],"Iterator/ZigZag Iterator II.html":["%","(!vec.empty())","(auto&","(bgns[turn]","(solution.hasnext())","(total","(turn","*","*/","*/zigzagiterator2(vector>&","*bgns[turn];","+","++bgns[turn];","++total;","/*","/**","//","0)","0;","1)","1d","541.",":","=","==",">","@param","@return:","bgns.emplace_back(vec.begin());","bgns.erase(bgns.begin()","bgns.push_back(vec.begin());","bgns;","bool","cach","cache;","call","class","code","elem","elem;","ends.emplace_back(vec.end());","ends.erase(ends.begin()","ends.push_back(vec.end());","ends;","ends[turn])","false;","hasnext()","here","https://www.lintcode.com/problem/zigzag","ii","ii/descript","instanti","int","integ","intial","iter","lintcod","list","necessari","next","next()","object","ouptut","private:","problem","public:","result","result.push_back(solution.next());","return","solut","solution(vecs);","std::vector::iterator>","std::vector>","such:","total","total(0),","total;","true","true;","turn","turn(0)","turn(0),","turn);","turn,","turn;","vec","vecs(vecs)","vecs)","vecs:","vecs;","vector","write","zigzag","zigzagiterator2","{","}","};"],"Iterator/Nested List Weight Sum.html":["&getlist()","&ni);","(!stk.empty())","(int","(item.isinteger())","*","*/","+","+=","/**","//","0","0;","1","1});","339.",";","=",">=","add","add(const","allow","an","ans;","auto","auto&","bool","class","const","const;","constructor","creat","depth","depth;","depthsum(vector&","empti","getinteger()","hold","holds,","https://leetcode.com/problems/nest","i)","implement","initi","int","integ","integer,","integer.","interfac","isinteger()","it,","it.","item","item.getinteger()","item.getlist();","leetcod","list","list)","list.","list.size();","lists.","n","nest","nested.size();","nestedinteg","nestedinteger();","nestedinteger(int","number","o(n)","o(n),","object","problem","public:","rec","rec.first;","rec.second;","result","return","sc:","set","setinteger(int","singl","solut","specul","stack>","stk.pop();","stk.push({list[i],","stk.push({nested[i],","stk.top();","stk;","sum","tc:","true","undefin","value);","vector","void","weight","{","}","};"],"Iterator/Nested List Weight Sum II.html":["&getlist()","&ni);","(!stk.empty())","(auto&","(int","(item.isinteger())","(max_depth","*","*/","+","+=","/**","//","0","0;","1","1);","1});","364.",":",";","=",">=","add","add(const","allow","an","ans;","auto","auto&","bool","class","const","const;","constructor","creat","depth","depth);","depthsuminverse(vector&","depth});","empti","getinteger()","hold","holds,","https://leetcode.com/problems/nest","i)","ii","implement","initi","int","integ","integer,","integer.","interfac","isinteger()","it,","it.","item","item.getlist();","leetcod","list","list)","list.","list.size();","lists.","max(max_depth,","max_depth","n","nest","nested.size();","nestedinteg","nestedinteger();","nestedinteger(int","number","o(n)","o(n),","object","pair","pair.first","pair.first;","pair.second","pair.second;","problem","public:","res)","res.push_back({item.getinteger(),","res;","result","return","sc:","set","setinteger(int","singl","solut","specul","stack>","stk.pop();","stk.push({list[i],","stk.push({nested[i],","stk.top();","stk;","sum","tc:","true","undefin","value);","vector","vector>","void","weight","{","}","};"],"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":["&dummy;","(!head)","(!stk.empty())","(curr","(curr)","*","*/","/*","/**","//","430.","=",">child",">child)",">child);",">next",">next);",">next;",">prev","auto","break;","child;","class","curr","curr;","definit","doubli","dummy.next","dummy.next;","dummy;","flatten","flatten(node*","head)","head;","https://leetcode.com/problems/flatten","int","leetcod","link","list","multilevel","n","next;","node","node*","node.","nullptr;","number","o(n)","o(n),","prev","prev;","problem","public:","return","sc:","solut","stack","stk.emplace(curr","stk.emplace(head);","stk.pop();","stk.top();","stk;","tc:","val;","{","}","};"],"Structure Conversion/Flatten Nested List.html":["&getlist()","&list)","(!stk.empty())","(int","(item.isinteger())","*","*/","/**","//","0","1","22.",";","=",">=","@param","@return","allow","ans.emplace_back(item.getinteger());","ans;","auto","auto&","bool","class","code","const","const;","creat","flatten","flatten(vector","getinteger()","here","hold","holds,","https://www.lintcode.com/problem/flatten","i)","implement","int","integ","integer,","interfac","isinteger()","it,","item","item.getlist();","items.size();","lintcod","list","list.","list.size();","lists.","n","nest","nestedinteg","nestedlist","problem","public:","result","return","singl","solut","specul","stack","stk.emplace(move(items[i]));","stk.emplace(move(list[i]));","stk.pop();","stk.top();","stk;","true","undefin","vector","write","{","}","};"],"Structure Conversion/Flatten 2D Vector.html":["!=","(!row","(col","(row","*","*/","*col++;","++row;","/**","251.","2d","=","==",">begin();",">empty())",">end())",">hasnext();",">next();","bool","break;","cach","cache;","call","class","col","col;","elem","elem;","findnext()","findnext();","flatten","hasnext()","https://leetcode.com/problems/flatten","instanti","int","leetcod","new","next()","obj","object","param_1","param_2","private:","problem","public:","return","return;","row","row,","row_end","row_end)","row_end;","solut","such:","vec)","vec.begin();","vec.end();","vector","vector2d","vector2d(vec);","vector2d(vector>&","vector2d*","vector::iter","vector>::iter","void","{","}","};"],"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":["(!head)","(!root)","(pred)","*","*/","*head","*pred","/*","/**","//","426.","=",">left",">left,",">right",">right,","_left,","_left;","_right)","_right;","_val)","_val,","_val;","binari","class","convert","definit","doubli","h","head","head)","head);","head;","height","helper(node*","helper(root","helper(root,","https://leetcode.com/problems/convert","int","leetcod","left","left;","link","list","n","node","node()","node(int","node*","node*&","node.","null;","nullptr,","nullptr;","number","o(h),","o(n),","order","pred","pred,","pred;","private:","problem","public:","return","return;","right","right;","root","root)","root,","root;","run","sc:","search","solut","sort","tc:","traversal.","tree","treetodoublylist(node*","val","val;","void","{","{}","}","};"],"Binary Tree/Validate Binary Search Tree.html":["&&","(!root)","(!runpreorder(root","(hi","(lo","*","*/","*left,","*left;","*right)","*right;","/**","98.",":",">=",">left,",">right,",">val",">val)","binari","bool","class","definit","false;","h","height","hi","hi)","hi);","https://leetcode.com/problems/valid","int","isvalidbst(treenode*","leetcod","left(left),","left(nullptr),","lo,","n","node","node.","nullptr);","nullptr,","number","o(h),","o(n),","order","pre","private:","problem","public:","return","right(nullptr)","right(right)","root","root)","root))","root,","runpreorder(root","runpreorder(root,","runpreorder(treenode*","sc:","search","solut","struct","tc:","traversal.","tree","treenod","treenode()","treenode(int","treenode*","true;","us","val(0),","val(x),","val)","val;","valid","x)","x,","{","{}","}","};"],"Binary Tree/Balanced Binary Tree.html":["(!l.first)","(!r.first)","(!root)","(diff","*","*/","*left,","*left;","*right)","*right;","+","/**","0};","1)","110.","1};",":","=",">",">left);",">right);","abs(l.second","auto","balanc","binari","bool","class","definit","diff","h","height","https://leetcode.com/problems/balanc","int","isbalanced(treenode*","l","leetcod","left(left),","left(nullptr),","max(l.second,","n","node","node.","number","o(h),","o(n),","pair","private:","problem","public:","r","r.second)","r.second);","re","res.first;","return","right(nullptr)","right(right)","root)","runpostorder(root","runpostorder(root);","runpostorder(treenode*","sc:","solut","struct","tc:","tree","treenod","treenode()","treenode(int","val(0),","val(x),","val;","x)","x,","{","{false,","{true,","{}","}","};"],"Binary Tree/Check Completeness of a Binary Tree.html":["(!node)","(!q.empty())","(last_node_visited)","*","*/","*left,","*left;","*right)","*right;","/**","958.",":","=",">left);",">right);","auto","bfs.","binari","bool","check","class","complet","definit","false;","https://leetcode.com/problems/check","int","iscompletetree(treenode*","last_node_visit","leetcod","left(left),","left(nullptr),","n","node","node.","number","o(n)","o(n),","problem","public:","q.emplace(nod","q.emplace(root);","q.front();","q.pop();","q;","queue","return","right(nullptr)","right(right)","root)","sc:","solut","struct","tc:","tree","tree/","treenod","treenode()","treenode(int","true;","us","val(0),","val(x),","val;","x)","x,","{","{}","}","};"],"Binary Tree/Maximum Width of Binary Tree.html":["(!q.empty())","(id","(int","*","*/","*left,","*left;","*right)","*right;","/**","0","1;","1});","662.",":",";","=",">left,",">right,","an","base","bfs.","binari","class","definit","https://leetcode.com/problems/maximum","id","int","int_max;","int_min;","label","leetcod","left","left(left),","left(nullptr),","left)","level","level.","make","maximum","minimum","n","node","node.","nodes,","normal","number","o(n)","o(n),","order","problem","public:","q.front().second;","q.push({nod","q.push({root,","q.size();","q;","queue>","regard","right","right(nullptr)","right(right)","right)","root)","sc:","solut","struct","sure","tc:","tree","treenod","treenode()","treenode(int","us","val(0),","val(x),","val;","width","widthofbinarytree(treenode*","x)","x,","{","{}","};"],"Binary Tree/Diameter of Binary Tree.html":["(!root)","*","*/","*left,","*left;","*right)","*right;","+","/**","0;","1181.","1;","2",":","=",">left,",">right,","binari","both","branch","calcul","class","collect","combin","definit","depth","diamet","diameter.","diameterofbinarytree(treenode*","diamter","divid","each","essenti","form","h","height","https://www.lintcode.com/problem/diamet","int","int&","l","left","left(left),","left(nullptr),","lintcod","max(l,","max(opt,","maximum","merg","n","node","node.","note","number","o(h),","o(n),","opt","opt)","opt);","opt;","order","path.","pleas","post","private:","problem","public:","r","r)","r);","r,","r.","return","right","right(nullptr)","right(right)","root","root)","root,","runpostorder(root","runpostorder(root,","runpostorder(treenode*","sc:","segment","segments,","solut","struct","subtre","tc:","then,","therefore,","traversal.","tree","tree.","tree/descript","treenod","treenode()","treenode(int","us","val(0),","val(x),","val;","x)","x,","{","{}","}","};"],"Binary Tree/Minimum Depth of Binary Tree.html":["!root","&&","*","*/","*left,","*left;","*right)","*right;","/**","0,","111.",":","=",">left,",">right)",">right,","an","ans);","binari","class","definit","depth","depth);","depth,","h","height","https://leetcode.com/problems/minimum","int","int_max;","leetcod","left","left(left),","left(nullptr),","min(ans,","mindepth(treenode*","minimum","n","node","node.","number","o(h),","o(n),","order","pre","problem","public:","return","right(nullptr)","right(right)","root)","runpreorder(root","runpreorder(root,","sc:","solut","struct","tc:","traversal.","tree","treenod","treenode()","treenode(int","us","val(0),","val(x),","val;","x)","x,","{","{}","}","};"],"Binary Tree/Maximum Depth of Binary Tree.html":["!root","&&","(!root","(!root)","*","*/","*left,","*left;","*right)","*right;","*root,","++depth;","/**","0,","0;","104.",":","=",">",">left",">left,",">right)",">right,","?","an","ans)","ans);","binari","class","definit","depth","depth);","depth,","h","height","helper(root","helper(root,","helper(treenod","https://leetcode.com/problems/maximum","int","int&","int_min","int_min;","leetcod","left(left),","left(nullptr),","max(ans,","maxdepth(treenode*","maximum","n","node","node.","number","o(h),","o(n),","order","pre","private:","problem","public:","return","return;","right(nullptr)","right(right)","root)","sc:","solut","struct","tc:","traversal.","tree","treenod","treenode()","treenode(int","us","val(0),","val(x),","val;","void","x)","x,","{","{}","}","};"],"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":["&&","(root","(root)","*","*/","*left;","*right;","/**","1311.",":","=",">",">left;",">right;",">val",">val)","ancestor","binari","break;","class","common","definit","h","height","https://www.lintcode.com/problem/lowest","int","left(null),","lintcod","lowest","lowestcommonancestor(treenode*","n","node","node.","number","o(h),","o(n),","p","p,","problem","public:","q","q)","return","right(null)","root","root,","root;","sc:","search","solut","struct","tc:","tree","tree/descript","treenod","treenode(int","treenode*","val","val(x),","val)","val;","x)","{","{}","}","};"],"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":["&&","(!root","(l","(l)","*","*/","*left;","*right;","/**","88.",":","=","==",">left,",">right,","ancestor","auto","binari","class","common","definit","h","height","https://www.lintcode.com/problem/lowest","int","l","l;","left(null),","lintcod","lowest","lowestcommonancestor(root","lowestcommonancestor(treenode*","n","node","node.","number","o(h),","o(n),","order","p","p,","post","problem","public:","q)","q);","r","r)","r;","return","right(null)","root","root,","root;","sc:","solut","struct","tc:","traversal.","tree","tree/descript","treenod","treenode(int","treenode*","us","val(x),","val;","x)","{","{}","||","}","};"],"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":["&&","(!root)","(l.lca)","(r.lca)","(rtn.find_p","*","*/","*left;","*right;","/**",":","=","==",">left,",">right,","ancestor","auto","binari","bool","class","common","definit","false;","find_p","find_q","h","height","helper(root","helper(root,","helper(treenode*","https://leetcode.com/problems/lowest","ii","int","l","l.find_p","l.find_q","l;","lca","leetcod","left(null),","lowest","lowestcommonancestor(treenode*","n","node","node.","nullptr;","number","o(h),","o(n),","order","p,","p;","post","private:","problem","public:","q)","q);","q;","r","r.find_p","r.find_q","r;","record","record();","return","right(null)","root","root,","root;","rtn","rtn.find_p","rtn.find_q","rtn.find_q)","rtn.lca","rtn.lca;","rtn;","sc:","solut","struct","tc:","traversal.","tree","treenod","treenode(int","treenode*","us","val(x),","val;","x)","{","{}","||","}","};"],"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":["(p)","(q)","(set.count(q)","*","*/","/*","/**","//","1)","1650.","=","==",">parent;","ancestor","binari","class","common","definit","h","height","https://leetcode.com/problems/lowest","iii","int","leetcod","left;","lowest","lowestcommonancestor(node*","node","node*","node.","nullptr;","o(h)","o(h),","p","p,","parent;","problem","public:","q","q)","q;","return","right;","sc:","set.emplace(p);","set;","solut","tc:","tree","unordered_set","val;","{","}","};"],"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":["(!root)","(l.second","*","*/","*left,","*left;","*right)","*right;","+","/**","1123.","1};",":","=","==",">",">left);",">right);","ancestor","auto","binari","class","common","deepest","definit","h","height","https://leetcode.com/problems/lowest","int","l","l.second","lcadeepestleaves(treenode*","leav","leaves/","leetcod","left(left),","left(nullptr),","lowest","n","node","node.","number","o(h),","o(n),","order","pair","post","private:","problem","public:","r","r.second","r.second)","re","res.first;","return","right(nullptr)","right(right)","root)","runpostorder(root","runpostorder(root);","runpostorder(treenode*","sc:","solut","struct","tc:","traversal.","tree","treenod","treenode()","treenode(int","treenode*","us","val(0),","val(x),","val;","x)","x,","{","{l.first,","{nullptr,","{r.first,","{root,","{}","}","};"],"Binary Tree/Recover Binary Search Tree.html":["&&","(!src)","(4,","(5,","(curr","(pred","(src","(src)","*","*/","*dst","*left,","*pred","*right;","*src","/**","//","1","1)","2","2)","3","3,","4","4}.","5","691.","=","=>",">",">left",">left)",">left,",">right",">right)",">right,",">val",">val)",">val);",">val,","@param","@return:","anoth","appli","binari","bstswappednode(treenod","case","class","code","consid","curr","curr,","curr.","curr;","definit","discov","dst","dst)","dst);","find","first","given","here","https://www.lintcode.com/problem/recov","inord","int","invers","lintcod","name","null;","nullptr,","nullptr;","number","out","pair,","pairs.","pointer","pred","pred,","pred.","pred;","predecessor","private:","problem","public:","record","recov","return","root)","root:","root;","runinorder(","runinorder(curr","runinorder(root,","search","second","solut","specifically,","src","src,","std::swap(src","swap","time,","travers","tree","tree.","tree/descript","treenod","treenode(int","treenode*","treenode*&","treenode:","trival","us","val)","val;","void","write","wrong!","{","{1,","}","};"],"Binary Tree/Binary Tree Maximum Path Sum.html":["(!root)","*","*/","*left,","*left;","*right)","*right;","+","/","/**","/\\","/__\\","0;","124.",":","=",">left,",">right,",">val",">val);",">val,","\\","be:","binari","branch","candid","cases.","check","class","consid","definit","denot","findpath(root","findpath(root,","findpath(treenode*","follow","gener","h","height","https://leetcode.com/problems/binari","int","int&","int_min;","is:","l","l);","l,","leetcod","left","left(left),","left(nullptr),","level","max","max(opt,","max(root","maximum","maxpathsum(treenode*","n","need","node","node.","number","o(h),","o(n),","opt","opt)","opt);","opt;","parent","pass","path","private:","problem","public:","r","r));","r);","r,","return","right","right(nullptr)","right(right)","root","root)","root,","sc:","solut","struct","sum","t","t,","t.","tc:","then,","thw","tree","treenod","treenode()","treenode(int","val(0),","val(x),","val;","want","x)","x,","{","{}","}","};"],"Binary Tree/Path Sum.html":["!root","&&","(!root","(!root)","(runpreorder(root","*","*/","*left;","*right;","+=","/**","0;","112.",":","=","==",">left",">left,",">right)",">right,",">val;","binari","bool","class","definit","false;","haspathsum(treenode*","https://leetcode.com/problems/path","int","leetcod","left(null),","node.","path","prefix","prefix,","private:","problem","public:","return","right(null)","root","root,","runpreorder(root","runpreorder(root,","runpreorder(treenode*","solut","struct","sum","sum)","sum);","target)","target))","target);","target;","tree","treenod","treenode(int","true;","val(x),","val;","x)","{","{}","}","};"],"Binary Tree/Path Sum II.html":["!root","&&","(!root","(!root)","(prefix","*","*/","*left,","*left;","*right)","*right;","+=","/**","//","0,","113.",":","==",">left",">left,",">right)",">right,",">val);",">val;","ans)","ans);","ans.emplace_back(config);","ans;","binari","check","class","config,","config.emplace_back(root","config.pop_back();","config;","definit","h","height","https://leetcode.com/problems/path","ii","int","leaf","leetcod","left(left),","left(nullptr),","n","node","node.","number","o(h),","o(n),","order","path","pathsum(treenode*","post","prefix","prefix,","private:","problem","public:","return","return;","right(nullptr)","right(right)","root","root,","runpreorder(","runpreorder(root","runpreorder(root,","sc:","solut","struct","sum","target)","target,","tc:","traversal.","tree","treenod","treenode()","treenode(int","treenode*","us","val(0),","val(x),","val;","vector","vector&","vector>","vector>&","void","x)","x,","{","{}","}","};"],"Binary Tree/Path Sum III.html":["(!root)","*","*/","*left,","*left;","*right)","*right;","++map[prefix];","+=","/**","0,","0;","1)","1;","437.",":","=","=>",">left,",">right,",">val;","an","ans)","ans);","ans;","binari","class","definit","equal","https://leetcode.com/problems/path","https://leetcode.com/problems/subarray","iii","int","int&","j)","k","leetcod","left(left),","left(nullptr),","map,","map;","map[0]","map[prefix","map[prefix];","n","node","node.","number","o(n)","o(n),","path","pathsum(treenode*","prefix","prefix(i","prefix(j)","prefix,","private:","problem","public:","return","return;","right(nullptr)","right(right)","root","root,","runpreorder(","runpreorder(root","runpreorder(root,","sc:","similar","solut","struct","sum","sum(i,","target","target)","target,","target];","tc:","tree","treenod","treenode()","treenode(int","treenode*","unordered_map","unordered_map&","val(0),","val(x),","val;","void","x)","x,","{","{}","}","};"],"Binary Tree/Convert BST to Greater Tree.html":["(!root)","*","*/","*left;","*right;","+=","/**","0;","538.",":","=",">left,",">right,",">val",">val;","binari","bst","class","convert","convertbst(treenode*","definit","greater","https://leetcode.com/problems/convert","int","int&","leetcod","left(null),","node.","private:","problem","public:","return","return;","right(null)","root","root)","root,","root;","runreverseinorder(root","runreverseinorder(root,","runreverseinorder(treenode*","solut","struct","sum","sum)","sum);","sum;","tree","treenod","treenode(int","treenode*","val(x),","val;","void","x)","{","{}","}","};"],"Binary Tree/Find Leaves of Binary Tree.html":["(!root)","(int","*","*/","*left,","*left;","*right)","*right;","+","/**","0;","1","1;","366.",":",";","=",">&",">left,",">right,",">val);","also,","ans;","binari","class","classifi","definit","find","findleaves(treenode*","h","h;","height.","https://leetcode.com/problems/find","int","l","leav","leetcod","left(left),","left(nullptr),","map)","map);","map;","map[h].emplace_back(root","max(l,","n","node","node.","number","o(n)","o(n),","order","post","problem","public:","r","r)","return","right(nullptr)","right(right)","root)","runpostorder(root","runpostorder(root,","sc:","solut","struct","tc:","traversal.","tree","treenod","treenode()","treenode(int","unordered_map>","us","val(0),","val(x),","val;","vector>","x)","x,","{","{}","}","};"],"Binary Tree/Binary Tree Vertical Order Traversal.html":["(!q.empty())","(!root)","(int","(node","*","*/","*left,","*left;","*right)","*right;","+","/**","0});","1});","314.",":",";","=",">left)",">left,",">right)",">right,",">val);","also,","ans;","auto","binari","class","classifi","col","col);","column","definit","https://leetcode.com/problems/binari","index.","int","int_max,","int_min;","leetcod","left(left),","left(nullptr),","level","map;","map[col].emplace_back(nod","max(max_col,","max_col","min(min_col,","min_col","n","node","node.","number","o(n)","o(n),","order","pair","pair.first;","pair.second;","problem","public:","q.front();","q.pop();","q.push({nod","q.push({root,","q;","queue>","return","right(nullptr)","right(right)","root)","sc:","solut","struct","tc:","travers","traversal.","tree","treenod","treenode()","treenode(int","unordered_map>","us","val(0),","val(x),","val;","vector>","vertic","verticalorder(treenode*","x)","x,","{","{}","{};","}","};"],"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":["%","(!root)","(!stk.empty())","(int","(node","(round","*","*/","*left,","*left;","*right)","*right;","++round;","/**","0","0)","0;","1","103.","2","2,","3,",":",";","=","==",">",">left)",">left);",">right)",">right);","ans.emplace_back(move(level));","ans;","binari","children","class","collect","consum","content","control","definit","e.g.","even,","explor","finish","first","https://leetcode.com/problems/binari","int","l","leetcod","left","left(left),","left(nullptr),","level","level,","level;","move(next);","n","next.emplace(nod","next;","node","node.","nodes.","number","o(n)","o(n),","odd,","onto","order","overrid","problem","public:","push","r","return","right","right(nullptr)","right(right)","root)","round","sc:","second","side","solut","specif","stack","stack,","stack.","stk","stk.emplace(root);","stk.size();","stk;","struct","tc:","those","travers","traversal.","tree","treenod","treenode()","treenode(int","upon","us","val(0),","val(x),","val);","val;","vector","vector>","veri","visualization:","x)","x,","zag","zig","zigzag","zigzaglevelorder(treenode*","{","{}","{};","|","}","};"],"Binary Tree/Serialize and Deserialize Binary Tree.html":["\"#\")","\"#\";","\",\"","#","#,","',');","(!root)","(token","*","*/","*left;","*right;","+","/","/**","//","15","15,","20","20,","3","3,","7","7,","7.","9","9,",":","=","==",">left",">left)",">right",">right);",">val)","\\","an","auto","binari","call","class","codec","data","data)","decod","definit","deser.deserialize(ser.serialize(root));","deser;","deseri","deserialize(str","encod","getline(stream,","h","height","helper(stream);","helper(stringstream&","https://www.lintcode.com/problem/seri","instanti","int","left(null),","lintcod","n","new","node","node.","node;","nullptr;","number","o(h),","o(n),","object","private:","problem","public:","return","right(null)","root)","sc:","ser,","serial","serialize(root","serialize(treenode*","singl","solut","stream(data);","stream)","string","string.","stringstream","struct","such:","tc:","to_string(root","token,","token;","tree","tree.","tree/descript","treenod","treenode(int","treenode(stoi(token));","treenode*","val(x),","val;","x)","{","{}","}","};"],"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":["&","(i","(in_bgn","(int","(left","(right","*","*/","*left,","*left;","*right)","*right;","+","/","/**","//","0","1","1,","105.","1});","1},","2","2,","3","3,","4","4,","5","5,","6","6,","7",":",";","=","==",">",">left",">right","\\","auto","binari","branch)","buildtree(vector&","class","const","construct","definit","find","helper(","helper(preorder,","https://leetcode.com/problems/construct","i;","in_bgn","in_bgn},","in_end","in_end)","in_end});","in_end},","in_index)","in_index,","in_index.first,","in_index.second;","in_mid","index","inord","inorder)","inorder,","inorder.size();","int","l","leetcod","left","left(left),","left(nullptr),","map)","map);","map;","map[val];","n","new","node","node.","nullptr;","number","o(n)","o(n),","o(nlogn),","order","pair","pre_bgn","pre_end","pre_end},","pre_index,","pre_index.first,","pre_index.second;","preorder","preorder,","preorder.size();","preorder:","preorder[pre_bgn];","private:","problem","public:","r","return","right(nullptr)","right(right)","root","root;","sc:","solut","struct","t","tc:","travers","tree","treenod","treenode()","treenode(inorder[in_bgn]);","treenode(int","treenode(val);","treenode*","unordered_map","unordered_map&","val","val(0),","val(x),","val;","vector&","vector.","x)","x,","{","{0,","{i","{in_bgn,","{in_mid","{pre_bgn","{}","}","};"],"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":["&","(in_bgn","(int","(left","(right","*","*/","*left,","*left;","*right)","*right;","+","/","/**","//","0","1","1,","106.","1},","2","2,","3","3,","4","4,","5","5,","6","6,","7","7,",":",";","=","==",">",">left",">right","\\","auto","binari","branch)","buildtree(vector&","class","const","construct","definit","find","helper(inorder,","https://leetcode.com/problems/construct","in_bgn","in_bgn,","in_end","in_end)","in_end},","in_index,","in_index.first,","in_index.second;","in_mid","index","inord","inorder,","inorder.size();","int","l","leetcod","left(left),","left(nullptr),","map)","map);","map;","map[val];","n","new","node","node.","nullptr;","number","o(n)","o(n),","order","pair","post_bgn","post_end","post_index,","post_index.first,","post_index.second;","postord","postorder)","postorder,","postorder:","postorder[post_end];","problem","public:","r","return","right(nullptr)","right(right)","root","root;","sc:","solut","struct","t","tc:","travers","tree","treenod","treenode()","treenode(inorder[in_bgn]);","treenode(int","treenode(val);","treenode*","unordered_map","unordered_map&","val","val(0),","val(x),","val;","vector&","vector.","x)","x,","{","{in_bgn,","{in_mid","{post_bgn","{post_bgn,","{}","}","};"],"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":["&","(int","(left","(pre_bgn","(right","*","*/","*left,","*left;","*right)","*right;","+","/","/**","//","0","1","1,","1;","1]];","1},","2","2,","3","3,","4","4,","5","5,","6","6,","7","7,","889.",":",";","=","==",">",">left",">right","\\","auto","binari","branch","branch)","class","const","construct","constructfromprepost(vector&","definit","find","first","helper(pre,","https://leetcode.com/problems/construct","index","int","l","leetcod","left","left(left),","left(nullptr),","map)","map);","map;","map[pre[pre_bgn","n","new","node","node.","nullptr;","number","o(n)","o(n),","order","p","pair","pivot","post)","post,","post.size();","post_bgn","post_end","post_index,","post_index.first,","post_index.second;","postord","postorder:","pre","pre,","pre[pre_bgn];","pre_bgn","pre_end","pre_end)","pre_end},","pre_index,","pre_index.first,","pre_index.second;","preorder","problem","public:","r","return","right(nullptr)","right(right)","root","root;","sc:","size_left","size_left,","size_left},","solut","struct","t","tc:","travers","tree","treenod","treenode()","treenode(int","treenode(pre[pre_bgn]);","treenode(val);","treenode*","unordered_map","unordered_map&","val","val(0),","val(x),","val;","vector&","vector.","x)","x,","{","{post_bgn","{post_bgn,","{pre_bgn","{}","}","};"],"Binary Tree/Maximum Subtree.html":["(!root)","(sum","*","*/","+","/**","//","628.",":","=",">",">left,",">right,",">val","@param","@return:","auto","binari","class","code","findsubtree(treenod","here","https://www.lintcode.com/problem/maximum","int","l","l.sum","lintcod","maximum","nullptr);","opt(int_min,","opt)","opt);","opt.root","opt.root;","opt.sum","opt.sum)","private:","problem","public:","r","r.sum;","result","result&","result()","result();","result(int","result(sum,","return","root","root(nullptr)","root(root)","root)","root);","root,","root:","root;","runpostorder(root","runpostorder(root,","runpostorder(treenode*","solut","struct","subtre","subtree/descript","sum","sum(0),","sum(sum),","sum,","sum;","tree","treenod","treenode*","write","{","}","};"],"Binary Tree/Maximum Average Subtree.html":["(!root)","*","*/","*left,","*left;","*right)","*right;","+","/","/**","0;","1","1120.",":","=",">left,",">right,",">val","an","ans)","ans);","ans;","auto","averag","avg","binari","class","definit","doubl","double&","h","height","https://leetcode.com/problems/maximum","int","l","l.size","l.sum","leetcod","left(left),","left(nullptr),","max(avg,","maximum","maximumaveragesubtree(treenode*","n","node","node.","number","o(h),","o(n),","private:","problem","public:","r","r.size;","r.sum;","record","record();","record.s","record.size;","record.sum","record;","return","right(nullptr)","right(right)","root","root)","root,","runpostorder(root","runpostorder(root,","runpostorder(treenode*","sc:","size","solut","static_cast(record.sum)","struct","subtre","sum","tc:","tree","treenod","treenode()","treenode(int","val(0),","val(x),","val;","x)","x,","{","{}","}","};"],"Binary Tree/Symmetric Tree.html":["!=","!right)","&&","(!left","(left","*","*/","*left,","*left;","*right)","*right;","/**","101.",":","==",">left);",">left,",">right)",">right,",">val",">val)","binari","bool","class","definit","false;","h","height","helper(left","helper(root,","helper(treenode*","https://leetcode.com/problems/symmetr","int","issymmetric(treenode*","leetcod","left","left(left),","left(nullptr),","left,","n","node","node.","number","o(h),","o(n),","private:","problem","public:","return","right","right(nullptr)","right(right)","right)","right;","root)","root);","sc:","solut","struct","symmetr","tc:","tree","tree/solut","treenod","treenode()","treenode(int","treenode*","val(0),","val(x),","val;","x)","x,","{","{}","||","}","};"],"Binary Tree/Closest Binary Search Tree Value.html":["(!root)","(diff","(target","*","*/","*left,","*left;","*right)","*right;","/**","270.",":","=",">=",">left,",">right,",">val)",">val;","abs(static_cast(root","an","ans)","ans);","ans;","binari","class","closest","closestvalue(treenode*","definit","diff","doubl","double&","g_diff","g_diff,","helper(root","helper(root,","helper(treenode*","https://leetcode.com/problems/closest","int","int&","int_max;","leetcod","left(left),","left(nullptr),","node.","private:","problem","public:","return","return;","right(nullptr)","right(right)","root","root,","search","solut","struct","target)","target);","target,","tree","treenod","treenode()","treenode(int","val(0),","val(x),","val;","valu","void","x)","x,","{","{}","}","};"],"Binary Tree/Closest Binary Search Tree Value II.html":["(curr)","(diff_p","(int","(root","(root)","(succs.empty())","*","*/","*left,","*left;","*right)","*right;","+","/","/**","0","10","12","15","15,","17","17,","18","19.","20","272.","3","30","35","5",":",";","=",">",">=",">left;",">right;",">val",">val));",">val);","\\","abs(target","ans.emplace_back(preds.top()","ans.emplace_back(succ","ans;","auto","binari","class","closest","closestkvalues(treenode*","continue;","curr","definit","diff_","diff_p","doubl","getpredecessors(preds);","getpredecessors(stack&","getsuccessors(stack&","getsuccessors(succs);","h","height","https://leetcode.com/problems/closest","ii","int","k","k)","k),","leetcod","left(left),","left(nullptr),","node.","o(h","pred","pred:","preds)","preds.emplace(curr);","preds.emplace(root);","preds.pop();","preds.top();","preds;","private:","problem","public:","return","right(nullptr)","right(right)","root","root,","sc:","search","solut","stack","static_cast(pr","static_cast(succ","struct","succ","succ:","succs)","succs.emplace(curr);","succs.emplace(root);","succs.pop();","succs.top();","succs;","target","target)","target,","tc:","tree","treenod","treenode()","treenode(int","val(0),","val(x),","val);","val;","valu","vector","void","x)","x,","{","{}","}","};"],"Binary Tree/Insert Node in Binary Search Tree.html":["(!root)","(curr","(curr)","(node","*","*/","*left,","*right;","/*","/**","//","85.","=",">",">left",">left;",">right",">right;",">val",">val)","@param","@return:","auto","binari","class","code","curr","curr;","definit","here","https://www.lintcode.com/problem/insert","insert","insertnode(treenod","int","lintcod","new","node","node)","node:","node;","null;","pred","problem","public:","return","root","root,","root:","root;","search","solut","tree","tree.","tree/descript","treenod","treenode(int","treenode:","val)","val;","write","{","}","};"],"Binary Tree/Remove Node in Binary Search Tree.html":["!=","!curr","&&","(!curr","(!curr)","(curr","(curr)","(succ","*","*/","*left,","*right;","/*","/**","//","1","2","87.",":","=","==",">",">left",">left)",">left;",">right",">right)",">right;",">val",">val)",">val;","?","@param","@return:","auto","binari","break;","child","child.","child;","children.","class","code","curr","curr);","curr;","definit","delet","dst","dst)","dst;","find","findsuccessor(auto","findsuccessor(root,","given","here","https://www.lintcode.com/problem/remov","int","lintcod","node","node.","null;","nullptr;","pred","pred;","private:","problem","public:","re","remov","removal.","removenode(treenod","res.first;","res.second","res.second;","return","root","root)","root,","root:","root;","search","solut","std::make_pair(pred,","std::pair","succ","succ);","succ;","target","tree","tree.","tree/descript","treenod","treenode(int","treenode*","treenode:","val)","val;","value)","value.","value:","want","write","{","}","};"],"Binary Tree/All Nodes Distance K in Binary Tree.html":["!=","(!q.empty())","(auto","(k","(neighbor","(node","*","*/","*left;","*right;","/**","0)","1,","863.",":","=","==",">left)",">left);",">left].emplace(node);",">right)",">right);",">right].emplace(node);",">val);","ans)","ans);","ans.emplace_back(curr","ans;","auto","binari","buildgraph(","buildgraph(root,","class","curr,","definit","distanc","distancek(treenode*","findnodes(","findnodes(neighbor,","findnodes(target,","graph)","graph);","graph,","graph;","graph[curr])","graph[nod","graph[node].emplace(nod","https://leetcode.com/problems/al","int","k","k)","k,","leetcod","left(null),","n","neighbor","node","node.","nullptr,","number","o(n)","o(n),","pred)","pred,","private:","problem","public:","q.emplace(nod","q.emplace(root);","q.front();","q.pop();","q;","queue","return","right(null)","root,","sc:","solut","struct","target,","tc:","tree","treenod","treenode(int","treenode*","unordered_map>","unordered_map>&","val(x),","val;","vector","vector&","void","x)","{","{}","}","};"],"Binary Search/First Bad Version.html":["(l","*","*/","+","/**","//","1","1,","74.","=","@param","@return:","bad","bool","class","code","findfirstbadversion(int","first","here","https://www.lintcode.com/problem/first","int","integ","isbadversion(int","judg","k);","kth","l","lintcod","n)","n:","n;","not.","problem","public:","r","solut","static","svnrepo","svnrepo::isbadversion(k)","us","version","version.","version/descript","whether","write","{","}"],"Binary Search/Search a 2D Matrix.html":["&matrix,","(l","(num_c","(num_r","(target","*","*/","+","/**","//","0)","0,","1","1;","28.","2d",":","=","==",">=","?","@param","@return:","auto&","bool","boolean,","class","code","contain","determinerow(const","determinerow(matrix,","false;","here","https://www.lintcode.com/problem/search","indic","int","integ","l","l;","lintcod","list","m;","matrix","matrix,","matrix.size();","matrix/descript","matrix:","matrix[0].size();","matrix[m][0])","matrix[r][0])","num_c","num_c,","num_r","num_r,","private:","problem","public:","r","return","row,","row[l]","row[m])","row[r])","search","searchmatrix(vector>","searchrow(const","searchrow(matrix[r],","solut","target","target)","target);","target:","true","whether","write","{","||","}","};"],"Binary Search/Search a 2D Matrix II.html":["&matrix,","(matrix[x][y]","(num_c","(num_r","(target","(x","*","*/","++count;","/**","//","0)","0,","0;","1;","2d","38.","=","==","@param","@return:","class","code","count","given","here","https://www.lintcode.com/problem/search","ii","ii/descript","indic","int","integ","lintcod","list","matrix","matrix.size();","matrix:","matrix[0].size();","num_c","num_r","occurr","problem","public:","return","search","searchmatrix(vector>","solut","target","target)","target:","total","want","write","x","y","{","}"],"Binary Search/Search for a Range.html":["&a,","(a[r]","(l","(n","*","*/","+","/**","//","0)","0,","1","1,","1;","1};","2,","61.",":","=","==","?","@param","@return:","[index1,","a.size();","a:","a[m])","array","class","code","end","end};","find","here","https://www.lintcode.com/problem/search","index2]","insert","int","integ","l","l;","length","lintcod","list","m;","n","position.","problem","public:","r","rang","range/descript","return","search","searchrange(vector","solut","sort","start","target)","target:","vector","write","{","{bgn,","}","};"],"Binary Search/Pow x n.html":["(d","(n","(n^2","(x,n)","*","*/","/","/**","//","0)","1","1)","1;","2147483648","428.",":","=","==",">",">>","?","@param","@return:","base","case:","class","code","corner","d","d);","doubl","exponential.","genpow(doubl","genpow(x,","half","half;","here","https://www.lintcode.com/problem/powx","int","lintcod","long","mayb","mypow(doubl","n","n)","n/descript","n:","n;","n^2)","n^4","n^8","n^9","nn","nn)","nn);","number","pow","pow(x,","power","private:","problem","public:","re","result","return","solut","store","that'","type","us","way","write","x","x,","x:","x;","{","}"],"Binary Search/Find K Closest Elements.html":["&&","&a,","(int","(l","(n","*","*/","+","/**","//","0","0)","0,","1","1;","460.",";","=","==","@param","@return:","]);","a.size();","a:","ans.push_back(a[l","ans.push_back(closest);","ans;","array","class","closest","code","element","elements/descript","find","here","https://www.lintcode.com/problem/find","int","integ","k","k)","k:","kclosestnumbers(vector","l","lintcod","n","n)","pivot","problem","public:","r","return","solut","target,","target:","vector","write","{","{};","||","}","};"],"Binary Search/Find Minimum in Rotated Sorted Array.html":["&nums)","(l","*","*/","+","/**","//","0,","1","159.","1;","=","@param","@return:","array","array/descript","class","code","find","findmin(vector","here","https://www.lintcode.com/problem/find","int","l","lintcod","minimum","n","number","nums.size();","nums:","problem","public:","r","rotat","solut","sort","write","{"],"Binary Search/Maximum Number in Mountain Sequence.html":["&nums)","(l","*","*/","+","/**","//","0,","1","1;","585.","=","@param","@return:","class","code","decreas","firstli","here","https://www.lintcode.com/problem/maximum","increas","int","l","lintcod","maximum","mountain","mountainsequence(vector","n","number","nums.size();","nums:","problem","public:","r","sequenc","sequence/descript","solut","top","write","{"],"Binary Search/Search in Rotated Sorted Array.html":["&a,","(l","(n","*","*/","+","/**","//","0)","0,","1","1;","62.","=","==","@param","@return:","a.size();","a:","array","array/descript","class","code","here","https://www.lintcode.com/problem/search","int","integ","l","lintcod","n","problem","public:","r","return","rotat","search","search(vector","solut","sort","target)","target:","write","{","}"],"Binary Search/Search in Rotated Sorted Array II.html":["(l","(n","(nums[l]","+","0)","0;","1","1;","81.","=","==","array","bool","class","false;","https://leetcode.com/problems/search","ii","ii/","int","l","leetcod","n","nums,","nums.size();","nums[r])","problem","public:","r","return","rotat","search","search(vector&","solut","sort","target)","{","}"],"Binary Search/Divide Two Integers.html":["&&","(divd","(dividend","(dividend));","(temp","*","/**","0","0)","0;","1","1:","2","29","29,","29.","4",":","=","=>",">",">=","?","abs(static_cast(divisor));","class","divd","divid","divide(int","dividend","dividend,","divisor","divisor)","divr","divr)","divr;","https://leetcode.com/problems/divid","int","int_max","integ","leetcod","long","n","o(1)","o(logn),","problem","public:","quot","quot;","round","sc:","solut","step","tc:","temp","two","{","||","}","};"],"Binary Search/Missing Element in Sorted Array.html":["#","(hi,","(k","(l","(r","*/","+","/","/**","0,","1","1060.","1;","2;","=","=>","[0,","array","array/","class","element","hi)","https://leetcode.com/problems/miss","inf)","int","k","k)","l","l)","leetcod","lo)","m","m]","miss","missingelement(vector&","n","number","nums,","nums.size();","nums[0]","nums[l]","nums[m]","nums[r]","problem","public:","r","solut","sort","total","{"],"Binary Approximation/Sqrt.html":["(l","(r","*","*/","+","/**","//","1","1,","141.",":","=",">","?","@param","@return:","class","code","here","https://www.lintcode.com/problem/sqrtx/descript","int","integ","l","lintcod","m)","m;","problem","public:","r","r;","return","solut","sqrt","sqrt(int","sqrt(x)","write","x","x)","x:","x;","{","}","};"],"Binary Approximation/Sqrt II.html":["(l","(x","*","*/","+","/","/**","//","0)","0;","1","1)","10","1;","1e","586.",":","=","==",">",">=","?","@param","@return:","class","code","doubl","here","https://www.lintcode.com/problem/sqrtx","ii","ii/descript","l","l;","lintcod","m)","m;","problem","public:","r","r)","return","root","solut","sqrt(doubl","sqrt(x)","squar","write","x","x)","x:","{","}","};"],"Binary Approximation/Wood Cut.html":["&","&l,","(countsmallpieces(l,","(int","(l","(l.empty()","(len","*","*/","+","+=","...","/","/**","//","0)","0;","1","1,","183.","1;","2",":","=","==",">","?","@param","@return:","abov","approach","approxim","besides,","binari","class","code","count","count;","cut","cut/descript","equal","find","fuction","given","gradual","here","https://www.lintcode.com/problem/wood","ideal","int","integ","k","k)","k.","k:","l","l)","l,","l1/","l2/","l:","l[i]","len","len;","length","lintcod","lmax","ln/","m;","maximal.","maximum","n","need","o(nlogl)","piec","problem","public:","r","r)","return","s","s)","s:","s;","small","solut","this,","us","wood","woodcut(vector","write","{","||","}","};"],"Binary Approximation/Copy Books.html":["&","&books,","(book","(books.empty()","(int","(l","(left","*","*/","+","+=","/**","//","0)","0;","1","1,","1;","437.",":","=","==",">","@param","@return:","acquir","algorithm.","approximation,","array","binari","book","book;","books)","books,","books/descript","boost","candid","check","class","code","copi","copier","copiers,","copybooks(vector","estim","false;","find","finish","given","gradual","hence,","here","however,","https://www.lintcode.com/problem/copi","ideal","increas","int","integ","k","k)","k:","l","left","lintcod","n","need","number","o(nlogs)","o(ns)","page","pages:","perform","period","period)","period,","period.","period;","problem","public:","r","return","s","s.","shortest","slowest","solut","solution.","still","sum","t","t,","thu","time","total","whether","work","work.","write","{","||","}"],"Binary Approximation/Copy Books II.html":["&times)","(int","(l","(times.empty()","*","*/","*=","+","/**","//","0)","0;","1","1;","438.",":times)","=","==","@param","@return:","acquir","algorithm.","approximation,","array","binari","book","books,","boost","candid","check","class","code","copi","copier","copiers,","copybooksii(int","estim","find","finish","given","gradual","hence,","here","however,","https://www.lintcode.com/problem/copi","ideal","ii","ii/descript","increas","int","integ","job.","k","l","lintcod","n","n,","n:","n;","need","number","o(nlogs)","o(ns)","page","perform","period","period.","problem","public:","r","return","s","s.","shortest","solut","solution.","std::max(r,","still","t","t,","task","thu","time","time);","times:","total","vector","whether","write","{","||","}","};"],"Binary Approximation/Find the Duplicate Number.html":["&nums)","(countnumber(nums,","(n","(p","(x","*","*/","+","...,","/**","//","1","1)","1),","1,","2,","3","633.","=",">=","@param","@return:","amount","array","base","between","bound","class","code","contain","decras","divid","duplic","duplicate.","find","findduplicate(vector","here","hole","https://www.lintcode.com/problem/find","int","integ","know","l","l)","lintcod","m","m;","n","number","number/descript","numbers,","nums:","on","otherwise,","p","p,","p:","pigeon","portions.","problem","public:","r","return","solut","suppos","target.","theory,","upper","write","{","|","}"],"Binary Approximation/Maximum Average Subarray II.html":["&nums,","(a[i]","(a[j]","(int","(j","(l","(n","(nums[i])","(nums[i]));","*","*/","+","+=",",","...","/","/**","//","0","0)","0;","1","1)","1e","5","617.",";","=","==","=>",">=","@param","@return:","a[i]","a[j]","approximation,","array","averag","b[i]","b[j]","binari","check","class","code","doubl","equal","find","here","https://www.lintcode.com/problem/maximum","ii","ii/descript","int","integ","j","k","k)","k:","k])","l","l_sum","l_sum);","less","lintcod","max","maxaverage(vector","maximum","min","min_l_sum","min_l_sum)","min_l_sum;","n","neg","number","nums.size();","nums:","nums[0],","nums[0];","posit","possibl","problem","public:","r","r_sum","return","solut","static_cast(nums[i","static_cast(nums[i])","static_cast(nums[i]));","std::max(r,","std::min(min_l_sum,","subarray","sum","t","t)","t.","transform","true;","us","whose","write","x;","{","|","||","}","};"],"Binary Search with STL or Map/Odd Even Jump.html":["!=","(int","(it","(odds[i])","++ans;","//","0","1;","1]","1]]","2","975.",";","=",">=",">second];","a)","a.size();","a[i];","an","ans;","appli","auto","class","down","even","evens(n,","evens[i]","evens[it","evens[n","false);","https://leetcode.com/problems/odd","i)","i;","int","it)","jump","jump/","leetcod","map","map.begin())","map.end())","map.lower_bound(num);","map.upper_bound(num);","map;","map[a[n","map[num]","n","num","odd","oddevenjumps(vector&","odds(n,","odds[(","odds[i]","odds[n","plan","position.","problem","public:","return","solut","true;","up","vector","{","}","};"],"Binary Search with STL or Map/Random Pick with Weight.html":["(int","*","*/","/**","1","1,","10","10]","1st","2","2]","2nd","3,","3rd","4,","4th","528.","6]","7,","7]","8,",":",";","=",">pickindex();","[0,","[3,","[7,","[8,","call","class","element","element:","https://leetcode.com/problems/random","input","instanti","int","leetcod","n","new","number","o(logn),","o(n)","obj","object","param_1","pick","prefix","problem","public:","random","sc:","solut","solution(vector&","solution(w);","solution*","such:","sum.emplace_back(w[0]);","sum:","sum;","tc:","w)","w.size();","weight","weight/","{","};"],"Expression Parsing/Convert Infix Expression to Postfix Expression.html":["!=","\"(\")","\")\")","\",","&exp)","(","('0'","(const","(d","(stack.top()","(token",")","*","*,","*/","+","+*","+*(","+*(+","+,","+/","/","/**","//","/:","0","0}})","1,","1},","2,","2},","370.",":","==","@param","@return:","ab","abc","abc/","abc/d","abc/de+","abc/de+*+","abc/de+*+f","array","auto&","b","c","class","code","convert","converttorpn(vector","d","e","e)","exp)","express","expression:","f","here","https://www.lintcode.com/problem/convert","infix","lintcod","map({{\"*\",","map;","notat","notation/descript","polish","postfix","problem","public:","revers","rpn.push_back(stack.top());","rpn;","solut","solution()","stack","stack.pop();","stack.push(token);","stack;","std::stack","std::vector","string","symbol","token","vector","write","{","{\"","{\"(\",","{\"+\",","{\"/\",","}","};"],"Expression Parsing/Convert Infix Expression to Prefix Expression.html":["!=","\"(\")","\")\")","\",","&exp)","('0'","(int","(stack.top()","(token","*","*/","/**","//","0","0}})","1","1},","2},","369.",":",";","=","==",">=","@param","@return:","array","auto&","class","code","const","convert","converttopn(vector","exp.size();","exp[i];","express","expression:","here","https://www.lintcode.com/problem/convert","i)","infix","int","lintcod","map({{\"*\",","map;","n","notat","notation/descript","pn.push_back(stack.top());","pn;","polish","prefix","problem","public:","solut","solution()","stack.pop();","stack.push(token);","stack;","std::stack","std::vector","string","token","vector","write","{","{\"","{\"(\",","{\"+\",","{\"/\",","}","};"],"Expression Parsing/Evaluate Postfix Expression.html":["\"","\")","\"*\")","\"+\")","\"/\")","&tokens)","'","');","'*');","'*':","'+');","'+':","'/');","'/':","':","(const","(token","*","*/","+","/","/**","//","424.",":","=","==","@param","@return:","auto&","break;","case","char","class","code","evalrpn(vector","evalu","evaluate(stack,","evaluate(std::stack&","express","here","https://www.lintcode.com/problem/evalu","int","lintcod","notat","notation/descript","op)","op1","op2","op2;","polish","postfix","private:","problem","public:","result","result;","return","revers","solut","stack,","stack.pop();","stack.push(result);","stack.push(std::stoi(token));","stack.top();","stack;","std::stack","switch(op)","token","tokens)","tokens:","valu","void","write","{","}","};"],"Expression Parsing/Evaluate Infix Expression.html":["\",","&expression)","(","(!stk.empty())","('0'","(const","*","*,","*/","+,","/**","//","/:","0","0}})","1","1},","2","2},","368.",":","=","@param","@return:","auto","auto&","class","code","converttorpn(const","converttorpn(expression);","evalu","evaluateexpression(vector","evaluaterpn(const","evaluaterpn(rpn);","evaluation/descript","exp)","express","expression:","here","https://www.lintcode.com/problem/express","infix","int","integ","lintcod","list","map({{\"*\",","map;","precedence)","private:","problem","public:","return","rpn","rpn)","rpn.push_back(stk.top());","rpn;","solut","solution()","std::stack","std::vector","std::vector&","stk.pop();","stk.push(token);","stk;","string","token","write","{","{\"","{\"(\",","{\"+\",","{\"/\",","}","};"],"Expression Parsing/Expression Tree Construction.html":["!stk.empty()","\",","&expression)","(","(!stk.empty())","('0'","(const","*","*,","*/","*left,","*right;","+,","/*","/**","//","/:","0","0}})","1","1},","2","2},","367.",":","=",">left",">right",">symbol","?","@param","@return:","array","auto","auto&","build","build(vector","build/descript","buildtree(const","buildtree(rpn);","class","code","construct","converttorpn(const","converttorpn(expression);","definit","exp)","express","expression:","expressiontreenod","expressiontreenode(str","expressiontreenode*","expressiontreenode:","here","https://www.lintcode.com/problem/express","left","left;","lintcod","map({{\"*\",","map;","null;","nullptr;","precedence)","private:","problem","public:","return","right;","root","rpn","rpn)","rpn.push_back(stk.top());","rpn;","solut","solution()","std::stack","std::unordered_map","std::vector","std::vector&","stk.pop();","stk.push(root);","stk.push(token);","stk.top()","stk;","string","symbol)","symbol;","token","tree","write","{","{\"","{\"(\",","{\"+\",","{\"/\",","}","};"],"Number Parsing/Reverse Integer.html":["!=","%","(test","(x","*","*/","+","/","/**","//","/=","0)","0;","10","10);","10;","7.","=","an","ans)","ans;","base","check","class","https://leetcode.com/problems/revers","int","integ","leetcod","o(1)","o(log(x)),","overflow.","potenti","problem","public:","return","revers","reverse(int","sc:","solut","tc:","test","test;","x","x)","{","}","};"],"Number Parsing/Valid Number.html":["'","')","');","'+'","'e')","('0'","(('0'","():","(i","(integer)]","(real","(str[i]","*","*********","*/","++i;","+/","/**","//","0;","1)","123e","123e+","417.","=","==","[+/","[]:","[expon","]","abcd","abcd.ef","abce.","alreadi","auto","back","becom","bool","check","class","count_dot","count_num","decompos","dummi","encount","expon","exponent.","false;","final","format:","https://www.lintcode.com/problem/valid","includ","int","integ","integer.","isnumber(str","len","len)","lintcod","necessari","necessary.","now","now.","number","number)","number.","number/descript","number:","onc","option","part.","patch","problem","public:","real","remain","return","s)","signs.","solut","space","step","str","str.length();","str.push_back('","str[i]","string.","symbol,","trim(s);","valid","visit","white","{","||","}"],"Number Parsing/String to Integer.html":["&str)","(!positive)","(atoi)","(i","(sum","*","*/","++i;","/**","//","0;","54.","=","==",">","@param","@return:","atoi(str","atoi/descript","befor","break;","character.","class","code","first","here","https://www.lintcode.com/problem/str","ignor","int","int_max)","int_max;","integ","len","len)","lintcod","non","problem","public:","return","solut","str.length();","str:","string","sum","sum;","whitespac","write","{","}"],"Number Parsing/Binary Representation.html":["\".\"","\"error\")","\"error\";","&n)","(binary)","(demical)","(fac_part_bin","(fac_part_bin.empty())","(n","(po","(res.empty())","(temp.rem","*","*/","*=","+","/**","//","0","0)","0.0","0.001","0.125","0.25","0.5","0;","1","1.0","180.","2);","2;","32;","=","==",">","@param","@return:","auto","binari","binaryrepresentation(str","class","code","convertfractionalpart(const","convertfractionalpart(fac_part_dec);","convertintegralpart(const","convertintegralpart(int_part_dec);","convertintegralpart(n);","decim","div_t","doubl","e.g:","end","fac_part_bin","fac_part_bin;","fac_part_dec","fraction","given","handl","here","https://www.lintcode.com/problem/binari","int","int_part_bin","int_part_bin;","int_part_dec","len","lintcod","max_len","max_len)","n","n.find('.');","n.length()","n.substr(0,","n.substr(pos,","n:","number","part.","pass","po","pos);","private:","problem","public:","represent","representation/descript","res.end());","res.push_back('0');","res.push_back('1');","res;","return","solut","std::div(n,","std::reverse(res.begin(),","std::stod(str);","std::stoi(str);","std::string","std::string&","std::string::npos)","str)","strategi","string","temp","temp.quot;","write","{","}","};"],"Number Parsing/Palindrome Number.html":["%","(copi","*","*/","*=","+=","/**","//","/=","0)","0;","10;","491.","=","==",">","@param","@return:","bool","class","code","copi","fals","here","https://www.lintcode.com/problem/palindrom","ispalindrome(int","it'","lintcod","long","mirror","num)","num:","num;","number","number/descript","palindrom","posit","problem","public:","return","solut","true","write","{","}","};"],"Number Parsing/Add Digits.html":["%","(n","(num","*","*/","+=","/**","//","/=","0)","0;","10)","10;","569.","=",">",">=","@param","@return:","add","adddigits(int","class","code","decompose(int","decompose(num);","digit","digits/descript","here","https://www.lintcode.com/problem/add","int","integ","lintcod","n","n)","neg","non","num","num)","num:","num;","on","private:","problem","public:","re","res;","return","solut","write","{","}","};"],"Number Parsing/Happy Number.html":["!=","%","(n","(set.count(n)","*","*/","+=","/**","//","/=","0)","0;","1)","10;","488.","=","==",">","@param","@return:","bool","class","code","decompose(int","decompose(n);","digit","digit;","fals","false;","happi","here","https://www.lintcode.com/problem/happi","int","integ","ishappy(int","lintcod","n","n)","n:","number","number/descript","private:","problem","public:","re","res;","return","set.insert(n);","set;","solut","std::unordered_set","true","true;","write","{","}","};"],"Number Parsing/Validate IP Address.html":["!=","\"\";","\"ipv4\"","\"ipv6\"","\"neither\";","&&","'0')","(!('0'","(!(('0'","(!(valu","(bgn","(char","(po","(str.length()","0","0,","1","1222.","16);","3)","4)","8)",":","=","==",">",">=","?","address","address/descript","auto","auto&","base","bgn,","bgn;","break;","ch","char","class","delm)","end)","end,","false;","gettoken(const","https://www.lintcode.com/problem/valid","int","int&","ip","ip)","ip.find('.');","ip.find(':');","isv4(ip)","isv6(ip)","lintcod","po","private:","problem","public:","return","solut","std::stoi(token);","std::stoi(token,","std::string","std::string::npos)","str)","str,","str[0]","string","valid","validipaddress(str","valu","{","}"],"Word Puzzle/Word Break.html":["!=","&&","(int","(s.substr(i,","(s.substr(j","*","*/","+","/**","0","1);","1,","139.",";","=","==","averag","bool","break","class","compos","continue;","dict)","dictionari","dp(n","dp[0]","dp[i","dp[i]","dp[i]:","dp[j]","dp[n]","end","https://leetcode.com/problems/word","i)","i.","improv","int","ith","k","l","l)","l),","l]","leetcod","length","n","n)","number","o(n","o(n)","o(n^3),","posit","prefix","problem","public:","return","s,","s.length();","sc:","solut","string","tc:","true;","vector","vector&","whether","word","word)","wordbreak(str","words)","words.","{","}","};"],"Word Puzzle/Word Break II.html":["(int","(memo.count(s)","(s.empty())","0","1)","140.",";","=","==","ans;","backtracking(","backtracking(s,","break","class","const","dict(words.begin(),","dict,","https://leetcode.com/problems/word","ii","int","leetcod","memo)","memo);","memo;","memo[s];","n","private:","problem","public:","return","s,","s.length();","solut","string&","unordered_map>","unordered_map>&","unordered_set","unordered_set&","vector","vector&","word","wordbreak(str","words)","words.end());","{","{\"\"};","}"],"Word Puzzle/Word Ladder.html":["(!q.empty())","(dict.count(end)","(int","*","*/","++ans;","/","/**","0","0)","0;","127.","1;","25),",";","=","==","\\","an","averag","begin,","class","cog","dict(words.begin(),","dog","dot","end,","hit","hot","https://leetcode.com/problems/word","int","k","k)","ladder","ladderlength(str","leetcod","length","log","lot","n","number","o(n","problem","public:","q.emplace(begin);","q.size();","q;","queue","return","sc:","solut","string","tc:","unordered_set","vector&","word","words)","words.end());","{","}"],"Word Puzzle/Word Ladder II.html":["!=","(!q.empty())","(begin","(const","(discovery[neighbor]","(int","*","*/","+","++level;","/","/**","0","0,","0;","1)","1,","121.","25),",":",";","=","==",">&","\\","ans)","ans);","ans.emplace_back(config);","ans;","auto&","averag","begin,","buildgraph(","buildgraph(begin,","class","cog(5)","config,","config.emplace_back(begin);","config.emplace_back(neighbor);","config.pop_back();","config;","const","continue;","dict(words.begin(),","dict,","discovery)","discovery);","discovery,","discovery;","discovery[begin]","dog(4)","dot(3)","end)","end,","findladders(str","findpath(begin,","findpath(neighbor,","graph,","graph;","graph[begin])","hit(1)","hot(2)","https://www.lintcode.com/problem/word","ii","ii/descript","int","k","k)","ladder","length","level","lintcod","log(4)","lot(3)","n","neighbor","number","o(n","private:","problem","public:","q.emplace(begin);","q.size();","q;","queue","return","return;","sc:","solut","string","string&","tc:","unordered_map","unordered_map&","unordered_map>","unordered_map>&","unordered_set","unordered_set&","vector","vector&","vector>","vector>&","void","word","words)","words.end());","{","}","};"],"Word Puzzle/Word Search.html":["!=","&&","(!(nx","(3^l)),","(const","(i","(int","(word[i]","*","*/","+","++i;","/**","0","0;","0},","1,","1},","1}})","79.",":",";","=","==",">",">=","auto&","backtracking(","backup","board,","board.size();","board[0].size();","board[x][y]","board[x][y])","board[x][y];","bool","char","class","column","const","d","d[0];","d[1];","directs({{1,","directs)","directs;","exist(vector>&","false;","https://leetcode.com/problems/word","i,","int","l","l)","l,","leetcod","length","m","m,","n","n,","number","nx","ny","o(l)","o(m","problem","public:","return","row","sc:","search","solut","solution()","string","string&","tc:","true;","vector>&","word","word)","word.length();","x","x,","y","y,","{","{0,","}"],"Word Puzzle/Word Search II.html":["&&","(!(nx","(3^l)),","(ans.begin(),","(char","(const","(curr","(int","*","*/","+","/**","//","0","0)","0;","0},","1,","1},","1}})","212.",":",";","=","==",">=",">branch.count(ch)",">branch[ch]",">branch[ch];",">is_word",">is_word)","ans)","ans.emplace(config);","ans.end());","ans;","auto","auto&","backtracking(","board,","board.size();","board[0].size();","board[x][y]","board[x][y];","bool","branch;","buildtrie(const","buildtrie(words);","ch","char","class","collect","column","config,","config.pop_back();","config.push_back(ch);","curr","curr,","d","d[0];","d[1];","directs({{1,","directs)","directs;","duplicates.","false;","findwords(vector>&","https://leetcode.com/problems/word","ii","int","is_word","l","leetcod","length","m","m,","make_shared();","mark","n","n,","node","number","nx","ny","o(l)","o(m","private:","problem","public:","return","return;","root","root;","row","sc:","search","shared_ptr","solut","solution()","string&","struct","tail","tc:","true;","unordered_map>","unordered_set","unordered_set&","vector","vector&","vector>","vector>&","visit","void","won't","word","word)","word.","words)","x","x,","y","y,","{","{0,","}","};"],"Word Puzzle/Word Pattern.html":["!=","(ch","(i","(p2s.count(ch)","(s2p.count(word)","(string","(word","*","*/","++i)","/**","0)","0;","290.",";","=","==",">>","bool","ch","ch;","char","class","false;","https://leetcode.com/problems/word","in(s);","int","istringstream","leetcod","m","n","np","np)","np;","number","o(m),","o(n),","p,","p.length();","p2s;","p2s[ch]","p2s[ch])","p[i];","pattern","problem","public:","return","s)","s2p;","s2p[word]","s2p[word])","solut","string","uniqu","unordered_map","word","word;","wordpattern(str","{","}","};"],"Word Puzzle/Word Pattern II.html":["!=","&&","(i","(int","(ip","(map.count(ch)","(res)","(token","+","//","0,","1)","1,","291.",";","=","==",">","auto&","backtracking(","bool","ch","char","charact","character.","class","const","false;","find","https://leetcode.com/problems/word","ii","int","ip","ip,","is,","l","l))","l,","leetcod","map","map,","map;","map[ch];","mapped.","np","np,","ns)","ns,","p,","p.length(),","p[ip];","pattern","private:","problem","public:","re","return","s)","s,","s.length(),","s.substr(is,","set)","set);","set;","solut","string","string&","token","token.length();","tri","true;","unordered_map","unordered_map&","unordered_set","unordered_set&","word","wordpatternmatch(str","{","||","}"],"Word Puzzle/Word Squares.html":["\"a\".","\"la\".","\"le\"","&words)","(canuse(index","(const","(i","(index","(int","(words.empty())","*","*/","+","+=","/*","/**","//","1","1)","1,","1.","1st","2.","2nd","634.",":",";","=","==","=>","@param","@return:","adopt","ans)","ans);","ans.push_back(config);","ans;","auto&","b","bool","bound)","bound,","cand","candid","candidate,","canuse(","check","choos","class","code","collect","config)","config))","config,","config.pop_back();","config.push_back(cand);","config;","criterion.","duplic","e","far","far.","filter","find","first","form","futur","group","here","https://www.lintcode.com/problem/word","index","index,","int","ith","key","key;","l","legal","len","lintcod","n","n,","need","onc","predict","prefix","prefix.","private:","problem","proper","public:","r","recurs","return","return;","round.","runbacktracking(","runbacktracking(0,","runbacktracking(index","same","second","select","set","share","solut","squar","squares/descript","start","std::string","std::unordered_map>","std::unordered_map>&","std::vector&","std::vector>","std::vector>&","step,","suffix","trie,","trie;","trie[\"\"].insert(word);","trie[key])","vector>","void","without","word","word.length();","word[index];","words)","words:","words[0].size();","wordsquares(vector","write","{","{};","}"],"Word Puzzle/Valid Word Square.html":["&words)","(int","*","*/","/**","//","0","888.",";","=","@param","@return:","bool","boolean","class","code","here","https://www.lintcode.com/problem/valid","int","lintcod","list","num_r","problem","public:","solut","squar","square/descript","string","valid","validwordsquare(vector","word","words.size();","words:","write","{"],"Word Puzzle/Valid Anagram.html":["&digits)","'b',","'c'}},","'e',","'f'}},","'h',","'i'}},","'k',","'l'}},","'n',","'o'}},","'q',","'r',","'s'}},","'u',","'v'}},","'x',","'y',","'z'}},","(char","(digits.empty())","(index","*","*/","+","/**","//","1,","425.",":","=","==","@param","@return:","anagram","ans)","ans);","ans.push_back(config);","ans;","bound)","bound,","ch","char","class","code","combin","config,","config.pop_back();","config.push_back(ch);","config;","const","digit","digits,","digits.length(),","digits:","digits[index];","here","https://www.lintcode.com/problem/lett","index,","int","letter","lettercombinations(str","lintcod","map({","map;","map[digit])","number","number/descript","phone","posibl","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(0,","runbacktracking(index","solut","solution()","std::string","std::string&","std::unordered_map>","std::vector","std::vector&","string","valid","vector","void","write","{","{'2',","{'3',","{'4',","{'5',","{'6',","{'7',","{'8',","{'9',","{'a',","{'d',","{'g',","{'j',","{'m',","{'p',","{'t',","{'w',","}","})","};"],"Word Puzzle/Group Anagrams.html":["&strs)","(auto&","(const","*","*/","/**","//","772.",":","@param","@return:","anagram","anagrams/descript","ans.emplace_back(std::move(pair.second));","ans;","array","auto","auto&","class","code","divid","given","group","groupanagrams(vector","groups)","groups;","groups[key].push_back(word);","here","https://www.lintcode.com/problem/group","key(word);","key.end());","lintcod","pair","problem","public:","return","solut","std::sort(key.begin(),","std::unordered_map>","std::vector>","string","strs)","strs:","vector>","word","write","{","}","};"],"Word Puzzle/Valid Word Abbreviation.html":["&abbr)","&word,","(index_w","*","*/","/**","//","0,","0;","637.","=","@param","@return:","abbr","abbr.length();","abbr:","abbrevi","abbreviation/descript","bool","class","code","empti","fals","given","here","https://www.lintcode.com/problem/valid","index_a","index_w","int","len_a","len_w","lintcod","match","non","problem","public:","solut","string","true","valid","validwordabbreviation(str","word","word.length();","word:","write","{"],"Word Puzzle/Word Abbreviation.html":["&dict)","(int","(n","(no","*","*/","+","/**","//","0","0)","1","1)","1];","6","639.",";","=","==","=>",">","@param","@return:","abbrevi","abbreviation/descript","ans(n);","array","class","code","dict.size();","dict:","distinct","empti","f2e","face","god","here","https://www.lintcode.com/problem/word","i6l","i6t","i7n","in5l","in6n","int","int4l","int5n","inte3l","inte4n","intens","inter2l","intern","intern1l","internet","interv","interv1l","intr4n","intrus","l2e","lintcod","minim","n","need)","non","possibl","prefix_len","prefix_len)","prefix_lens(n);","problem","public:","return","solut","states;","std::to_string(len","std::unordered_map","std::vector","str.substr(0,","str;","str[len","string","vector","word","wordsabbreviation(vector","write","{","{};","}","};"],"Word Puzzle/Unique Word Abbreviation.html":["&&","&word)","(const","(len","(words.count(word)","*","*/","*/validwordabbr(vector","++abbrs[abbr];","++words[word];","/*","/**","//","0","0)","1","1.","2.","648.","=","==","@param","@return:","abbr","abbrevi","abbreviation/descript","abbrs.count(abbr)","abbrs;","abbrs[abbr])","appear","auto","auto&","bool","call","class","code","dictionary)","dictionary,","dictionary.","dictionary:","equal.","fals","false;","frequenc","genabbreviation(const","genabbreviation(word);","hand,","here","https://www.lintcode.com/problem/uniqu","instanti","int","intial","isunique(str","len","lintcod","list","moreover,","necessari","new","obj","obj.isunique(word);","object","param","present","private:","problem","public:","return","shown","solut","std::string","std::string&","std::unordered_map","store","str)","str.length();","string","such:","too.","true","true;","uniqu","validwordabbr","validwordabbr(dictionary);","word","word:","words;","words[word]","write","{","}","};"],"Linked List/Delete Node in a Linked List.html":["(curr","*","*/","*next;","/**","237.",":","=",">next",">next)",">next;",">val",">val;","auto","class","curr","curr;","definit","delet","deletenode(listnode*","https://leetcode.com/problems/delet","int","leetcod","link","list","list.","listnod","listnode(int","n","next(null)","node","node)","node;","nullptr;","number","o(1)","o(n),","pred","problem","public:","sc:","singli","solut","struct","tc:","val(x),","val;","void","x)","{","{}","}","};"],"Linked List/Remove Linked List Elements.html":["&dummy;","(curr","(curr)","*","*/","*next)","*next;","/**","203.",":","=","==",">next",">next;",">val","auto","class","curr","curr;","definit","delet","dummy.next","dummy.next;","dummy;","element","head,","head;","https://leetcode.com/problems/remov","int","leetcod","link","list","list.","listnod","listnode()","listnode(int","listnode*","n","next(next)","next(nullptr)","node","number","o(1)","o(n),","pred","problem","public:","remov","removeelements(listnode*","return","sc:","singli","solut","struct","succ","succ;","tc:","val(0),","val(x),","val)","val;","x)","x,","{","{}","}","};"],"Linked List/Remove Nth Node From End of List.html":["!=","(int","(l","(r)","*","*/","*next)","*next;","/**","0","1","19.","2","3",":",";","=",">2",">3",">4",">5",">next",">next;","?","auto","class","definit","delet","end","head","head)","head,","head;","https://leetcode.com/problems/remov","int","l","l;","leetcod","link","list","list.","listnod","listnode()","listnode(int","listnode*","n","n)","next(next)","next(nullptr)","next;","nil","node","normal","nth","number","o(1)","o(n),","p","problem","public:","r","remov","removenthfromend(listnode*","return","sc:","singli","solut","struct","tc:","val(0),","val(x),","val;","x)","x,","{","{}","}","};"],"Linked List/Reverse Linked List II.html":["&dummy;","(int","(m","*","*/","*next)","*next;","/**","//","0","1","1)th","2","3","4","5","92.",":",";","=",">",">next",">next;","auto","class","curr","curr;","definit","dummy.next","dummy.next;","dummy;","find","first","head,","head;","https://leetcode.com/problems/revers","ii","ii/submiss","int","intern","leetcod","link","list","list.","listnod","listnode()","listnode(int","listnode*","m","m,","n","n)","next(next)","next(nullptr)","next;","node","node.","nullptr;","number","o(1)","o(n),","pred","pred;","prev","problem","public:","return","revers","reversebetween(listnode*","sc:","second","segment.","singli","solut","struct","succ;","tail","tail;","tc:","val(0),","val(x),","val;","x)","x,","{","{}","|","}","};"],"Linked List/Palindrome Linked List.html":["!=","!head","&&","(!head","(curr)","(fast","(int","*","*/","*next)","*next;","++count;","/**","//","0","0;","234.",":",";","=","==",">next",">next)",">next;",">val",">val)",">val;","auto","bool","break;","class","count","curr","curr;","definit","false;","fast","find","head","head)","head,","head;","https://leetcode.com/problems/palindrom","int","is_palin","is_palin;","ispalindrome(listnode*","leetcod","left","link","list","list.","listnod","listnode()","listnode(int","middl","n","next(next)","next(nullptr)","next;","node","nullptr;","number","o(1)","o(n),","palindrom","point","portion.","pred","pred;","problem","public:","restor","return","revers","right","sc:","singli","slow","slow,","solut","struct","succ","succ;","tc:","true;","val","val(0),","val(x),","val;","x)","x,","{","{}","||","}","};"],"Linked List/Sort List.html":["!=","&&","&dummy;","(bgn","(fast","(l","(l)","(r)","*","*/","*next;","/**","148.",":","=","==",">next",">next;",">val","auto","bgn","bgn,","bgn;","call","class","cost","curr","definit","dummy.next;","dummy;","end","end)","end);","fast","head)","https://leetcode.com/problems/sort","int","l","l;","leetcod","link","list","list.","listnod","listnode(int","listnode*","maintain","merge(bgn,","merge(head,","merge(listnode*","merge(slow,","n","next(null)","node","nullptr);","nullptr;","number","o(n)","o(nlogn),","private:","problem","public:","r","r)","r;","return","sc:","singli","slow","slow);","solut","sort","sortlist(listnode*","stack","struct","tc:","val(x),","val)","val;","x)","{","{}","}","};"],"Linked List/Merge k Sorted Lists.html":["&&","&dummy;","(bgn","(l","(l)","(r)","*","*/","*next)","*next;","+","/**","1,","1;","23.",":","=","==",">",">>",">next",">next;",">val","auto","bgn,","call","class","cost","curr","definit","dummy.next;","dummy;","end)","end,","helper(0,","helper(bgn,","helper(int","helper(mid","https://leetcode.com/problems/merg","int","k","l","l;","leetcod","link","list","list.","listnod","listnode()","listnode(int","listnode*","lists)","lists);","lists.size()","lists[bgn];","maintain","merg","mergeklists(vector&","mid","mid,","n","next(next)","next(nullptr)","node","nullptr;","number","o(logk)","o(nlogk),","private:","problem","public:","r","r)","r;","return","sc:","singli","solut","sort","stack","struct","tc:","total","val(0),","val(x),","val)","val;","vector&","x)","x,","{","{}","}","};"],"Linked List/Partition List.html":["&dummy_g;","&dummy_l,","(head","(head)","*","*/","*next)","*next;","/**","96.",":","=",">next",">next;",">val","auto","class","definit","dummy_g.next;","dummy_g;","dummy_l,","dummy_l.next;","g","head","head,","head;","https://www.lintcode.com/problem/partit","int","l","link","lintcod","list","list.","list/descript","listnod","listnode()","listnode(int","listnode*","n","next","next(next)","next(nullptr)","node","nullptr;","number","o(1)","o(n),","partit","partition(listnode*","problem","public:","return","sc:","singli","solut","struct","tc:","val(0),","val(x),","val;","x)","x,","{","{}","}","};"],"Linked List/Odd Even Linked List.html":["!head","%","&dummy_even;","&dummy_odd,","(!head","(head)","(index","*","*/","*next)","*next;","++index;","/**","0)","1;","2","328.",":","=","==",">next",">next)",">next;","auto","class","definit","dummy_even.next;","dummy_even;","dummy_odd,","dummy_odd.next;","even","head","head)","head;","https://leetcode.com/problems/odd","index","int","leetcod","link","list","list.","listnod","listnode()","listnode(int","listnode*","n","next(next)","next(nullptr)","node","nullptr;","number","o(1)","o(n),","odd","oddevenlist(listnode*","problem","public:","return","sc:","singli","solut","struct","succ","succ;","tc:","val(0),","val(x),","val;","x)","x,","{","{}","||","}","};"],"Linked List/Intersection of Two Linked Lists.html":["!=","(a","(a)","(b)","(la","(lb","*","*/","*getintersectionnode(listnod","*heada,","*headb)","*next;","+","++la;","++lb;","/**","0;","160.",":","=",">",">next;","a;","auto","b","b)","class","definit","heada;","headb;","https://leetcode.com/problems/intersect","int","intersect","la","la)","la;","lb","lb)","lb;","leetcod","link","list","list.","listnod","listnode(int","m","n","n),","next(null)","node","number","o(1)","o(m","problem","public:","return","sc:","singli","solut","struct","tc:","two","val(x),","val;","x)","{","{}","}","};"],"Linked List/Copy List with Random Pointer.html":["(!head)","(clone","(curr","(curr)","*","*/","...","/*","/**","//","1.","138.","2.","3.","=","=>",">",">next",">next)",">next;",">random",">random)",">val);","^","_val)","_val;","a+","auto","b","b+","behind","c","c+","class","clone","clone;","copi","copyrandomlist(node*","curr","definit","each","finally,","follow","gener","head)","head;","https://leetcode.com/problems/copi","int","leetcod","list","list.","n","need","new","next","next;","node","node(curr","node(int","node*","node,","node.","null;","nullptr;","number","o(1)","o(n),","on","origin","orign","point","pointer","pointer.","problem","public:","put","random","random;","re","replic","res;","return","sc:","solut","split","step","tc:","then,","to.","v","val","val;","{","|","}","};"],"Linked List/Insert into a Cyclic Sorted List.html":["!=","&&","(!head)","((pred","(maximum)","(minimum)","(pred","*","*/","/*","/**","//","1","1.","2","2.","3","4","708.","=",">",">=",">next",">next;",">val","_next)","_next;","_val)","_val,","_val;","a.","auto","b.","circular","class","cyclic","definit","different:","equal,","head","head);","head,","head;","https://leetcode.com/problems/insert","insert","insert(node*","int","leetcod","link","list","n","new","next","next;","node","node()","node(int","node(val);","node*","node.","node;","null;","number","o(1)","o(n),","p","pred","problem","public:","return","s","sc:","solut","sort","succ","succ;","tc:","val","val)","val;","valu","{","{}","||","}","};"],"Linked List/Linked List Cycle.html":["&&","(!head)","(fast","(slow","*","*/","*head)","*next;","/**","141.",":","=","==",">next",">next)",">next;","auto","bool","class","cycl","definit","false;","fast","fast)","hascycle(listnod","head,","head;","https://leetcode.com/problems/link","int","leetcod","link","list","list.","listnod","listnode(int","n","next(null)","node","number","o(1)","o(n),","problem","public:","return","sc:","singli","slow","solut","struct","tc:","true;","val(x),","val;","x)","{","{}","}","};"],"Linked List/Linked List Cycle II.html":["!=","!fast","#","&&","(!fast","(!head)","(a","(fast","(slow","*","*/","*detectcycle(listnod","*head)","*next;","+","/**","142.","2",":","=","==","=>",">next",">next)",">next;","auto","b","b)","break;","c","class","cycl","definit","fast","fast)","hare","head,","head;","https://leetcode.com/problems/link","ii","int","leetcod","link","list","list.","listnod","listnode(int","meet","n","next(null)","node","nullptr;","number","o(1)","o(n),","point","problem","public:","return","sc:","singli","slow","slow;","solut","start","step","struct","taken","tc:","tortois","twice","val(x),","val;","x","x)","y","{","{}","|","||","}","};"],"General BFS/Clone Graph.html":["(!node)","(!q.empty())","(auto","(set.count(dst)","*","*/","/*","/**","//","0)","0;","133.",":","=","==",">neighbors)",">neighbors.emplace_back(map[dst]);",">val);","_neighbors)","_neighbors;","_val)","_val,","_val;","auto","class","clone","clonegraph(node*","definit","dst","graph","https://leetcode.com/problems/clon","int","leetcod","map;","map[dst]","map[node]","map[node];","map[src]","n","neighbor","neighbors;","new","node","node()","node(dst","node(int","node(nod","node)","node*","node.","nullptr;","number","o(n)","o(n),","problem","public:","q.emplace(dst);","q.emplace(node);","q.front();","q.pop();","q;","queue","return","sc:","set.emplace(dst);","set.emplace(node);","set;","solut","src","tc:","unordered_map","unordered_set","val","val;","vector","vector();","{","}","};"],"General BFS/The Maze.html":["&&","&destination)","&maze,","&start,","(!queue.empty())","((nx","(const","(num_c","(num_r","*","*/","+","/**","//","0","0)","0},","1,","1},","1}})","787.",":","=","==",">",">=","@param","@return:","auto","auto&","ball","bool","class","code","destin","destination:","direct","direct[0];","direct[1];","directs({{1,","directs)","directs;","false));","false;","haspath(vector>","here","https://www.lintcode.com/problem/th","int","lintcod","maze","maze.size();","maze/descript","maze:","maze[0].size();","num_c","num_r","nx","ny","problem","public:","queue.front();","queue.pop();","queue.push(record(start[0],","queue;","rec","rec.x;","rec.y;","record","record(int","return","solut","solution()","start","start:","start[1]));","std::queue","std::vector(num_c,","std::vector>","stop","struct","true;","vector","visit(num_r,","visit[start[0]][start[1]]","whether","write","x","x(x),","x,","y","y(y)","y)","y;","{","{0,","}","};"],"General BFS/The Maze II.html":["&&","(!queue.empty())","(int","(m","(n","0","0)","0);","0;","0},","1,","1},","1}})","505.",":",";","=","==",">",">=","class","directs({{1,","directs;","dist(dist)","dist)","dist;","dp(m,","dp[start[0]][start[1]]","end)","https://leetcode.com/problems/th","ii","ii/","int","int_max));","leetcod","m","maze","maze,","maze.size();","maze[0].size();","n","nx","ny","problem","public:","queue","queue.emplace(start[0],","queue.size();","queue;","record","record(int","return","shortestdistance(vector>&","size","solut","solution()","start,","start[1],","struct","vector&","vector(n,","vector>","x(x),","x,","x;","y(y),","y,","y;","{","{0,","}","};"],"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":["&&","(!q.empty())","(int","++step;","0","0);","0,","0;","0},","1,","1293.","1;","1},","1}})",":",";","=",">=","class","continue;","directs({{1,","directs;","dp(m,","dp[nx][ny]","dp[nx][ny])","elimin","elimination/","grid","grid,","grid.size();","grid[0].size();","https://leetcode.com/problems/shortest","int","int_max));","k","k)","leetcod","m","n","no);","no;","nx","ny","ny,","obstacl","path","private:","problem","public:","q.emplace(0,","q.emplace(nx,","q.size();","q;","queue>","return","shortest","shortestpath(vector>&","size","solut","solution()","step","vector(n,","vector>","{","{0,","||","}","};"],"General BFS/Minimum Knight Moves.html":["&&","(!q.empty())","(int","(nx","(tx","*","*/","++level;","/**","//","0","0)","0;","0});","1","1)","1,","1197.","1;","1e4;","1},","2,","2},","2}})",":",";","=","==",">=","abs(tx);","abs(ty);","class","const","continue;","dim","directs(","directs;","first","here.","https://leetcode.com/problems/minimum","index","int","knight","leetcod","level","level;","minimum","minknightmoves(int","move","moves/","never","ny","ny});","o(|x|","private:","problem","public:","q.push({0,","q.push({nx,","q.size();","q;","quadrant","queue>","reach","return","sc:","size","solut","solution()","static","tc:","tx","tx,","ty","ty)","unordered_set","vector>","visit.count(np)","visit.emplace(0);","visit.emplace(np);","visit;","x","y","{","{1,","{2,","{{1,","|x|","|y|","|y|)","|y|),","||","}","};"],"BFS with State Encoding/Open the Lock.html":["\"0000\")","(!q.empty())","(int","(target","(visit.count(\"0000\")","*","*/","+","++level;","/**","0","0;","1","1)","1;","752.",";","=","==","class","combinations.","convert","cost","d","d^n","deadend","deadends,","deadends.end());","digit","each","enumer","gener","https://leetcode.com/problems/open","int","iteration,","leetcod","length","level","lock","n","need","neighbors,","new","number","o(d^n","o(n","o(n).","open","openlock(vector&","per","problem","public:","q.emplace(\"0000\");","q.size();","q;","queue","return","s","s)","s),","sc:","set","so,","solut","string","target)","tc:","unordered_set","vector","visit(deadends.begin(),","visit.count(target)","visit.emplace(\"0000\");","{","||","}"],"BFS with State Encoding/Sliding Puzzle.html":["\"123450\")","&&","'0';","(!q.empty())","(board[0][0]","(board[0][1]","(board[0][2]","(board[1][0]","(board[1][1]","(board[1][2]","(code","(int","*","*/","+","++level;","/**","0","0)","0);","0;","0},","0};","1,","1},","1};","1}})","2};","773.",":",";","=","==",">",">=","auto","board)","board[0][0]","board[0][1]","board[0][2]","board[1][0]","board[1][1]","board[1][2]","class","code","code(6,","code(code)","code)","code);","code;","code[0]","code[1]","code[2]","code[3]","code[4]","code[5]","const","directs({{1,","directs;","encode(board);","encode(const","findzero(board);","findzero(const","https://leetcode.com/problems/slid","int","leetcod","level","n","number","nx","ny","o(n!)","o(n!),","pair","problem","public:","puzzl","q.emplace(zero.first,","q.size();","q;","queue","record","record(int","return","sc:","slide","slidingpuzzle(vector>&","solut","solution()","string","string&","struct","tc:","tile","unordered_set","vector>&","visit.emplace(move(code));","visit;","x(x),","x,","y(y),","y,","y;","zero","zero.second,","{","{0,","{1,","}","};"],"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":["&&","(!(nx","(!q.empty())","(const","(int","(m","*","*/","+","++level;","/**","0","0;","0},","1,","1284.","1},","1}})",":",";","=",">",">&",">=","^","auto&","binari","class","code","code,","column","convert","d","d[0];","d[1];","directs({{1,","directs)","directs;","flip","flip(int","https://leetcode.com/problems/minimum","int","leetcod","level","m","m,","mat)","mat,","mat.size();","mat[0].size();","matrix","matrix/","minflips(vector>&","minimum","n","n)","n))","n)),","n,","number","nx","ny","o(2","problem","public:","q.emplace(code);","q.size();","q;","row","sc:","size","solut","solution()","tc:","vector","visit(1","x","x,","y","y)","zero","{","{0,","}"],"General DFS/N Queens.html":["'.'));","(c","(int","*","*/","/**","0","51.",";","=","==","ans)","ans);","ans;","backtracking(","backtracking(0,","board","c","c,","class","config(n,","https://leetcode.com/problems/n","int","leetcod","n","n)","n,","o(n!),","o(n)","private:","problem","public:","queen","queens,","queens;","return","sc:","size","solut","solvenqueens(int","string(n,","tc:","vector","vector&","vector>","vector>&","void","{","}"],"General DFS/Letter Combinations of a Phone Number.html":["'b',","'c'}},","'e',","'f'}},","'h',","'i'}},","'k',","'l'}},","'n',","'o'}},","'q',","'r',","'s'}},","'u',","'v'}},","'x',","'y',","'z'}}","(char","(i","(n","*","*/","+","/**","0)","1,","425.",":","=","==","alphabet","ans)","ans);","ans.push_back(config);","ans;","class","combin","config,","config.pop_back();","config.push_back(alphabet);","config;","const","digits)","digits,","digits.length();","https://www.lintcode.com/problem/lett","i,","int","length","letter","lettercombinations(str","lintcod","map({","map;","map[digits[i]])","n","n)","n,","number","number/descript","o(4^n),","o(n)","phone","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(0,","runbacktracking(i","sc:","solut","solution()","string","string&","tc:","unordered_map>","vector","vector&","void","{","{'2',","{'3',","{'4',","{'5',","{'6',","{'7',","{'8',","{'9',","{'a',","{'d',","{'g',","{'j',","{'m',","{'p',","{'t',","{'w',","{};","}","})","};"],"General DFS/Sudoku Solver.html":["!=","&&","'.')","(board[x][y]","(int","(m","(ni","(x","*","*/","+","++nx;","/**","0","0)","0;","1","1;","37.",";","=","==",">&","^","backtracking(board,","board)","board,","class","cols(9,","cols,","column","https://leetcode.com/problems/sudoku","int","leetcod","m","m,","mats(9,","mats)","mats);","n","n)","n)),","n,","number","nx","nx,","ny","ny,","o(9","o(m","problem","public:","return","row","rows(9,","rows,","sc:","solut","solver","solvesudoku(vector>&","sudoku","tc:","true;","vector(10));","vector>","vector>&","void","x,","x;","y","y,","{","}"],"General DFS/Palindrome Partitioning.html":["(2^n)),","(bgn","(int","*","*/","/**","0","131.",";","=","==","ans)","ans);","ans.emplace_back(config);","ans;","bgn,","bgn;","class","config,","config;","const","end)","end,","helper(","helper(0,","https://leetcode.com/problems/palindrom","int","leetcod","length","n","o(n","o(n^2)","palin(n,","palin,","palindrom","partit","partition(str","private:","problem","public:","return","return;","s)","s,","s.length(),","s.length();","sc:","solut","string","string&","tc:","vector&","vector(n));","vector>","vector>&","void","{","}"],"General DFS/Remove Invalid Parentheses.html":["\"()\"","&&","'('","'(')","')'","')')","(ch","(char","(i","(int","(isvalid(s))","(l","(s[i]","*","*/","++l;","++r;","/**","0","0)","0,","0;","1);","1,","1])","301.",":",";","=","==",">","ans)","ans);","ans.push_back(s);","ans;","auto","backtracking(","backtracking(copy,","backtracking(s,","bgn","bgn,","bool","ch","class","const","continue;","copy(s);","copy.erase(i,","end","end,","https://leetcode.com/problems/remov","i,","int","invalid","isvalid(const","l","l,","l;","leetcod","length","n","o(2^n),","o(n)","parenthes","private:","problem","public:","r","r,","remov","removeinvalidparentheses(str","return","return;","s)","s,","s.length(),","s[i","s[i]","sc:","solut","string","string&","tc:","vector","vector&","void","{","}","};"],"General DFS/Reconstruct Itinerary.html":["\"jfk\",","(auto&","(const","(count","(edge.second)","(res)","*","*/","+","/**","1,","332.",":","=","==","^","auto&","averag","bool","citi","class","const","continue;","count,","d","dfs(","dfs(0,","dfs(count","e","e),","edg","edge.first,","edge.second","edges.end());","false;","false});","finditinerary(vector>&","flight","graph)","graph,","graph;","graph[s].push_back({t,","graph[src])","https://leetcode.com/problems/reconstruct","int","itinerari","leetcod","n","n)","n,","number","o(d","o(v","outgo","pair","pair.second;","private:","problem","public:","re","reconstruct","return","s","sc:","seq)","seq);","seq.pop_back();","seq.push_back(\"jfk\");","seq.push_back(edge.first);","seq;","solut","sort(edges.begin(),","src,","string&","t","tc:","ticket","ticket[0];","ticket[1];","tickets)","tickets.size();","true;","unordered_map>>","unordered_map>>&","v","vector","vector&","{","}","};"],"General DFS/Unique Path III.html":["&&","(!(nr","(const","(grid[r][c]","(int","(m","*","*/","+","++ans;","/**","0","0;","0},","1,","1;","1},","1}})","2","980.",":",";","=","==",">",">=","^","ans)","auto&","backtracking(","backup","c","c,","class","column","d","d[0];","d[1];","directs({{1,","directs)","directs;","grid)","grid,","grid.size();","grid[0].size();","grid[r][c]","grid[r][c];","https://leetcode.com/problems/uniqu","iii","iii/","int","int&","k","k)","k,","leetcod","m","m,","n","n)","n)),","n,","nc","nr","number","o(3","o(m","path","pc","pc,","problem","public:","r","r,","return;","row","sc:","solut","solution()","tc:","uniqu","uniquepathsiii(vector>&","vector>&","void","{","{0,","}"],"Combination DFS/Subsets.html":["&","(c","(int","*","*/","/**","0","2^n),","78.",";","=","==","ans)","ans.push_back(conf);","ans;","bgn","bgn,","c,","class","conf,","conf;","element","end,","https://leetcode.com/problems/subset","int","leetcod","n","n)","n,","number","nums)","nums,","nums.size();","o(n","o(n)","problem","public:","return;","sc:","solut","subset","subsets(vector&","tc:","vector","vector&","vector>","vector>&","{","}"],"Combination DFS/Subsets II.html":["&","&&","(c","(int","*","*/","+","/**","0","1,","1])","2^n),","90.",";","=","==","ans)","ans);","ans.push_back(conf);","ans;","backtracking(nums,","bgn","bgn,","c","c,","class","conf,","conf.emplace_back(nums[i]);","conf.pop_back();","conf;","continue;","element","end,","https://leetcode.com/problems/subset","ii","int","leetcod","n","n)","n,","number","nums)","nums,","nums.end());","nums.size();","nums[i","nums[i]","o(n","o(n)","problem","public:","return;","sc:","solut","sort(nums.begin(),","subset","subsetswithdup(vector&","tc:","vector","vector&","vector>","vector>&","{","}","};"],"Combination DFS/Combination Sum.html":["(int","(target","*","*/","/**","0)","0,","2^n),","39.",";","=","==","ans)","ans);","ans.emplace_back(conf);","ans;","backtracking(","backtracking(nums,","bgn","bgn,","break;","class","combin","combinationsum(vector&","conf,","conf.emplace_back(nums[i]);","conf.pop_back();","conf;","const","element","end,","https://leetcode.com/problems/combin","i,","int","leetcod","n","number","nums,","nums.end());","nums.size(),","nums[i],","o(n","o(n)","private:","problem","public:","return","return;","sc:","solut","sort(nums.begin(),","sum","target","target)","target,","tc:","vector","vector&","vector>","vector>&","void","{","}","};"],"Combination DFS/Combination Sum II.html":["&&","(i","(int","(target","*","*/","+","/**","0)","0,","1,","1])","2^n),","40.",";","=","==",">","ans)","ans);","ans.emplace_back(conf);","ans;","backtracking(","backtracking(nums,","bgn","bgn,","break;","class","combin","combinationsum2(vector&","conf,","conf.emplace_back(nums[i]);","conf.pop_back();","conf;","const","continue;","element","end,","https://leetcode.com/problems/combin","ii","int","leetcod","n","number","nums,","nums.end());","nums.size(),","nums[i","nums[i]","nums[i],","o(n","o(n)","private:","problem","public:","return","return;","sc:","solut","sort(nums.begin(),","sum","target","target)","target,","tc:","vector","vector&","vector>","vector>&","void","{","}","};"],"Combination DFS/Combination Sum III.html":["(c","(int","(n","*","*/","+","/**","0)","0,","1,","10,","216.",";","=","==","amount","ans)","ans);","ans.emplace_back(conf);","ans;","backtracking(","backtracking(1,","backtracking(i","bgn","bgn,","break;","c","c,","class","combin","combinationsum3(int","conf,","conf.emplace_back(i);","conf.pop_back();","conf;","end,","https://leetcode.com/problems/combin","i,","iii","int","k","k)","k)),","k,","leetcod","n","n)","n,","number","o(c(9,","o(k)","private:","problem","public:","requir","return","return;","sc:","solut","sum","tc:","vector","vector&","vector>","vector>&","void","{","}","};"],"Combination DFS/K Sum II.html":["&cands,","(depth","(int","(n","(target","*","+","/*","//","0)","0,","1,","90.",";","=","==",">","@param","a:","ans)","ans);","ans.push_back(collect);","ans;","array","bound,","break;","cands,","cands.end());","cands.size();","cands[i],","class","code","collect,","collect.pop_back();","collect.push_back(cands[i]);","collect;","const","depth","depth,","here","https://www.lintcode.com/problem/k","ii","ii/descript","index","index,","int","integ","k","k)","k,","k:","ksumii(vector","lintcod","n","n,","postiv","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(cands,","solut","std::sort(cands.begin(),","std::vector","std::vector&","std::vector>","std::vector>&","sum","target","target)","target,","void","write","{","{};","}","};"],"Combination DFS/Split String.html":["(index","(n","*","*/","+","/*","//","0)","0,","1","1);","1,","680.",":","=","==","@param","@return:","ans)","ans);","ans.push_back(collect);","ans;","array","auto","bound)","bound,","class","code","collect,","collect.pop_back();","collect.push_back(token);","collect;","const","here","https://www.lintcode.com/problem/split","index","index,","int","lintcod","n","n,","possibl","private:","problem","public:","return","return;","runbacktracking(","runbacktracking(s,","runbacktracking(str,","s)","s.length();","solut","split","splitstring(string&","std::string&","std::vector","std::vector&","std::vector>","std::vector>&","str,","str.substr(index,","string","string/descript","token","vector>","void","write","{","{{}};","}"],"Permutation DFS/Permutations.html":["(c","(int","*","*/","/**","0","0,","46.",";","=","==","ans)","ans);","ans.push_back(config);","ans;","backtracking(","backtracking(nums,","c,","class","config,","config;","const","element","https://leetcode.com/problems/permut","int","leetcod","n","n!),","n)","n,","number","nums)","nums,","nums.size();","o(n","o(n)","permut","permute(vector&","private:","problem","public:","return","return;","sc:","solut","tc:","vector","vector&","vector>","vector>&","visit(n);","visit,","void","{","}"],"Permutation DFS/Permutations II.html":["!visit[i","&&","(c","(int","*","*/","+","/**","0","0,","1,","1]","1])","47.",";","=","==","ans)","ans);","ans.emplace_back(conf);","ans;","backtracking(","backtracking(nums,","c","c,","class","conf,","conf.emplace_back(nums[i]);","conf.pop_back();","conf;","const","continue;","element","false;","https://leetcode.com/problems/permut","ii","int","leetcod","n","n!),","n)","n,","number","nums)","nums,","nums.end());","nums.size();","nums[i","nums[i]","o(n","o(n)","permut","permuteunique(vector&","private:","problem","public:","return","return;","sc:","solut","sort(nums.begin(),","tc:","true;","vector","vector&","vector>","vector>&","visit(n);","visit,","visit[i]","void","{","}","};"],"Permutation DFS/Next Permutation.html":["(i","(nums[i","(nums[j]","*","*/","+","/**","//","0","1","1,","1]","2","3","31.","4","5",";","=",">","^^^^^^^","break;","class","decreas","element","find","hand","https://leetcode.com/problems/next","i)","i;","int","j)","leetcod","left,","monoton","n","next","nextpermutation(vector&","non","number","numbers.","nums)","nums.end());","nums.size();","nums[i])","nums[j]);","o(1)","o(n),","order","permut","point","point.","portion","problem","public:","revers","reverse(nums.begin()","reves","right","sc:","side.","solut","sort","swap","swap(nums[i],","tc:","turn","two","v","void","{","|","}","};"],"Permutation DFS/Previous Permutation With One Swap.html":["&&","(a[i]","(int","(l","+","//","0","0;","1","1)","1053.","1;","1]","2;",";","=","==",">",">=","a)","a.size();","a;","a[i]","a[l","a[l])","class","https://leetcode.com/problems/previ","i)","int","l","l;","lintcod","n","num","on","permut","permutation.","previou","prevpermopt1(vector&","problem","public:","r","return","smallest","solut","swap","swap/","vector","{","}"],"Permutation DFS/Next Closest Time.html":["&","&time)","'0');","(1440","(depth","(hour","(minut","(new_diff","(new_timestamp","(pool[0]","(pool[2]","*","*/","+","/**","//","0,","10","1440)","23)","4,","59)","60","862.","=","==",">","@param","@return:","bound)","bound,","class","closest","code","config,","config;","config[0]","config[1];","config[2]","config[3];","depth,","diff","diff,","given","here","hour","https://www.lintcode.com/problem/next","int","int&","int_max;","lintcod","minut","minute;","new_diff","new_diff;","new_timestamp","new_timestamp;","next","nextclosesttime(str","opt(pool);","opt)","opt);","pool,","pool.push_back(time[0]","pool.push_back(time[1]","pool.push_back(time[3]","pool.push_back(time[4]","pool;","pool[1])","pool[3]);","problem","public:","return;","runbacktracking(pool,","solut","std::stringstream","std::vector","std::vector&","stream","stream;","string","time","time/descript","time:","timestamp","timestamp)","timestamp,","timestamp;","write","{","}"],"Interval Fundamental/Meeting Rooms.html":["(int","(n","*","*/","/**","0)","1","252.",";","=","==","algorithm","bool","canattendmeetings(vector>&","class","depend","https://leetcode.com/problems/meet","int","interv","intervals)","intervals.end());","intervals.size();","leetcod","meet","n","number","o(logn)","o(n),","o(nlogn),","problem","public:","return","room","sc:","solut","sort","sort(intervals.begin(),","tc:","true;","underli","{","}"],"Interval Fundamental/Non-overlapping Intervals.html":["(const","(n","*","*/","++ans;","/**","0;","1)","435.","=","==","[]","algorithm","ans;","auto&","b","c","class","const","counter","depend","each","eraseoverlapintervals(vector>&","example:","https://leetcode.com/problems/non","int","interv","interval?","intervals)","intervals.end(),","intervals.size();","intervals[i][1];","l,","l[1]","leetcod","n","non","number","o(logn)","o(n),","o(nlogn),","overlap","pivot","pivot)","point","problem","public:","r)","return","sc:","solut","sort","sort(intervals.begin(),","start","tc:","underli","us","{","|","}","};"],"Interval Fundamental/Merge Intervals.html":["(int","*","*/","/**","1","56.",";","=","algorithm","ans;","auto","class","depend","https://leetcode.com/problems/merg","int","interv","intervals)","intervals.end());","intervals.size();","intervals[0];","leetcod","merg","merge(vector>&","n","number","o(logn)","o(n),","o(nlogn),","pivot","problem","public:","sc:","solut","sort","sort(intervals.begin(),","tc:","underli","vector>","{"],"Interval Fundamental/Insert Interval.html":["!=","((*it)[0]","(int","(it","*","*/","++it;","/**","0","30.",";","=",">=","ad","ans;","auto","break;","class","depend","extend","https://www.lintcode.com/problem/insert","insert","insert(vector>&","int","interv","interval/descript","intervals,","intervals.begin();","intervals.end())","intervals.insert(it,","intervals.size();","intervals[0];","lintcod","n","new","newinterval)","newinterval);","newinterval[0])","number","o(1)","o(n),","origin","pivot","problem","public:","sc:","solut","tc:","vector","vector&","vector>","whether","{","}"],"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":["(const","(correct)","(wrong)","*","*/","++ans;","/**","1","10","12","16","2","452.","6","7","8","=","[[10,16],[2,8],[1,6],[7,12]]","[]","algorithm","ans;","arrow","auto&","ballon","balloon","base","burst","class","const","counter","depend","end","endint","eraseoverlapintervals(vector>&","exampl","https://leetcode.com/problems/minimum","int","interv","intervals)","l,","l[1]","last","last)","leetcod","minimum","n","number","o(logn)","o(n),","o(nlogn),","point.","point:","points.end(),","points[i][1];","problem","public:","r)","return","sc:","solut","sort","sort(points.begin(),","start","tc:","underli","us","{","}","};"],"Interval Scheduling with Sweep Line/Meeting Rooms II.html":["(const","(event.second","*","*/","++count;","/**","0,","0;","253.",":","=","==","algorithm","an","ans;","auto&","bgn","bgn)","bgn});","class","count","count);","count;","depend","end","end});","enum","event","events)","events.end());","events.push_back({interval[0],","events.push_back({interval[1],","events;","https://leetcode.com/problems/meet","ii","int","interv","intervals)","leetcod","max(ans,","meet","minmeetingrooms(vector>&","n","number","o(logn)","o(n),","o(nlogn),","private:","problem","public:","return","room","sc:","solut","sort","sort(events.begin(),","tc:","underli","vector>","{","}","};"],"My Calendar/My Calendar I.html":["!=","&&","(it","*","*/","/**","//","1:","2:","729.","=",">",">book(start,end);",">first","auto","book(int","bool","bound","bound.","calendar","call","case","check","class","e1","e2","end)","end;","false;","https://leetcode.com/problems/mi","input","instanti","int","intput","leetcod","lower","map","map.end()","map.lower_bound(start);","map;","map[start]","mycalendar","mycalendar()","mycalendar();","mycalendar*","n","new","number","o(n)","o(nlogn),","obj","object","overlap","param_1","private:","problem","public:","queri","return","s1","s2","sc:","second","solut","start)","start,","such:","tc:","true;","upper","{","|","}","};"],"My Calendar/My Calendar II.html":["(const","(count","*","*/","++delta[end];","++delta[start];","+=","/**","0;","2)","731.",":","=",">",">book(start,end);","auto&","book(int","bool","calendar","call","class","count","delta)","delta;","delta[end];","delta[start];","end)","false;","https://leetcode.com/problems/mi","ii","ii/","instanti","int","leetcod","map","mycalendartwo","mycalendartwo()","mycalendartwo();","mycalendartwo*","n","new","number","o(n)","o(n^2),","obj","object","p","p.second;","param_1","private:","problem","public:","queri","return","sc:","solut","start,","such:","tc:","true;","{","}","};"],"My Calendar/My Calendar III.html":["(const","*","*/","++delta[start];","+=","/**","0;","732.",":","=",">book(start,end);","an","ans;","auto&","book(int","calendar","call","class","count","count);","delta)","delta;","delta[end];","end)","https://leetcode.com/problems/mi","iii","instanti","int","leetcod","map","max(ans,","mycalendarthre","mycalendarthree()","mycalendarthree();","mycalendarthree*","n","new","number","o(n)","o(n^2),","obj","object","p","p.second;","param_1","private:","problem","public:","queri","return","sc:","solut","start,","such:","tc:","{","}","};"],"Topological Sort/Course Schedule.html":["(!q.empty())","(const","(indeg[d]","(int","*","*/","+","++indeg[t];","/**","0","0)","207.",":",";","=","==","auto&","bool","canfinish(int","class","cours","d","e","e)","e),","edg","graph;","graph[s])","graph[s].emplace(t);","https://leetcode.com/problems/cours","indeg;","indeg[d];","int","leetcod","node","number","numcourses,","numcourses;","o(v","order.emplace_back(s);","order.size()","order;","p","p[0],","p[1];","prerequisites)","problem","public:","q.emplace(d);","q.front();","q.pop();","q;","queue","return","s","sc:","schedul","solut","t","tc:","unordered_map","unordered_map>","v","vector>&","{","}","};"],"Topological Sort/Sequence Reconstruction.html":["&org,","&seqs)","(!queue.empty())","(const","(count","(int","*","*/","/**","//","0","0;","1","1)","605.",":",";","=",">","@param","@return:","auto&","bool","candid","class","code","count","each","edg","edge.size();","fals","false;","graph;","here","https://www.lintcode.com/problem/sequ","indegree;","int","integ","level.","lintcod","list","multipl","n","nodes.","note","on","order;","org:","pair","permut","problem","public:","queue.size();","queue;","reconstruct","reconstruction/descript","return","seqs)","seqs:","sequenc","sequencereconstruction(vector","singl","size","solut","specif","std::unordered_map","std::unordered_map>","true","vector>","write","{","}"],"Topological Sort/Alien Dictionary.html":["\"\";","(!queue.empty())","(char","(const","(indeg[t]","(int","(pair.second","*","*/","+","/**","//","0)","0;","1","269.",":",";","=","==","?","alien","alienorder(vector&","an","ans.length()","ans.push_back(s);","ans;","auto&","averag","c","char","class","dictionari","dictionary/","dst.length())","e","e),","edg","graph;","graph[s])","https://leetcode.com/problems/alien","indeg)","indeg.size()","indeg;","indeg[c]","indeg[t];","int","leetcod","length","n","node","number","o(n","o(v","pair","problem","public:","queue","queue.emplace(pair.first);","queue.emplace(t);","queue.front();","queue.pop();","queue;","return","run","s","sc:","solut","sort.","string","t","tc:","topolog","unordered_map","unordered_map>","v","w","w),","word","word)","words)","words.size();","{","}","};"],"Graph Theory Basics/Graph Valid Tree.html":["!=","(const","(int","(n","*","*/","+","/**","0","1)","1.","1;","2","2.","261.",":",";","=","==","ack(n)","ack(n)),","ackerman","auto&","bool","check","class","component.","connect","data","disjoint","dsu","dsu(int","dsu(n);","dsu.merge(edge[0],","dsu.query()","e","edg","edge[1]);","edges)","edges.size();","false;","find,","follow","fulfil","function","graph","https://leetcode.com/problems/graph","int","leetcod","n","n(n),","n)","n,","node","number","o(n","o(n)","on","parent(n)","parent;","problem","public:","requirements.","return","sc:","set","solut","structure,","suppos","tc:","tree","tree,","tree.","tree/solut","union","us","valid","validtree(int","vector>&","{","}","};"],"Graph Theory Basics/Minimum Spanning Tree.html":["(ans.size()","(auto&","(const","(int","(lhs.cost","(name_2_id.count(dst)","(name_2_id.count(src)","(order","(set.is_same(src_id,","*","*/","++id;","/**","//","0","0)","0;","1)","629.",":",";","=","==",">city1",">city2",">cost","?","@param","@return","[](const","an","ans.push_back(connection(src,","ans;","auto&","citi","city1,","city1;","city2,","city2;","class","code","connect","connection(string&","connection.","connections)","connections.end(),","const","continue;","cost","cost)","cost;","definit","disjointset","disjointset(int","dst","dst,","dst_id","dst_id))","dst_id);","edg","edge.city1;","edge.city2;","edge.cost));","given","here","https://www.lintcode.com/problem/minimum","id","id;","includ","int","lhs,","lhs.city1.compare(rhs.city1);","lhs.city2","lintcod","list","lowestcost(vector&","minimum","n)","name_2_id;","name_2_id[dst]","name_2_id[dst];","name_2_id[src]","name_2_id[src];","order","parent(std::vector(n))","parent;","problem","public:","result","return","rhs)","rhs.cost)","set(id);","set.unite(src_id,","solut","span","src","src_id","std::sort(connections.begin(),","std::unordered_map","std::vector();","string","string&","tree","tree/descript","two","vector","write","{","}","};"],"Simulation Puzzle/Missing Ranges.html":["\"","&nums,","(bgn","(diff","(lower","(n","(nums[i])","*","*/","+","/*","//","0)","1,","1]","1])","1];","641.","=","==",">\"","@param","@return:","ans.push_back(genrange(nums[n","ans;","array","bgn,","class","code","end)","findmissingranges(vector","genrange(long","here","https://www.lintcode.com/problem/miss","int","integ","lintcod","list","long","lower,","lower:","miss","n","nums.size();","nums:","nums[i","nums[n","private:","problem","public:","rang","ranges/descript","return","solut","sort","std::string","std::to_string(bgn)","std::to_string(bgn);","std::to_string(end);","std::vector","upper)","upper));","upper)};","upper:","vector","write","{","{genrange(lower,","}","};"],"Simulation Puzzle/Integer to Roman.html":["\"c\",","\"cc\",","\"ccc\",","\"cd\",","\"cm\"},","\"d\",","\"dc\",","\"dcc\",","\"dccc\",","\"i\",","\"ii\",","\"iii\",","\"iv\",","\"ix\"},","\"l\",","\"lx\",","\"lxx\",","\"lxxx\",","\"m\",","\"mm\",","\"mmm\"}","\"v\",","\"vi\",","\"vii\",","\"viii\",","\"x\",","\"xc\"},","\"xl\",","\"xx\",","\"xxx\",","%","+","/","//","1","10","100","100)","1000","1000)","1000]","100]","10]","10];","3000","418.","9","90","900",":","class","https://www.lintcode.com/problem/integ","integ","inttoroman(int","lintcod","map({","map;","map[0][num","map[1][(num","map[2][(num","map[3][num","num)","private:","problem","public:","return","roman","roman/descript","solut","solution()","std::vector>","string","{","{\"\",","}","})","};","~"],"Simulation Puzzle/Roman to Integer.html":["&s)","(int","(map[s[i]]","*","*/","+","+=","/**","//","0","1","1.","1000}","100},","10},","1]])","1]];","1},","2","2.","4","419.","5","500},","50},","5},","6","8",":",";","=",">=","@param","@return:","accumul","ad","charact","character.","class","code","current","e.g.:","etual","greater","head.","here","https://www.lintcode.com/problem/roman","i)","int","integ","integer/descript","iv","less","let'","lintcod","map({","map;","map[s[i","map[s[i]];","map[s[n","n","predecessor","predecessor,","private:","problem","public:","represent","return","roman","romantoint(str","s.length();","s:","scan","solut","solution()","std::unordered_map","string","subtract","sum","sum;","tail","valu","vi","viii","write","{","{'c',","{'d',","{'i',","{'l',","{'m',","{'v',","{'x',","}","})","};"],"Simulation Puzzle/Find the Celebrity.html":["(a","*","*/","/**","//","0,","1","1.","1;","2.","645.","=",">","@param","@return","a,","api.","b","b)","b);","bool","celebr","celebrity'","celebrity.","celebrity/descript","class","code","declar","fals","find","findcelebrity(int","forward","here","https://www.lintcode.com/problem/find","int","know","knows(a,","knows(int","label","lintcod","n","n)","parti","peopl","problem","public:","solut","true","write","{"],"Simulation Puzzle/Largest Number.html":["\"0\";","&nums)","'0')","(ans[0]","(const","(int","(num","(radixes.count(num)",");","*","*/","+","+=","/**","//","0)","000...","1","1)","184.","1;","6","65,","656","665",":","=","==","=>",">","?","@param","@return:","[&]","a,","a:","a;","ab","an","ans;","auto&","b","b)","b:","b;","ba","ba;","case","class","code","const","content","continue;","here","https://www.lintcode.com/problem/largest","int","integ","largest","largestnumber(vector","lintcod","list","long","neg","non","num","number","number/descript","nums)","nums.end(),","nums:","problem","public:","radix","radix;","radixes;","radixes[a]))","radixes[b]))","radixes[num]","return","solut","static_cast(std::floor(std::log10(num)))","static_cast(std::pow(10,","std::sort(nums.begin(),","std::string","std::to_string(num);","std::unordered_map","string","write","{","}","};"],"Simulation Puzzle/Strobogrammatic Number.html":["&num)","'0':","'1':","'6':","'8':","'9':","(ch)","(char","*","*/","/**","//","2,","3,","4,","5,","644.","7.",":","==","@param","@return:","bool","break;","case","ch","class","code","default:","fals","false;","here","https://www.lintcode.com/problem/strobogrammat","includ","isstrobogrammatic(str","lintcod","mirror","mirror.end());","mirror.push_back('6');","mirror.push_back('9');","mirror.push_back(ch);","mirror;","num)","num:","num;","number","number/descript","problem","public:","return","simpli","solut","std::reverse(mirror.begin(),","std::string","string","strobogrammat","switch","true","write","{","}","};"],"Simulation Puzzle/Sparse Matrix Multiplication.html":["&a,","&b)","(int","*","*/","/**","//","0","0));","654.",";","=",">","@param","@return:","a.size();","a:","a[0].size();","b","b:","b[0].size();","c(m,","class","code","here","https://www.lintcode.com/problem/spars","int","lintcod","m","matrix","multipl","multiplication/descript","multiply(vector>","n","nonzero(n,","problem","public:","result","solut","spars","std::vector());","std::vector(t,","std::vector>","t","vector>","write","{"],"Simulation Puzzle/Simplify Path.html":["&path)","(i","*","*/","/**","//","1;","421.","=","@param","@return:","class","code","here","https://www.lintcode.com/problem/simplifi","int","lintcod","n","origin","path","path.length();","path/descript","path:","problem","public:","simplifi","simplifypath(str","solut","std::vector","string","tokens;","write","{"],"Data Structure Design/Trie.html":["&prefix)","&word)","(char","(curr","(prefix","*","*/","/*","//","0)","442.",":","=","==",">branch.count(ch)",">branch[ch]",">branch[ch];",">is_word",">is_word;","@param","@return:","auto","bool","branch;","ch","class","code","curr","false;","given","here","https://www.lintcode.com/problem/impl","implement","insert(str","intial","is_word(false)","is_word;","lintcod","necessari","noth","prefix","prefix)","prefix.","prefix:","private:","problem","public:","return","root(std::make_shared())","root;","search(str","solut","start","startswith(str","std::make_shared();","std::shared_ptr","std::unordered_map>","string","struct","tree)","tree/descript","trie","trie()","trie.","trienod","trienode()","true;","void","word","word)","word:","write","{","}","};"],"Data Structure Design/Insert Delete GetRandom.html":["%","(index","(refs.count(val)","*","*/","/*","/**","//","0)","1)","1;","657.","=","==","@param","@return:","alreadi","bool","call","class","clean","code","contain","delet","element","element.","entries.","fals","false;","getrandom","getrandom()","here","https://www.lintcode.com/problem/insert","index","index;","insert","insert(int","instanti","int","intial","last","necessari","new","number","nums.pop_back();","nums.push_back(val);","nums.size()","nums.size();","nums;","nums[index]);","nums[index];","o(1)","o1/descript","obj","obj.getrandom();","obj.insert(val);","obj.remove(val);","object","otherwise,","param","private:","problem","public:","random","random()","randomizedset","randomizedset()","randomizedset();","refs.erase(val);","refs;","refs[nums[index]]","refs[val]","refs[val];","relev","remov","remove(int","return","set","simpli","solut","specifi","srand(time(nullptr));","std::swap(nums.back(),","std::unordered_map","std::vector","structur","such:","swap","true","true;","updat","val)","val:","valu","vector,","want","write","{","}","};"],"Data Structure Design/LRU Cache.html":["#includ","(refs.count(key)","(size","*","*/","*/lrucache(int","+","++size;","/*","//","0)","1)","134.","1;",":","=","==",">first;",">second;","@param","@return:","auto","cach","cache/descript","capac","capacity(capacity)","capacity)","capacity:","capacity;","class","code","expired_key","get(int","here","https://www.lintcode.com/problem/lru","int","integ","intial","iter","key)","key,","key:","list.begin();","list.end();","list.erase(iter);","list.push_front(std::make_pair(key,","list;","lru","lrucach","necessari","noth","private:","problem","public:","refs.erase(expired_key);","refs;","refs[key]","refs[key];","return","return;","set(int","size(0),","size;","solut","std::list>","std::unordered_map>::iterator>","valu","value)","value));","value:","value;","void","write","{","}","};"],"Math/Number of Ways to Paint N × 3 Grid.html":["(int","1411.","2","3","6;",";","=","c2","c3","class","grid","grid/","https://leetcode.com/problems/numb","int","leetcod","long","n","n)","number","numofways(int","paint","problem","public:","solut","way","{","×"],"Reservoir Sampling/Random Pick Index.html":["(int","*","*/","/**","0","0;","398.",":",";","=",">pick(target);","ans;","call","class","count","element","https://leetcode.com/problems/random","index","instanti","int","leetcod","n","new","number","nums(nums)","nums)","nums.size(),","nums;","o(1)","o(n),","obj","object","param_1","pick","pick(int","problem","public:","random","sc:","solut","solution(nums);","solution(vector&","solution*","such:","target)","tc:","{","}","};"]},"length":293},"tokenStore":{"root":{"0":{"0":{"0":{"0":{"0":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.03832752613240418}}},"docs":{}},"1":{"0":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}},"1":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}},"docs":{}},"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}},"docs":{}},"1":{"0":{"0":{"0":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.024390243902439025}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.02586206896551724},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.09815950920245399},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.034482758620689655},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.03361344537815126},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.014814814814814815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.02054794520547945},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.02702702702702703},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.013392857142857142},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.037037037037037035},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.17692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.03787878787878788},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.04},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.033816425120772944},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.026785714285714284},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.1497005988023952},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.14207650273224043},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.028846153846153848},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016260162601626018},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.020689655172413793},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01327433628318584},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.02702702702702703},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.03},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.014150943396226415},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.026845637583892617},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.022058823529411766},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.038461538461538464},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.02631578947368421},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03225806451612903},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.03636363636363636},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.037037037037037035},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.025210084033613446},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.0425531914893617},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.03278688524590164},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.02127659574468085},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.028985507246376812},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.02702702702702703},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.019230769230769232},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.013953488372093023},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.023255813953488372},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.015267175572519083},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.023809523809523808},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.02586206896551724},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.05042016806722689},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.05172413793103448},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.019138755980861243},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.0205761316872428},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.024096385542168676},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.013953488372093023},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}},".":{"0":{"0":{"1":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{}},"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"1":{"2":{"5":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{}},"docs":{}},"2":{"5":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{}},"5":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.03896103896103896}}},")":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0273972602739726},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.02127659574468085},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.010869565217391304},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.018867924528301886},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.02830188679245283},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.023255813953488372},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}},";":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},")":{"docs":{},";":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}},"s":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539}},",":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872}}},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}},"}":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.024691358024691357},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.024096385542168676},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.014354066985645933},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.02},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176}}},";":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943}}},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},"}":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}},">":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}}},"1":{"0":{"0":{"0":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},")":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"]":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"}":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},"4":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872}}}},"5":{"docs":{},".":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}}}},"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},".":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818}}},")":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"]":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"1":{"docs":{},".":{"docs":{"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009}}}},"3":{"5":{"docs":{},".":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745}}}},"docs":{},".":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}},"4":{"docs":{},".":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993}}}},"5":{"3":{"docs":{},".":{"docs":{"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}}},"docs":{},".":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588}}}},"6":{"0":{"docs":{},".":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}}},"2":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863}}}},"docs":{},".":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}},"7":{"5":{"docs":{},".":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282}}}},"docs":{}},"8":{"6":{"docs":{},".":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}},"docs":{}},"9":{"2":{"docs":{},".":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}},"docs":{}},"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.043478260869565216},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.024242424242424242},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},"t":{"docs":{},"b":{"docs":{},"+":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},".":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}},"]":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},";":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},")":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}},";":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406}}}},";":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.047619047619047616},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882}}},",":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"1":{"0":{"docs":{},".":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931}}}},"1":{"docs":{},".":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356}}}},"2":{"0":{"docs":{},".":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}},"3":{"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}},"docs":{},".":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901}}}},"3":{"docs":{},".":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839}}}},"4":{"3":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425}}}},"docs":{}},"5":{"5":{"docs":{},".":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304}}}},"docs":{},".":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}}},"8":{"1":{"docs":{},".":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}},"docs":{}},"9":{"7":{"docs":{},".":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},"docs":{}},"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},"]":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"2":{"0":{"1":{"docs":{},".":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334}}}},"docs":{}},"1":{"docs":{},".":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},"2":{"2":{"docs":{},".":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{},".":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644}}}},"3":{"docs":{},"e":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},"+":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}},"4":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}}},"5":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576}}},"6":{"9":{"docs":{},".":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}},"docs":{}},"7":{"8":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}}},"docs":{},".":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}}}},"8":{"4":{"docs":{},".":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}},"docs":{},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}},"9":{"3":{"docs":{},".":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}},"docs":{}},"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}},"3":{"0":{"6":{"docs":{},".":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282}}}},"docs":{},".":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714}}}},"1":{"1":{"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403}}}},"2":{"docs":{},".":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}}},"docs":{},".":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}}},"3":{"docs":{},".":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}},"4":{"0":{"docs":{},".":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}},"5":{"docs":{},".":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334}}}},"docs":{},".":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}},"5":{"docs":{},".":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}},"8":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}},"9":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}}},"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}},"4":{"0":{"6":{"docs":{},".":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}}},"docs":{},".":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}}}},"1":{"1":{"docs":{},".":{"docs":{"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703}}}},"docs":{},".":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464}}}},"2":{"docs":{},".":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}},"4":{"0":{"docs":{},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"docs":{},".":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414}}}},"5":{"docs":{},".":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}}}},"6":{"3":{"docs":{},".":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}},"docs":{}},"7":{"8":{"docs":{},".":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}}},"docs":{}},"8":{"docs":{},".":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}},"9":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082}}}},"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368}}},"5":{"1":{"0":{"docs":{},".":{"docs":{"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616}}}},"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}},"2":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}}},"5":{"docs":{},".":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}},"6":{"3":{"docs":{},".":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391}}}},"docs":{}},"9":{"docs":{},".":{"docs":{"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517}}}},"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}},".":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}},"6":{"0":{"docs":{},".":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}},"1":{"docs":{},".":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}}},"2":{"docs":{},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}},"3":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}}},"5":{"0":{"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186}}}},"docs":{}},"8":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}},"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}},".":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886}}},")":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}},"7":{"8":{"4":{"docs":{},".":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}}}},"docs":{}},"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}},",":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}},"8":{"0":{"docs":{},".":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"3":{"docs":{},".":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"4":{"docs":{},".":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052}},".":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815}}}},"9":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368}},".":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.07975460122699386},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.038461538461538464},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.04310344827586207},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.03626943005181347},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.030927835051546393},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.017421602787456445},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.20384615384615384},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.01694915254237288},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.028368794326241134},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.026490066225165563},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.028985507246376812},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02564102564102564},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.02127659574468085},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.023622047244094488},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.023952095808383235},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0375},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.12568306010928962},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.017793594306049824},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.017482517482517484},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.031578947368421054},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.04819277108433735},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015503875968992248},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.029850746268656716},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.02252252252252252},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.05384615384615385},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.020202020202020204},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.029411764705882353},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"m":{"docs":{},"+":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.02586206896551724},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.0297029702970297},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.02727272727272727},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.03484320557491289},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.019138755980861243},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.026905829596412557},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0196078431372549},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.022988505747126436},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.03875968992248062},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},";":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015503875968992248}}},">":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}},")":{"docs":{"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}},";":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}},")":{"docs":{},")":{"docs":{},";":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}}}},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}},"t":{"docs":{},"h":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}}}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.034482758620689655},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.028846153846153848},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.03076923076923077},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.020618556701030927},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.01948051948051948},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.01875},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.013392857142857142},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.026595744680851064},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.03202846975088968},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.025210084033613446},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}}}}}}}}},")":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},";":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"[":{"docs":{},"j":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0125},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}},"}":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}},",":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}},";":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}},")":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}},";":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576}}}},"[":{"docs":{},"h":{"docs":{},"]":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}},";":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}}}},"k":{"docs":{},"]":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}}},"h":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}},"i":{"docs":{},"]":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}}}},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},"]":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}},",":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576}}},")":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},";":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}}},";":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.026785714285714284}}},"}":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}},"d":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}},"}":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176}}}},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.023923444976076555},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.011857707509881422},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.02564102564102564},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"}":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}},";":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.027586206896551724},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.026845637583892617},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.014150943396226415}}}},",":{"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.05181347150259067},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.014778325123152709},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.05042016806722689},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.020618556701030927},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.031914893617021274},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.05263157894736842},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.028368794326241134},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.023622047244094488},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.019867549668874173},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.04375},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.014492753623188406},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.02127659574468085},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.03937007874015748},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.018823529411764704},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.018604651162790697},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},"s":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872}},"t":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.029411764705882353},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},":":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473}}}}},".":{"0":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}},"x":{"3":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"6":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"docs":{}},"e":{"4":{"docs":{},";":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},"9":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}},"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}},"(":{"docs":{},"w":{"docs":{},")":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},":":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}}},"2":{"0":{"0":{"docs":{},".":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009}}}},"3":{"docs":{},".":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356}}}},"7":{"docs":{},".":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}},"9":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}},"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}},"1":{"2":{"docs":{},".":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}},"4":{"7":{"4":{"8":{"3":{"6":{"4":{"8":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"6":{"docs":{},".":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}}},"docs":{}},"2":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}},".":{"docs":{"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}},"3":{"4":{"docs":{},".":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714}}}},"7":{"docs":{},".":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464}}}},"9":{"docs":{},".":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}},"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}},".":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"4":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}},"5":{"0":{"docs":{},"m":{"docs":{},"+":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"1":{"docs":{},".":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}},"2":{"docs":{},".":{"docs":{"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549}}}},"3":{"docs":{},".":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}},"9":{"docs":{},".":{"docs":{"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521}}}},"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}},"6":{"1":{"docs":{},".":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}},"4":{"docs":{},".":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703}}}},"9":{"docs":{},".":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}},"docs":{}},"7":{"0":{"docs":{},".":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}}}},"2":{"docs":{},".":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}},"6":{"docs":{},".":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745}}}},"docs":{}},"8":{"1":{"docs":{},".":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}},"5":{"docs":{},".":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425}}}},"6":{"docs":{},".":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678}}}},"docs":{},".":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}},"9":{"0":{"docs":{},".":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}},"1":{"docs":{},".":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}},"5":{"docs":{},".":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}},"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}},",":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}},".":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.038461538461538464},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.04310344827586207},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.024630541871921183},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.022222222222222223},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.02054794520547945},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.030927835051546393},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.02702702702702703},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.020618556701030927},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.017793594306049824},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.024475524475524476},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.020202020202020204},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.023076923076923078},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218}},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}},".":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}},"n":{"docs":{},"d":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0392156862745098},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},":":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473}}}}},"x":{"5":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"docs":{}},"d":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":3.349081364829396},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":3.345238095238095},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":2.5210526315789474}}},"]":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.03571428571428571},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.015957446808510637},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}},";":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894}}},":":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}},",":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}},")":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}},"(":{"docs":{},"w":{"docs":{},")":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},":":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}},"}":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.019230769230769232}}},"}":{"docs":{},")":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},";":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943}}}},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943}}}}}}},"3":{"0":{"0":{"0":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}}},"1":{"docs":{},".":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}}},"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}},".":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}},"1":{"3":{"docs":{},".":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332}}}},"4":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}},"docs":{},".":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}},"2":{"2":{"docs":{},".":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988}}}},"8":{"docs":{},".":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}},"9":{"docs":{},".":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835}}}},"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"3":{"2":{"docs":{},".":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}},"9":{"docs":{},".":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996}}}},"docs":{}},"4":{"0":{"docs":{},".":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904}}}},"1":{"docs":{},".":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694}}}},"6":{"docs":{},".":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}},"docs":{}},"5":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}},"6":{"4":{"docs":{},".":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}},"6":{"docs":{},".":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547}}}},"7":{"docs":{},".":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}},"8":{"docs":{},".":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}},"9":{"docs":{},".":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}},"docs":{}},"7":{"0":{"docs":{},".":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}}}},"8":{"docs":{},".":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}},"docs":{},".":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}},"8":{"docs":{},".":{"docs":{"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}},"9":{"2":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085}}}},"3":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}},"4":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"5":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}},"6":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},"8":{"docs":{},".":{"docs":{"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}},"docs":{},".":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.024539877300613498},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.025906735751295335},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.019704433497536946},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.014814814814814815},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.01694915254237288},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.04918032786885246},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.014234875444839857},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.02097902097902098},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.013513513513513514},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":1.4826254826254823}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.02040816326530612},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},".":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":10.008},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":5.018867924528302},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":5.014084507042254}}}}},"r":{"docs":{},"d":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.029411764705882353},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}},":":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}},",":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391}}}},"]":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}},"*":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}},":":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}},"4":{"0":{"3":{"docs":{},".":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}},"5":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}}},"9":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}}}},"docs":{},".":{"docs":{"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943}}}},"1":{"7":{"docs":{},".":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"8":{"docs":{},".":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"9":{"docs":{},".":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},"docs":{}},"2":{"1":{"docs":{},".":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}},"4":{"docs":{},".":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},"5":{"docs":{},".":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}},"6":{"docs":{},".":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}}}},"8":{"docs":{},".":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}},"docs":{}},"3":{"0":{"docs":{},".":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403}}}},"4":{"docs":{},".":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}},"5":{"docs":{},".":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01}}}},"7":{"docs":{},".":{"docs":{"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}},"8":{"docs":{},".":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}},"docs":{}},"4":{"0":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}},"2":{"docs":{},".":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}},"docs":{},".":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644}}}},"5":{"2":{"docs":{},".":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}},"3":{"docs":{},".":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}},"docs":{}},"6":{"0":{"docs":{},".":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}},"1":{"docs":{},".":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}},"3":{"docs":{},".":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338}}}},"5":{"docs":{},".":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"docs":{},".":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105}}}},"7":{"6":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364}}}},"docs":{},".":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}},"8":{"0":{"docs":{},".":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}},"8":{"docs":{},".":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}},"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}},"9":{"1":{"docs":{},".":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}}},"4":{"docs":{},".":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259}}}},"6":{"docs":{},".":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}}},"docs":{}},"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.03076923076923077},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.015544041450777202},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.01694915254237288},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":3.347222222222222},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.02097902097902098},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.04294478527607362},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":10.008403361344538}}}}},"x":{"2":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"docs":{}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}}},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},"(":{"docs":{},"w":{"docs":{},")":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"*":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894}}},":":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}},"}":{"docs":{},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"t":{"docs":{},"h":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}}},"5":{"0":{"0":{"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"5":{"docs":{},".":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}},"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"1":{"0":{"docs":{},".":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}},"2":{"docs":{},".":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}},"8":{"docs":{},".":{"docs":{"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}}},"docs":{},".":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}}}},"2":{"3":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}},"8":{"docs":{},".":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}},"docs":{}},"3":{"4":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"5":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}},"8":{"docs":{},".":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099}}}},"9":{"docs":{},".":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808}}}},"docs":{},".":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776}}}},"4":{"1":{"docs":{},".":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}},"3":{"docs":{},".":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}},"8":{"docs":{},".":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}},"docs":{},".":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}},"6":{"0":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901}}}},"2":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356}}},"3":{"docs":{"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}}},"4":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}}},"9":{"docs":{},".":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}},"docs":{},".":{"docs":{"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02}}}},"7":{"7":{"docs":{},".":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}},"docs":{}},"8":{"5":{"docs":{},".":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}},"6":{"docs":{},".":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}}}},"docs":{}},"9":{"3":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"docs":{},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.019704433497536946},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.025925925925925925},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.017793594306049824},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.017482517482517484},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.01764705882352941}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}},".":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}}},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"6":{"0":{"5":{"docs":{},".":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}},"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}},"1":{"7":{"docs":{},".":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}},"docs":{},".":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"2":{"8":{"docs":{},".":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}},"9":{"docs":{},".":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}},"docs":{},".":{"docs":{"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385}}}},"3":{"3":{"docs":{},".":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}},"4":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"7":{"docs":{},".":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}},"9":{"docs":{},".":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}},"docs":{}},"4":{"1":{"docs":{},".":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},"4":{"docs":{},".":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}},"5":{"docs":{},".":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}},"8":{"docs":{},".":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},"docs":{}},"5":{"4":{"docs":{},".":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}},"6":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"7":{"docs":{},".":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}},"docs":{},",":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"6":{"2":{"docs":{},".":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}}}},"5":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"7":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464}}}},"docs":{}},"7":{"6":{"docs":{},".":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}},"docs":{}},"8":{"0":{"docs":{},".":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}},"docs":{}},"9":{"1":{"docs":{},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"docs":{}},"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.023076923076923078},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.024630541871921183},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.022222222222222223},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},",":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.018518518518518517},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}},".":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"x":{"1":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"docs":{}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},"]":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}},"}":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428}}},"*":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894}}},";":{"docs":{"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.05405405405405406}}}},"7":{"0":{"8":{"docs":{},".":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}},"docs":{}},"2":{"9":{"docs":{},".":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}}},"docs":{},".":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548}}}},"3":{"1":{"docs":{},".":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218}}}},"2":{"docs":{},".":{"docs":{"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}},"docs":{}},"4":{"1":{"docs":{},".":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}},"6":{"docs":{},".":{"docs":{"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521}}}},"docs":{},".":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}},"5":{"2":{"docs":{},".":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}},"docs":{}},"6":{"3":{"docs":{},".":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"7":{"docs":{},".":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}},"docs":{},".":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}}}},"7":{"2":{"docs":{},".":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}},"3":{"docs":{},".":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"docs":{}},"8":{"7":{"docs":{},".":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},"docs":{},".":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358}}}},"9":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931}}}},"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007058823529411765},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.01764705882352941},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}},";":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}},".":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}},"8":{"1":{"docs":{},".":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02}}}},"2":{"7":{"docs":{},".":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}}},"docs":{}},"5":{"docs":{},".":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757}}}},"6":{"2":{"docs":{},".":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"3":{"docs":{},".":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}},"7":{"docs":{},".":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}},"docs":{}},"7":{"7":{"docs":{},".":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}}},"docs":{},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}},"8":{"8":{"docs":{},".":{"docs":{"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}}}},"9":{"docs":{},".":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}},"docs":{},".":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541}}}},"9":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}},"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},".":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"9":{"0":{"0":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}},"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},".":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}},"1":{"1":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644}}}},"docs":{}},"2":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333}},".":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}}}},"4":{"4":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}}},"5":{"docs":{},".":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}},"docs":{},".":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333}}}},"5":{"8":{"docs":{},".":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541}}}},"docs":{}},"6":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}},".":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}},"7":{"3":{"docs":{},".":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}},"4":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}},"5":{"docs":{},".":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}},"docs":{},".":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}},"8":{"0":{"docs":{},".":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}},"3":{"docs":{},".":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}},"docs":{},".":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}}}},"9":{"4":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988}}}},"docs":{}},"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}},"}":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.022321428571428572}}}},"docs":{},"a":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}},")":{"docs":{},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101}}}},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}},"i":{"docs":{},".":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":5.025974025974026},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":5.04},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.023529411764706},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":2.536363636363636},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":2.037037037037037},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":2.5806451612903225},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6843137254901959},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":2.5547945205479454},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":2.0273972602739727},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.025},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0555555555555554},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":2.5307692307692307},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.04},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":2.5120481927710845},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}}},"1":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}}}}},".":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.015267175572519083},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827}}},"/":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}}}}},")":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}},":":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}},")":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}},"o":{"docs":{},"w":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":2.0425531914893615},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":2.04040404040404}}}},",":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}}}}}}}},"[":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{},";":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282}}}}}}},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781}}}}}},")":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334}}}},"e":{"docs":{},"a":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152}},"s":{"docs":{},";":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}}}}}},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.05555555555555555},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.02857142857142857},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.023809523809523808},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.028169014084507043},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.01694915254237288},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.022988505747126436},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.024793388429752067},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.027972027972027972},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.043478260869565216},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.023255813953488372},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"s":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.020618556701030927},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.021739130434782608},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.03333333333333333},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.020202020202020204},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"q":{"docs":{},",":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"q":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}}}}}},"o":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219}}}}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}}}}},")":{"docs":{},";":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"{":{"docs":{},"r":{"docs":{},".":{"docs":{},"x":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}}}},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}},"a":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818}}}}}}}}}}},"[":{"docs":{},"l":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}},"b":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105}}}}}},")":{"docs":{},";":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"n":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}},")":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}},";":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.024793388429752067},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.02097902097902098},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.018518518518518517},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.01818181818181818},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.025},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.022556390977443608},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.013953488372093023},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018}}}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334}}},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334}}}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":3.359649122807017},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":5},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":5.033333333333333}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6842105263157894},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.0163934426229506},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6780952380952379},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.689922480620155},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":2.0134228187919465}}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}},"d":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}}},"d":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":5.0144927536231885}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":3.3407407407407406}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}}}}}},"l":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"s":{"docs":{},"o":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}}},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}},"w":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}},"e":{"docs":{},"x":{"docs":{"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":5.007518796992481}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}}}},"k":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},",":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}}},"1":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}}}},"docs":{},"l":{"docs":{"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872}}}}}},"]":{"docs":{},")":{"docs":{"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}}}},"i":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}},"]":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}},";":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}},".":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548}}}}},"m":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}}},"j":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":2.524390243902439},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":3.345833333333333},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":2.5193236714975846},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"g":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015463917525773196},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.020689655172413793},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.017142857142857144},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.020134228187919462},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.014598540145985401},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.018404907975460124},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.025380710659898477},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01327433628318584},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.014925373134328358},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.016574585635359115},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.017857142857142856},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.02072538860103627},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.01485148514851485},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.018518518518518517},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.018018018018018018},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.027777777777777776},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}},"&":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.020618556701030927},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.026490066225165563},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.020202020202020204},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.03431372549019608},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}}}}}},":":{"docs":{"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941}}}}}}},".":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}},";":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}}}},",":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}}}}}}}}},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":2.5273972602739727}},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}}}}}}}}}},"g":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512}}}}}}},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.031007751937984496},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}},")":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988}}},",":{"docs":{"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}},"docs":{}},"b":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}},"c":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"d":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},",":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}},".":{"docs":{},"e":{"docs":{},"f":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}},"/":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}},"d":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.018404907975460124}},"e":{"docs":{},"+":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"*":{"docs":{},"+":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"f":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}}}}}}}}},"e":{"docs":{},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"y":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}}}}},"o":{"docs":{},"v":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"b":{"docs":{},"r":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}}}}}}},":":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":3.3666666666666663},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":5.013333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":3.3649789029535864}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}}}}}}}}}}}}},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},"[":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}},"*":{"docs":{},"b":{"docs":{},"*":{"docs":{},",":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}}},";":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"+":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.011111111111111112}}}},"b":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.034482758620689655},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0547945205479452},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.031578947368421054},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.027777777777777776},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.0273224043715847},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.021897810218978103},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.03202846975088968},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.06569343065693431},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.011111111111111112},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.037914691943127965},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.05405405405405406},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.040268456375838924},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"a":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"c":{"docs":{},"k":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":10.025},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":5.0227272727272725},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":5.016666666666667},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":5.016528925619835},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":5.016528925619835},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":5}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576}}}}}},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}}}}}}}}}},"v":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356}}}}}}}}}}},"v":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}}}}}}}}},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}}}},"1":{"docs":{},",":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}}},"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.020833333333333332},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}},"s":{"docs":{},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},",":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018}}}}}}},"i":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}}},"s":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.030303030303030304}}}},"l":{"docs":{},"l":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":2.021276595744681},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":5.027777777777778},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":2.0202020202020203}},"s":{"docs":{},"/":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}}}}}}}}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}},"n":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":3.3402298850574708}}}}}},"r":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}},"d":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":3.39047619047619}}},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"f":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":5.016260162601626},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":3.3650793650793647}},";":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0273972602739726},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.036585365853658534}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.015810276679841896},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.014652014652014652}}},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},";":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}},"g":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}},",":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.023529411764705882},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},";":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}},")":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401}},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},",":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},".":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.021897810218978103}}}}}},"o":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.028846153846153848},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.02242152466367713},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.019801980198019802},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.020833333333333332},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.022988505747126436},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.02654867256637168}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}},"k":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":5.019354838709678},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":3.3483709273182956}},";":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613}}},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613}}},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}}}},"s":{"docs":{},"t":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}},")":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.014150943396226415},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},",":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"1":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"2":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"docs":{}}}},"1":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"1":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"2":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"docs":{}}}},"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}},")":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931}}},";":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}}},"k":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},".":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}}}}},":":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}},",":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}}},"i":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":2.0425531914893615},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":5.018518518518518},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":2.0202020202020203}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"(":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}}},"y":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0327868852459017},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6836158192090394},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6785009861932938},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6792452830188678}},"_":{"1":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}},"2":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}},"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}}}}}}}}}}},"e":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0163934426229506},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.675141242937853},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6725838264299802},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6729559748427671}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}},",":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537}}}}}},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}}},":":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":2.537037037037037},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2.0172413793103448},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2.0166666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2.014388489208633},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.0106761565836297},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":1.2619760479041917},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":2.5205479452054793},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":3.3540229885057466},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":2.5245901639344264},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":2.5214285714285714},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":3.3497267759562837},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":2.524793388429752},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":2.520979020979021},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6929824561403508},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.0245901639344264},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6838095238095236},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.689922480620155},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":2.506993006993007},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.007662835249042},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":2.5215827338129495},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.0121951219512195},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4360341151385925},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":2.5164835164835164},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.676078431372549},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6785243741765479},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6776556776556775},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.0225563909774436},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6776155717761556},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.0337837837837838},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.0122699386503067},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.01840490797546},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":5.00507614213198},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":1.2634228187919463}}},"y":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}},"docs":{}},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}},"s":{"docs":{},"t":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":3.354609929078014},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":2.521978021978022}},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"s":{"docs":{},".":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}}}}},"+":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408}}},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"c":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}},")":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703}},")":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.034482758620689655},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.03896103896103896},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.04054054054054054},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.014184397163120567},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.017964071856287425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.014234875444839857},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.014814814814814815},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.023696682464454975},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},"a":{"docs":{},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"s":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.014234875444839857},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.06097560975609756}},"s":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}}},":":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"l":{"docs":{},"l":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":10.014598540145986},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":5.022988505747127},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":5.023255813953488}}}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}}}}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}},")":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},",":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}},":":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}},"n":{"docs":{},"d":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}},")":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}},"i":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":10.005154639175258}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464}},"]":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464}},";":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}}}},"d":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282}}}}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":5.006944444444445}},"e":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"u":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":3.339047619047619},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":5.037735849056604},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":3.350724637681159},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.007518796992481},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6703163017031628},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":2.519230769230769},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":3.351515151515151}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}}}}}}}}}}}}}}}}},"k":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.037037037037037035},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":5.008}},";":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}}},"s":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":2.528169014084507}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":3.354609929078014},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":3.349081364829396},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":3.3572854291417165},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6842105263157894},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.0163934426229506},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6780952380952379},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.689922480620155},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":2.0134228187919465}}}}},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"u":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},"o":{"docs":{},"s":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":2.5163934426229506}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.018691588785046728},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.021739130434782608},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":2.5144927536231885},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":5.010869565217392},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":3.342767295597484},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":3.3429487179487176}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}},"u":{"docs":{},"m":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943}}}}}}}}}}},"3":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"o":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":3.3416666666666663}},"e":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016260162601626018},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}},"g":{"docs":{},"u":{"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":5.012987012987013}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}},"c":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":1.2559880239520957},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":2.510989010989011},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":2.0061349693251533},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":2.0104166666666665},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":1.2634228187919463}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":2.5317460317460316},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":3.3563218390804597}}}}}},"t":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007058823529411765},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.020833333333333332},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.019867549668874173},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01639344262295082},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.012448132780082987},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.011363636363636364},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.017045454545454544}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.6690196078431372},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.670619235836627},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6703296703296702},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":3.333333333333333}},"o":{"docs":{},"r":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}}},"u":{"docs":{},"m":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.023668639053254437},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},",":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.024691358024691357},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.017543859649122806},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.021739130434782608},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.021739130434782608},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"2":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"3":{"docs":{},"]":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"docs":{}}}},",":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.03260869565217391},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.02830188679245283},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.028846153846153848},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.02702702702702703}}},";":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}}}}}}}}},"i":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.0196078431372549}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}},".":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"s":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}},"c":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.016483516483516484}}},"(":{"6":{"docs":{},",":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}},")":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}},";":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},";":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943}}},"[":{"0":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"1":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"2":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"3":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"4":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"5":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"docs":{}},",":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}}},"l":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.018292682926829267}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}},".":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}},"s":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}},"o":{"docs":{},"r":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":5.008620689655173},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0392156862745098}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}}}}}}}},")":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}},";":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}}}}}}},"s":{"docs":{},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}},",":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.024193548387096774},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.031578947368421054}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513}}}},"s":{"docs":{},"(":{"9":{"docs":{},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}},"docs":{}},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.022988505747126436},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.023255813953488372},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}},";":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.010452961672473868},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}},"_":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}},"t":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}}},"d":{"docs":{},"o":{"docs":{},"t":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}},"(":{"0":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}},"docs":{}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}}}},"s":{"docs":{},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}}}}}}}}}}},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}},"e":{"docs":{},"r":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}},")":{"docs":{},";":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}}},"t":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}},"r":{"docs":{},"s":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":5.01063829787234}}}}},"s":{"docs":{},"t":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":2.5422535211267605},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":3.3678160919540225},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.019230769230769232},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}}}},"[":{"docs":{},"i":{"docs":{"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043}},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},":":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}}}}}}},"k":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}},"j":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}},"d":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}},"m":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}},"w":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}},")":{"docs":{"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521}}}}}}}}}},"s":{"docs":{},")":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}}},"i":{"docs":{},"n":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":5.038961038961039},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":3.3603603603603602},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":5.014598540145985},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":3.354685646500593},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":3.359511343804537}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988}}}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.02702702702702703}}},",":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.025974025974025976}}}}}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}},"]":{"docs":{"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}}}}},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}},"p":{"docs":{},"i":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":5.006451612903226},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":3.340852130325814},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.047619047619047616},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":2.5074074074074075}},"e":{"docs":{},"r":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405}},"s":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}},"y":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}}}}},".":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}}}}}}}}}}}},"g":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}},"(":{"5":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},"docs":{}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}},",":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.043859649122807015},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0364963503649635},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.033783783783783786},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.046012269938650305},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.035398230088495575},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.05154639175257732},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.024793388429752067},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.027624309392265192},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.03125},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.046632124352331605},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.04455445544554455},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.05185185185185185},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.06779661016949153}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.018404907975460124},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428}}},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}},")":{"docs":{},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}},"t":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":5.0055555555555555}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}}}}}}},"k":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"h":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":2.5081967213114753},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.02247191011235955},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.021897810218978103},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}},"s":{"docs":{},",":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":5.017241379310345},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":3.3381180223285485}}},"y":{"docs":{},"p":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0142857142857142},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.0238095238095237},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.02459016393442623},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285}}}},".":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}}}}}},"n":{"docs":{},"g":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":5.025974025974026},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":3.3603603603603602}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268}},";":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}},".":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062}}},".":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}}}}}},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009}}}}}}}},"t":{"docs":{},"i":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"y":{"1":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}},"2":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}},"docs":{}}}},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}},"m":{"docs":{},",":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}},":":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.014184397163120567},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}},"_":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464}},")":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464}}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521}}},"e":{"docs":{},"b":{"docs":{},"r":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":5.013513513513513}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"'":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}},".":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}},".":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}},"]":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}},"b":{"docs":{},"c":{"docs":{},"e":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}}}}}}}}}}},"+":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.014814814814814815}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":3.353951890034364},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":2.514218009478673}},"i":{"docs":{},"c":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":2.5}}}}}}}},"d":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"t":{"docs":{},"a":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":2.5365853658536586},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":2.5234375},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}},",":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}},")":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}},"y":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.034482758620689655}}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}},"s":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}}}}}}},")":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}},",":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"s":{"docs":{},"c":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}},"i":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":2.510989010989011}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}},"t":{"docs":{},"h":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":2.5165289256198347},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":2.513986013986014},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993}}}},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}},",":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.02097902097902098},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":5.0144927536231885},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":3.3422619047619047},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}},"m":{"docs":{},"p":{"docs":{},"s":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}},"o":{"docs":{},"s":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}}}},")":{"docs":{},";":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":5.0227272727272725},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}},"a":{"docs":{},"s":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}}},"i":{"docs":{},"m":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.012269938650306749},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":2.520618556701031},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.014925373134328358},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":2.5088495575221237}},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}},"m":{"docs":{},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}},";":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}},"m":{"docs":{},"o":{"docs":{},":":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}}},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":2.0134228187919465}}}}}}},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}},"s":{"docs":{},",":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.0238095238095237},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":5.0109289617486334},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":3.35042735042735},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":3.351515151515151},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.0122699386503067}},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}}}}}},")":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}},";":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.017543859649122806}}},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}},"[":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"]":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":3.3438596491228068},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}}}},"n":{"docs":{},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368}},",":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}}}}},"s":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":2.5122699386503067}},"o":{"docs":{},"r":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368}},")":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}}}}},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}},"r":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368}},")":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}},";":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}},"_":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},"s":{"docs":{},"(":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}},"{":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}},"{":{"1":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}},"docs":{}}}},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"docs":{}}}}}},"c":{"docs":{},"e":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.032608695652174}},"s":{"docs":{},".":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304}}}}},"t":{"docs":{},")":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016260162601626018},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":5.007518796992481}}},"y":{"docs":{},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}},",":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519}}},".":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},":":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},"/":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}}}}}}}}}},",":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.031746031746031744},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}}}}}},":":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"f":{"docs":{},"f":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},"e":{"docs":{},"r":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}}}}}},"_":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0196078431372549}}}}}}},"p":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}},",":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":5.028985507246377},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}},"s":{"docs":{},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}}}}}}}}},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.021739130434782608},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.021739130434782608}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}},";":{"docs":{"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}}}}}}}}},")":{"docs":{"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}},";":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":3.3497267759562837}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}}}}},"m":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.024390243902439025},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015463917525773196},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.02608695652173913},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.03007518796992481},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.03007518796992481},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.04597701149425287},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},"i":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":2.017543859649123},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":1.2619760479041917}}},"e":{"docs":{},"&":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}}}}}}},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}}}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}},"g":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}},"(":{"4":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},"docs":{}}},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}},"(":{"3":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},"docs":{}}}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":2.536363636363636},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":2.037037037037037},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":3.3565891472868215},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}},".":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}}}}},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}},"_":{"docs":{},"g":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}}}}}},";":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}},"l":{"docs":{},",":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}}},";":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}},"o":{"docs":{},"d":{"docs":{},"d":{"docs":{},",":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}}}}}}}}}}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},")":{"docs":{},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}},",":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}},";":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}},"p":{"docs":{},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}}}}}}}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}},"(":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}},"k":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},",":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}}},"n":{"1":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}},"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}},",":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}},"n":{"docs":{},",":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},")":{"docs":{},";":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}},"a":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}}}}}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}}}}}}},"d":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304}}},"m":{"docs":{},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}},"l":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}},"[":{"0":{"docs":{},"]":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}},"[":{"0":{"docs":{},"]":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},"l":{"docs":{},"p":{"docs":{},"]":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}}}},"1":{"docs":{},"]":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"2":{"docs":{},"]":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},"docs":{},"i":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.022727272727272728},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.024793388429752067},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.018691588785046728},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.031914893617021274},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.01948051948051948},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0125},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.014492753623188406},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.05803571428571429},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.04597701149425287},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02564102564102564},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.020618556701030927},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01639344262295082},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.015957446808510637},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.021352313167259787},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}},"]":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.018691588785046728},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}},"[":{"docs":{},"j":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}},"]":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.025},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.022727272727272728},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.025},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.024793388429752067},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.024793388429752067},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.015748031496062992},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0125},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.02127659574468085},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}},":":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}},"[":{"docs":{},"h":{"docs":{},"]":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.031914893617021274}},":":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}},"k":{"docs":{},"]":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}},";":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}}},";":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}}},"k":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357}},"]":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}},":":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}}}}},":":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}},";":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616}}}}},"n":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894}},"]":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}}}}}}}}}},"k":{"docs":{},"]":{"docs":{},"[":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}}}}}}}}}},";":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"y":{"docs":{},"]":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}},")":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}}}}}}}}}},"k":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}},"j":{"docs":{},"]":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}},"[":{"docs":{},"k":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}}}}},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835}},";":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835}}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},"]":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},";":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}}}}},"c":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.024691358024691357}},"]":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},":":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}}},"l":{"docs":{},"s":{"docs":{},"]":{"docs":{},"[":{"docs":{},"l":{"docs":{},"p":{"docs":{},"]":{"docs":{},";":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.034482758620689655},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.03546099290780142}}},")":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.023622047244094488},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.01875}},",":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496}}},";":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0125}}},")":{"docs":{},";":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.026490066225165563},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781}}}}}},"(":{"docs":{},"d":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}}},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}},"docs":{}},"f":{"docs":{},"s":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}},"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}},",":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.033112582781456956}}},"s":{"docs":{},"t":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},")":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}},";":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049}}}},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}}},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},")":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}},"u":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}},"docs":{}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}}}}}},"^":{"docs":{},"n":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.019230769230769232}}}}},"e":{"1":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401}}},"2":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401}}},"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.031578947368421054},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872}},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.019867549668874173},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0273972602739726},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":2.009950248756219},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}},"}":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}},")":{"docs":{},";":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}},")":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.02072538860103627},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.01485148514851485},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.020202020202020204}},";":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}},",":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.029239766081871343},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232}}},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}},"[":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},"y":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}}}}}}},"i":{"docs":{},"r":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099}},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}},"u":{"docs":{},"m":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}},"e":{"docs":{},"r":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}}},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":3.3439716312056733},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":4.0184049079754605},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":4.03125},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":3.333333333333333},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":3.3419540229885056},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":3.3447619047619046}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.017142857142857144}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}},"*":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},":":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268}}}}},"o":{"docs":{},"n":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}}},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931}}}}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}},"p":{"docs":{},"l":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}},"e":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}},":":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":3.3644214162348876},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":2.5533333333333332},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.02912621359223301},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":2.5096153846153846},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":2.5240963855421685},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":2.5165289256198347},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.02654867256637168},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},"s":{"docs":{},":":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}},".":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}}}}}}}}},":":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}},".":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":2.01}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":2.51980198019802},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6836158192090394},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},":":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}},".":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},",":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872}}}}}}}}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}},"t":{"docs":{},"g":{"docs":{},"r":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}},"i":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":3.3418803418803416},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":3.351515151515151}}}},"g":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},"e":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"1":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}},"2":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}},"docs":{}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}}}},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872}}}},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}},"docs":{}}}}},".":{"docs":{},"g":{"docs":{},".":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179}},":":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}},":":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":3.351681957186544},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":2.546979865771812}},",":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}},"t":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}},"n":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}},"t":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}},"s":{"docs":{},")":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"{":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}},"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}}}},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}}},"u":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":3.3406326034063256},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":3.3419540229885056}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802}}}}}},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"&":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}}}}},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}},"g":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.034782608695652174}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}}},"x":{"docs":{},",":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}},"t":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"&":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"&":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":2.5088495575221237}},"(":{"docs":{},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.015151515151515152},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}},"l":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}},"p":{"docs":{},"h":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":5.016},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":3.3650793650793647}},")":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}},";":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.018404907975460124},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.029239766081871343},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.019867549668874173}}},";":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749}},"e":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}},"s":{"docs":{},"]":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"{":{"docs":{},"t":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}}}}}}}}}},")":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":5.033333333333333}},"s":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}}},"1":{"docs":{},"]":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}}},"2":{"docs":{},"]":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}}},"3":{"docs":{},"]":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}}},"4":{"docs":{},"]":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}}},"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}},"e":{"docs":{},"r":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":3.3488773747841103},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":2.526666666666667},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":2.521978021978022},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},">":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}},">":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}}}},"i":{"docs":{},"d":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":2.02},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":1.4555984555984554}},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}}}}}}}}},"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}}}}}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}},";":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}},"k":{"docs":{},"]":{"docs":{},";":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}}}}},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}},";":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}}}}}},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"/":{"docs":{"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703}}}}}},"a":{"docs":{},"p":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}},"t":{"docs":{},"e":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":5.012345679012346}},"s":{"docs":{},"/":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678}}}}}},"m":{"docs":{},"e":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":5.011363636363637},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":3.349593495934959},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":5.015748031496063},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":3.346320346320346},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":3.362179487179487},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":3.346578366445916},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":3.3589743589743586},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":3.36},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":3.346578366445916},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}},"/":{"docs":{"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364}}}}}}}}}}},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}},"u":{"docs":{},"i":{"docs":{},"d":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}}}}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},"o":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}},"o":{"docs":{},"d":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"d":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.04}}}},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}},",":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.03007518796992481}}}}}}}}},"h":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"z":{"docs":{},"s":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"z":{"docs":{},"l":{"docs":{},".":{"docs":{},"l":{"docs":{},"a":{"docs":{},"/":{"2":{"docs":{},"f":{"docs":{},"o":{"3":{"docs":{},"b":{"docs":{},"j":{"docs":{},"q":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"docs":{}}}},"docs":{}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"/":{"docs":{},"z":{"docs":{},"s":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"/":{"4":{"0":{"5":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}},"docs":{}},"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}},"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}},"e":{"docs":{},"t":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},"r":{"docs":{},"i":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385}}}}}},"q":{"docs":{},"u":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"r":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}},"o":{"docs":{},"b":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"x":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}}}}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}},"i":{"docs":{},"m":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}},"o":{"docs":{},"v":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}},"s":{"docs":{},"s":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}}}}}},"i":{"docs":{},"n":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},"p":{"docs":{},"i":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}}}}}}}}},"o":{"docs":{},"w":{"docs":{},"x":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}},"k":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}},"t":{"docs":{},"h":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}},"o":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}},"g":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541}}}}}}},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"r":{"docs":{},"u":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}},"h":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},"b":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}}}}}}}},"i":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}},"n":{"docs":{},"d":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}},"w":{"docs":{},"o":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"r":{"docs":{},"d":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"z":{"docs":{},"s":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521}}}}}},"4":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815}}}}}},"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684}}}}}},"p":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714}}}}}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}}},"y":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009}}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}}}},"m":{"docs":{},"i":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}},"n":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}}}},"s":{"docs":{},"s":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}}}},"a":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872}},"i":{"docs":{},"m":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}}},"k":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}}},"o":{"docs":{},"v":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02}}}},"e":{"docs":{},"t":{"docs":{"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}}},"p":{"docs":{},"i":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"y":{"docs":{},"/":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}},"c":{"docs":{},"k":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541}}}}}},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}},"n":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}}}}}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547}}}}},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}}}},"n":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}},"s":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703}}}}},"o":{"docs":{},"n":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01}}}}},"k":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}},"t":{"docs":{},"h":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}}},"u":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703}}}}},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745}}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}}}},"h":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}},"g":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745}}}}},"t":{"docs":{},"h":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}}}}}},"w":{"docs":{},"a":{"docs":{},"l":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}},"i":{"docs":{"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085}},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338}}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}}}}}},"a":{"docs":{},"l":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}},"b":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259}}}}}}},"h":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548}}}}}},"o":{"docs":{},"n":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}},"d":{"docs":{},"d":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464}}}}}}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}},".":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"l":{"docs":{},"p":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}},"e":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}}},"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}},"s":{"1":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.016483516483516484}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"&":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405}},",":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993}},"e":{"docs":{},"*":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011764705882352941}}}}}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948}}}}}}}},"t":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}},":":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"c":{"docs":{},",":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}}}}}}},".":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547}}}}}}},"a":{"docs":{},"p":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}},"d":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.01990049751243781},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009}},")":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}},";":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.017964071856287425},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.01990049751243781},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.020134228187919462},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.011111111111111112},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.013513513513513514},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991}}},",":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}},"a":{"docs":{},";":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401}}}},"b":{"docs":{},";":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401}}}},".":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}},"l":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},",":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}},"s":{"docs":{},"_":{"docs":{},"o":{"docs":{},"d":{"docs":{},"d":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.029850746268656716}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901}}}}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}}}}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464}}}}}}}}}}}}}}}},"r":{"docs":{},"d":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"e":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.014218009478672985}}}},"l":{"docs":{},"f":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}},";":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":5.023529411764706}}}}}},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":3.3431855500821017}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}}},".":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}}}}}}},"g":{"docs":{},"h":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":5.010309278350515}},"f":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}},")":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}},";":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}}}},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}},"(":{"1":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},"docs":{}}}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":5.011904761904762},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":3.3390151515151514},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":3.3374485596707815}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}},".":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}}},"3":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}}}}}}}}}}}}},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364}}}}},"r":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}}},"l":{"docs":{},"d":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.0273224043715847},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.029045643153526972},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.026515151515151516},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.028409090909090908}},"s":{"docs":{},",":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364}}}}},"e":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}},"p":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852}},".":{"docs":{"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521}}}},"w":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}}},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}},"(":{"2":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},"docs":{}}}},")":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781}}},".":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}},",":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}},";":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547}}}},"i":{"6":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}},"t":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.03333333333333333}}}},"7":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"e":{"docs":{},"e":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"n":{"5":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"6":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":2.5141843971631204},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":3.358333333333333},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}},"d":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"e":{"docs":{},"x":{"2":{"docs":{},"]":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.017142857142857144},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0273972602739726},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.02702702702702703},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":3.3611111111111107}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.03409090909090909},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}},",":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},".":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}},"_":{"docs":{},"a":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}},"w":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}},"g":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}},"[":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}},"c":{"docs":{},"]":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},";":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}},"t":{"4":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"5":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.020942408376963352},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.022857142857142857},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.0297029702970297},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.018404907975460124},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.022900763358778626},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.025423728813559324},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.05555555555555555},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.02702702702702703},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.038461538461538464},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.016666666666666666},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.031746031746031744},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.07692307692307693},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.02857142857142857},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.03571428571428571},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.039473684210526314},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03225806451612903},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.041237113402061855},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.056818181818181816},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.032},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.06722689075630252},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.07547169811320754},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.056338028169014086},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.047619047619047616},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.08},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.09411764705882353},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.05454545454545454},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.05555555555555555},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.02586206896551724},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.050505050505050504},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.02666666666666667},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.014778325123152709},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.03361344537815126},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.0970873786407767},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.052941176470588235},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.041666666666666664},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.034782608695652174},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.05154639175257732},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.04142011834319527},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0273972602739726},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.030927835051546393},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0547945205479452},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.0851063829787234},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.09009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.041811846689895474},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.03571428571428571},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.037037037037037035},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.0963855421686747},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.11363636363636363},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.06557377049180328},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.025423728813559324},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.018867924528301886},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.016666666666666666},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.01652892561983471},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.018691588785046728},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.02127659574468085},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.025974025974025976},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.03260869565217391},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.06481481481481481},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.03225806451612903},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.13793103448275862},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.06220095693779904},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0425531914893617},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.03937007874015748},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.045454545454545456},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.019230769230769232},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.039735099337748346},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.05128205128205128},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.05333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.06622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.026905829596412557},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.03125},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.033816425120772944},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.03409090909090909},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.0205761316872428},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0392156862745098},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02564102564102564},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.045454545454545456},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.031914893617021274},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.023952095808383235},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0375},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0273972602739726},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.05747126436781609},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.029850746268656716},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.06818181818181818},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.020618556701030927},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.029411764705882353},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.06382978723404255},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01639344262295082},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.02459016393442623},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.0273224043715847},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.02654867256637168},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.025362318840579712},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.02074688796680498},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.022727272727272728},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.031496062992125984},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.05},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.03278688524590164},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.024793388429752067},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.027972027972027972},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.022988505747126436},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.04950495049504951},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.024691358024691357},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.03636363636363636},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.03597122302158273},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.018292682926829267},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.02823529411764706},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.023715415019762844},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.02564102564102564},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.022556390977443608},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.018404907975460124},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.06547619047619048},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.06315789473684211},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.04081632653061224},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.038461538461538464},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.05555555555555555},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.05660377358490566},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.06153846153846154},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.08},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.04819277108433735},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.031746031746031744},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.03333333333333333},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.04516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022556390977443608},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.03669724770642202},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.02040816326530612},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.043478260869565216},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.02247191011235955},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.04054054054054054},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.043478260869565216},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.02962962962962963},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.033707865168539325},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.07586206896551724},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.035398230088495575},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.018867924528301886},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.034722222222222224},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.02390438247011952},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.05},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.016574585635359115},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.01485148514851485},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.021897810218978103},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.05333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.08108108108108109},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.06},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.03205128205128205},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.028846153846153848},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.02358490566037736},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.10067114093959731},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.021739130434782608},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.05128205128205128},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.037037037037037035},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.027906976744186046},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.019867549668874173},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.09558823529411764},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.07462686567164178},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.05263157894736842},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.043478260869565216},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.03773584905660377},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.057692307692307696},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.06451612903225806},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.031578947368421054},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.039473684210526314},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.02702702702702703},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.015384615384615385},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.05405405405405406},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.05454545454545454},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.02},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.03296703296703297},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.022988505747126436},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.05813953488372093},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.029411764705882353},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.030303030303030304},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.01764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.04054054054054054},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.04411764705882353},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.022123893805309734},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.041666666666666664},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.05555555555555555}},"r":{"4":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10.013333333333334}}}}}}},"u":{"docs":{},"s":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"e":{"3":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"4":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"g":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.04},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.023529411764705882},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.037037037037037035},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.04838709677419355},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.023529411764705882},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.025},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.024793388429752067},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.024793388429752067},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.028037383177570093},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.0425531914893617},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01639344262295082},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.016597510373443983},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.015151515151515152},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.022727272727272728},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.038461538461538464},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.046153846153846156},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":3.3543859649122805},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.01935483870967742},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022556390977443608},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":5.043478260869565},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":3.3738738738738734},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.030303030303030304},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":5.010309278350515},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":5.011764705882353},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.034722222222222224}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}},"s":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},".":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}}}}}}}},"r":{"2":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":2.5161290322580645},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":2.5072992700729926}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}}}}}}}},"v":{"1":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}},"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.035502958579882},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":3.363333333333333},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":5.06},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":5.041666666666667},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198}},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},":":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}},";":{"docs":{"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02}}}},",":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},",":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}}}}}}}}}},":":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},")":{"docs":{"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01}}}}},"docs":{}}}}},",":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}},"?":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}}}}}}}}}}},"n":{"1":{"docs":{},"l":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334}}}},"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}},"e":{"docs":{},"t":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":5.008196721311475}}}}}},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}},"g":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}},"n":{"docs":{},"s":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368}},";":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},",":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}},")":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703}},")":{"docs":{},";":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}},";":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988}}}}}},"i":{"docs":{},"n":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993}},";":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}},")":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}},")":{"docs":{},";":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496}}}},";":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"&":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.7079037800687284},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.0135135135135136},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":2.5045045045045047},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":5.013888888888889},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":2.504424778761062}},"(":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}},"e":{"docs":{},"g":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818}}}},"f":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}}}}}}}}}}},")":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}},"i":{"docs":{},"x":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":2},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":2},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":3.333333333333333}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2.0166666666666666},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":3.3439716312056733},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.676078431372549},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6824769433465083}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.01647058823529412},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":3.3426356589147286}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011764705882352941},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948}},"}":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948}}},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.015810276679841896}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}}}},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":2.510928961748634},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":5.017699115044247},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":3.3405797101449273},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.034722222222222224}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}}}}}}},"m":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.020618556701030927},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.022727272727272728},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.016666666666666666},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.01652892561983471},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}},"docs":{}},"s":{"docs":{},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.020618556701030927}}},".":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}}}}}},"h":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.034482758620689655},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.017793594306049824},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},",":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}},".":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}},")":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}},"'":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":5.013245033112582}}}}}}}}}},".":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}},"i":{"docs":{"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":2.0185185185185186},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":2.5161290322580645},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":2.513333333333333},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":3.387387387387387},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":3.3368176538908245},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6836158192090394},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":5.007575757575758},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":3.333333333333333},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":3.341463414634146},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":3.3381180223285485},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":3.3377976190476186},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":3.3390151515151514},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":3.336892052194543},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":3.33695652173913},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.007575757575758},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6780952380952379},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":3.3456790123456788},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6739659367396593},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":2.5105263157894737},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.02},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":5.011494252873563},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":3.340852130325814},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":2.504830917874396},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":3.3650793650793647},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":3.3391812865497075},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":3.3421828908554567},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":3.347222222222222},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":2.505524861878453},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":2.509478672985782},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":5.009009009009009},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":5.021052631578947},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":3.352201257861635},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":3.3413978494623655},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":5.018018018018018},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":3.355311355311355},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":5.011494252873563}},"i":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":2.515873015873016},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6725838264299802},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":5.008333333333334},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":3.3494623655913975},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":3.346320346320346},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":3.3589743589743586},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":3.3374485596707815},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":3.338568935427574},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.689922480620155},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":3.3454545454545452},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":3.3406862745098036},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":3.352564102564102},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":5.023255813953488}},"/":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}}}}}},"/":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}}}}}}}}}}},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.019867549668874173},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.02702702702702703},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}},"d":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.020618556701030927},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},"x":{"docs":{},"_":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"_":{"docs":{},"a":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}}},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"b":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"_":{"docs":{},"b":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}},")":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}},"l":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}},"e":{"docs":{},"_":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"t":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0273972602739726}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":5.018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":3.343786295005807},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":5.0120481927710845},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":3.340909090909091}},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}},"/":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}}}}}},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085}}}}}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}}}}}}}},"y":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}}}}}}}},"v":{"4":{"docs":{},"(":{"docs":{},"i":{"docs":{},"p":{"docs":{},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}},"6":{"docs":{},"(":{"docs":{},"i":{"docs":{},"p":{"docs":{},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}},"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}}}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931}}}}}}}}}}}}}}}}}},"d":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}}}}}},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}},"(":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}},";":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428}},";":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}}}}}}}}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}},"v":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6729559748427671},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":5.008264462809917},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":3.352564102564102},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":3.36},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}}}}}}}}}}}},">":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694}}}}}}}}}}}}}},"v":{"1":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}},"docs":{}}},"g":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}},"p":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":3.3481481481481477},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}},":":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}},"j":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.02027027027027027},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.025210084033613446},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.031578947368421054},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.021739130434782608},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.028708133971291867},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.057692307692307696},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.03125},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}},":":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}},",":{"docs":{"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}}},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.015748031496062992},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.019867549668874173},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}},".":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}},"t":{"docs":{},"h":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512}}}},"]":{"docs":{"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":3.346153846153846},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":3.3466666666666662},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":3.3399558498896242},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":5.013452914798206},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":3.3608562691131496}},"/":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}},"d":{"docs":{},"g":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}},"o":{"docs":{},"b":{"docs":{},".":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}},"l":{"1":{"docs":{},"/":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"2":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}},"/":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}},"e":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.03333333333333333}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.030534351145038167},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.02564102564102564},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.02857142857142857},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.023809523809523808},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.03225806451612903},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.011494252873563218},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.023809523809523808},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.03614457831325301},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.047619047619047616},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.04780876494023904},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.03482587064676617},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.025906735751295335},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.024752475247524754},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.023255813953488372},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.02702702702702703}},"a":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}},"r":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":3.348484848484848}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":3.3431855500821017},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":2.541095890410959},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":5.006711409395973}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"a":{"docs":{},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"k":{"docs":{},"n":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584}},"(":{"2":{"6":{"docs":{},",":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"docs":{}},"docs":{}},"[":{"docs":{},"a":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"b":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"c":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"d":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"e":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"f":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"g":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"h":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"i":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"j":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}},"k":{"docs":{},"]":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}}},"_":{"docs":{},"l":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285}},";":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}},"r":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}},";":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082}}}}}}}}}}}}},")":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":5.010526315789473},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.02142857142857143},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},"s":{"docs":{},"/":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":5.022471910112359},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":3.3450292397660815}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}}}}}}}}}}}}}}}},")":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}},";":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}},"i":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0425531914893617},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}},"n":{"docs":{},"k":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.00711743772242},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":2.017543859649123},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":1.2619760479041917},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":2.5309278350515463},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":2.524793388429752},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":2.516574585635359},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":3.3467261904761902},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":2.5201342281879193},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":2.521897810218978},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":3.353951890034364},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":2.509478672985782}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"e":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":5.019607843137255},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":5.007299270072993},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":3.340450771055753},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":3.3438045375218146},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":5}},"s":{"docs":{},"/":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745}}}},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.0177514792899407},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.00355871886121},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":2.5327868852459017},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":2.524896265560166},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.022727272727273},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":2.017543859649123},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":3.37310606060606},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":1.2619760479041917},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":2.520618556701031},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":2.5165289256198347},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":2.009950248756219},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":2.5110497237569063},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":3.3422619047619047},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":5.010362694300518},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":2.514851485148515},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":5.008695652173913},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":2.5134228187919465},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":2.5291970802919708},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":2.511111111111111},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":2.509009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":3.353951890034364},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":2.509478672985782},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}},".":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}}}}}},")":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901}},";":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.01485148514851485}}}},"[":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}}}}}},"/":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}}}}}}}}},".":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787}}}}}}}}}}}}},")":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.03305785123966942},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.014925373134328358},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.022099447513812154},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.013392857142857142},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.015544041450777202},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.019801980198019802},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.034782608695652174},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.026845637583892617},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.029197080291970802},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.020618556701030927},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.014218009478672985}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}},")":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}},"*":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.015544041450777202},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}},";":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.014184397163120567},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}},".":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.013392857142857142}},")":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}}},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}}}}},")":{"docs":{},",":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}}},";":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},",":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}},"s":{"docs":{},"s":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":2.5384615384615383},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},">":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}},"<":{"docs":{},">":{"docs":{},">":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}},"n":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.04477611940298507},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.02127659574468085},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.023952095808383235},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.030927835051546393},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.031914893617021274},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0273972602739726},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.024390243902439025},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285}}}}}},"k":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}}}}}}}}}}}}}}}}},")":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}},"_":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}},"s":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}}},",":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}}},"t":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}},")":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}},";":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818}}}}},"a":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}},"w":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}},";":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"g":{"docs":{},"a":{"docs":{},"l":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"t":{"docs":{},"'":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.020618556701030927},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":2.5072463768115942}},".":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693}}},"v":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":2.0067114093959733},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":2.514388489208633}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}}}},"f":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4509594882729209},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.017543859649122806},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}},".":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}},",":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}}}},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.015267175572519083},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.013953488372093023},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.01875},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.03007518796992481},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.042105263157894736},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.05405405405405406}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0142857142857142},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.011904761904762},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":2.50709219858156},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":3.3439716312056733},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":3.3512974051896203},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":3.3642611683848793},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":3.3439716312056733},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":3.345833333333333},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":3.3607305936073057},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":3.3448275862068964},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":5.014925373134329}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}}},"o":{"docs":{},"p":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"g":{"5":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}},"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}},"n":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332}}},"k":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}},"(":{"2":{"6":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}},"docs":{}},"4":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},"docs":{}},"*":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}}}},"k":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":5.028846153846154}}}},"s":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"e":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},",":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863}}},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.675438596491228},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.0081967213114753},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6723809523809523},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.6782945736434107},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":2.0067114093959733}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}},"r":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401}},",":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},":":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}},")":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}},"t":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}},"(":{"3":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}},"docs":{}}}},"p":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}},"s":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}},"i":{"docs":{},"t":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}},";":{"docs":{"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}},"h":{"docs":{},"s":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},".":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}},"d":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"1":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"h":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"2":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"docs":{}}}}}}}},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},")":{"docs":{},";":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}},"l":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}}},"r":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}},"u":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":5.006944444444445}},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}},"c":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425}},"a":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}},"d":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"1":{"docs":{},"]":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}},":":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}}}},"j":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}}}},"t":{"docs":{"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"p":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}},"q":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308}}}}}}},"u":{"docs":{},"m":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}}},")":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931}},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145}}},",":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}},":":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}},"n":{"docs":{},"/":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"]":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}},"b":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}},")":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}},";":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}}},"m":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.024691358024691357},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0410958904109589},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.024096385542168676},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.015151515151515152},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.024096385542168676},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},"n":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":2.515625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":3.3436426116838485}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}},"*":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"m":{"docs":{},"o":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}}}},")":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018518518518518517},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}},";":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018518518518518517},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.017937219730941704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.02880658436213992},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259}},";":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259}}}}}}},"k":{"docs":{},"]":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.017937219730941704}},";":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"]":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},";":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}}}}},"s":{"1":{"docs":{},"]":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"docs":{}}}}}}}}},"[":{"docs":{},"s":{"2":{"docs":{},"]":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464}},";":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}},"docs":{}}}}},"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}}}}}},";":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}}}}},"r":{"docs":{},"g":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.0059171597633134},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":2.504950495049505},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":5.02}},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},",":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":5.019607843137255},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":3.344322344322344}}}},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}}}}},"o":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"z":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"'":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"v":{"docs":{},"e":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":2.5121951219512195},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":5.023809523809524},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":3.3397435897435894}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808}}}}}}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}}}},"s":{"docs":{},"/":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.024390243902439025}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}}}}}}},"*":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}}}}}}}}}}}},"d":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693}}}}},"(":{"1":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"7":{"docs":{},")":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"e":{"9":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}},"docs":{}}},"docs":{}},")":{"docs":{},";":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}},";":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}}},"e":{"docs":{},"y":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}},"r":{"docs":{},"e":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":2.5754716981132075}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"1":{"docs":{},"]":{"docs":{},"[":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}}},"2":{"docs":{},"]":{"docs":{},"[":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}}},"3":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901}}}},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}}}}}},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}},"[":{"docs":{},"i":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"]":{"docs":{},"]":{"docs":{},";":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}}},"n":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}}},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}},"]":{"docs":{},";":{"docs":{"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}}}}}},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}}}}}},"h":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}},"a":{"docs":{},"[":{"docs":{},"n":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}},";":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.02158273381294964},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}}},",":{"docs":{"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.024242424242424242},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.020833333333333332}}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}},")":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"{":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"{":{"docs":{},"\"":{"docs":{},"*":{"docs":{},"\"":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.0194174757281553},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":3.3487179487179484},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":2.50709219858156},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":3.345238095238095},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":2.542105263157895},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":2.5201342281879193},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":3.3921568627450975}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}}}},"docs":{}}}},"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}},"docs":{},"c":{"docs":{},"]":{"docs":{},")":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835}},")":{"docs":{},";":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.028368794326241134}}}}}}}}}},"m":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}},"docs":{}}}}},")":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835}}},",":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.03546099290780142},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904}}},"/":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}}}}}}}}},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}}}}}}}}}},"docs":{}},"c":{"docs":{},"h":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":5.02542372881356},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":3.354609929078014},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}},".":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},")":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}},"s":{"docs":{},"(":{"9":{"docs":{},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}},"docs":{}},")":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}},";":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}}}},"x":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":2.515873015873016},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":5.007407407407407},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"(":{"0":{"docs":{},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}},"1":{"docs":{},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}},"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}},"v":{"docs":{},"g":{"docs":{},",":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}}}}}},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}}}}},"l":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}}},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.028368794326241134}}}}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931}}}}}}}}}},",":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425}}}}}},"v":{"docs":{},"[":{"docs":{},"i":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},",":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.026490066225165563},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.01532567049808429}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}}},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145}}}}}}},"_":{"docs":{},"g":{"docs":{},"a":{"docs":{},"p":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}}},";":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}}}}},"o":{"docs":{},"l":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513}}}}},"s":{"docs":{},"o":{"docs":{},"f":{"docs":{},"a":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.03076923076923077}},":":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385}}}}}}}},"q":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"q":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}},"*":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625}},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}}}}},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}},",":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.02577319587628866}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"i":{"docs":{},"m":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":5.016806722689076},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":2.0136986301369864},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.675141242937853},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":5.027777777777778},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":5.006756756756757},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":3.3410256410256407},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":3.356060606060606},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":2.507142857142857},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":2.506993006993007},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.0191570881226055},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":5.017391304347826},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":3.339583333333333},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":2.518867924528302},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":2.5096618357487923}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}}}},".":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644}}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}},"&":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}}}}}}}},"{":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.023668639053254437},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}}}}}}}}}}}}},";":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712}}},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}}}},"l":{"docs":{},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.041666666666666664}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":3.340909090909091},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0196078431372549},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.6975945017182128},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}},"_":{"docs":{},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894}}}}}}}}}}}}}},"y":{"docs":{},"b":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}},"r":{"docs":{},"k":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}},"z":{"docs":{},"e":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":10.013333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":5.018018018018018}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}},":":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}}}}}}}}}},"docs":{}},",":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}}}},"i":{"docs":{},"n":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":5.01010101010101},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":2.528169014084507},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"(":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}}}}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}}}}}}}},"f":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}}},"n":{"docs":{},",":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356}}}}}}},"i":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":2.5076335877862594},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":3.3494623655913975},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":2.021276595744681},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":3.3563218390804597},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":3.3418803418803416},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.6872852233676974},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":2.5082644628099175},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0555555555555554},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":3.3397435897435894},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":1.2567114093959733},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":2.01010101010101},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":3.3382352941176467}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.020202020202020204}},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}},"*":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}},"_":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}},";":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}}}}},"o":{"docs":{},"l":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.018292682926829267}}}}},"s":{"docs":{},"o":{"docs":{},"f":{"docs":{},"a":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.03076923076923077}},":":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385}}}}}}}},"q":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"q":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}}}}}}}},"*":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625}},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}}}}},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}},")":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.020618556701030927}},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464}}}}},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},")":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}},";":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548}}}}}}}}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}}}}}}}}}}}}}}}}}}}},"{":{"docs":{},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}},"k":{"docs":{},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},"e":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"m":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}},"d":{"docs":{},"l":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714}}}},",":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}},"s":{"docs":{},"s":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":2.5240963855421685},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":5.02020202020202}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.06349206349206349},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"'":{"6":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}},"9":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}},"docs":{}},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}},";":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":3.348039215686274}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},">":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464}},"&":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.03608247422680412}}}}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":2.017543859649123}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"1":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}}}}},"docs":{}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.041237113402061855}},")":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}},":":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}},")":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}}},";":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.023809523809523808},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.031746031746031744},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015503875968992248}}},"y":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401}},"(":{"docs":{},")":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}},";":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}}}},"*":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.022988505747126436}},"(":{"docs":{},")":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218}},";":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218}}}}},"*":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218}}}}},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.023255813953488372}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}},";":{"docs":{"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}},"*":{"docs":{"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}},"]":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}}},"o":{"1":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.08035714285714286}},"p":{"1":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0364963503649635}}},"2":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802}}}},"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":5.009615384615385}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}}}}}}}}}}},"r":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}},"t":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.033112582781456956},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.019867549668874173},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.019157088122605363}},"i":{"docs":{},"m":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662}}}}},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886}}}}}}},";":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}},")":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},";":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.011494252873563218},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.02608695652173913},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}},";":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}},")":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}}},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.018292682926829},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4360341151385925},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}}}}},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}},"n":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}},"{":{"docs":{"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616}}},"g":{"docs":{},":":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}},"(":{"1":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":2.504424778761062},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}},"2":{"6":{"docs":{},")":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}},"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308}},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}}}}}},"3":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}},"4":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"9":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425}},"n":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.041666666666666664},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018518518518518517},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.02247191011235955},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.027777777777777776},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},".":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}}}},"k":{"docs":{},")":{"docs":{},",":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}},"l":{"docs":{},")":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}},"^":{"2":{"docs":{},")":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}},"3":{"docs":{},")":{"docs":{},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}}}},"4":{"docs":{},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"5":{"docs":{},")":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}},"docs":{}},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}},"!":{"docs":{},")":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}},",":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}}}}}},"r":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514}}},"k":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},")":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}},",":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"k":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}},"n":{"docs":{},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}},",":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}}},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406}}}}}}},"k":{"docs":{},")":{"docs":{"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}}}},")":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}},"m":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.024691358024691357},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.015151515151515152},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.016666666666666666},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.01652892561983471},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}},"t":{"docs":{},")":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}},",":{"docs":{"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085}}}}},"c":{"docs":{},")":{"docs":{"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514}}},"(":{"9":{"docs":{},",":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}}},"docs":{}}},"d":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.021739130434782608},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}},"^":{"docs":{},"n":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}},"s":{"1":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082}}},"docs":{},"^":{"2":{"docs":{},")":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}},",":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}}}},"docs":{}}},"h":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186}},",":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009}}}}},"|":{"docs":{},"x":{"docs":{},"|":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282}}}}},"v":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}},"c":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}}}}}}}}},"n":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":2.5317460317460316},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0392156862745098},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":3.3424242424242423},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":2.527027027027027},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}},"e":{"docs":{},"!":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464}}},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},"t":{"docs":{},"o":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179}}}},"c":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"b":{"docs":{},"j":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.024390243902439025},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0234375},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.050505050505050504},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.023622047244094488},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.02040816326530612},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.022988505747126436},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.023255813953488372},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.027777777777777776}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":2.02}}}}}}}},"f":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},":":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}}}}},"i":{"docs":{},"c":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":3.333333333333333}}}}}},"u":{"docs":{},"t":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"e":{"docs":{},"r":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}},"g":{"docs":{},"o":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}},"p":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}},"e":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":3.3425076452599387},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":2.546979865771812}},",":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}},"[":{"docs":{},"(":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}},"i":{"docs":{},"]":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}},"n":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406}}}}}}},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":3.353333333333333},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401}}}}}}}}},"p":{"2":{"docs":{},"s":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}}}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.025423728813559324},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.015957446808510637},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015503875968992248},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.014925373134328358},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"h":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":2.5141843971631204},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.0229885057471266},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":5.00990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":3.339506172839506},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":3.339393939393939},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":2.02},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":3.348039215686274},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":5.073170731707317}},".":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}}}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}}}}}},":":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":5.018867924528302},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":3.347222222222222}}}}}},"c":{"docs":{},"h":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}},"i":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}},";":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}},";":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993}}},"s":{"docs":{},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"n":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":5.009803921568627},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":1.4826254826254823}}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.02654867256637168}},"_":{"1":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},"2":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}},"3":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}},"4":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}},"docs":{}}}},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}},"i":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},"t":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":5.06},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":5.010526315789473},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":3.365591397849462},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":5.008695652173913},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":5.0246913580246915}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}}}}}}}}}}}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}}}}}}}}}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"[":{"docs":{},"p":{"docs":{},"x":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"x":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578}},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":3.3426356589147286}}}}},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":2.5136986301369864}},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863}}}}},"a":{"docs":{},"t":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":3.3494623655913975},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":3.3745704467353947},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":3.3652482269503543},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":5.029850746268656},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":5.0227272727272725},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.676975945017182},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":5.031746031746032},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":3.3377976190476186},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":5.012345679012346}},"e":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}}}}}}}}}}}}}},"/":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}}}}}}}},"[":{"docs":{},"i":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}},":":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}}}}}}}}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}}}},",":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357}}}}}},"s":{"docs":{},"s":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"g":{"docs":{},"e":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}},"s":{"docs":{},":":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}},")":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01}}}}}},"l":{"docs":{},"e":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}},".":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}},"s":{"docs":{},")":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}},",":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.01948051948051948}},"]":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.015748031496062992},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.01948051948051948},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.02702702702702703}},";":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}}}},"j":{"docs":{},"]":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.015748031496062992},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.04054054054054054}}}}}}}},"c":{"docs":{},"k":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":3.353741496598639},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":3.3611111111111107}},"u":{"docs":{},"p":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":5.017241379310345},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":3.3429027113237635}},"/":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}}},"e":{"docs":{},"c":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.022222222222222223}}}},"g":{"docs":{},"e":{"docs":{},"o":{"docs":{},"n":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}}}}},"o":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}},"r":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"o":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}},"s":{"docs":{},".":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}},".":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":3.350724637681159},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01}},"e":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.034482758620689655},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":2.511111111111111}},"s":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}},".":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}},"s":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085}}},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085}}}},",":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085}}}}},"docs":{}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}},"docs":{}}}}}},".":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.020202020202020204}}},":":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.020202020202020204}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}},"i":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578}}},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}},".":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101}}}}}}},"b":{"docs":{},"l":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}}}},"t":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":3.333333333333333},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2.014388489208633},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6745718050065874},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6739926739926738}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.011857707509881422}}},":":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}}}}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}}}}}}}}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":2.0061349693251533},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":3.333333333333333}}}}},"i":{"docs":{},"v":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939}}}}},"p":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406}}}}}}},"w":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":5}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"e":{"docs":{},"r":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.018404907975460124},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.03125},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.021897810218978103}}}}}},"o":{"docs":{},"l":{"docs":{},",":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"1":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"3":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"4":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"docs":{}}}}}}}}}}}}}}}}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"3":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"docs":{}}}}},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.015267175572519083},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.031746031746031744},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":3.347222222222222},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}},".":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}},"t":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":3.3487179487179484},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":2.5384615384615383}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"e":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.02857142857142857},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.0297029702970297},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.03680981595092025},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.022900763358778626},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.025423728813559324},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.025},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.0297029702970297},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":2},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"(":{"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.02586206896551724},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.0297029702970297},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}}},"j":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.02586206896551724},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.0297029702970297},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121}}}},"n":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391}},"n":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}},"r":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}},"j":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},",":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.039603960396039604},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.018518518518518517},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.01818181818181818}}},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}},")":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}}}}}}},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}},":":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414}}}}}}},"v":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.02631578947368421},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077}},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":2.5135135135135136}}}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}},")":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"o":{"docs":{},"p":{"docs":{},"t":{"1":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}}}}}}}}}},"docs":{}}}}}}}}},"d":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.017964071856287425},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.033783783783783786},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.03680981595092025},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.061855670103092786},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.03305785123966942},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.017857142857142856},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.03153153153153153}},")":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}},",":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.023952095808383235},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.017482517482517484},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}},";":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.022321428571428572}}},".":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}}}}}}}}},":":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}},"s":{"docs":{},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}}}}}}},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"s":{"docs":{},"s":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2.0172413793103448},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.6713725490196076},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6813186813186811}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588}}}}}}}}}},":":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176}}},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176}}}}}}}}}}}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}},"}":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}},")":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}}}}}}}}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085}}}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332}},"s":{"docs":{},")":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332}}}}}},"c":{"docs":{},"e":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}}}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082}}}}},"docs":{},"i":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.01694915254237288},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259}},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}},")":{"docs":{},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.023668639053254437}}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}},"}":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}},"[":{"docs":{},"h":{"docs":{},"]":{"docs":{},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}},"j":{"docs":{},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}},"}":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.014705882352941176},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}},"z":{"docs":{},"z":{"docs":{},"l":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":5.009433962264151}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}},"s":{"docs":{},"h":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}}}}}}}}},"t":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}},")":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.02631578947368421},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425}},",":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}},"docs":{},"j":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.026595744680851064}},"]":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.025423728813559324},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.015957446808510637}}}},"i":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}},"p":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}}},"x":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}},"y":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}},"e":{"docs":{},"r":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":5.024096385542169}}}}},"o":{"docs":{},"d":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405}},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}},";":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":10.013157894736842},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":5.009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":5.015384615384615},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":2.527027027027027},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"e":{"docs":{},"r":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}}},"c":{"docs":{},"e":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":1.6791666666666665}}}},"n":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101}},"_":{"docs":{},"a":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}},"b":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}},")":{"docs":{},";":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}}}}}},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}}}},":":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}},",":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.02857142857142857},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.027777777777777776}}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}},"n":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":2.5144927536231885}}}}}},"c":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}},",":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}},"q":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372}},"p":{"docs":{},"s":{"docs":{},",":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"u":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}},"y":{"docs":{},"(":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}},")":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}},"u":{"docs":{},"e":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"docs":{}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"docs":{}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334}}}}},"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}}},"docs":{}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}}}}},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}},">":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"e":{"docs":{},"n":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":5.03030303030303}},"s":{"docs":{},",":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304}}},";":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"&":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.042105263157894736}},";":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}}},"a":{"docs":{},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282}}}}}}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}}}}}}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}},"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}}},"docs":{}}}},"docs":{}}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}},")":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}},"x":{"docs":{},",":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}},"\"":{"0":{"0":{"0":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}}}}}}}}},"{":{"0":{"docs":{},",":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},"docs":{},"a":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}},"b":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513}}}},"x":{"docs":{},",":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}}}}}}}},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}},",":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.022727272727272728}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"docs":{}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.017142857142857144}}}}},"r":{"1":{"docs":{},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}},"2":{"docs":{},"l":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.04580152671755725},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.02564102564102564},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.04285714285714286},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.03571428571428571},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.02631578947368421},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03225806451612903},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.03636363636363636},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.028368794326241134},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.019157088122605363},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.03571428571428571},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.030612244897959183},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.028846153846153848},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.024096385542168676},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.047619047619047616},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.04597701149425287},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.022222222222222223},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022556390977443608},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.029850746268656716},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.025906735751295335},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.024752475247524754},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.027906976744186046},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}},"e":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.02608695652173913},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"&":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}},"(":{"docs":{},")":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}},";":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}},";":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.02030456852791878},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}},")":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"{":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}}}}}}}}}}}}}}},"'":{"0":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939}}}}}},"1":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}},"docs":{}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714}}}}}},"c":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.017142857142857144},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}},")":{"docs":{},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}},"&":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.019417475728155338},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}},"e":{"docs":{},">":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}},".":{"docs":{},"s":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},";":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}},"u":{"docs":{},"m":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}},";":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125}}}}},"v":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":2.5034965034965033}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":5.006622516556291},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":5.019417475728155}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":3.3481116584564856},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":5.016806722689076}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}}}}}}}}}}}}}},".":{"docs":{},"i":{"docs":{},"d":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996}}}}}}}}},"x":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},"y":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.016666666666666666},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015463917525773196},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.037037037037037035},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.020202020202020204},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.01775147928994083},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.010452961672473868},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.037037037037037035},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.014354066985645933},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.03546099290780142},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.031496062992125984},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.025974025974025976},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.028846153846153848},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.026490066225165563},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.02564102564102564},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.03587443946188341},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.025},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.028985507246376812},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.01646090534979424},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.029411764705882353},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.03636363636363636},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.02577319587628866},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.02491103202846975},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.03278688524590164},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.018115942028985508},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.016597510373443983},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.015151515151515152},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.022727272727272728},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0410958904109589},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.041379310344827586},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.03278688524590164},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.02857142857142857},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.03355704697986577},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.022988505747126436},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.04950495049504951},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.027472527472527472},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.01647058823529412},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.011857707509881422},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.02608695652173913},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.032520325203252036},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.02147239263803681},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.02976190476190476},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.017142857142857144},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.028985507246376812},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.03553299492385787},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.05185185185185185},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.047619047619047616},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.03773584905660377},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.041666666666666664},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.02},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.013392857142857142},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.02072538860103627},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.019801980198019802},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.013513513513513514},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.030927835051546393},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.014218009478672985},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.019230769230769232},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.019230769230769232},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.04245283018867924},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.026490066225165563},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.03},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.020202020202020204},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.022988505747126436},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.04040404040404041},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.020134228187919462},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.036585365853658534},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.022598870056497175},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.02654867256637168},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015463917525773196},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.024242424242424242},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}},"o":{"docs":{},"v":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":2.518181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":2.0185185185185186},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.0092024539877302},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":2.5082644628099175},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":2.0049751243781095},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":3.337984496124031},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},"e":{"docs":{},"(":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"&":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}},"a":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}},"c":{"docs":{},"h":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":5.00507614213198},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0285714285714285},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":3.3607305936073057}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.011111111111111112}},"a":{"docs":{},"s":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}}}},"a":{"docs":{},"c":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"q":{"docs":{},",":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815}}}}},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"a":{"docs":{},"n":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":5.009090909090909}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":5.008928571428571}}}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":3.338652482269503}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.018404907975460124},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.021897810218978103},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":5.0144927536231885},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":2.5110497237569063},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}}}}}}},"f":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},"[":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.024390243902439025},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.026785714285714284},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078}},")":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}}}},")":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}}},";":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}},"o":{"docs":{},"w":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.03937007874015748},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}},"s":{"docs":{},".":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714}}},"(":{"9":{"docs":{},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}},"docs":{}},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096}}}},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}},")":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.023622047244094488}}},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992}}}}}}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}},"m":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":5.008620689655173},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0555555555555554},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":2.546153846153846},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.04}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.02877697841726619},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0425531914893617},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.017793594306049824},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.05263157894736842},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.022988505747126436},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.01647058823529412},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.023715415019762844},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.018315018315018316},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.02608695652173913},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.014598540145985401},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}},")":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}}},";":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009}}}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.019801980198019802},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749}}},":":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}},";":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.017964071856287425},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.02027027027027027},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.015337423312883436},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.022598870056497175}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":5.03921568627451},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":3.355311355311355}},"s":{"docs":{},")":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678}}}}}}}}}}}},"docs":{}}}}},"l":{"docs":{},"l":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.0217391304347827}}}},"b":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":5.011904761904762},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":3.3446969696969693},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":3.3415637860082303}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.04424778761061947}},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":5.010309278350515},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":5.023529411764706}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}}}}}}}}},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.014184397163120567},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.013953488372093023},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}},";":{"docs":{"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901}}},")":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}},";":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}}}},"(":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}}}},"h":{"docs":{},"s":{"docs":{},")":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},".":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}},".":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}},"y":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}},")":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308}},";":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931}}}}}}}}},"u":{"docs":{},"m":{"docs":{},";":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},";":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"p":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}},"q":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}}}}}}},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.020618556701030927}}}},"l":{"docs":{},")":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.020618556701030927}}}},"r":{"docs":{},")":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464}}}}},")":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":5.010204081632653},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":5.02020202020202}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":3.343537414965986},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":2.522222222222222},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":3.347222222222222}},";":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}},"(":{"docs":{},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.022123893805309734}},"(":{"docs":{},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"x":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"e":{"docs":{},"s":{"docs":{},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"[":{"docs":{},"a":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}},"b":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"]":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.024691358024691357},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}},")":{"docs":{},";":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121}},",":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198}},",":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}},"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}},"i":{"docs":{"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}},"s":{"docs":{},",":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}},"p":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}}}},"l":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}},"r":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}}},"]":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992}}}}},"t":{"docs":{},"n":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"p":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}},"q":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}}}}}}},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}}}}},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429}}}}},"p":{"docs":{},"n":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}}}}}}}}}}}}},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}},")":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}}}}},"s":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.02459016393442623},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.021897810218978103}},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}},"2":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.021897810218978103}},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464}},",":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}},".":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}}}}}}}}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}},",":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464}}},"p":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}}}}}}}},"3":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}},")":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082}}}}},"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0273972602739726},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.020618556701030927},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01639344262295082},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.015463917525773196},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.025423728813559324},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.015957446808510637},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.016666666666666666},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},"c":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"e":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.041237113402061855},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}}}},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":5.006849315068493},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":5.0212765957446805}},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"1":{"docs":{},"[":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992}}}},"2":{"docs":{},"[":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}},"docs":{}}}}}}}}}}}}},";":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":5.025773195876289}}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.02666666666666667},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}},")":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}},"r":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776}},"i":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":2.5054945054945055}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":3.337179487179487},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.022123893805309734}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332}}}}},"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186}}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.022988505747126436}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}},";":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},"(":{"docs":{},"m":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}},"n":{"docs":{},"t":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}}}}}}},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888}}}}},"e":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},";":{"docs":{"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576}}},"(":{"docs":{},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.04054054054054054}}}}}}}}}}}},"l":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0327868852459017},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6836158192090394},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6785009861932938},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6792452830188678}},"_":{"1":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}},"2":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}},"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}}}}}}}},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388}},"s":{"docs":{},":":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644}}},",":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}},".":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}}}}}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":2.537037037037037},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":1.2619760479041917},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":2.5136986301369864},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6842105263157894},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":2.506993006993007},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.0150375939849625},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6739659367396593},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.0337837837837838},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.0122699386503067},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":3.339285714285714},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":2.5210526315789474},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":5.010204081632653},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":2.5307692307692307},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.02},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":5.0137931034482754},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":3.3421828908554567}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385}},"&":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":3.3563218390804597},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":2.5377358490566038},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":5.029126213592233}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781}}},"s":{"docs":{},")":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}},":":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":3.3384879725085908},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":3.3446969696969693},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":5.004716981132075}},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"p":{"docs":{},"u":{"docs":{},"z":{"docs":{},"z":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"{":{"docs":{},"v":{"1":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}},"w":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.022321428571428572},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.015544041450777202},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.030927835051546393},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.02843601895734597}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}},",":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714}}},")":{"docs":{},";":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}},";":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}},"o":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.015267175572519083},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.05555555555555555},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.016666666666666666},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.031746031746031744},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.02564102564102564},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.02857142857142857},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.023809523809523808},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.02631578947368421},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03225806451612903},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.022727272727272728},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.03773584905660377},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.028169014084507043},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.047619047619047616},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.04},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.023529411764705882},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.03636363636363636},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.037037037037037035},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.02666666666666667},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.019417475728155338},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.05405405405405406},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.041666666666666664},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.020618556701030927},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0136986301369863},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0273972602739726},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.0425531914893617},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.024691358024691357},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.024096385542168676},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.03278688524590164},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.01694915254237288},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.015151515151515152},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.016666666666666666},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.01652892561983471},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.018691588785046728},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.02127659574468085},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.025974025974025976},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.02702702702702703},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.021739130434782608},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.03225806451612903},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.034482758620689655},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.014184397163120567},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.015748031496062992},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.019230769230769232},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.02564102564102564},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.02666666666666667},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0125},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0196078431372549},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.02127659574468085},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.025},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0273972602739726},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.022988505747126436},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.029850746268656716},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.045454545454545456},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.020618556701030927},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.0425531914893617},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.02702702702702703},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.017543859649122806},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.019801980198019802},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007058823529411765},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.037037037037037035},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.03773584905660377},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.03076923076923077},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.04},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.024096385542168676},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.031746031746031744},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015503875968992248},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.030612244897959183},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.014598540145985401},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.028985507246376812},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016260162601626018},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.031746031746031744},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.02247191011235955},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.018867924528301886},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.05},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.03333333333333333},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.03333333333333333},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.020618556701030927},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.02},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.019230769230769232},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.029850746268656716},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.015384615384615385},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.02702702702702703},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0392156862745098},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.02},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.04},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.027777777777777776},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.020202020202020204},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.020202020202020204},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.020618556701030927},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.024390243902439025},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.05405405405405406},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.041666666666666664}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}}}},"w":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}}}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}},"*":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}}},"v":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544}},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714}}}}}}}}}}},"n":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}}}}}}}}}}}}},"r":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":5.017094017094017}}},"s":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":5.008620689655173},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":2.536363636363636},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":2.037037037037037},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.0194174757281553},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6901960784313723},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.0236686390532546},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":1.2619760479041917},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0555555555555554},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":2.546153846153846},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":2.04},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":2.5240963855421685},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":5.005181347150259},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":2.50990099009901},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":2.509009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.02},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.050505050505050504},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}}}}}}}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}}}}}}}}}}}}}},".":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}},",":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}},"t":{"docs":{},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}}},"r":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.019417475728155338},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"u":{"docs":{},"r":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"e":{"docs":{},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":3.3859649122807016},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":5.008620689655173},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":5.045454545454546},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02564102564102564},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.02727272727272727},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.031914893617021274},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.029940119760479042},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.6975945017182128},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.0425531914893617},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01639344262295082},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":5.049180327868853},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":5.030927835051546},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":3.3603603603603602},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016260162601626018},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.05},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.014150943396226415},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":5.031578947368421},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.020134228187919462},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}},"&":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.015463917525773196},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"s":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}},".":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}}}}}}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":2.524390243902439},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":2.515625},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}}},")":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"'":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},",":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}}}}}}},":":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},"[":{"0":{"docs":{},"]":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}},":":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}},"o":{"docs":{},"b":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":5.024390243902439}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}},"c":{"docs":{},"c":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"1":{"0":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"1":{"0":{"docs":{},",":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}}}},"docs":{}},"docs":{}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"q":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"]":{"docs":{},")":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},")":{"docs":{},";":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"s":{"docs":{},";":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"c":{"docs":{},"k":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":5.02020202020202},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.018656716417910446},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}},")":{"docs":{},",":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408}}}},":":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}},"&":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}}},">":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}},",":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}},".":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.014598540145985401}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.021897810218978103}}}}}}}}},";":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"r":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.020202020202020204},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}},")":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}},":":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},"[":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},",":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}}},"docs":{}},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}}}},"y":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":1.6791666666666665}}},"i":{"docs":{},"r":{"docs":{"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":2.528169014084507}}}}},"d":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},",":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}}},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}}}},"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.02030456852791878},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}},"&":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}},":":{"docs":{},":":{"docs":{},"n":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}},"i":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},",":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.01818181818181818},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}},"n":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}},"n":{"docs":{},",":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"c":{"docs":{},",":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}}},",":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}},")":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}},">":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"(":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}},"&":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}},"&":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}},",":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827}}}}}}}}}}}}},"c":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"_":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},">":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"y":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}}}}}}}},"a":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}}}},"docs":{}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}},"o":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}},",":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}},"k":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}}}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{},":":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"&":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}},">":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"&":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"t":{"docs":{},"o":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},";":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},">":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}},"k":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}}}}},"o":{"docs":{},"d":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333}}}}}}}},"j":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}}}}}}}}},"(":{"docs":{},"{":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}}}}},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}},":":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.025906735751295335}}},"[":{"0":{"docs":{},"]":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}},"docs":{}},")":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}},";":{"docs":{"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.014814814814814815},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},"c":{"docs":{},"k":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0163934426229506},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6836158192090394},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6844181459566074},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6792452830188678}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082}}}}}}}}}}}}},"n":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496}},"e":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":5.011363636363637},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":3.341463414634146},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":5.015748031496063},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":3.3528138528138527},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":3.362179487179487},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":3.346578366445916},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":5.013513513513513}},"g":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009}}}}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364}},"&":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514}}}}}}}}}},"i":{"docs":{},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}}}}}}}}}}}},"v":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391}}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}},",":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}}}}}}}},"[":{"1":{"docs":{},"]":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"]":{"docs":{},",":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279}}}}}}}}}}}},"p":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},"e":{"docs":{},"p":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.015384615384615385},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":1.6791666666666665},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":1.6975945017182128},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.021052631578947368},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.011111111111111112},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.018957345971563982},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},"s":{"docs":{},".":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}},"/":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}}},"n":{"docs":{},"(":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676}}}}}}},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":5.008130081300813}}}}}},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},")":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},";":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}}},",":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}}}}}}},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":5.008620689655173},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":3.339047619047619},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":2.50990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":2.5061349693251533},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":2.5229007633587788},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6920903954802258},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":5.055555555555555},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":3.3410256410256407},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":3.3666666666666663},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":2.5384615384615383},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":2.5144927536231885}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414}},"&":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"v":{"docs":{},"b":{"docs":{},"y":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}},",":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644}}},"/":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":5.005235602094241},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":5.006756756756757}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.0238095238095237},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":3.365591397849462},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":3.3453093812375245},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":3.3652482269503543},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":3.374429223744292},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}},"/":{"docs":{"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}}}}}}}}},",":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":3.354609929078014},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":3.353951890034364},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":3.358333333333333},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":10.042553191489361},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":5.0109289617486334}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"'":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}},"t":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":10.014925373134329},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":5.010526315789473}},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":5.017391304347826},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":3.345833333333333}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":5.017241379310345},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":5.010471204188482},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":3.3676190476190473},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":2.5297029702970297},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":2.5245398773006134},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":2.5381679389312977},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.7005649717514122},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.05555555555555555},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":3.3749999999999996},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.024390243902439025},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6784313725490194},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":2.0547945205479454},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.037383177570093455},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":5.01063829787234},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.032608695652174},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":5.055555555555555},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":2.508298755186722},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.007575757575758},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.0268199233716473},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":5.01980198019802},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":3.3456790123456788},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":3.351515151515151},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":5.021739130434782},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":3.352201257861635},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":3.352564102564102},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":3.3494623655913975},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.029411764705882353}},"(":{"0":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}},")":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}},",":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}},"docs":{},"i":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}},")":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285}},":":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}},"n":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"s":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"{":{"0":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}},"docs":{}}}}}}}}}}}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}},"[":{"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429}}}}},")":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099}},";":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.03296703296703297}}}},"/":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}},"[":{"docs":{},"n":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}},"docs":{},"i":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}},"]":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.017793594306049824}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}}}}},"n":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894}}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"w":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}}}},"docs":{}}}}}}}}}}}}}}}}},":":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}},"e":{"docs":{},"r":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":3.3541666666666665}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":3.3412073490813645}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"/":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":5.004464285714286}}}}}}}},"c":{"docs":{},"h":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}},":":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}},"c":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.02147239263803681},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.02702702702702703}},";":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085}}}}}}},":":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}},"s":{"docs":{},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}}}}}}},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}},")":{"docs":{},";":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":3.333333333333333}}}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":5.0085470085470085}}}}}}},"p":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.015463917525773196}},"a":{"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":3.3431372549019605}}},"c":{"docs":{},"e":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"r":{"docs":{},"s":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":3.3774509803921564}}}}},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"i":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},"c":{"docs":{},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":5.031578947368421}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}}},"1":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}}},"2":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}},":":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}}},"3":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}},"docs":{},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429}},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}},"l":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904}}}}}}},"i":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.022321428571428572},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}},"]":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.020618556701030927},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.024154589371980676},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.044642857142857144}}}}},"j":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}},",":{"docs":{"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}}}}},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0125},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.031746031746031744},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.020833333333333332},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.02185792349726776},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.024896265560165973},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.022727272727272728},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.022727272727272728},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"i":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}},"z":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":2.515267175572519},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6836158192090394},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.03333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.015151515151515152},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"(":{"0":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}},",":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"docs":{}},")":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}},",":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.024390243902439025},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.020202020202020204},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}},"_":{"1":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}},"2":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}},"docs":{},"a":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},"b":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099}},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}},"}":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}},"d":{"docs":{},"e":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.014925373134328358}},".":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"f":{"docs":{},"i":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":5.048780487804878}}},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}}}}}}}}}}},"g":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112}},"e":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":5.028169014084507}}},"s":{"docs":{},"t":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.0352941176470587},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.0194174757281553},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6784313725490194},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}}}}}}}},"k":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}},"i":{"docs":{},"p":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"n":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},")":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.029850746268656716},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.018604651162790697},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}},")":{"docs":{},",":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}},",":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}},",":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}},";":{"docs":{"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745}}}}}}}},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":3.3412073490813645},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":2.01}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}}}}}}}}}}}}}}}}}},"w":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}},"n":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},"d":{"docs":{},"_":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894}}}}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}},"(":{"docs":{},"x":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}},")":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":10.015873015873016},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":5.011494252873563}}}},"n":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":5.00796812749004},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":3.358333333333333}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}}}}}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.02564102564102564},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}},"m":{"docs":{},"e":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":1.6791666666666665},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0196078431372549},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745}},")":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745}}}}}}}}}}},":":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},":":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}}}},"s":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.015463917525773196}}},"b":{"docs":{},"'":{"docs":{},"'":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}},".":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676}}}},":":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":2.5135135135135136},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}}}}}}}},"/":{"docs":{"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}}}},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}},"(":{"docs":{},"o":{"docs":{},"p":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}},"v":{"docs":{},"n":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"s":{"docs":{},"b":{"docs":{},"a":{"docs":{},"d":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"t":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.0425531914893617},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.0273224043715847},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.02681992337164751},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.013333333333333334},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}}},"c":{"docs":{},"k":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}}},"e":{"docs":{},"(":{"docs":{},"n":{"1":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496}}},"docs":{}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2.0172413793103448},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2.0166666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2.014388489208633},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.0121951219512195},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4360341151385925},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.6713725490196076},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6745718050065874},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6739926739926738}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}},"l":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436}}}}}},"i":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}}}}}}}},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}},"e":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":10.022598870056497}},"s":{"docs":{},",":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}},",":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.0199203187250996}}},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},"[":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},"]":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}},"(":{"docs":{},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}},".":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}},"u":{"docs":{},"e":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.02564102564102564},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.02666666666666667},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.017937219730941704},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.021897810218978103},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.024390243902439025},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.019867549668874173},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584}}},":":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}},"e":{"docs":{},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":5.003703703703704},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":2.5246913580246915},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":2.0258620689655173},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":2.025},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":2.0215827338129495},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.0106761565836297},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":1.2679640718562875},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":2.5273972602739727},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":3.360919540229885},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":2.5163934426229506},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":2.5285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":3.3497267759562837},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":2.5330578512396693},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":2.527972027972028},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":1.6929824561403508},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":2.0245901639344264},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":1.6895238095238094},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":1.7015503875968991},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":2.5104895104895104},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":2.0191570881226055},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":2.532967032967033},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":2.5215827338129495},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.018292682926829},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4397654584221746},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":2.521978021978022},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":1.676078431372549},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":1.6785243741765479},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":1.6776556776556775},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":5.024390243902439},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.0225563909774436},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.681265206812652},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.0135135135135136},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.0061349693251533},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.01840490797546},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":3.3504761904761904},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":3.341269841269841},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":3.3382352941176467}},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}},"/":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}},":":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.04310344827586207},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.041666666666666664},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.03597122302158273},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.031914893617021274},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.03424657534246575},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.034482758620689655},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.040983606557377046},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.03571428571428571},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0273224043715847},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.04132231404958678},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.03496503496503497},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.02631578947368421},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.017142857142857144},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.03355704697986577},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.019157088122605363},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.0297029702970297},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.030864197530864196},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.030303030303030304},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.03296703296703297},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.03597122302158273},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.03048780487804878},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.018656716417910446},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.016483516483516484},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.023529411764705882},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.019762845849802372},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.018315018315018316},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.03125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.04065040650406504},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.03759398496240601},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.01824817518248175},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.02702702702702703},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.018404907975460124}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}}}},")":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}}}}}}}}}},":":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}},"*":{"docs":{"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.031914893617021274},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.02631578947368421},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.03428571428571429},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.016483516483516484},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007058823529411765},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.024539877300613498}},"&":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049}}}},",":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}}}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}},"c":{"docs":{},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016260162601626018},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.032608695652174},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":5.018518518518518},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}},",":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.024691358024691357},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.024242424242424242},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.03007518796992481},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516}}},")":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.028169014084507043},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.017857142857142856},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},")":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901}}},";":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904}}}},":":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385}}},";":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901}}},"]":{"docs":{},";":{"docs":{"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}}},".":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}}}}},"i":{"docs":{},"l":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},";":{"docs":{"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384}}}}},"s":{"docs":{},"k":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":5.02054794520548},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}},"s":{"docs":{},")":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}},",":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}},";":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.017937219730941704},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}},"n":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.018957345971563982}}}}}},")":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03225806451612903},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}},",":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}}},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.02727272727272727},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.011494252873563218},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}},"h":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},",":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}}}}},"w":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}},"a":{"docs":{},"t":{"docs":{},"'":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}},"w":{"docs":{},"o":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":2.532258064516129},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.6784313725490194},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":3.3543859649122805},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":2.5145985401459856},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}}}}}}}}}},",":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}},".":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334}}}}}}},"o":{"docs":{},"p":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}},"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.027777777777777776}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}}}},"m":{"docs":{},",":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.028368794326241134}}},"a":{"docs":{},"p":{"docs":{},",":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}}}},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.023622047244094488},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},",":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.033112582781456956}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279}}}}}}}}},"i":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0125}},",":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}},"n":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}},"docs":{}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.028985507246376812}}}}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}},"s":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}},";":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}}}}}}}}}}},"o":{"docs":{},".":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},".":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}},"r":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"s":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.014218009478672985}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":2.0327868852459017},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":1.6836158192090394},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":1.6785009861932938},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":1.6792452830188678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022556390977443608},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":3.351515151515151}},"s":{"docs":{},".":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}}},":":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.01818181818181818}}},",":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993}}},")":{"docs":{},";":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}},":":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":3.3448275862068964},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}},"s":{"docs":{},"/":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}},"1":{"docs":{},"]":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}},"docs":{}}}}}},"l":{"docs":{},"l":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218}}},"e":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}},".":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.011494252873563218},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425}}}}}}}}}}}}},"2":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425}}}}}}}}}}}}},"docs":{}}},"m":{"docs":{},"p":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},".":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406}},";":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406}}}}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}},"p":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464}},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"s":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464}},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.015384615384615385}},"(":{"0":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}},",":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}},"docs":{}},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406}}}},",":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}},"y":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282}},"p":{"docs":{},"e":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}},")":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282}}}},"x":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282}},",":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"u":{"docs":{},".":{"docs":{},"s":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.018867924528301886},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},",":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}},">":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},"&":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}},">":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}},"&":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}},"&":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}},"&":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}}}}}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":2.5246913580246915},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":3.3459915611814344},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":3.3406862745098036}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"i":{"docs":{},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}},"o":{"docs":{},"n":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.023529411764706}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704}}}}},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":5.019607843137255}}}}}}}},"p":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.03896103896103896},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}},"o":{"docs":{},"n":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.021897810218978103}},")":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},")":{"docs":{},";":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},"}":{"docs":{},";":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}},":":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}},"s":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.015267175572519083},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.01652892561983471},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":3.3603603603603602},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":3.3749999999999996}}}}}},"v":{"1":{"docs":{},",":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}},"2":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}},"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.026785714285714284},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":5.008264462809917},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":3.346578366445916},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":3.3399558498896242},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}}},"l":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.04054054054054054},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.024}},"u":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.018518518518518517},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.022727272727272728},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":2.0150375939849625},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":1.6739659367396593},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.02962962962962963},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.047058823529411764},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}}}},":":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}},"[":{"docs":{},"i":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285}},"]":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},";":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642}}}}},"n":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857}}},"j":{"docs":{},"]":{"docs":{"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}},")":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576}}},")":{"docs":{},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}}},".":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}},":":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},";":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},")":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.013513513513513514},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},"(":{"0":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}},"docs":{},"x":{"docs":{},")":{"docs":{},",":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}},"i":{"docs":{},"d":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":2.506849315068493},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":5.00561797752809},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":3.3407407407407406},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":3.358333333333333},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":5},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":3.3499999999999996},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":3.3650793650793647}},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519}},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}}}}}},":":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}},"e":{"docs":{},"c":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}},"t":{"docs":{},"o":{"docs":{},"r":{"2":{"docs":{},"d":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}}}}}},"*":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.039473684210526314},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.020202020202020204},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.02666666666666667},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.015151515151515152},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.017045454545454544},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":3.349081364829396},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.047619047619047616},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"&":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.011764705882352941},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.039473684210526314},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.02702702702702703},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}},">":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.020618556701030927},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0410958904109589},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.02},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.02564102564102564},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.037037037037037035},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.029850746268656716},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.04},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.027777777777777776},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353}},"&":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.02564102564102564},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}},"(":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}},"n":{"docs":{},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}},">":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}},"(":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}},">":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}},"&":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}}},"&":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}}}},"(":{"1":{"0":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.02564102564102564}}}}}},"docs":{}},"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}},"n":{"2":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}},"docs":{"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863}},")":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}}}},",":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}},"b":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}}},"m":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304}}}}}}}},"k":{"docs":{},",":{"docs":{"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516}}}},"l":{"docs":{},"p":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}},")":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016}}}}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},">":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}},".":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}},",":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"s":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}}}}}},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406}}},":":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015}}}},")":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":3.3619047619047615}},".":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":2.0121951219512195}},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.014925373134328358}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.020202020202020204},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"i":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":5},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"docs":{},"n":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}}},"\"":{"0":{"0":{"0":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"p":{"docs":{},")":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}}}}}}}}}}}},";":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}},"(":{"1":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}},"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}},"u":{"docs":{},"m":{"docs":{},"_":{"docs":{},"r":{"docs":{},",":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334}},"[":{"0":{"docs":{},"]":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"docs":{}}}},"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"[":{"1":{"docs":{},"]":{"docs":{},"]":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}},"i":{"docs":{},"]":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018}}}}},",":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.02702702702702703}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}}}}}}}}},"i":{"docs":{},"i":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},":":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}},"[":{"docs":{},"i":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}},"]":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576}}}}},"/":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}}}}}}}}}}}},"y":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.013333333333333334}}}}},"(":{"docs":{},"y":{"docs":{},")":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}},")":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},";":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"&":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},",":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}},"2":{"docs":{},")":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}},"docs":{},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},",":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},")":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"i":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}},"z":{"docs":{},"e":{"docs":{},",":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}},"&":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.024},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0136986301369863},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.020618556701030927},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.024691358024691357},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.030303030303030304},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.015463917525773196},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.017543859649122806},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.022222222222222223},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.02},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.019230769230769232},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.023255813953488372},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.022058823529411766},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.02702702702702703},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}}},")":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}},",":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}},"e":{"docs":{},"q":{"docs":{},"s":{"docs":{},")":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}}}}}}}}},"a":{"docs":{},")":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904}}},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},",":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},")":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}},"b":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}},")":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},")":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}}}}}}},"v":{"docs":{},")":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576}}},",":{"docs":{"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}}},"t":{"docs":{},")":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}},")":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}},",":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}},"d":{"docs":{},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"y":{"docs":{},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}},"_":{"docs":{},"g":{"docs":{},";":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}},"l":{"docs":{},",":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},";":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}},"o":{"docs":{},"d":{"docs":{},"d":{"docs":{},",":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}}}}}},"c":{"docs":{},"t":{"docs":{},")":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}}}},",":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},",":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},",":{"docs":{"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.013937282229965157},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"1":{"4":{"4":{"0":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}},"docs":{}},"docs":{}},"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.01764705882352941},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.017421602787456445},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}},"2":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464}}},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678}}}}}}}},"3":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.010452961672473868},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644}}},"^":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}},"4":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"5":{"docs":{},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"6":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"7":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},"i":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025}},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.022727272727272728},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.025974025974025976},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.02702702702702703},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.03409090909090909},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.032520325203252036},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.03225806451612903},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.02666666666666667},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.019867549668874173},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.029850746268656716},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},"]":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"_":{"docs":{},"w":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}},"g":{"docs":{},"[":{"docs":{},"d":{"docs":{},"]":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}},"t":{"docs":{},"]":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948}}}}}}},"t":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}}}}}}}}},"d":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}},"l":{"docs":{},"e":{"docs":{},"_":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"t":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}}}}},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.03827751196172249},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496}}},"+":{"1":{"docs":{},")":{"docs":{},"t":{"docs":{},"h":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285}}}}}},"docs":{}},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}}},"p":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888}}},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}}}}}}}}}}}}},"a":{"1":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}},"&":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.01818181818181818}}}}}}}},"r":{"docs":{},"r":{"docs":{},"[":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282}}}}}},"i":{"docs":{},"]":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}}}}},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"i":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514}}}},"j":{"docs":{},"]":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},")":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":3.3468468468468466}}}}}},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"docs":{}}}},")":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}},"c":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}},"^":{"2":{"docs":{},")":{"docs":{},")":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757}}}}}},"docs":{}},"h":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.018604651162790697}},"a":{"docs":{},"r":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}}}},")":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}},"l":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"i":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},",":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}}},"d":{"docs":{},"e":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.03067484662576687},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01327433628318584},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}},")":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.014598540145985401},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.011111111111111112}}}}}},"a":{"docs":{},"n":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}}}},"e":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}}}}}}}}}}},"m":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"q":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}}}}}},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}}}}},"c":{"docs":{},"h":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464}}}}}}}}}}}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"]":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"q":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}}}}},"u":{"docs":{},"t":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"_":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015463917525773196}}}}}}},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259}}}}}},"k":{"docs":{},")":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}}}}}}}}}}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856}}}}}}},"s":{"1":{"docs":{},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"docs":{},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}}}}}}}}}}}}}}},"p":{"2":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}}}}}}}}}}},"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.023255813953488372}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}},"d":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.013513513513513514}},")":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}}}},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629}}}}}}}}},"x":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186}}},"o":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}},"o":{"docs":{},"l":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"2":{"docs":{},"]":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}},"docs":{}}}}},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}}}},"s":{"1":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}}}},"2":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}}},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}}}}}}}}}}}}},"docs":{},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703}},"[":{"docs":{},"i":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285}}}}},"c":{"docs":{},"c":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}}}}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}},"r":{"docs":{},"c":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},")":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}}},"docs":{}}}}}},"r":{"docs":{},"[":{"docs":{},"s":{"1":{"docs":{},"]":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454}}}},"docs":{}},"i":{"docs":{},"]":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}}},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.022988505747126436}}}}}},")":{"docs":{"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}},"q":{"docs":{},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"_":{"docs":{},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}},"]":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}}},"j":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991}}}}}},"n":{"1":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}},"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.029411764705882353},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"u":{"docs":{},"m":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}},"]":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}},")":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},")":{"docs":{},";":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}}}},"l":{"docs":{},"]":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02}}}},"j":{"docs":{},"]":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}}},"_":{"docs":{},"c":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}},"r":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}}}},")":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}},"w":{"docs":{},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.01818181818181818}}}}}}}}}}}}}},"o":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}},"d":{"docs":{},"e":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.014925373134328358},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749}},")":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333}}}}}},"^":{"2":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}}},"docs":{}},"x":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}},"i":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"_":{"2":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},")":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}}}}}}},"docs":{}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}},")":{"2":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"docs":{}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931}}}}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}}}}},"j":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406}}},"f":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904}}}}}},"_":{"docs":{},"p":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105}}}}}}},"t":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}}}}}}}},"(":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"docs":{}}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}},"a":{"docs":{},"c":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}},"!":{"docs":{},"q":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}}}}}}},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547}},")":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{},")":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993}}}}}},"(":{"docs":{},"n":{"docs":{},"x":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}},"j":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}},"r":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}},"r":{"1":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827}}},"docs":{}},"'":{"0":{"docs":{},"'":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{}},"(":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757}}}}},"w":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}},"u":{"docs":{},"n":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931}}}}}}}}}},"v":{"1":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}},"docs":{},"e":{"docs":{},"c":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}},")":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}}},"l":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}},")":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},")":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}}},"q":{"docs":{},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}}}}},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}}}}}}},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186}}}},"+":{"docs":{},"+":{"docs":{},"l":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008}}}}},"l":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.013953488372093023},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.02702702702702703}},"h":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}},"_":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}},")":{"3":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}},"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}},"a":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"l":{"docs":{},")":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285}}}},"r":{"docs":{},")":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}},"o":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}},".":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}},"n":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},"b":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}},"r":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"x":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}}}},"e":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}},"s":{"docs":{},")":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"f":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.017543859649122806},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}},")":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}},"w":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.023622047244094488}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}},".":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},")":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}}}}},"t":{"docs":{},"n":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"_":{"docs":{},"p":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}},")":{"docs":{"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}},"f":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827}}}}}}},"d":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505}}}}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}},"b":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},"g":{"docs":{},"n":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.01485148514851485},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"s":{"docs":{},"[":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"]":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}}}}}}}},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"1":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"2":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"docs":{}}}},"1":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"1":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"2":{"docs":{},"]":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}},"docs":{}}}},"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863}}}}}}},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}}}}}}}}},"o":{"docs":{},"k":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}},")":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}},"d":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311}}}}}}}}}},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"]":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}}}}}}},"s":{"docs":{},"t":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.01818181818181818},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745}}}}}}},"p":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}},"v":{"docs":{},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}},")":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}}}}}}}}}}},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"]":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}}}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}},"g":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414}},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"y":{"docs":{},"]":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}}},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"[":{"docs":{},"r":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.010869565217391304}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"s":{"docs":{},"t":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}}}}}}}}},"x":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},"k":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0273972602739726},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.03614457831325301}}},"x":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.04597701149425287},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015503875968992248},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.028985507246376812},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}},",":{"docs":{},"n":{"docs":{},")":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":5}}}}}},"'":{"0":{"docs":{},"'":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"docs":{}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"_":{"docs":{},"o":{"docs":{},"d":{"docs":{},"d":{"docs":{},")":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}}}}}}}}},"i":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315}},",":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044}},")":{"docs":{"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"0":{"0":{"0":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}},"(":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"docs":{}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}}}},"n":{"docs":{},"x":{"docs":{"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},"*":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}},"docs":{}}}}}}},")":{"docs":{},":":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}},"*":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.1206896551724138},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.12041884816753927},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.10857142857142857},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.07920792079207921},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.12883435582822086},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.1450381679389313},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.1016949152542373},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.09090909090909091},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.12162162162162163},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.14615384615384616},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.09166666666666666},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.07936507936507936},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.038461538461538464},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.05714285714285714},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.047619047619047616},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.05263157894736842},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.036585365853658534},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.02577319587628866},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.056818181818181816},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.032},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.03361344537815126},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.07547169811320754},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.056338028169014086},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.047619047619047616},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.06},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.1206896551724138},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.03529411764705882},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.03636363636363636},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.037037037037037035},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.04838709677419355},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.10344827586206896},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.06060606060606061},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.13471502590673576},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.09333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.4482758620689655},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.15126050420168066},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.16296296296296298},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.038834951456310676},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.08235294117647059},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0410958904109589},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.05405405405405406},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.14583333333333334},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.043478260869565216},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.05154639175257732},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.05917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.045454545454545456},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.136986301369863},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.06306306306306306},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.07665505226480836},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.07589285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.08641975308641975},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0821917808219178},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.13846153846153847},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.07228915662650602},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.1111111111111111},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.03278688524590164},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.3644067796610169},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.1301775147928994},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.0880503144654088},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.125},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.12121212121212122},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.13333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.14049586776859505},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.14049586776859505},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.14018691588785046},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.06382978723404255},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.12987012987012986},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.14864864864864866},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.15217391304347827},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.06481481481481481},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.07954545454545454},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.10569105691056911},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.1388888888888889},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.09876543209876543},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.08661417322834646},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.07792207792207792},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.125},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.026490066225165563},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.05128205128205128},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.05333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.039735099337748346},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.03139013452914798},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.06875},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.1267605633802817},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.09178743961352658},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.20089285714285715},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.07142857142857142},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.08522727272727272},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.09876543209876543},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.125},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0392156862745098},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.1282051282051282},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.05454545454545454},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.13829787234042554},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.16167664670658682},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.08247422680412371},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.13829787234042554},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.1125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.1506849315068493},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.04597701149425287},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.045454545454545456},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.1134020618556701},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.13725490196078433},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.0851063829787234},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.12568306010928962},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.12295081967213115},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.1134020618556701},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.11864406779661017},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.09574468085106383},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.1386861313868613},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.08896797153024912},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.1256544502617801},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.11206896551724138},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.10833333333333334},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.09352517985611511},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.11702127659574468},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.18861209964412812},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.09836065573770492},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.02654867256637168},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.050724637681159424},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.13278008298755187},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.12121212121212122},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.03508771929824561},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.10227272727272728},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.031496062992125984},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.041916167664670656},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.1095890410958904},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.09655172413793103},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.12295081967213115},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.11428571428571428},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.13114754098360656},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.1322314049586777},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.11188811188811189},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.09649122807017543},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.11475409836065574},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.08},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.05813953488372093},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.10738255033557047},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.15034965034965034},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.12260536398467432},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.06930693069306931},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.09876543209876543},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.10909090909090909},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.07692307692307693},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.1079136690647482},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.0975609756097561},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.1417910447761194},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.10989010989010989},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.08470588235294117},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.09090909090909091},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.09157509157509157},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.034782608695652174},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0875},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.11382113821138211},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.06766917293233082},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.10948905109489052},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.10810810810810811},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.046012269938650305},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.06748466257668712},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.11428571428571428},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.017857142857142856},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.030612244897959183},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.09022556390977443},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.038461538461538464},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.037037037037037035},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.03773584905660377},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.046153846153846156},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.05263157894736842},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.047619047619047616},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.09444444444444444},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.07741935483870968},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.09022556390977443},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.10852713178294573},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.08695652173913043},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.16326530612244897},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.15337423312883436},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.021897810218978103},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.04310344827586207},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.09142857142857143},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.043478260869565216},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.07303370786516854},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.07106598984771574},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.15447154471544716},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.15730337078651685},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.08187134502923976},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.05517241379310345},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.035398230088495575},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.04716981132075472},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.08764940239043825},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.05},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.03333333333333333},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.05},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.11333333333333333},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0759493670886076},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.10309278350515463},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.09917355371900827},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.17412935323383086},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.1270718232044199},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.05357142857142857},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.05181347150259067},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.06435643564356436},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.10434782608695652},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.08053691275167785},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.08029197080291971},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.1111111111111111},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.08558558558558559},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.10309278350515463},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.15639810426540285},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.032},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.02666666666666667},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.04487179487179487},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.09615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.018867924528301886},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.04697986577181208},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.06060606060606061},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.028985507246376812},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.05982905982905983},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.06172839506172839},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.018604651162790697},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.039735099337748346},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.051470588235294115},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.07462686567164178},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.05263157894736842},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.05434782608695652},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.04716981132075472},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.038461538461538464},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.06578947368421052},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.04504504504504504},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.14615384615384616},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.048484848484848485},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0784313725490196},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.12},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.08},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.06944444444444445},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.050505050505050504},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.04395604395604396},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.1897810218978102},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.08045977011494253},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.08139534883720931},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.05319148936170213},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.06015037593984962},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.11904761904761904},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.058823529411764705},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.04040404040404041},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.09411764705882353},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.08108108108108109},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.06711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.024390243902439025},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.058823529411764705},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.03389830508474576},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.06637168141592921},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.041666666666666664},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.09722222222222222}},"/":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.024390243902439025},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0234375},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.020202020202020204},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.017543859649122806},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.02040816326530612},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.017142857142857144},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.0189873417721519},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.020618556701030927},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.02},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.022988505747126436},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.023255813953488372},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.022123893805309734},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.027777777777777776}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"2":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"q":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"q":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},")":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}},")":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}},"*":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}},"*":{"docs":{"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}},"*":{"docs":{},"*":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}}},"a":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644}}}},",":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644}}}},"i":{"docs":{},"t":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}}},",":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},"c":{"docs":{},"*":{"docs":{},"*":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}},"o":{"docs":{},"l":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992}}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"s":{"docs":{},"[":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}},"a":{"docs":{},",":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}},"b":{"docs":{},")":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}},")":{"docs":{"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}},"=":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"+":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.0603448275862069},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.03664921465968586},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.017142857142857144},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.031746031746031744},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0234375},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.024},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.025210084033613446},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.02577319587628866},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.010452961672473868},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.030303030303030304},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.023668639053254437},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.018867924528301886},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.025},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.022727272727272728},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.025},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.024793388429752067},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.024793388429752067},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.0425531914893617},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.025974025974025976},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.021739130434782608},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.037037037037037035},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.056818181818181816},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.04065040650406504},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.05555555555555555},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.03225806451612903},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.03827751196172249},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0425531914893617},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.015748031496062992},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.07142857142857142},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.046357615894039736},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.026490066225165563},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.026905829596412557},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.05625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.04225352112676056},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.022727272727272728},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.0411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.04597701149425287},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.042735042735042736},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.031914893617021274},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.047244094488188976},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.017964071856287425},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.030927835051546393},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.025},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0273972602739726},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.030927835051546393},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0392156862745098},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.02185792349726776},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.04918032786885246},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.010638297872340425},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.08540925266903915},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.031413612565445025},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.02702702702702703},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.020134228187919462},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.04597701149425287},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.02197802197802198},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.023529411764705882},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.011857707509881422},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.029304029304029304},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.025},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.060240963855421686},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.027777777777777776},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.05426356589147287},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.06763285024154589},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.03680981595092025},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.024390243902439025},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.020833333333333332},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.04739336492890995},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.019230769230769232},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.02830188679245283},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.015384615384615385},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.04242424242424243},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.030303030303030304},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.030927835051546393},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.029411764705882353},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.04697986577181208},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}},"+":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"]":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061}}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"_":{"docs":{},"p":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105}}}}}}}},"t":{"docs":{},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}},"]":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"t":{"docs":{},";":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}}}}},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},";":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}}}}},"l":{"docs":{},";":{"docs":{"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.022988505747126436}}}}}}},"e":{"docs":{},"n":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},";":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}}}}},"a":{"docs":{},";":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}},"b":{"docs":{},";":{"docs":{"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}}}},"i":{"docs":{},";":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931}}},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},";":{"docs":{"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}},"g":{"docs":{},"[":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}}}}}},"t":{"docs":{},";":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}},"d":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745}}}}},"j":{"docs":{},";":{"docs":{"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218}}}}}},"x":{"docs":{},";":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}}},"k":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}},"w":{"docs":{},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}},";":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},"s":{"docs":{},"[":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"]":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203}}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993}}}}}},"l":{"docs":{},"t":{"docs":{},"a":{"docs":{},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},";":{"docs":{"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},";":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"s":{"docs":{},"[":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"[":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}}}}}}}}},"=":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.028169014084507043},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.029850746268656716},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"*":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}},"(":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}},"+":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}}}}},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},"/":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.017142857142857144},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.0945945945945946}},".":{"docs":{},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.028985507246376812},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.011111111111111112}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.022321428571428572},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.023255813953488372}}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},".":{"docs":{},".":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},".":{"docs":{},".":{"docs":{},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},".":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}}}}}}}}}}},"*":{"docs":{},"c":{"docs":{},"*":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}}},"/":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.040740740740740744},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.03202846975088968},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007058823529411765},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.011857707509881422},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.02247191011235955},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.030927835051546393}},"*":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}},"*":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.024390243902439025},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0234375},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.020202020202020204},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.009852216748768473},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.015151515151515152},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.016666666666666666},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.01652892561983471},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.018691588785046728},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.02127659574468085},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.027777777777777776},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.017543859649122806},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.012195121951219513},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0125},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015503875968992248},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.02040816326530612},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.020618556701030927},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.02},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.014598540145985401},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.022988505747126436},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.023255813953488372},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.027777777777777776}}}},"/":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.022857142857142857},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.016666666666666666},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.025423728813559324},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.026595744680851064},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.03825136612021858},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.04564315352697095},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.041666666666666664},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.07386363636363637},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.027472527472527472},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.015337423312883436},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.056179775280898875},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.013392857142857142},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.041237113402061855},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.024390243902439025},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.022598870056497175},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.035398230088495575},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}},"\\":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145}}},"_":{"docs":{},"_":{"docs":{},"\\":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145}}}}},":":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}},"=":{"docs":{"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.022727272727272728},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0136986301369863},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.020618556701030927},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.03409090909090909},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.032520325203252036},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.03225806451612903},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.02666666666666667},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.026490066225165563},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.02127659574468085},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.02185792349726776},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.016597510373443983},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.015151515151515152},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.022727272727272728},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.018867924528301886},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.029850746268656716},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.02702702702702703},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.02912621359223301},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},"=":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.08620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.06282722513089005},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.06285714285714286},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.06930693069306931},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.024539877300613498},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.04580152671755725},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.07627118644067797},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.07792207792207792},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.08333333333333333},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.033783783783783786},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.06153846153846154},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.05},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.031746031746031744},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.07692307692307693},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.07142857142857142},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.08333333333333333},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.07894736842105263},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.11290322580645161},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.036585365853658534},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.06701030927835051},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.045454545454545456},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.04201680672268908},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.07547169811320754},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.056338028169014086},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.07142857142857142},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.06},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.034482758620689655},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.047058823529411764},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.05454545454545454},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.037037037037037035},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.06451612903225806},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.04310344827586207},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.030303030303030304},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.11398963730569948},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.05333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.014778325123152709},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.04201680672268908},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.022222222222222223},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.02912621359223301},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.03529411764705882},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.05405405405405406},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.034782608695652174},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.061855670103092786},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.05917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.03636363636363636},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.03424657534246575},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.07731958762886598},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0821917808219178},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.16842105263157894},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.0851063829787234},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.06306306306306306},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.03832752613240418},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.026785714285714284},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.06172839506172839},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0684931506849315},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.015384615384615385},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.04819277108433735},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.08333333333333333},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.041666666666666664},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.06557377049180328},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.025423728813559324},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.07100591715976332},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.03773584905660377},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.03333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.030303030303030304},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.03333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.03305785123966942},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.03305785123966942},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.028037383177570093},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.0425531914893617},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.05194805194805195},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.04054054054054054},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.03260869565217391},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.027777777777777776},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.056818181818181816},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.04878048780487805},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.018518518518518517},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.037037037037037035},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.04838709677419355},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.0430622009569378},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.07801418439716312},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.031496062992125984},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.032467532467532464},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.028846153846153848},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.059602649006622516},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.0641025641025641},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.09333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.07947019867549669},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.053811659192825115},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.03125},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.04225352112676056},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.01932367149758454},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.022321428571428572},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.05952380952380952},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.028409090909090908},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.07407407407407407},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.041666666666666664},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.05747126436781609},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.029411764705882353},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.03418803418803419},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.045454545454545456},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.0425531914893617},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.05511811023622047},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.029940119760479042},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.030927835051546393},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.05319148936170213},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0625},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0410958904109589},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.08045977011494253},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.04477611940298507},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.06818181818181818},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.030927835051546393},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0392156862745098},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.0851063829787234},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.0273224043715847},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.04918032786885246},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.030927835051546393},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.0423728813559322},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.047872340425531915},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.029197080291970802},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.05338078291814947},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.03664921465968586},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.04054054054054054},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.03333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.02158273381294964},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0425531914893617},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.028469750889679714},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.03278688524590164},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.07079646017699115},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.03734439834024896},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.041666666666666664},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.07017543859649122},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.03409090909090909},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.07874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.08383233532934131},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.027586206896551724},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.04285714285714286},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.02185792349726776},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.017543859649122806},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.05142857142857143},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.020134228187919462},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.038461538461538464},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.02681992337164751},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.030303030303030304},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.03597122302158273},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.04878048780487805},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.014925373134328358},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.02197802197802198},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.047058823529411764},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.043478260869565216},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.04395604395604396},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.043478260869565216},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.05625},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.022556390977443608},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.05474452554744526},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.06756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.08588957055214724},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.02857142857142857},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.07738095238095238},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.06315789473684211},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.07142857142857142},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.05263157894736842},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.07692307692307693},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.05555555555555555},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.05660377358490566},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.046153846153846156},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.06},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.12631578947368421},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.0963855421686747},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.07936507936507936},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.05747126436781609},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.06111111111111111},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.03225806451612903},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.03007518796992481},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.03875968992248062},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.03864734299516908},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.11009174311926606},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.04081632653061224},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.03125},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.043795620437956206},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.017241379310344827},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.04},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.043478260869565216},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.028089887640449437},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.04054054054054054},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.05583756345177665},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.037037037037037035},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.04065040650406504},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.031746031746031744},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.033707865168539325},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.023391812865497075},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.05517241379310345},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.07079646017699115},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.04716981132075472},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.034722222222222224},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.05},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.06666666666666667},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.03164556962025317},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.07216494845360824},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.05785123966942149},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.05472636815920398},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.07734806629834254},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.11160714285714286},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.09844559585492228},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.07425742574257425},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.06956521739130435},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.08053691275167785},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.08759124087591241},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.06666666666666667},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.07207207207207207},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.041237113402061855},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.04739336492890995},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.072},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.05333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.05405405405405406},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.07},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.04487179487179487},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.028846153846153848},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.05660377358490566},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.06040268456375839},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.042735042735042736},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.037037037037037035},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.023255813953488372},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.046357615894039736},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.058823529411764705},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.04477611940298507},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.031578947368421054},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.036036036036036036},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.015384615384615385},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.06756756756756757},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.04242424242424243},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0392156862745098},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.03},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.06},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.05555555555555555},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.04395604395604396},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.029197080291970802},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.034482758620689655},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.05813953488372093},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.0425531914893617},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.06796116504854369},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.03007518796992481},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.06862745098039216},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.040268456375838924},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.07352941176470588},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.04519774011299435},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.05309734513274336},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.05555555555555555},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.08108108108108109},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.06944444444444445}},">":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.010471204188481676},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.02027027027027027},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.018518518518518517},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.02577319587628866},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.013937282229965157},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.017857142857142856},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.06862745098039216},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.020618556701030927},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.028469750889679714},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.013986013986013986},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01593625498007968},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"=":{"docs":{"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.024},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0273972602739726},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.010452961672473868},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.027777777777777776},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.014184397163120567},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.02242152466367713},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.024154589371980676},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.029411764705882353},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.023622047244094488},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.022988505747126436},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.03608247422680412},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.025423728813559324},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.0425531914893617},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0364963503649635},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.010869565217391304},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.015337423312883436},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.023809523809523808},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.029197080291970802},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.03932584269662921},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.015228426395939087},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.03773584905660377},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.034722222222222224},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.03164556962025317},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.03205128205128205},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.028846153846153848},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0330188679245283},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.02564102564102564},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.012345679012345678},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.05116279069767442},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.024193548387096774},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.021052631578947368},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.022556390977443608},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.024509803921568627},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.020202020202020204},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.020833333333333332}}}},"@":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.02564102564102564},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.04},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.023529411764705882},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.01764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.022727272727272728},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.025},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.01652892561983471},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.018691588785046728},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.02127659574468085},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.028846153846153848},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.03076923076923077},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.03333333333333333},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.02},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.016129032258064516},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.030303030303030304},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.027777777777777776}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}}}}}}},"f":{"2":{"docs":{},"e":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.03333333333333333}}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.034482758620689655},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.021739130434782608},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.029850746268656716},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749}},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.015384615384615385},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.011834319526627219},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.02459016393442623},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":3.3619047619047615},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.027624309392265192},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282}},"w":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886}}}}}}},"n":{"docs":{},"d":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":3.346491228070175},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":2.5078125},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":2.5071942446043165},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":2.5096153846153846},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":2.0185185185185186},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":3.3488372093023253},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":5.013513513513513}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}}}}}}}}},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}},"y":{"docs":{},")":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}}}}}}}}},"_":{"docs":{},"p":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}},"q":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145}},",":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},",":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044}}}}}}}}}}}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"b":{"docs":{},"a":{"docs":{},"d":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}}}}}}}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405}}}}},"a":{"docs":{},"l":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}}}}},"t":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872}}},"v":{"docs":{},"e":{"docs":{"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":5.020618556701031}}}},"l":{"docs":{},"l":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.011538461538461539},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838}}},"u":{"docs":{},"l":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}}}}}},"u":{"docs":{},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"i":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.014354066985645933}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.024390243902439025},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},"e":{"docs":{},";":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.019230769230769232},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.0036231884057971015},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.02054794520547945},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.011428571428571429},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.017857142857142856},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.016853932584269662},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.022222222222222223},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.02830188679245283},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.020833333333333332},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.020618556701030927},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}},")":{"docs":{},")":{"docs":{},";":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}}}},";":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101}}}},"}":{"docs":{},")":{"docs":{},";":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}}},"c":{"docs":{},"e":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"_":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"s":{"docs":{},"t":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.017857142857142856},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.02072538860103627},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.041237113402061855},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.02843601895734597}},")":{"docs":{"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815}}}}}}}}}}}}}}},"r":{"docs":{},"m":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984}},"a":{"docs":{},"t":{"docs":{},":":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}}}},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"(":{"1":{"2":{"8":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904}}}},",":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}}}},"docs":{}},"docs":{}},"2":{"6":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}},"docs":{}},"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}},"s":{"2":{"docs":{},")":{"docs":{},")":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}},"docs":{}}},"[":{"2":{"5":{"docs":{},"]":{"docs":{},";":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}},"docs":{}},"docs":{},"s":{"docs":{},"[":{"docs":{},"l":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904}}}}}},"i":{"docs":{},"]":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}},")":{"docs":{},";":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}}},"_":{"docs":{},"p":{"docs":{},"(":{"1":{"2":{"8":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105}}}}},"docs":{}},"docs":{}},"docs":{}}},"s":{"docs":{},"(":{"1":{"2":{"8":{"docs":{},")":{"docs":{},",":{"docs":{"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}}}}},"docs":{}},"docs":{}},"docs":{}}},"t":{"docs":{},"(":{"1":{"2":{"8":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516}}}}},"docs":{}},"docs":{}},"docs":{}}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}}}}}},")":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358}}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}},"o":{"docs":{},"g":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":5.004484304932736}}},"n":{"docs":{},"t":{"docs":{"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":2.00355871886121},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":2.5054644808743167},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":2.008771929824561},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":3.3390151515151514},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":3.3412073490813645}},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403}}}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":2.5273972602739727}}}},"i":{"docs":{},"p":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":1.2634228187919463}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}}}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.013245033112582781}}}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315}}}}}},",":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":5.009803921568627}},"e":{"docs":{},"/":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745}}}}}}},";":{"docs":{"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}},"(":{"2":{"6":{"docs":{},")":{"docs":{},";":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}},"docs":{}},"docs":{}}},"n":{"1":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}},"2":{"docs":{"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.01639344262295082}}},"3":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}},")":{"docs":{"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.015267175572519083},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.016666666666666666},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.02857142857142857},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.023809523809523808},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.022727272727272728},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.024},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.025210084033613446},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.03773584905660377},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.028169014084507043},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.034482758620689655},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.04},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":2.541095890410959},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0136986301369863},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.024691358024691357},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.024096385542168676},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.01694915254237288},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.012578616352201259},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.016666666666666666},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.022727272727272728},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018518518518518517},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.023622047244094488},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.019867549668874173},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.02564102564102564},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.02666666666666667},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.019867549668874173},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0125},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.028409090909090908},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.025},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.010309278350515464},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.010676156583629894},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.02185792349726776},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.02074688796680498},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.01893939393939394},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.022727272727272728},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.014285714285714285},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.01411764705882353},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.02040816326530612},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.019230769230769232},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.037037037037037035},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.03773584905660377},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.03076923076923077},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.04},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.03614457831325301},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.023255813953488372},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.027522935779816515},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.02040816326530612},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.02030456852791878},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.03529411764705882},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.024390243902439025},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.02247191011235955},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.020689655172413793},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01327433628318584},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.013333333333333334},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.014925373134328358},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.019230769230769232},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":5.03030303030303},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.029850746268656716},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.018018018018018018},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.04054054054054054},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0392156862745098},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.02},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.04},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.027777777777777776},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.019417475728155338},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.04054054054054054},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":1.4826254826254823},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.027777777777777776}},"u":{"docs":{},"m":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.022727272727272728},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.015544041450777202},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.026905829596412557},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.034482758620689655},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414}}}},"1":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414}}}},"docs":{},"i":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414}}},"j":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.02586206896551724},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.017142857142857144},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.023529411764706},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":3.387387387387387},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":3.395833333333333},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":2.0425531914893615},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":5.027027027027027},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":3.3507549361207896},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.024691358024691357},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.024096385542168676},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.01652892561983471},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.024793388429752067},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.018691588785046728},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.025974025974025976},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.02702702702702703},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":2.0434782608695654},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":1.6854166666666666},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.014084507042253521},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.029411764705882353},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.01048951048951049},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":2.5377358490566038},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.024096385542168676},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":3.37984496124031},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":5.01123595505618},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":5.031746031746032},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":5.023529411764706},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.018867924528301886},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":1.2768456375838926},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":2.5072463768115942},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.019867549668874173},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.015384615384615385},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.02},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":2.0303030303030303},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.01098901098901099},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.022556390977443608},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.023809523809523808},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":5.006711409395973},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":5.036585365853658},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":1.4555984555984554},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},",":{"docs":{"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365}}},"s":{"docs":{},",":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124}}},".":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}},"o":{"docs":{},"f":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728}}}}}}}}}}}}}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}}}}}}}},")":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},":":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}},"s":{"1":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}},":":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}},",":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}}},"2":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516}}}}}}}}}},":":{"docs":{"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}},")":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.010362694300518135}}}},"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}},",":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"[":{"0":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}},",":{"docs":{"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}},";":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}},"1":{"docs":{},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714}}}},"docs":{},"i":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"]":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}},",":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018518518518518517},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943}}},";":{"docs":{"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521}}},")":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},";":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}},")":{"docs":{},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}}}}}}}},"n":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}},"q":{"docs":{},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364}}}}}}}}}}}},"r":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016}},"]":{"docs":{"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.016},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}},")":{"docs":{"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02}}}}},"j":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}},"]":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}},",":{"docs":{"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.008403361344537815}}},"}":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}}},")":{"docs":{},";":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},";":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}}},"]":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}}},"s":{"docs":{},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},")":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334}}}}}}}}}}}}},"k":{"docs":{},"]":{"docs":{"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259}}}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}},"]":{"docs":{},";":{"docs":{"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182}}}}}}},"l":{"docs":{},"]":{"docs":{"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338}}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.012987012987012988},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.05555555555555555},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.013422818791946308},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.022727272727272728},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.008},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.01680672268907563},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.018867924528301886},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.018518518518518517},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.021739130434782608},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.018867924528301886},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.019417475728155338},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},")":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}},",":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385}}},";":{"docs":{"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385}}}},",":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.010309278350515464},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426}}},"_":{"docs":{},"c":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.021052631578947368},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904}}}},"r":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667}},",":{"docs":{"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}}}}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"2":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}}}}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009}}}}}}}}}}}}}}}}}},"]":{"docs":{},";":{"docs":{"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364}}}},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}}}}}}}}}}}}}},":":{"docs":{"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}},";":{"docs":{"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425}}}}}}}}}},"o":{"docs":{},"f":{"docs":{},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},";":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.012269938650306749},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},",":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}},")":{"docs":{},";":{"docs":{"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676}}}}}}}}}},")":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0273972602739726},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.012987012987012988},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.019230769230769232},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.023529411764705882},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.02702702702702703}},";":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289}}},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005}}},")":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}},",":{"docs":{"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}}}}},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.024}},"s":{"docs":{},".":{"docs":{"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391}}},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},",":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}}}}}}},"w":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.018518518518518517},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007058823529411765},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.008849557522123894},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.012121212121212121}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}},";":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}},"docs":{}}}}}}}}}}},"x":{"docs":{},"t":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":3.3488773747841103},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":2.513333333333333},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.022988505747126436},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.013513513513513514},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":5.007692307692308},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":3.3454545454545452}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}}},")":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}}}},"[":{"1":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.025906735751295335}}}},"2":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.025906735751295335}}}},"3":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.025906735751295335}}}},"4":{"docs":{},"]":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.025906735751295335}}}},"docs":{}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676}}}}}}}}}},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.013452914798206279}}},";":{"docs":{"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.014925373134328358}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.011111111111111112},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00796812749003984},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}},")":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}},"g":{"docs":{"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"a":{"docs":{},"t":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":2.0136986301369864}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"docs":{"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"i":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.02247191011235955},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":2.5382513661202184},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":2.54149377593361},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.037878787878788},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":3.361742424242424}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.03278688524590164},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.03734439834024896},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.03409090909090909},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.03977272727272727}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01639344262295082}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.00546448087431694}}}}}}}}}}}}}}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.004149377593360996},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}}},"k":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622}},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}},"a":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}},"m":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}},"_":{"2":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"[":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"]":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}},";":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}}}}},"docs":{}}}}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}},":":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}},"h":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},".":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}},"a":{"docs":{},"t":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.014598540145985401}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}}}}}}}}}}}}}},"n":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":3.343333333333333},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.037037037037037035},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.024691358024691357},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.05},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.02158273381294964},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.02631578947368421},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.017964071856287425},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.018292682926829267},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.02197802197802198},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007058823529411765},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":2.027027027027027},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":2.01840490797546},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.0245398773006134},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":2.5309278350515463},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":2.0248756218905473},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.025925925925925925},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.036036036036036036},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872}},".":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.011627906976744186},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},"s":{"docs":{},".":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669}}},",":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}}}},"*":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.03508771929824561},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.029940119760479042},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.046511627906976744},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.011111111111111112},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.013513513513513514},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}},"&":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617}}}},"(":{"docs":{},")":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009}}}}}}},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.02027027027027027},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.018018018018018018}}},")":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},":":{"docs":{"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757}}},",":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}},"w":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},".":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453}}}}}},")":{"docs":{},";":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}},";":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01}}}},"n":{"docs":{"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}},")":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}},";":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}},"t":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}},"h":{"docs":{"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":2.009950248756219}},"u":{"docs":{},"g":{"docs":{},"l":{"docs":{},"y":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.02702702702702703}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"u":{"docs":{},"g":{"docs":{},"l":{"docs":{},"y":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.037037037037037035},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.06896551724137931},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.028368794326241134},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.01948051948051948},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.019230769230769232},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.019867549668874173},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.02242152466367713},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.03125},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.017045454545454544},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.030303030303030304},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.021739130434782608},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.019867549668874173},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.021052631578947368},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.019230769230769232},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.02702702702702703},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872}}},";":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.015037593984962405}}},"x":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.030303030303030304},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}},",":{"docs":{"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}}},"y":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.030303030303030304},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.017094017094017096}},",":{"docs":{"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},"}":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}}},"^":{"2":{"docs":{},")":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}}}},"4":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}}},"8":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405}}},"9":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}},"docs":{}},":":{"docs":{"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941}}},"j":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622}}},"s":{"docs":{"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.008547008547008548},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694}},")":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.020833333333333332}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888}}}},"b":{"docs":{"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203}}}}}}}}}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},".":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},",":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}}}}}}}}}}}},"p":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888}},")":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}},",":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.013888888888888888}}}},"i":{"docs":{},"l":{"docs":{"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905}}}},"c":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176}}},"r":{"docs":{"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176}}},"!":{"docs":{},")":{"docs":{},",":{"docs":{"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.013157894736842105},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}}},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}}}}}},"w":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.008620689655172414},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.006756756756756757},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.016129032258064516},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.011904761904761904},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.022727272727272728},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.005681818181818182},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.018518518518518517},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.018867924528301886},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.006060606060606061},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.024390243902439025},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.01327433628318584},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"!":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}}}},"l":{"docs":{},"l":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":5.012345679012346}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":2.5273972602739727}}}}},"y":{"docs":{"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":1.6854166666666666},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":5.0144927536231885},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":3.3467261904761902},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":1.4826254826254823}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":3.365591397849462},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":3.348797250859106},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":3.367424242424242},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684}},".":{"docs":{"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.007633587786259542}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}},"e":{"docs":{},".":{"docs":{"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":2.0285714285714285},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"i":{"docs":{},"n":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.011363636363636364}}}}}},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":5.008474576271187}}}}}}}},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":2.5142857142857142}},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"v":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.0072992700729927005},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888}}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.02702702702702703}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},".":{"docs":{"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":2.508298755186722},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":2.007575757575758},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":3.343537414965986}},"/":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333}}}}},"o":{"docs":{},"o":{"docs":{},"d":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":5.016666666666667}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}}}}}}}}}}}}},"r":{"docs":{},"k":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}},".":{"docs":{"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064}}}},"d":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":5.024390243902439},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":3.349206349206349},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":5.033707865168539},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":3.350877192982456},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":5.0137931034482754},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":3.351032448377581},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":5.047169811320755},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":3.3402777777777777},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":5.047808764940239},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":3.383333333333333},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":3.3666666666666663},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":5.013333333333334},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":3.383966244725738},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.022556390977443608},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}},")":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588}}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01327433628318584},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405}}},".":{"docs":{"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}}}}}}}},":":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.025}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}},"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"]":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633}}}},".":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666}}}}}}}}}}}},";":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}}}}}}},":":{"docs":{"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.016666666666666666},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.012658227848101266},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588}}}}},"n":{"docs":{},"'":{"docs":{},"t":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}}}}},")":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}},",":{"docs":{"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}}}}}}}}},"{":{"0":{"docs":{},",":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.024691358024691357},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.024096385542168676},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.015151515151515152},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.013392857142857142},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.02},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.02358490566037736},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176}}}},"1":{"docs":{},",":{"docs":{"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.014150943396226415}}}},"2":{"docs":{},",":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.01282051282051282}}}},"3":{"docs":{},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714}}}},"7":{"docs":{},",":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428}}}},"docs":{"Prefix Sum and Subarray/Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Subarray Sum.html","tf":0.017241379310344827},"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.015706806282722512},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.02857142857142857},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.0297029702970297},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.018404907975460124},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","tf":0.015267175572519083},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Prefix Sum and Subarray/Contiguous Array.html":{"ref":"Prefix Sum and Subarray/Contiguous Array.html","tf":0.025974025974025976},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.08333333333333333},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.02702702702702703},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.023076923076923078},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.03333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.047619047619047616},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.038461538461538464},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.04285714285714286},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.047619047619047616},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.05263157894736842},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.06451612903225806},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.04878048780487805},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.06701030927835051},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.06818181818181818},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.056},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.05042016806722689},"Two Sum/3Sum Closest.html":{"ref":"Two Sum/3Sum Closest.html","tf":0.03773584905660377},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.056338028169014086},"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.047619047619047616},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.04},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.03529411764705882},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.05454545454545454},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.05555555555555555},"Element Partition/Intersection of Two Arrays II.html":{"ref":"Element Partition/Intersection of Two Arrays II.html","tf":0.03225806451612903},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.02586206896551724},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.08080808080808081},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.025906735751295335},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.04},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.014778325123152709},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.03361344537815126},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.025925925925925925},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.05825242718446602},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.03529411764705882},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0684931506849315},"Priority Queue/Ugly Number II.html":{"ref":"Priority Queue/Ugly Number II.html","tf":0.05405405405405406},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.041666666666666664},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.06956521739130435},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.061855670103092786},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.0650887573964497},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.09090909090909091},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0273972602739726},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.02577319587628866},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0684931506849315},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.021052631578947368},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.06382978723404255},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.05405405405405406},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.05226480836236934},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.026785714285714284},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.04938271604938271},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0410958904109589},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.015384615384615385},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.060240963855421686},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.05303030303030303},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.027777777777777776},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.04918032786885246},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.025423728813559324},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.03773584905660377},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.025},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.022727272727272728},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.025},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.024793388429752067},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.024793388429752067},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.037383177570093455},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.031914893617021274},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.05194805194805195},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.05405405405405406},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.03260869565217391},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.046296296296296294},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.03409090909090909},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.024390243902439025},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.027777777777777776},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.037037037037037035},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.04838709677419355},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.05172413793103448},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.07655502392344497},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.04964539007092199},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.03937007874015748},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.03896103896103896},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.04807692307692308},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.046357615894039736},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.0641025641025641},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.05333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.046357615894039736},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.053811659192825115},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.0375},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.043478260869565216},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.017857142857142856},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.03571428571428571},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.03409090909090909},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.037037037037037035},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.041666666666666664},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.034482758620689655},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.049019607843137254},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.017094017094017096},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.06363636363636363},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.02127659574468085},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.05511811023622047},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.030927835051546393},"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.02127659574468085},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0375},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0273972602739726},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.05747126436781609},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.1044776119402985},"String and Sequence Extremum/Decrease to be Palindrome.html":{"ref":"String and Sequence Extremum/Decrease to be Palindrome.html","tf":0.045454545454545456},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.020618556701030927},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0196078431372549},"String and Sequence Properties/Is Subsequence.html":{"ref":"String and Sequence Properties/Is Subsequence.html","tf":0.0425531914893617},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.02459016393442623},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.041237113402061855},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.02127659574468085},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.029197080291970802},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.017793594306049824},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.020942408376963352},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.02702702702702703},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.0603448275862069},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.05},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.06474820143884892},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.06382978723404255},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.03202846975088968},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.04918032786885246},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.07964601769911504},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.06884057971014493},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.03319502074688797},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.03409090909090909},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.06140350877192982},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.045454545454545456},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.07874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.059880239520958084},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0547945205479452},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.05517241379310345},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.05737704918032787},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.04285714285714286},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.0273224043715847},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.03305785123966942},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.04195804195804196},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.06140350877192982},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.04918032786885246},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.05142857142857143},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.06976744186046512},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.04697986577181208},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.045454545454545456},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.02681992337164751},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.06930693069306931},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.043209876543209874},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.030303030303030304},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.06593406593406594},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.03597122302158273},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.042682926829268296},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.041044776119402986},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.038461538461538464},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.02823529411764706},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.023715415019762844},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.02197802197802198},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.06956521739130435},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.0375},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.04878048780487805},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.05263157894736842},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.051094890510948905},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.06756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.0705521472392638},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.06748466257668712},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.04285714285714286},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.05952380952380952},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.06315789473684211},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.061224489795918366},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.03759398496240601},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.038461538461538464},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"ref":"Binary Search/Find Minimum in Rotated Sorted Array.html","tf":0.037037037037037035},"Binary Search/Maximum Number in Mountain Sequence.html":{"ref":"Binary Search/Maximum Number in Mountain Sequence.html","tf":0.03773584905660377},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.046153846153846156},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.08},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.031578947368421054},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.024096385542168676},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.06349206349206349},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.05747126436781609},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.05},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.04516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.03007518796992481},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.031007751937984496},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.01932367149758454},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.05504587155963303},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.02040816326530612},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.04294478527607362},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.07291666666666667},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.072992700729927},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.07758620689655173},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.06285714285714286},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.057971014492753624},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0449438202247191},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.08108108108108109},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.06598984771573604},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.047619047619047616},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.07246376811594203},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.07058823529411765},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.0962962962962963},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.04065040650406504},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.07936507936507936},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.0449438202247191},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.04678362573099415},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.05517241379310345},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.05752212389380531},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.09433962264150944},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.06944444444444445},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.0398406374501992},"Word Puzzle/Valid Word Square.html":{"ref":"Word Puzzle/Valid Word Square.html","tf":0.05},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.050724637681159424},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.06666666666666667},"Word Puzzle/Valid Word Abbreviation.html":{"ref":"Word Puzzle/Valid Word Abbreviation.html","tf":0.03333333333333333},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.02},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.04430379746835443},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.041237113402061855},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.049586776859504134},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.01990049751243781},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.016574585635359115},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.03571428571428571},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.06217616580310881},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.054455445544554455},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.043478260869565216},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.04697986577181208},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.058394160583941604},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.037037037037037035},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.03153153153153153},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.061855670103092786},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.037914691943127965},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.08},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.06666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.08108108108108109},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.06},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.07051282051282051},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.04807692307692308},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.08018867924528301},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.053691275167785234},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.06060606060606061},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.050724637681159424},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.05128205128205128},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.04938271604938271},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.08837209302325581},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.059602649006622516},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.051470588235294115},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.05970149253731343},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.05263157894736842},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.05434782608695652},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.05660377358490566},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.057692307692307696},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.056451612903225805},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.05263157894736842},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.05263157894736842},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.04504504504504504},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.038461538461538464},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.06756756756756757},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.06060606060606061},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.058823529411764705},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.06},"Interval Fundamental/Merge Intervals.html":{"ref":"Interval Fundamental/Merge Intervals.html","tf":0.04},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.05555555555555555},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.04040404040404041},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.07692307692307693},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.029197080291970802},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.05747126436781609},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.046511627906976744},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.06382978723404255},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.04854368932038835},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.07518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.047619047619047616},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.06862745098039216},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.06060606060606061},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.030927835051546393},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.03529411764705882},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.02702702702702703},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.04697986577181208},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.04878048780487805},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.029411764705882353},"Simulation Puzzle/Simplify Path.html":{"ref":"Simulation Puzzle/Simplify Path.html","tf":0.04878048780487805},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.07344632768361582},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.035398230088495575},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.04861111111111111},"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":0.05405405405405406},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.041666666666666664}},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}}}},"d":{"docs":{},"p":{"docs":{},"[":{"docs":{},"i":{"docs":{"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888}}}}}},"}":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.02586206896551724},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.025},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.02158273381294964},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.02054794520547945},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.020689655172413793},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.02142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.024793388429752067},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.02097902097902098},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.020134228187919462},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.011494252873563218},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.018518518518518517},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.01818181818181818},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.02158273381294964},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.018292682926829267},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.01411764705882353},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.011857707509881422},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.024390243902439025},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.022556390977443608},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.024793388429752067},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.014925373134328358},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.016574585635359115},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.013392857142857142},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.01485148514851485},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.02608695652173913},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.020134228187919462},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}},";":{"docs":{"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.020689655172413793}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862}}}}}}},"l":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"t":{"docs":{},"r":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}}}}}}}},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154}}}}}}},"i":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588}},"n":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{},",":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"b":{"docs":{},"g":{"docs":{},"n":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}},",":{"docs":{"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663}}}}}}}}}}},"\"":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},"(":{"docs":{},"\"":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}},"/":{"docs":{},"\"":{"docs":{},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}},"\"":{"docs":{},"}":{"docs":{},";":{"docs":{"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.015873015873015872}}}},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.041237113402061855}}}}},"'":{"2":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"3":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"4":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"5":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"6":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"7":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"8":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"9":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"docs":{},"a":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"d":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"g":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"j":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"m":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"p":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"t":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"w":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"c":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"i":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"l":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"v":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}},"x":{"docs":{},"'":{"docs":{},",":{"docs":{"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}}}},"{":{"1":{"docs":{},",":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},"docs":{},"}":{"docs":{},"}":{"docs":{},";":{"docs":{"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684}}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}}}}}}}}}}}}}}}},">":{"2":{"docs":{"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.029850746268656716}}},"3":{"docs":{"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.03482587064676617}}},"4":{"docs":{"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.014925373134328358}}},"5":{"docs":{"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.01990049751243781}}},"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.020942408376963352},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.015625},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015463917525773196},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.024},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.029411764705882353},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.011834319526627219},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.02727272727272727},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.02054794520547945},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.005154639175257732},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.028708133971291867},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.017937219730941704},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.033816425120772944},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.010869565217391304},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.017543859649122806},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.02097902097902098},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.022388059701492536},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.006134969325153374},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.013513513513513514},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.030456852791878174},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.022099447513812154},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.06666666666666667},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.04054054054054054},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.023255813953488372},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.015384615384615385},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.013513513513513514},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.024242424242424242},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.05405405405405406},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.026845637583892617},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"ref":"Simulation Puzzle/Sparse Matrix Multiplication.html","tf":0.014705882352941176}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.027624309392265192},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.03571428571428571},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.04145077720207254},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.019801980198019802},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.02608695652173913},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.03355704697986577},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.018518518518518517},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.018018018018018018},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.030927835051546393},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.023696682464454975}},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513}}}}}}},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}},")":{"docs":{"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.013392857142857142},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991}},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403}}}},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.01990049751243781},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.026785714285714284},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.03626943005181347},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.024752475247524754},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.020134228187919462},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.043795620437956206},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.037037037037037035},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.013513513513513514},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.020618556701030927},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.018957345971563982}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"[":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005}},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}},"&":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},";":{"docs":{"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}}}}}}}},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102}}}}}}}},"l":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0071174377224199285},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.002352941176470588},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.018404907975460124},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.012269938650306749},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749}}}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}}},";":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062}}},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}}}},"r":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.010676156583629894},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.011428571428571429}},")":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.009202453987730062},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749}}}},",":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203}}},";":{"docs":{"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.012269938650306749}}},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408}},")":{"docs":{"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.043859649122807015},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.006993006993006993},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.019157088122605363},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.008695652173913044},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.02027027027027027},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.015337423312883436},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.04504504504504504}},")":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.013513513513513514},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714}},";":{"docs":{"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016}}},")":{"docs":{},";":{"docs":{"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005}}}}},",":{"docs":{"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726}}},";":{"docs":{"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609}}}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},";":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},"]":{"docs":{},";":{"docs":{"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101}}}}}}}}},"y":{"docs":{},"m":{"docs":{},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}},"=":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.02577319587628866},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.030303030303030304},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.013245033112582781},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.033816425120772944},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.022222222222222223},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.02},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.04054054054054054},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.011764705882352941}}},">":{"docs":{"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403}},")":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403}},";":{"docs":{"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.008771929824561403}}}}}}}},"i":{"docs":{},"t":{"docs":{},"y":{"1":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"2":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}},"docs":{}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}},"b":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.015748031496062992}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}}}}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},";":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.01694915254237288}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"_":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.008849557522123894},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}},")":{"docs":{"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947}}},";":{"docs":{"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.005649717514124294}}}}}}}}}},"\"":{"docs":{"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}}}},"k":{"docs":{"Prefix Sum and Subarray/Submatrix Sum.html":{"ref":"Prefix Sum and Subarray/Submatrix Sum.html","tf":0.005235602094240838},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":2.5396039603960396},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":2.5061349693251533},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":1.6920903954802258},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":2.5384615384615383},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":2.0238095238095237},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.022727272727272728},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":3.342028985507246},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":2.0236686390532546},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":2.0273972602739727},"Greedy/Partition Labels.html":{"ref":"Greedy/Partition Labels.html","tf":0.010526315789473684},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":5.0212765957446805},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.022727272727272728},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.023923444976076555},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.026490066225165563},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.03139013452914798},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.058823529411764705},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":2.01840490797546},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":2.5288461538461537},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.01932367149758454},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.016260162601626018},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.02247191011235955},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":2.514851485148515},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":3.3413978494623655}},"e":{"docs":{},"y":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.005681818181818182},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":3.3611111111111107},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":3.347222222222222}},"/":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.013888888888888888}}}},";":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666}}}}}}}}}},")":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},",":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}},":":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.013888888888888888}}}},"e":{"docs":{},"p":{"docs":{"String and Sequence Extremum/Longest Palindromic Substring.html":{"ref":"String and Sequence Extremum/Longest Palindromic Substring.html","tf":0.010638297872340425}}}}},")":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.031746031746031744},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.023809523809523808},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.015463917525773196},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Post Office/Post Office Problem.html":{"ref":"Post Office/Post Office Problem.html","tf":0.013888888888888888},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.019138755980861243},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}},",":{"docs":{"Priority Queue/Super Ugly Number.html":{"ref":"Priority Queue/Super Ugly Number.html","tf":0.020833333333333332},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502}}},";":{"docs":{"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}}},")":{"docs":{},",":{"docs":{"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616}}}}},".":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.01694915254237288},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.016666666666666666},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556}}},"]":{"docs":{"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901}}},"`":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644}}}},",":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732}}},")":{"docs":{"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135}}}},"/":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282}}}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Element Partition/Partition Array.html":{"ref":"Element Partition/Partition Array.html","tf":0.02},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.0392156862745098},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.017699115044247787}}},",":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.038461538461538464},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.03225806451612903}}},"t":{"docs":{},"h":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":2.023529411764706},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":2.0097087378640777},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":1.672549019607843},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":2.5136986301369864},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941}}}}},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},">":{"docs":{},"&":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356}}}}}}}},"o":{"docs":{},"w":{"docs":{"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.007751937984496124},"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.04054054054054054}},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Simulation Puzzle/Find the Celebrity.html":{"ref":"Simulation Puzzle/Find the Celebrity.html","tf":0.013513513513513514}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":3.346153846153846}}}}}}},"^":{"2":{"docs":{"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.00980392156862745}}},"docs":{}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258}}}}}}}}}}}}}}},":":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.005714285714285714},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.012269938650306749},"Prefix Sum and Subarray/Maximum Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Subarray.html","tf":0.027777777777777776},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.013157894736842105},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.016129032258064516},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.015544041450777202},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.007407407407407408},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.009708737864077669},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0273972602739726},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.020618556701030927},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.005917159763313609},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0273972602739726},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.018018018018018018},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.013937282229965157},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.008928571428571428},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.022727272727272728},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.01775147928994083},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.009569377990430622},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.004464285714285714},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.029850746268656716},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.02586206896551724},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.025},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.02158273381294964},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.003787878787878788},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.02054794520547945},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.020689655172413793},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.02459016393442623},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.02142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.024793388429752067},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.027972027972027972},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.020134228187919462},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.011494252873563218},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.018518518518518517},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.01818181818181818},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.02158273381294964},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.018292682926829267},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.018823529411764704},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.019762845849802372},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.018315018315018316},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.024390243902439025},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.022556390977443608},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.010948905109489052},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.034482758620689655},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.011111111111111112},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.012903225806451613},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.04081632653061224},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.024539877300613498},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.04310344827586207},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.03428571428571429},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.02962962962962963},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.013793103448275862},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.017699115044247787},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.01195219123505976},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.014492753623188406},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.03333333333333333},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.024793388429752067},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.01990049751243781},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.016574585635359115},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.013392857142857142},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.01485148514851485},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.02608695652173913},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.020134228187919462},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.02},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.014492753623188406},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.019867549668874173},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.010526315789473684},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.02127659574468085},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.03759398496240601},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.0196078431372549},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.020134228187919462},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.02824858757062147},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},":":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.016260162601626018}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203}}}}}}}}},"}":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.022857142857142857},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.019801980198019802},"Prefix Sum and Subarray/Maximum Submatrix.html":{"ref":"Prefix Sum and Subarray/Maximum Submatrix.html","tf":0.013513513513513514},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.015384615384615385},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.041666666666666664},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.047619047619047616},"Sliding Window/Subarray Product Less than K.html":{"ref":"Sliding Window/Subarray Product Less than K.html","tf":0.01282051282051282},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.04285714285714286},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.047619047619047616},"Sliding Window/Find All Anagrams in a String.html":{"ref":"Sliding Window/Find All Anagrams in a String.html","tf":0.02631578947368421},"Sliding Window/Minimum Window Substring.html":{"ref":"Sliding Window/Minimum Window Substring.html","tf":0.03225806451612903},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.036585365853658534},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0703125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.061855670103092786},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.045454545454545456},"Two Sum/3Sum.html":{"ref":"Two Sum/3Sum.html","tf":0.048},"Two Sum/4Sum.html":{"ref":"Two Sum/4Sum.html","tf":0.04201680672268908},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.07042253521126761},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"ref":"Element Partition/Kth Smallest Number in Unsorted Array.html","tf":0.011764705882352941},"Element Partition/Remove Duplicates from Sorted Array.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array.html","tf":0.01818181818181818},"Element Partition/Remove Duplicates from Sorted Array II.html":{"ref":"Element Partition/Remove Duplicates from Sorted Array II.html","tf":0.018518518518518517},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.017241379310344827},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.0707070707070707},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.02072538860103627},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.04},"Monotonous Stack/Largest Rectangle in Histogram.html":{"ref":"Monotonous Stack/Largest Rectangle in Histogram.html","tf":0.0049261083743842365},"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.01680672268907563},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.022222222222222223},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.019417475728155338},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0547945205479452},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.043478260869565216},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.05154639175257732},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.047337278106508875},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.09090909090909091},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.02054794520547945},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0684931506849315},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Greedy/Minimum Number of Arrows to Burst Balloons.html","tf":0.02127659574468085},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.0313588850174216},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.007692307692307693},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","tf":0.01639344262295082},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.025423728813559324},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.029585798816568046},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.031446540880503145},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.03333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.030303030303030304},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.03333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.03305785123966942},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.03305785123966942},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.037383177570093455},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.05319148936170213},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.037037037037037035},"Matrix Chain Multiplication/Stone Game.html":{"ref":"Matrix Chain Multiplication/Stone Game.html","tf":0.011363636363636364},"Matrix Chain Multiplication/Stone Game II.html":{"ref":"Matrix Chain Multiplication/Stone Game II.html","tf":0.008130081300813009},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.009259259259259259},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"ref":"Matrix Chain Multiplication/Palindrome Partitioning III.html","tf":0.016129032258064516},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","tf":0.017241379310344827},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.03349282296650718},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.03546099290780142},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.031496062992125984},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.025974025974025976},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.038461538461538464},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.046357615894039736},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.05128205128205128},"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.039735099337748346},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.04932735426008968},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.03125},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.033816425120772944},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.008928571428571428},"Fibonacci Sequence/House Robber.html":{"ref":"Fibonacci Sequence/House Robber.html","tf":0.023809523809523808},"Fibonacci Sequence/House Robber II.html":{"ref":"Fibonacci Sequence/House Robber II.html","tf":0.022727272727272728},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.03292181069958848},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.011494252873563218},"Fibonacci Sequence/Paint Fence.html":{"ref":"Fibonacci Sequence/Paint Fence.html","tf":0.029411764705882353},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.06363636363636363},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.03937007874015748},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.04597701149425287},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.08955223880597014},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.030927835051546393},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.026595744680851064},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.014234875444839857},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.015706806282722512},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.04310344827586207},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.03333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.050359712230215826},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.0425531914893617},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.028469750889679714},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.03825136612021858},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.07079646017699115},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.06159420289855073},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.024896265560165973},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.026515151515151516},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.043859649122807015},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.03409090909090909},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.07086614173228346},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.04790419161676647},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0410958904109589},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.041379310344827586},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.040983606557377046},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.027972027972027972},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.043859649122807015},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.03278688524590164},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.03428571428571429},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.046511627906976744},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.03355704697986577},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.04195804195804196},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.019157088122605363},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.04950495049504951},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.030864197530864196},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.01818181818181818},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.04395604395604396},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.024390243902439025},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.03731343283582089},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.027472527472527472},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.01647058823529412},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.011857707509881422},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.05217391304347826},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.032520325203252036},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.045112781954887216},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.05474452554744526},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.060810810810810814},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.06748466257668712},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.05521472392638037},"Binary Search/First Bad Version.html":{"ref":"Binary Search/First Bad Version.html","tf":0.014285714285714285},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.06547619047619048},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.031578947368421054},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.05102040816326531},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.022556390977443608},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.04807692307692308},"Binary Search/Search in Rotated Sorted Array.html":{"ref":"Binary Search/Search in Rotated Sorted Array.html","tf":0.015384615384615385},"Binary Search/Search in Rotated Sorted Array II.html":{"ref":"Binary Search/Search in Rotated Sorted Array II.html","tf":0.02},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.06349206349206349},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.05747126436781609},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.044444444444444446},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.01935483870967742},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.022556390977443608},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.023255813953488372},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.028985507246376812},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.045871559633027525},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.024539877300613498},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.041666666666666664},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.06569343065693431},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.0603448275862069},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.06857142857142857},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.043478260869565216},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.028089887640449437},"Number Parsing/String to Integer.html":{"ref":"Number Parsing/String to Integer.html","tf":0.06756756756756757},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.06091370558375635},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.031746031746031744},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.057971014492753624},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.058823529411764705},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.06666666666666667},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.04878048780487805},"Word Puzzle/Word Break II.html":{"ref":"Word Puzzle/Word Break II.html","tf":0.047619047619047616},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.011235955056179775},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.029239766081871343},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.020689655172413793},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.035398230088495575},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.08490566037735849},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.04861111111111111},"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.027888446215139442},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.043478260869565216},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.05},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.02},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.03164556962025317},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.03305785123966942},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.014925373134328358},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.016574585635359115},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.03571428571428571},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.05181347150259067},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.04455445544554455},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.034782608695652174},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.03355704697986577},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.043795620437956206},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.02962962962962963},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.02702702702702703},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.041237113402061855},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.02843601895734597},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.064},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.02666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.036036036036036036},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.06},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.05128205128205128},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.019230769230769232},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.05188679245283019},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.043478260869565216},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.02564102564102564},"General DFS/Palindrome Partitioning.html":{"ref":"General DFS/Palindrome Partitioning.html","tf":0.024691358024691357},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.08837209302325581},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.052980132450331126},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.014705882352941176},"Combination DFS/Subsets.html":{"ref":"Combination DFS/Subsets.html","tf":0.014925373134328358},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.042105263157894736},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.05434782608695652},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.05660377358490566},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.057692307692307696},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.056451612903225805},"Combination DFS/Split String.html":{"ref":"Combination DFS/Split String.html","tf":0.031578947368421054},"Permutation DFS/Permutations.html":{"ref":"Permutation DFS/Permutations.html","tf":0.02631578947368421},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.04504504504504504},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078},"Permutation DFS/Previous Permutation With One Swap.html":{"ref":"Permutation DFS/Previous Permutation With One Swap.html","tf":0.02702702702702703},"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.03636363636363636},"Interval Fundamental/Meeting Rooms.html":{"ref":"Interval Fundamental/Meeting Rooms.html","tf":0.0196078431372549},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.05},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.027777777777777776},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.030303030303030304},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.054945054945054944},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.021897810218978103},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.04597701149425287},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.03488372093023256},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.05319148936170213},"Topological Sort/Sequence Reconstruction.html":{"ref":"Topological Sort/Sequence Reconstruction.html","tf":0.009708737864077669},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.07518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.023809523809523808},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.03431372549019608},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.050505050505050504},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.020618556701030927},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.029411764705882353},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.040268456375838924},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.036585365853658534},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.062146892655367235},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.030973451327433628},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.041666666666666664},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}},";":{"docs":{"Prefix Sum and Subarray/Subarray Sum Closest.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Closest.html","tf":0.011428571428571429},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Equals K.html","tf":0.009900990099009901},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"ref":"Prefix Sum and Subarray/Maximum Product Subarray.html","tf":0.007692307692307693},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"ref":"Prefix Sum and Subarray/Max Consecutive Ones III.html","tf":0.015873015873015872},"Sliding Window/Longest Substring without Repeating Characters.html":{"ref":"Sliding Window/Longest Substring without Repeating Characters.html","tf":0.014285714285714285},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"ref":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","tf":0.011904761904761904},"Sliding Window/Moving Average from Data Stream.html":{"ref":"Sliding Window/Moving Average from Data Stream.html","tf":0.012195121951219513},"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Sliding Window/Sliding Window Maximum.html":{"ref":"Sliding Window/Sliding Window Maximum.html","tf":0.011363636363636364},"Two Sum/3Sum Smaller.html":{"ref":"Two Sum/3Sum Smaller.html","tf":0.014084507042253521},"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Next Greater Element II.html":{"ref":"Monotonous Stack/Next Greater Element II.html","tf":0.013333333333333334},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"ref":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","tf":0.019417475728155338},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.011764705882352941},"Priority Queue/Kth Largest in N Arrays.html":{"ref":"Priority Queue/Kth Largest in N Arrays.html","tf":0.0136986301369863},"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Priority Queue/High Five.html":{"ref":"Priority Queue/High Five.html","tf":0.010309278350515464},"Priority Queue/Merge K Sorted Interval Lists.html":{"ref":"Priority Queue/Merge K Sorted Interval Lists.html","tf":0.01775147928994083},"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Flood and Fill/Walls and Gates.html":{"ref":"Flood and Fill/Walls and Gates.html","tf":0.012345679012345678},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Target Sum.html":{"ref":"Knapsack Problem/Target Sum.html","tf":0.009259259259259259},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"ref":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","tf":0.0070921985815602835},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282},"Jump Game/Jump Game V.html":{"ref":"Jump Game/Jump Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00411522633744856},"String and Sequence Extremum/One Edit Distance.html":{"ref":"String and Sequence Extremum/One Edit Distance.html","tf":0.00909090909090909},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"ref":"String and Sequence Extremum/Longest Consecutive Sequence.html","tf":0.011494252873563218},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.005235602094240838},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.013513513513513514},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.017241379310344827},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.016666666666666666},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.014388489208633094},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.02127659574468085},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.0035587188612099642},"Iterator/Flatten Nested List Iterator.html":{"ref":"Iterator/Flatten Nested List Iterator.html","tf":0.01092896174863388},"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.007246376811594203},"Iterator/Nested List Weight Sum.html":{"ref":"Iterator/Nested List Weight Sum.html","tf":0.008298755186721992},"Iterator/Nested List Weight Sum II.html":{"ref":"Iterator/Nested List Weight Sum II.html","tf":0.007575757575757576},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"ref":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","tf":0.017543859649122806},"Structure Conversion/Flatten Nested List.html":{"ref":"Structure Conversion/Flatten Nested List.html","tf":0.011363636363636364},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.007874015748031496},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.0136986301369863},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.013793103448275862},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.01092896174863388},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.01652892561983471},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.013986013986013986},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.017543859649122806},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.017142857142857144},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","tf":0.023255813953488372},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.013422818791946308},"Binary Tree/Recover Binary Search Tree.html":{"ref":"Binary Tree/Recover Binary Search Tree.html","tf":0.0034965034965034965},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.019801980198019802},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.012345679012345678},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.012121212121212121},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.02197802197802198},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.014388489208633094},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.009411764705882352},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.007905138339920948},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.007326007326007326},"Binary Tree/Maximum Subtree.html":{"ref":"Binary Tree/Maximum Subtree.html","tf":0.017391304347826087},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.01875},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.016260162601626018},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.015037593984962405},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0072992700729927005},"Binary Tree/Insert Node in Binary Search Tree.html":{"ref":"Binary Tree/Insert Node in Binary Search Tree.html","tf":0.006756756756756757},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.012269938650306749},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.009174311926605505},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.009433962264150943},"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"Word Puzzle/Group Anagrams.html":{"ref":"Word Puzzle/Group Anagrams.html","tf":0.016666666666666666},"Word Puzzle/Word Abbreviation.html":{"ref":"Word Puzzle/Word Abbreviation.html","tf":0.006666666666666667},"Word Puzzle/Unique Word Abbreviation.html":{"ref":"Word Puzzle/Unique Word Abbreviation.html","tf":0.006329113924050633},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.020618556701030927},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.01652892561983471},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.009950248756218905},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.008928571428571428},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.009900990099009901},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.013422818791946308},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.014598540145985401},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.007407407407407408},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.020618556701030927},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.018018018018018018},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"Combination DFS/Subsets II.html":{"ref":"Combination DFS/Subsets II.html","tf":0.010526315789473684},"Combination DFS/Combination Sum.html":{"ref":"Combination DFS/Combination Sum.html","tf":0.010869565217391304},"Combination DFS/Combination Sum II.html":{"ref":"Combination DFS/Combination Sum II.html","tf":0.009433962264150943},"Combination DFS/Combination Sum III.html":{"ref":"Combination DFS/Combination Sum III.html","tf":0.009615384615384616},"Combination DFS/K Sum II.html":{"ref":"Combination DFS/K Sum II.html","tf":0.008064516129032258},"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"ref":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","tf":0.02197802197802198},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"My Calendar/My Calendar II.html":{"ref":"My Calendar/My Calendar II.html","tf":0.011494252873563218},"My Calendar/My Calendar III.html":{"ref":"My Calendar/My Calendar III.html","tf":0.011627906976744186},"Topological Sort/Course Schedule.html":{"ref":"Topological Sort/Course Schedule.html","tf":0.010638297872340425},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.015873015873015872},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.00980392156862745},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154},"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513},"Data Structure Design/Trie.html":{"ref":"Data Structure Design/Trie.html","tf":0.011299435028248588},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947},"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444},"Reservoir Sampling/Random Pick Index.html":{"ref":"Reservoir Sampling/Random Pick Index.html","tf":0.013888888888888888}}},",":{"docs":{"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125}}},")":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464},"Simulation Puzzle/Roman to Integer.html":{"ref":"Simulation Puzzle/Roman to Integer.html","tf":0.0058823529411764705}}}},"%":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Greedy/Maximize Sum Of Array After K Negations.html":{"ref":"Greedy/Maximize Sum Of Array After K Negations.html","tf":0.0136986301369863},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Longest Palindrome.html":{"ref":"String and Sequence Extremum/Longest Palindrome.html","tf":0.014925373134328358},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.014492753623188406},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Number Parsing/Palindrome Number.html":{"ref":"Number Parsing/Palindrome Number.html","tf":0.015873015873015872},"Number Parsing/Add Digits.html":{"ref":"Number Parsing/Add Digits.html","tf":0.014492753623188406},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.030927835051546393},"Data Structure Design/Insert Delete GetRandom.html":{"ref":"Data Structure Design/Insert Delete GetRandom.html","tf":0.004424778761061947}},"=":{"docs":{"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"ref":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","tf":0.006134969325153374}}}},"`":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"ref":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","tf":0.00847457627118644}}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"]":{"docs":{},"`":{"docs":{},",":{"docs":{"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"ref":"Prefix Sum and Subarray/Continuous Subarray Sum.html","tf":0.008333333333333333}}}}}}}}}}}}},"?":{"docs":{"Sliding Window/Find Median from Data Stream.html":{"ref":"Sliding Window/Find Median from Data Stream.html","tf":0.0078125},"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.0051813471502590676},"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.003703703703703704},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.015463917525773196},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"ref":"Matrix Chain Multiplication/Unique Binary Search Trees.html","tf":0.012345679012345678},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.011904761904761904},"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.034482758620689655},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.007518796992481203},"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}},"!":{"docs":{},"=":{"docs":{"Sliding Window/Sliding Window Median.html":{"ref":"Sliding Window/Sliding Window Median.html","tf":0.005154639175257732},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"ref":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","tf":0.004784688995215311},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.006622516556291391},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.008968609865470852},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732},"Structure Conversion/Flatten 2D Vector.html":{"ref":"Structure Conversion/Flatten 2D Vector.html","tf":0.031496062992125984},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Search with STL or Map/Odd Even Jump.html":{"ref":"Binary Search with STL or Map/Odd Even Jump.html","tf":0.01834862385321101},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.028985507246376812},"Number Parsing/Happy Number.html":{"ref":"Number Parsing/Happy Number.html","tf":0.011764705882352941},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.014814814814814815},"Word Puzzle/Word Break.html":{"ref":"Word Puzzle/Word Break.html","tf":0.008130081300813009},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.005847953216374269},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Pattern.html":{"ref":"Word Puzzle/Word Pattern.html","tf":0.018867924528301886},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.010362694300518135},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"Interval Fundamental/Insert Interval.html":{"ref":"Interval Fundamental/Insert Interval.html","tf":0.013888888888888888},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.0072992700729927005},"Graph Theory Basics/Graph Valid Tree.html":{"ref":"Graph Theory Basics/Graph Valid Tree.html","tf":0.007936507936507936}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"[":{"docs":{},"d":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"Jump Game/Jump Game III.html":{"ref":"Jump Game/Jump Game III.html","tf":0.01282051282051282}}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{"Jump Game/Jump Game IV.html":{"ref":"Jump Game/Jump Game IV.html","tf":0.013333333333333334}}}}},"i":{"docs":{"Permutation DFS/Permutations II.html":{"ref":"Permutation DFS/Permutations II.html","tf":0.009009009009009009}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Binary Tree/Remove Node in Binary Search Tree.html":{"ref":"Binary Tree/Remove Node in Binary Search Tree.html","tf":0.003067484662576687}}}}}},"s":{"docs":{},"t":{"docs":{},"k":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154}}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":5.023809523809524},"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":3.337179487179487},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":1.2634228187919463}},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Element Partition/Move Zeros.html":{"ref":"Element Partition/Move Zeros.html","tf":0.023809523809523808},"Flood and Fill/Set Matrix Zeros.html":{"ref":"Flood and Fill/Set Matrix Zeros.html","tf":0.0038461538461538464}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4285714285714284}},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":5.008849557522124},"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":3.33695652173913},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.007462686567164179}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.02654867256637168}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"2":{"docs":{"Iterator/ZigZag Iterator II.html":{"ref":"Iterator/ZigZag Iterator II.html","tf":0.021739130434782608}}},"docs":{},"(":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"&":{"docs":{"Iterator/ZigZag Iterator.html":{"ref":"Iterator/ZigZag Iterator.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"*":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"g":{"docs":{"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":1.4285714285714284}}}}},"\"":{"0":{"0":{"0":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}}}},"docs":{}},"docs":{}},"docs":{},"\"":{"docs":{},";":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}},"1":{"2":{"3":{"4":{"5":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Simulation Puzzle/Missing Ranges.html":{"ref":"Simulation Puzzle/Missing Ranges.html","tf":0.010101010101010102}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"\"":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}},"i":{"docs":{},"e":{"docs":{},"\"":{"docs":{},";":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}}}}}},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"\"":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.008620689655172414}}}}}}},"\"":{"docs":{},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Topological Sort/Alien Dictionary.html":{"ref":"Topological Sort/Alien Dictionary.html","tf":0.015037593984962405}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}}}}}},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{},".":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}}},"\"":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"b":{"docs":{},"o":{"docs":{},"b":{"docs":{},"\"":{"docs":{},";":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}}}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}}},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"#":{"docs":{},"\"":{"docs":{},")":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}},",":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666},"Expression Parsing/Evaluate Infix Expression.html":{"ref":"Expression Parsing/Evaluate Infix Expression.html","tf":0.008620689655172414},"Expression Parsing/Expression Tree Construction.html":{"ref":"Expression Parsing/Expression Tree Construction.html","tf":0.005714285714285714}},"\"":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099}}}},"(":{"docs":{},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.012269938650306749},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.010416666666666666}}}},")":{"docs":{},"\"":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}}}},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","tf":0.020833333333333332}}}}},"*":{"docs":{},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"+":{"docs":{},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"/":{"docs":{},"\"":{"docs":{},")":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},".":{"docs":{},"\"":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"\"":{"docs":{},")":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.005076142131979695}}},";":{"docs":{"Number Parsing/Binary Representation.html":{"ref":"Number Parsing/Binary Representation.html","tf":0.01015228426395939}}}}}}}}},"i":{"docs":{},"p":{"docs":{},"v":{"4":{"docs":{},"\"":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"6":{"docs":{},"\"":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408}}}},"docs":{}}},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}},"v":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}},"x":{"docs":{},"\"":{"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},";":{"docs":{"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.022222222222222223}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"\"":{"docs":{},".":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}}},"e":{"docs":{},"\"":{"docs":{"Word Puzzle/Word Squares.html":{"ref":"Word Puzzle/Word Squares.html","tf":0.00398406374501992}}}},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"j":{"docs":{},"f":{"docs":{},"k":{"docs":{},"\"":{"docs":{},",":{"docs":{"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391}}}}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}},"m":{"docs":{},"\"":{"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}},"m":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"m":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"m":{"docs":{},"\"":{"docs":{},"}":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}},"v":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"i":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"c":{"docs":{},"\"":{"docs":{},"}":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}},"x":{"docs":{},"\"":{"docs":{},",":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.010309278350515464}}}}}}}},"|":{"docs":{"Element Partition/Sort Colors.html":{"ref":"Element Partition/Sort Colors.html","tf":0.017241379310344827},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.018867924528301886},"Knapsack Problem/Backpack I.html":{"ref":"Knapsack Problem/Backpack I.html","tf":0.008333333333333333},"Knapsack Problem/Backpack II.html":{"ref":"Knapsack Problem/Backpack II.html","tf":0.007575757575757576},"Knapsack Problem/Backpack III.html":{"ref":"Knapsack Problem/Backpack III.html","tf":0.008333333333333333},"Knapsack Problem/Backpack IV.html":{"ref":"Knapsack Problem/Backpack IV.html","tf":0.008264462809917356},"Knapsack Problem/Backpack V.html":{"ref":"Knapsack Problem/Backpack V.html","tf":0.008264462809917356},"Knapsack Problem/Backpack VI.html":{"ref":"Knapsack Problem/Backpack VI.html","tf":0.009345794392523364},"Knapsack Problem/K Sum.html":{"ref":"Knapsack Problem/K Sum.html","tf":0.010638297872340425},"Knapsack Problem/Coin Change.html":{"ref":"Knapsack Problem/Coin Change.html","tf":0.012987012987012988},"Knapsack Problem/Coin Change II.html":{"ref":"Knapsack Problem/Coin Change II.html","tf":0.013513513513513514},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"ref":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","tf":0.010869565217391304},"Matrix Chain Multiplication/Burst Balloons.html":{"ref":"Matrix Chain Multiplication/Burst Balloons.html","tf":0.05555555555555555},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.015748031496062992},"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.01948051948051948},"Stone Game/Stone Game IV.html":{"ref":"Stone Game/Stone Game IV.html","tf":0.009615384615384616},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"ref":"Fibonacci Sequence/Min Cost Climbing Stairs.html","tf":0.028169014084507043},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.00823045267489712},"Fibonacci Sequence/4 Keys Keyboard.html":{"ref":"Fibonacci Sequence/4 Keys Keyboard.html","tf":0.041666666666666664},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.08045977011494253},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.042735042735042736},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.02127659574468085},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.015748031496062992},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.011976047904191617},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.020618556701030927},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"ref":"String and Sequence Extremum/Longest Increasing Subsequence.html","tf":0.0125},"String and Sequence Extremum/Longest Repeating Substring.html":{"ref":"String and Sequence Extremum/Longest Repeating Substring.html","tf":0.0136986301369863},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.041237113402061855},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.0392156862745098},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.01092896174863388},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.025423728813559324},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.047872340425531915},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0071174377224199285},"Game Theory/Coins in a Line III.html":{"ref":"Game Theory/Coins in a Line III.html","tf":0.010471204188481676},"Game Theory/Stones in a Line.html":{"ref":"Game Theory/Stones in a Line.html","tf":0.02702702702702703},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.011194029850746268},"Binary Approximation/Find the Duplicate Number.html":{"ref":"Binary Approximation/Find the Duplicate Number.html","tf":0.015503875968992248},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.011049723756906077},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.022222222222222223},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.02843601895734597},"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.007692307692307693},"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.06},"My Calendar/My Calendar I.html":{"ref":"My Calendar/My Calendar I.html","tf":0.058394160583941604}},"|":{"docs":{"Element Partition/Rotate String.html":{"ref":"Element Partition/Rotate String.html","tf":0.008620689655172414},"Flood and Fill/Pacific Atlantic Water Flow.html":{"ref":"Flood and Fill/Pacific Atlantic Water Flow.html","tf":0.0136986301369863},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","tf":0.006289308176100629},"Jump Game/Frog Jump.html":{"ref":"Jump Game/Frog Jump.html","tf":0.004484304932735426},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"ref":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","tf":0.00625},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String Scramble/Interleaving String.html":{"ref":"String Scramble/Interleaving String.html","tf":0.00819672131147541},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.02127659574468085},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.01639344262295082},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.022857142857142857},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Search/Search a 2D Matrix.html":{"ref":"Binary Search/Search a 2D Matrix.html","tf":0.005952380952380952},"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616},"Binary Search/Divide Two Integers.html":{"ref":"Binary Search/Divide Two Integers.html","tf":0.010526315789473684},"Binary Approximation/Wood Cut.html":{"ref":"Binary Approximation/Wood Cut.html","tf":0.005555555555555556},"Binary Approximation/Copy Books.html":{"ref":"Binary Approximation/Copy Books.html","tf":0.0064516129032258064},"Binary Approximation/Copy Books II.html":{"ref":"Binary Approximation/Copy Books II.html","tf":0.007518796992481203},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.004830917874396135},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775},"Word Puzzle/Word Pattern II.html":{"ref":"Word Puzzle/Word Pattern II.html","tf":0.006944444444444444},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"ref":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","tf":0.01},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Open the Lock.html":{"ref":"BFS with State Encoding/Open the Lock.html","tf":0.009615384615384616}}},"x":{"docs":{},"|":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}},"y":{"docs":{},"|":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}},")":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}},",":{"docs":{"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641}}}}}}},"x":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.010452961672473868},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.32589285714285715},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.024096385542168676},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.030303030303030304},"Binary Search/Search a 2D Matrix II.html":{"ref":"Binary Search/Search a 2D Matrix II.html","tf":0.010526315789473684},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.03759398496240601},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.022988505747126436},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.020689655172413793},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.01327433628318584},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.009478672985781991},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/Minimum Knight Moves.html":{"ref":"General BFS/Minimum Knight Moves.html","tf":0.00641025641025641},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154}},")":{"docs":{"Monotonous Stack/Min Stack.html":{"ref":"Monotonous Stack/Min Stack.html","tf":0.010101010101010102},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Iterator/Inorder Successor in BST.html":{"ref":"Iterator/Inorder Successor in BST.html","tf":0.010638297872340425},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","tf":0.008771929824561403},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"ref":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","tf":0.005714285714285714},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum.html":{"ref":"Binary Tree/Path Sum.html","tf":0.009900990099009901},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Convert BST to Greater Tree.html":{"ref":"Binary Tree/Convert BST to Greater Tree.html","tf":0.01098901098901099},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"ref":"Binary Tree/All Nodes Distance K in Binary Tree.html","tf":0.006134969325153374},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.031746031746031744},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218},"Number Parsing/Reverse Integer.html":{"ref":"Number Parsing/Reverse Integer.html","tf":0.014492753623188406},"Linked List/Delete Node in a Linked List.html":{"ref":"Linked List/Delete Node in a Linked List.html","tf":0.010309278350515464},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Sort List.html":{"ref":"Linked List/Sort List.html","tf":0.0051813471502590676},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.017391304347826087},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"Linked List/Intersection of Two Linked Lists.html":{"ref":"Linked List/Intersection of Two Linked Lists.html","tf":0.0072992700729927005},"Linked List/Linked List Cycle.html":{"ref":"Linked List/Linked List Cycle.html","tf":0.010309278350515464},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.004739336492890996}}},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.008695652173913044},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.006666666666666667},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.0047169811320754715}}}}}},",":{"docs":{"Priority Queue/K Closest Points.html":{"ref":"Priority Queue/K Closest Points.html","tf":0.017391304347826087},"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.003484320557491289},"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714},"Flood and Fill/Island Perimeter.html":{"ref":"Flood and Fill/Island Perimeter.html","tf":0.012048192771084338},"Flood and Fill/Making a Large Island.html":{"ref":"Flood and Fill/Making a Large Island.html","tf":0.007575757575757576},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Preorder Traversal.html","tf":0.008620689655172414},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Inorder Traversal.html","tf":0.008333333333333333},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"ref":"Iterator/Binary Tree Iterative Postorder Traversal.html","tf":0.007194244604316547},"Binary Tree/Validate Binary Search Tree.html":{"ref":"Binary Tree/Validate Binary Search Tree.html","tf":0.00684931506849315},"Binary Tree/Balanced Binary Tree.html":{"ref":"Binary Tree/Balanced Binary Tree.html","tf":0.006896551724137931},"Binary Tree/Check Completeness of a Binary Tree.html":{"ref":"Binary Tree/Check Completeness of a Binary Tree.html","tf":0.00819672131147541},"Binary Tree/Maximum Width of Binary Tree.html":{"ref":"Binary Tree/Maximum Width of Binary Tree.html","tf":0.007142857142857143},"Binary Tree/Diameter of Binary Tree.html":{"ref":"Binary Tree/Diameter of Binary Tree.html","tf":0.00546448087431694},"Binary Tree/Minimum Depth of Binary Tree.html":{"ref":"Binary Tree/Minimum Depth of Binary Tree.html","tf":0.008264462809917356},"Binary Tree/Maximum Depth of Binary Tree.html":{"ref":"Binary Tree/Maximum Depth of Binary Tree.html","tf":0.006993006993006993},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"ref":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","tf":0.006711409395973154},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.0038314176245210726},"Binary Tree/Path Sum II.html":{"ref":"Binary Tree/Path Sum II.html","tf":0.006172839506172839},"Binary Tree/Path Sum III.html":{"ref":"Binary Tree/Path Sum III.html","tf":0.006060606060606061},"Binary Tree/Find Leaves of Binary Tree.html":{"ref":"Binary Tree/Find Leaves of Binary Tree.html","tf":0.007194244604316547},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"ref":"Binary Tree/Binary Tree Vertical Order Traversal.html","tf":0.006097560975609756},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"ref":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","tf":0.0037313432835820895},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.004705882352941176},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.003952569169960474},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.003663003663003663},"Binary Tree/Maximum Average Subtree.html":{"ref":"Binary Tree/Maximum Average Subtree.html","tf":0.00625},"Binary Tree/Symmetric Tree.html":{"ref":"Binary Tree/Symmetric Tree.html","tf":0.008130081300813009},"Binary Tree/Closest Binary Search Tree Value.html":{"ref":"Binary Tree/Closest Binary Search Tree Value.html","tf":0.007518796992481203},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.0036496350364963502},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.015037593984962405},"Word Puzzle/Word Search.html":{"ref":"Word Puzzle/Word Search.html","tf":0.006896551724137931},"Word Puzzle/Word Search II.html":{"ref":"Word Puzzle/Word Search II.html","tf":0.004424778761061947},"Linked List/Remove Linked List Elements.html":{"ref":"Linked List/Remove Linked List Elements.html","tf":0.008264462809917356},"Linked List/Remove Nth Node From End of List.html":{"ref":"Linked List/Remove Nth Node From End of List.html","tf":0.004975124378109453},"Linked List/Reverse Linked List II.html":{"ref":"Linked List/Reverse Linked List II.html","tf":0.0055248618784530384},"Linked List/Palindrome Linked List.html":{"ref":"Linked List/Palindrome Linked List.html","tf":0.004464285714285714},"Linked List/Merge k Sorted Lists.html":{"ref":"Linked List/Merge k Sorted Lists.html","tf":0.0049504950495049506},"Linked List/Partition List.html":{"ref":"Linked List/Partition List.html","tf":0.008695652173913044},"Linked List/Odd Even Linked List.html":{"ref":"Linked List/Odd Even Linked List.html","tf":0.006711409395973154},"General BFS/The Maze.html":{"ref":"General BFS/The Maze.html","tf":0.013333333333333334},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.009433962264150943},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.006711409395973154},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},";":{"docs":{"Flood and Fill/Number of Islands II.html":{"ref":"Flood and Fill/Number of Islands II.html","tf":0.006968641114982578},"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.014492753623188406},"General BFS/The Maze II.html":{"ref":"General BFS/The Maze II.html","tf":0.009009009009009009},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}}},":":{"docs":{"Binary Search/Pow x n.html":{"ref":"Binary Search/Pow x n.html","tf":0.007518796992481203},"Binary Approximation/Sqrt.html":{"ref":"Binary Approximation/Sqrt.html","tf":0.015873015873015872},"Binary Approximation/Sqrt II.html":{"ref":"Binary Approximation/Sqrt II.html","tf":0.011494252873563218}}}},",":{"docs":{"Monotonous Stack/Next Greater Element I.html":{"ref":"Monotonous Stack/Next Greater Element I.html","tf":0.015544041450777202},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","tf":0.00847457627118644},"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Fibonacci Sequence/Decode Ways II.html":{"ref":"Fibonacci Sequence/Decode Ways II.html","tf":0.05803571428571429},"String and Sequence Extremum/Minimum Edit Distance.html":{"ref":"String and Sequence Extremum/Minimum Edit Distance.html","tf":0.02564102564102564},"String and Sequence Extremum/Longest Common Subsequence.html":{"ref":"String and Sequence Extremum/Longest Common Subsequence.html","tf":0.010638297872340425},"String and Sequence Extremum/Shortest Common Supersequence.html":{"ref":"String and Sequence Extremum/Shortest Common Supersequence.html","tf":0.007874015748031496},"String and Sequence Extremum/Longest Common Substring.html":{"ref":"String and Sequence Extremum/Longest Common Substring.html","tf":0.005988023952095809},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"ref":"String and Sequence Extremum/Longest Palindromic Subsequence.html","tf":0.010309278350515464},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"ref":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","tf":0.010309278350515464},"String and Sequence Extremum/Uncrossed Lines.html":{"ref":"String and Sequence Extremum/Uncrossed Lines.html","tf":0.00980392156862745},"String Scramble/Distinct Subsequences.html":{"ref":"String Scramble/Distinct Subsequences.html","tf":0.00546448087431694},"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.01694915254237288},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.015957446808510637},"Game Theory/Coins in a Line II.html":{"ref":"Game Theory/Coins in a Line II.html","tf":0.0035587188612099642},"Binary Approximation/Maximum Average Subarray II.html":{"ref":"Binary Approximation/Maximum Average Subarray II.html","tf":0.00966183574879227}},"w":{"docs":{},"e":{"docs":{"Fibonacci Sequence/Minimum Cost for Tickets.html":{"ref":"Fibonacci Sequence/Minimum Cost for Tickets.html","tf":0.022988505747126436}}}}},"[":{"0":{"docs":{},",":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.025210084033613446},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.012048192771084338},"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}},"1":{"docs":{},",":{"docs":{"Monotonous Stack/Maximal Rectangle.html":{"ref":"Monotonous Stack/Maximal Rectangle.html","tf":0.008403361344537815},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705},"Greedy/Candy.html":{"ref":"Greedy/Candy.html","tf":0.010309278350515464}}}},"2":{"docs":{},",":{"docs":{"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"ref":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","tf":0.0058823529411764705}}}},"3":{"docs":{},",":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}},"7":{"docs":{},",":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}},"8":{"docs":{},",":{"docs":{"Binary Search with STL or Map/Random Pick with Weight.html":{"ref":"Binary Search with STL or Map/Random Pick with Weight.html","tf":0.01020408163265306}}}},"docs":{},"i":{"docs":{},",":{"docs":{"Stone Game/Stone Game III.html":{"ref":"Stone Game/Stone Game III.html","tf":0.006493506493506494}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"1":{"docs":{},",":{"docs":{"Binary Search/Search for a Range.html":{"ref":"Binary Search/Search for a Range.html","tf":0.01020408163265306}}}},"docs":{}}}}}},"+":{"docs":{},"/":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}}}},"]":{"docs":{"Interval Fundamental/Non-overlapping Intervals.html":{"ref":"Interval Fundamental/Non-overlapping Intervals.html","tf":0.01},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}},":":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Graph Theory Basics/Minimum Spanning Tree.html":{"ref":"Graph Theory Basics/Minimum Spanning Tree.html","tf":0.004901960784313725}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}}}}}},"[":{"1":{"0":{"docs":{},",":{"1":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"2":{"docs":{},",":{"8":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"1":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{},"[":{"7":{"docs":{},",":{"1":{"2":{"docs":{},"]":{"docs":{},"]":{"docs":{"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"ref":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","tf":0.010101010101010102}}}}},"docs":{}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"&":{"docs":{},"]":{"docs":{"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}}},"\\":{"docs":{"Monotonous Stack/Max Tree.html":{"ref":"Monotonous Stack/Max Tree.html","tf":0.014814814814814815},"Fibonacci Sequence/House Robber III.html":{"ref":"Fibonacci Sequence/House Robber III.html","tf":0.012345679012345678},"Game Theory/Coins in a Line.html":{"ref":"Game Theory/Coins in a Line.html","tf":0.014598540145985401},"Iterator/Flatten Binary Tree to Linked List.html":{"ref":"Iterator/Flatten Binary Tree to Linked List.html","tf":0.09252669039145907},"Binary Tree/Binary Tree Maximum Path Sum.html":{"ref":"Binary Tree/Binary Tree Maximum Path Sum.html","tf":0.007662835249042145},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.01098901098901099},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","tf":0.007058823529411765},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","tf":0.011857707509881422},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"ref":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","tf":0.01098901098901099},"Binary Tree/Closest Binary Search Tree Value II.html":{"ref":"Binary Tree/Closest Binary Search Tree Value II.html","tf":0.01824817518248175},"Word Puzzle/Word Ladder.html":{"ref":"Word Puzzle/Word Ladder.html","tf":0.02247191011235955},"Word Puzzle/Word Ladder II.html":{"ref":"Word Puzzle/Word Ladder II.html","tf":0.011695906432748537}}},"'":{"0":{"docs":{},"'":{"docs":{},";":{"docs":{"Flood and Fill/Number of Islands.html":{"ref":"Flood and Fill/Number of Islands.html","tf":0.009009009009009009},"BFS with State Encoding/Sliding Puzzle.html":{"ref":"BFS with State Encoding/Sliding Puzzle.html","tf":0.02830188679245283}}},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.00966183574879227},"Number Parsing/Validate IP Address.html":{"ref":"Number Parsing/Validate IP Address.html","tf":0.007407407407407408},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}},";":{"docs":{"Permutation DFS/Next Closest Time.html":{"ref":"Permutation DFS/Next Closest Time.html","tf":0.024242424242424242}}}},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"1":{"docs":{},"'":{"docs":{},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"2":{"docs":{},"'":{"docs":{},")":{"docs":{"Fibonacci Sequence/Decode Ways.html":{"ref":"Fibonacci Sequence/Decode Ways.html","tf":0.004830917874396135}}}}},"6":{"docs":{},"'":{"docs":{},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"8":{"docs":{},"'":{"docs":{},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"9":{"docs":{},"'":{"docs":{},":":{"docs":{"Simulation Puzzle/Strobogrammatic Number.html":{"ref":"Simulation Puzzle/Strobogrammatic Number.html","tf":0.012195121951219513}}}}},"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.014598540145985401},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},"a":{"docs":{},"'":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909}},"]":{"docs":{},";":{"docs":{"Greedy/Reorganize String.html":{"ref":"Greedy/Reorganize String.html","tf":0.00909090909090909},"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.00684931506849315},"String Scramble/Scramble String.html":{"ref":"String Scramble/Scramble String.html","tf":0.005154639175257732}}}}}},"v":{"docs":{},"'":{"docs":{},";":{"docs":{"Flood and Fill/Surrounded Regions.html":{"ref":"Flood and Fill/Surrounded Regions.html","tf":0.004464285714285714}}},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"*":{"docs":{},"'":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644},"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}},")":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"?":{"docs":{},"'":{"docs":{},",":{"docs":{"String Scramble/Wildcard Matching.html":{"ref":"String Scramble/Wildcard Matching.html","tf":0.00847457627118644}}}}},".":{"docs":{},"'":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}},")":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548}},")":{"docs":{},";":{"docs":{"General DFS/N Queens.html":{"ref":"General DFS/N Queens.html","tf":0.015151515151515152}}}}},",":{"docs":{"String Scramble/Regular Expression Matching.html":{"ref":"String Scramble/Regular Expression Matching.html","tf":0.005319148936170213}}}}},",":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495}}}}}},")":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005},"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},"'":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}},")":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}}}},"+":{"docs":{},"'":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},"/":{"docs":{},"'":{"docs":{},")":{"docs":{},";":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}}}},":":{"docs":{"Expression Parsing/Evaluate Postfix Expression.html":{"ref":"Expression Parsing/Evaluate Postfix Expression.html","tf":0.0072992700729927005}}},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.0056179775280898875}}},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"b":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"c":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"f":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"h":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"i":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"k":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"l":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"n":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"o":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"q":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"r":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"s":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}}}},"u":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"x":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"y":{"docs":{},"'":{"docs":{},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203},"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}}}}},"z":{"docs":{},"'":{"docs":{},"}":{"docs":{},"}":{"docs":{"General DFS/Letter Combinations of a Phone Number.html":{"ref":"General DFS/Letter Combinations of a Phone Number.html","tf":0.007246376811594203}},",":{"docs":{"Word Puzzle/Valid Anagram.html":{"ref":"Word Puzzle/Valid Anagram.html","tf":0.007246376811594203}}}}}}},"(":{"docs":{},"'":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.004651162790697674}},")":{"docs":{"General DFS/Remove Invalid Parentheses.html":{"ref":"General DFS/Remove Invalid Parentheses.html","tf":0.009302325581395349}}}}}},"#":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0136986301369863},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.005494505494505495},"Binary Search/Missing Element in Sorted Array.html":{"ref":"Binary Search/Missing Element in Sorted Array.html","tf":0.024096385542168676},"Linked List/Linked List Cycle II.html":{"ref":"Linked List/Linked List Cycle II.html","tf":0.018957345971563982}},",":{"docs":{"Binary Tree/Serialize and Deserialize Binary Tree.html":{"ref":"Binary Tree/Serialize and Deserialize Binary Tree.html","tf":0.027472527472527472}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"Data Structure Design/LRU Cache.html":{"ref":"Data Structure Design/LRU Cache.html","tf":0.006944444444444444}}}}}}}}},"_":{"docs":{"Greedy/Task Scheduler.html":{"ref":"Greedy/Task Scheduler.html","tf":0.0958904109589041}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}}},";":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}}},";":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},",":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.005988023952095809},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},";":{"docs":{"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"ref":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","tf":0.011976047904191617},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.009009009009009009},"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.016}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}},";":{"docs":{"Linked List/Insert into a Cyclic Sorted List.html":{"ref":"Linked List/Insert into a Cyclic Sorted List.html","tf":0.0045045045045045045}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}},";":{"docs":{"General BFS/Clone Graph.html":{"ref":"General BFS/Clone Graph.html","tf":0.008}}}}}}}}}}}}},"^":{"docs":{"Stone Game/Stone Game V.html":{"ref":"Stone Game/Stone Game V.html","tf":0.013245033112582781},"Linked List/Copy List with Random Pointer.html":{"ref":"Linked List/Copy List with Random Pointer.html","tf":0.003703703703703704},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"ref":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","tf":0.013422818791946308},"General DFS/Sudoku Solver.html":{"ref":"General DFS/Sudoku Solver.html","tf":0.008547008547008548},"General DFS/Reconstruct Itinerary.html":{"ref":"General DFS/Reconstruct Itinerary.html","tf":0.006622516556291391},"General DFS/Unique Path III.html":{"ref":"General DFS/Unique Path III.html","tf":0.007352941176470588}},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{},"^":{"docs":{"Permutation DFS/Next Permutation.html":{"ref":"Permutation DFS/Next Permutation.html","tf":0.023076923076923078}},"^":{"docs":{"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"ref":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","tf":0.005917159763313609}}}}}}}}}},")":{"docs":{"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"ref":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","tf":0.006134969325153374}},";":{"docs":{"Stone Game/Stone Game.html":{"ref":"Stone Game/Stone Game.html","tf":0.007874015748031496},"Simulation Puzzle/Largest Number.html":{"ref":"Simulation Puzzle/Largest Number.html","tf":0.006711409395973154}}}},"]":{"docs":{"Number Parsing/Valid Number.html":{"ref":"Number Parsing/Valid Number.html","tf":0.011235955056179775}},")":{"docs":{},";":{"docs":{"Binary Search/Find K Closest Elements.html":{"ref":"Binary Search/Find K Closest Elements.html","tf":0.009615384615384616}}}}},"~":{"docs":{"Simulation Puzzle/Integer to Roman.html":{"ref":"Simulation Puzzle/Integer to Roman.html","tf":0.041237113402061855}}},"×":{"docs":{"Math/Number of Ways to Paint N × 3 Grid.html":{"ref":"Math/Number of Ways to Paint N × 3 Grid.html","tf":1.4555984555984554}}}},"length":21330},"corpusTokens":["!=","!curr","!fast","!head","!right)","!root","!stk.empty()","!visit[dst])","!visit[i","!visit[src","\"","\"\";","\"#\")","\"#\";","\"(\")","\"()\"","\")","\")\")","\"*\")","\"+\")","\",","\",\"","\".\"","\"/\")","\"0\";","\"0000\")","\"123450\")","\"a\".","\"abc\",","\"abcde\".","\"alice\"","\"bob\";","\"c\",","\"cc\",","\"ccc\",","\"cd\",","\"cm\"},","\"d\",","\"dc\",","\"dcc\",","\"dccc\",","\"de\",","\"deabc\"","\"error\")","\"error\";","\"i\",","\"ii\",","\"iii\",","\"ipv4\"","\"ipv6\"","\"iv\",","\"ix\"},","\"jfk\",","\"l\",","\"la\".","\"le\"","\"lx\",","\"lxx\",","\"lxxx\",","\"m\",","\"mm\",","\"mmm\"}","\"neither\";","\"one\"","\"tie\";","\"two\"","\"v\",","\"vi\",","\"vii\",","\"viii\",","\"x\",","\"xc\"},","\"xl\",","\"xx\",","\"xxx\",","\"zero\"","#","#,","#includ","%","%=","&","&&","&a)","&a,","&abbr)","&arrays,","&b)","&b,","&books,","&cands,","&destination)","&dict)","&digits)","&dummy;","&dummy_even;","&dummy_g;","&dummy_l,","&dummy_odd,","&exp)","&expression)","&getlist()","&heights)","&intervals)","&l,","&list)","&matrix)","&matrix,","&maze,","&n)","&ni);","&num)","&nums)","&nums,","&nums1,","&nums2)","&org,","&path)","&prefix)","&prices)","&s)","&s,","&seqs)","&start,","&str)","&str,","&strs)","&t)","&time)","&times)","&tokens)","&v)","&v,","&values)","&word)","&word,","&words)","'","'('","'(')","')","')'","')')","');","'*'","'*')","'*');","'*':","'+'","'+');","'+':","',');","'.'","'.')","'.'));","'.',","'/');","'/':","'0')","'0');","'0':","'0';","'1')","'1':","'2')","'6':","'8':","'9':","':","'?',","'a'","'a'];","'b',","'c'}},","'e')","'e',","'f'}},","'h',","'i'}},","'k',","'l'}},","'n',","'o'}},","'q',","'r',","'s'}},","'u',","'v';","'v'}},","'x',","'y',","'z'}}","'z'}},","(","(!('0'","(!(('0'","(!(nj","(!(nr","(!(nx","(!(r1","(!(valu","(!curr","(!curr)","(!fast","(!head","(!head)","(!l.first)","(!left","(!node)","(!positive)","(!q.empty()","(!q.empty())","(!queue.empty())","(!r.first)","(!root","(!root)","(!row","(!runpreorder(root","(!set.empty())","(!src)","(!stk.empty()","(!stk.empty())","(!v1.empty())","(!v2.empty())","(!vec.empty())","('0'","(('0'","((*it)[0]","((nx","((pred","():","(++l","(0,","(1,","(1440","(2,","(2^n)),","(3,","(3^l)),","(4,","(5,","(6,","(7,","(a","(a)","(a.first","(a1","(a[i]","(a[j]","(a[r]","(ans.begin(),","(ans.size()","(ans[0]","(arr[i]","(arr[src]","(atoi)","(auto","(auto&","(b","(b)","(b.first","(begin","(bgn","(bgns[turn]","(binary)","(board[0][0]","(board[0][1]","(board[0][2]","(board[1][0]","(board[1][1]","(board[1][2]","(board[r][c]","(board[x][y]","(book","(books.empty()","(c","(c^2)),","(canuse(index","(ch","(ch)","(char","(clone","(code","(col","(const","(copi","(correct)","(count","(countnumber(nums,","(countsmallpieces(l,","(curr","(curr)","(d","(demical)","(depth","(dict.count(end)","(diff","(diff_color","(diff_p","(digits.empty())","(discovery[neighbor]","(divd","(dividend","(dividend));","(dp[bgn]","(dp[i]","(dp[i][j]","(dp[i][j][k]","(dp[r][c]","(dst","(e","(edge.second)","(event.second","(f","(f_max","(fac_part_bin","(fac_part_bin.empty())","(fast","(first,","(freq(s1)","(freq[ch]","(freq_p[ch]","(freq_t[ch]","(g","(grid[r][c]","(grid[x][y]","(has_odd)","(head","(head)","(hi","(hi,","(hour","(i","(i+1)th","(i,","(i.hasnext())","(id","(id,","(idle_slot","(in_bgn","(indeg[d]","(indeg[t]","(index","(index_w","(int","(integer)]","(ip","(isvalid(s))","(it","(item.isinteger())","(j","(k","(l","(l)","(l)3","(l.empty()","(l.lca)","(l.second","(l_rate","(la","(last_l)","(last_node_visited)","(last_r)","(lb","(left","(len","(lhs.cost","(lhs.interval.start","(lo","(lower","(m","(m_size","(map.count(ch)","(map.count(num)","(map[id].size()","(map[s[i]]","(matrix[x][y]","(max_depth","(max_q.empty())","(max_q.size()","(maximum)","(memo.count(root)","(memo.count(s)","(memo.count(s1)","(memo[i].count(k)","(memo[i].count(sum)","(min_q.size()","(minimum)","(minut","(n","(n)","(n1","(n^2","(name_2_id.count(dst)","(name_2_id.count(src)","(neighbor","(new_diff","(new_timestamp","(next","(ni","(no","(node","(node)","(num","(num_c","(num_r","(nums[i","(nums[i]","(nums[i])","(nums[i]));","(nums[j]","(nums[l]","(nx","(odds[i])","(offset","(one","(order","(p","(p)","(p2s.count(ch)","(pair.second","(po","(pool[0]","(pool[2]","(pre_bgn","(pred","(pred)","(prefix","(price[j]","(px","(q)","(q.empty())","(q.front()","(q.size()","(queue.size()","(r","(r)","(r.lca)","(radixes.count(num)","(ratings[i","(re","(real","(refs.count(key)","(refs.count(val)","(res)","(res.empty())","(right","(root","(root)","(round","(rover","(row","(rtn.find_p","(runpreorder(root","(s.empty())","(s.substr(i,","(s.substr(j","(s1","(s1[i]","(s2[j]","(s2p.count(word)","(s[i","(s[i]","(set.count(dst)","(set.count(n)","(set.count(next)","(set.count(q)","(set.is_same(src_id,","(size","(slow","(solution.hasnext())","(src","(src)","(stack.top()","(stk.top().isinteger())","(stones[0]","(str.length()","(str[i]","(str[s1]","(string","(succ","(succs.empty())","(sum","(sum[i","(target","(temp","(temp.rem","(test","(the","(times.empty()","(token","(total","(trace[r][c]","(turn","(tx","(vec_bgn","(visit.count(\"0000\")","(w)2","(with","(word","(word[i]","(words.count(word)","(words.empty())","(wrong)","(x","(x,n)",")",");","*","*****","******","*******","*********","***a","**,","*,","*/","*/lrucache(int","*/validwordabbr(vector","*/zigzagiterator2(vector>&","*=","*bgns[turn];","*c**","*col++;","*detectcycle(listnod","*dst","*getintersectionnode(listnod","*head","*head)","*heada,","*headb)","*it;","*left,","*left;","*max_q.begin()","*max_q.begin();","*min_element(a.begin(),","*min_q.begin();","*next)","*next;","*note:","*pred","*right)","*right;","*root,","*src","*vec_bgn++;","+","+*","+*(","+*(+","++abbrs[abbr];","++ans;","++bgns[turn];","++count;","++count_t;","++delta[end];","++delta[start];","++depth;","++f[ch","++freq[ch","++freq[ch];","++freq_p[ch];","++freq_t[ch];","++i)","++i;","++id;","++indeg[t];","++index;","++it;","++j;","++k;","++l;","++la;","++lb;","++len;","++level;","++local;","++map[prefix];","++next;","++nx;","++r;","++round;","++rover;","++row;","++size;","++step;","++total;","++unique;","++words[word];","+,","+/","+=",",",",we",".",".*c*","...","...,","....",".......","........","...........","............","/","/*","/**","//","/:","/=","/\\","/__\\","0","0)","0)));","0));","0),","0);","0,","0.","0.0","0.001","0.125","0.25","0.5","000...","00000","00010","00011","01000","0;","0>","0s","0s,","0s.","0});","0},","0};","0}})","1","1(w)","1)","1))","1))));","1));","1),","1).","1);","1)>","1)th","1,","1.","1.0","10","10)","10);","10,","10.","100","100)","100.","1000","1000)","1000]","1000}","1004.","1005.","100]","100},","101.","103.","1035.","104.","105.","1053.","106.","1060.","1062.","1075.","1086.","1092.","10;","10]","10];","10tb+","10},","11","11)","110.","111.","112.","1120.","1123.","113.","1143.","115.","1155.","1181.","1197.","11]","12","1201.","121.","122.","1222.","123e","123e+","124.","125","1269.","127.","1278.","128.","1284.","1293.","13","130.","1306.","131.","1311.","1312.","133.","134.","1340.","1345.","135.","138.","139.","14","140.","1406.","141.","1411.","142.","144.","1440)","145.","1463.","1478.","148.","149.","15","15,","15.","151.","1510.","152.","155.","1563.","159.","16","16);","16.","160.","161.","162.","163.","1650.","168.","17","17,","1784.","18","18.","180.","183.","184.","19","19.","1:","1;","1]","1])","1]);","1],","1].second)","1].second);","1]:","1];","1][h","1][h]","1][i]","1][j","1][j]","1][j])","1][j]);","1][j],","1][j];","1][j][h]","1][j][h];","1][j]}","1][k]","1]]","1]])","1]]);","1]],","1]];","1]}","1d","1e","1e4;","1e9","1m+","1s","1st","1st:","1x3","1x6","1}","1});","1},","1};","1}})","2","2(w)","2)","2),","2).","2);","2,","2.","20","20,","200.","203.","207.","209.","212.","2147483648","216.","22","22.","23","23)","23.","234.","237.","239.","24","25),","250m+","251.","252.","253.","259.","261.","264.","269.","270.","272.","276.","28.","281.","285.","286.","29","29,","29.","290.","291.","295.","2:","2;","2]","2])","2],","2]:","2];","2^n),","2d","2nd","2nd:","2x5","2},","2};","2}})","3","3)","3),","3*","3,","3.","30","30.","300.","3000","301.","30]","31.","313.","314.","322.","328.","329.","32;","332.","339.","340.","341.","346.","35","364.","366.","367.","368.","369.","37.","370.","378.","38.","39.","392.","393.","394.","395.","396.","398.","3:","3]","3rd","3rd:","3sum","4","4(w)","4)","4*","4,","4.","40.","403.","405.","409.","417.","418.","419.","421.","424.","425.","426.","428.","430.","434.","435.","437.","438.","44.","440","442.","452.","453.","46.","460.","461.","463.","465.","47.","476.","48","480.","488.","491.","494.","496.","4:","4sum","4th","4x2","4}.","5","5)","5,","5.","500},","505.","50},","51.","510.","512.","518.","523.","528.","53.","534.","535.","538.","539.","54.","541.","543.","548.","56.","560.","562","563","564","569.","577.","585.","586.","59)","593.","5},","6","6)","6*","6,","6.","60","605.","61.","617.","62.","628.","629.","633.","634.","637.","639.","641.","644.","645.","648.","65,","654.","656","657.","662.","665","667.","676.","680.","691.","6;","6]","6x1","6}","7","7)","7,","7.","708.","72.","729.","731.","732.","74.","741.","746.","752.","76.","763.","767.","772.","773.","78.","787.","79.","7;","7]","8","8)","8,","8.","81.","827.","85.","862.","863.","867.","87.","877.","88.","888.","889.","89","9","9,","90","90.","900","911.","92","92.","94.","944.","945.","958.","96","96.","97.","973.","974.","975.","98.","980.","983.","994.","9}",":","::max();",":times)",";","=","==","=>",">",">\"",">&",">2",">3",">4",">5",">=",">>",">addnum(num);",">begin();",">book(start,end);",">branch.count(ch)",">branch[ch]",">branch[ch];",">child",">child)",">child);",">city1",">city2",">cost",">empty())",">end",">end())",">findmedian();",">first",">first;",">getmin();",">hasnext();",">is_word",">is_word)",">is_word;",">l",">l]",">left",">left)",">left);",">left,",">left;",">left].emplace(node);",">neighbors)",">neighbors.emplace_back(map[dst]);",">next",">next();",">next(val);",">next)",">next);",">next;",">parent;",">pick(target);",">pickindex();",">pop();",">prev",">push(x);",">r",">r]",">random",">random)",">right",">right)",">right);",">right,",">right;",">right].emplace(node);",">second;",">second];",">start",">symbol",">top();",">val",">val)",">val));",">val);",">val,",">val;","?","@param","@return","@return:","[&]","[+/","[0,","[1,","[2,","[3,","[7,","[8,","[[10,16],[2,8],[1,6],[7,12]]","[]","[](const","[]:","[expon","[i,","[index1,","\\","]","]);","^","^^^^^^^","^^^^^^^^","_","_left,","_left;","_neighbors)","_neighbors;","_next)","_next;","_right)","_right;","_val)","_val,","_val;","`map[mod]`,","`map[prefix","a(0,","a)","a*b*,","a+","a,","a.","a.end())","a.end());","a.end(),","a.second});","a.size();","a1","a2","a3","a:","a;","a[0].size();","a[0];","a[1]);","a[i","a[i]","a[i].","a[i];","a[j]","a[l","a[l++];","a[l])","a[m])","ab","abbr","abbr.length();","abbr:","abbrevi","abbreviation/descript","abbrs.count(abbr)","abbrs;","abbrs[abbr])","abc","abc/","abc/d","abc/de+","abc/de+*+","abc/de+*+f","abcd","abcd,","abcd.ef","abce.","abov","abs(l.second","abs(static_cast(divisor));","abs(static_cast(root","abs(target","abs(tx);","abs(ty);","accumul","accumulate(a.begin(),","ack(n)","ack(n)),","ackerman","acquir","activ","ad","add","add(const","add(int","adddigits(int","addnum(int","address","address/descript","adjust","adopt","aggreg","ak","alex","algorithm","algorithm.","alien","alienorder(vector&","alloc","allow","alphabet","alreadi","also,","alway","amount","amount)","amount,","an","anagram","anagrams/descript","ancestor","anoth","ans(n);","ans(n,","ans)","ans);","ans.emplace(config);","ans.emplace_back(conf);","ans.emplace_back(config);","ans.emplace_back(curr","ans.emplace_back(item.getinteger());","ans.emplace_back(move(level));","ans.emplace_back(next);","ans.emplace_back(nod","ans.emplace_back(nums[q.front()]);","ans.emplace_back(preds.top()","ans.emplace_back(query(max_q,","ans.emplace_back(std::move(pair.second));","ans.emplace_back(std::move(prev));","ans.emplace_back(succ","ans.end());","ans.length()","ans.push_back(a.second);","ans.push_back(a[l","ans.push_back(b.second);","ans.push_back(closest);","ans.push_back(collect);","ans.push_back(conf);","ans.push_back(config);","ans.push_back(connection(src,","ans.push_back(genrange(nums[n","ans.push_back(s);","ans.push_back(set.query());","ans.push_back({id,","ans.push_back({r.x,","ans;","ans[stk.top()]","api.","appear","appli","approach","approxim","approximation,","area","areas;","arr)","arr,","arr.size();","arr[i],","arr[src];","array","array)","array.","array/","array/descript","array[0]","array[1]","array[i];","arrays)","arrays/descript","arrays:","arrow","ascend","assign","atgre,","atlant","atlantic(m,","atoi(str","atoi/descript","auto","auto&","averag","avg","avoid","b","b(0,","b)","b);","b+","b,","b.","b.second});","b.size();","b1","b2","b3","b:","b;","b[0],","b[0].size();","b[i]","b[j]","b[j],","ba","ba;","back","backend","backpack","backpack(int","backpackii(int","backpackiii(vector","backpackiv(vector","backpackv(vector","backpackvi(vector","backtracking(","backtracking(0,","backtracking(1,","backtracking(board,","backtracking(copy,","backtracking(i","backtracking(nums,","backtracking(s,","backup","bad","balanc","ball","ballon","balloon","balloon.","balloons/","balloons/descript","bar","base","be","be:","becom","befor","begin","begin,","behind","besides,","best","between","bfs.","bgn","bgn)","bgn,","bgn;","bgns.emplace_back(vec.begin());","bgns.erase(bgns.begin()","bgns.push_back(vec.begin());","bgns;","bgn});","binari","binaryrepresentation(str","bk","bn","board","board)","board,","board.size();","board[0].size();","board[0][0]","board[0][1]","board[0][2]","board[1][0]","board[1][1]","board[1][2]","board[x][y]","board[x][y])","board[x][y];","book","book(int","book;","books)","books,","books/descript","bool","boolean","boolean,","boost","both","bound","bound)","bound,","bound.","branch","branch)","branch;","break","break;","brief","bst","bstswappednode(treenod","build","build(vector","build/descript","buildgraph(","buildgraph(begin,","buildgraph(root,","buildtree(const","buildtree(rpn);","buildtree(vector&","buildtrie(const","buildtrie(words);","burst","buy","buy_1st","buy_1st,","buy_2nd","buy_2nd,","buy_first","buy_second","c","c(c)","c(m,","c)","c),","c+","c,","c.","c1","c1)","c1,","c2","c2)","c3","c:","c;","c]);","c_rate","c_rate)","cach","cache/descript","cache;","calcul","calendar","call","canattendmeetings(vector>&","cancross(vector&","cand","cand[r]","cand[r])","candi","candid","candidate,","candies(n,","candies[id","candies[id]","candies[id];","cands,","cands.end());","cands.size();","cands[i],","candy(vector&","canfinish(int","canreach(vector&","canuse(","capac","capacity(capacity)","capacity(size),","capacity)","capacity,","capacity:","capacity;","carnegi","case","case:","cases.","cbce","celebr","celebrity'","celebrity.","celebrity/descript","cell","ch","ch;","chang","change(int","char","charact","character.","characters/","check","checkstringswithdifferentlength(s,","checkstringswithsamelength(","checkstringswithsamelength(s,","checksubarraysum(vector&","cherri","cherrypickup(vector>&","child","child.","child;","children","children.","children;","choices.","choos","circular","citi","city1,","city1;","city2,","city2;","ck","class","classifi","classs","clean","climb","clone","clone;","clonegraph(node*","closest","closest/descript","closestkvalues(treenode*","closestvalue(treenode*","cloud","cn","code","code(6,","code(code)","code)","code);","code,","code;","code[0]","code[1]","code[2]","code[3]","code[4]","code[5]","codec","cog","cog(5)","coin","coin,","coin[k]","coin[k]]","coinchange(vector&","coins)","coins,","coins[j]","col","col);","col;","collect","collect,","collect.pop_back();","collect.push_back(cands[i]);","collect.push_back(token);","collect;","collectnodes(root,","collectnodes(stk.top()","collectnodes(treenode*","color","color)","color;","colors/descript","cols(9,","cols,","column","column,","column.","columns,","columns.","combin","combinations.","combinationsum(vector&","combinationsum2(vector&","combinationsum3(int","commerc","common","competitor","compil","compiler.","complet","component.","compos","comput","concern","conduct","conf,","conf.emplace_back(i);","conf.emplace_back(nums[i]);","conf.pop_back();","conf;","config(n,","config)","config))","config,","config.emplace_back(begin);","config.emplace_back(neighbor);","config.emplace_back(root","config.pop_back();","config.push_back(alphabet);","config.push_back(cand);","config.push_back(ch);","config;","config[0]","config[1];","config[2]","config[3];","connect","connection(string&","connection.","connections)","connections.end(),","consecut","consid","const","const;","construct","constructfromprepost(vector&","constructor","consum","contain","content","contigu","continu","continue;","contribut","control","convert","convertbst(treenode*","convertfractionalpart(const","convertfractionalpart(fac_part_dec);","convertintegralpart(const","convertintegralpart(int_part_dec);","convertintegralpart(n);","converttopn(vector","converttorpn(const","converttorpn(expression);","converttorpn(vector","coordin","copi","copier","copiers,","copy(s);","copy.erase(i,","copybooks(vector","copybooksii(int","copyrandomlist(node*","corner","cost","cost(n,","cost)","cost.size();","cost;","cost[d]","cost[i","cost[i][j]:","cost[j","cost[k","cost[m]","cost[w]","costs)","count","count(0)","count);","count,","count:","count;","count_","count_dot","count_num","count_t","counter","countonedigit(const","counttwodigits(const","counttwodigits(s,","cours","cout","cover","creat","criterion.","curr","curr);","curr,","curr.","curr.end);","curr;","current","cut","cut/descript","cycl","cyclic","d","d(d)","d)","d));","d),","d);","d,","d1","d2","d3","d;","d[0];","d[1];","d^n","daili","data","data)","data,","day","day,","day.","days)","days,","days.","days.back();","deadend","deadends,","deadends.end());","decim","declar","decod","decompos","decompose(int","decompose(n);","decompose(num);","decomps","decras","decreas","deepest","default,","default:","definit","delet","deletenode(listnode*","delm)","delta)","delta;","delta[end];","delta[start];","demo:","denot","depend","depth","depth);","depth,","depth;","depthsum(vector&","depthsuminverse(vector&","depth});","dequ","deriv","descpretion.","deser.deserialize(ser.serialize(root));","deser;","deseri","deserialize(str","destin","destination:","determin","determinerow(const","determinerow(matrix,","develop","dfs(","dfs(0,","dfs(count","diamet","diameter.","diameterofbinarytree(treenode*","diamter","dice","dices.","dict(words.begin(),","dict)","dict,","dict.size();","dict:","dictionari","dictionary)","dictionary,","dictionary.","dictionary/","dictionary:","diff","diff,","diff_","diff_color","diff_p","differ","different:","digit","digit:","digit;","digits)","digits,","digits.length(),","digits.length();","digits/descript","digits:","digits[index];","dim","direct","direct[0];","direct[1];","directs(","directs({","directs({{1,","directs)","directs;","discov","discovery)","discovery);","discovery,","discovery;","discovery[begin]","disjoint","disjointset","disjointset(int","dist(dist)","dist)","dist;","distanc","distancek(treenode*","distinct","distribut","div_t","divd","divid","divide(int","dividend","dividend,","divis","divisor","divisor)","divr","divr)","divr;","dn","dog","dog(4)","dollars.","don't","dot","dot(3)","doubl","double&","doubli","down","dp(","dp(amount","dp(d","dp(k","dp(k,","dp(l","dp(m,","dp(n","dp(n);","dp(n,","dp(n1","dp(na","dp(nn,","dp(target","dp)","dp));","dp),","dp);","dp,","dp.back()));","dp.back();","dp.emplace_back(min(x,","dp.emplace_back(x);","dp.pop_back();","dp;","dp[0]","dp[0][0...lp]","dp[0][0]","dp[0][i]","dp[1]","dp[2]","dp[bgn","dp[bgn]","dp[bgn];","dp[c","dp[c]","dp[c]:","dp[day]","dp[i","dp[i]","dp[i]:","dp[i];","dp[i][j","dp[i][j]","dp[i][j]:","dp[i][j];","dp[i][j][h]","dp[i][j][h]:","dp[i][j][k]","dp[i][j][k];","dp[i][k","dp[i][k]","dp[i][k]:","dp[j]","dp[j][k","dp[k","dp[ls][lp];","dp[n","dp[n]","dp[n];","dp[n][k][target];","dp[n][m];","dp[n][target];","dp[nx][ny]","dp[nx][ny])","dp[r][c]","dp[r][c];","dp[start[0]][start[1]]","dp[target];","dst","dst)","dst);","dst,","dst.length())","dst;","dst_id","dst_id))","dst_id);","dsu","dsu(int","dsu(n);","dsu.merge(edge[0],","dsu.query()","dummi","dummy.next","dummy.next;","dummy;","dummy_even.next;","dummy_even;","dummy_g.next;","dummy_g;","dummy_l,","dummy_l.next;","dummy_odd,","dummy_odd.next;","duplic","duplicate.","duplicates.","e","e)","e),","e.g.","e.g.:","e.g:","e1","e2","each","eatgr","edg","edge.city1;","edge.city2;","edge.cost));","edge.first,","edge.second","edge.size();","edge[1]);","edges)","edges.end());","edges.size();","edit","elem","elem;","element","element.","element:","elements.","elements/descript","elements:","elimin","elimination/","empti","empty.","encod","encode(board);","encode(const","encount","end","end)","end);","end,","end;","endint","endpoints.","ends.emplace_back(vec.end());","ends.erase(ends.begin()","ends.push_back(vec.end());","ends;","ends[turn])","end});","end};","enlarg","entir","entri","entries.","entry.first;","entry.second;","enum","enumer","eqaul","equal","equal,","equal.","equal:","equation:","eraseoverlapintervals(vector>&","essenti","estim","etual","evalrpn(vector","evalu","evaluate(stack,","evaluate(std::stack&","evaluateexpression(vector","evaluaterpn(const","evaluaterpn(rpn);","evaluation/descript","even","even,","evens(n,","evens[i]","evens[it","evens[n","event","events)","events.end());","events.push_back({interval[0],","events.push_back({interval[1],","events;","examination.","exampl","example,","example:","exist(vector>&","exit","exp)","exp.size();","exp[i];","experi","expertis","expired_key","explor","expon","exponent.","exponential.","express","expression:","expressiontreenod","expressiontreenode(str","expressiontreenode*","expressiontreenode:","extend","extra","f","f(26);","f)","f,","f2e","f;","f_max","fac_part_bin","fac_part_bin;","fac_part_dec","face","fals","false));","false);","false;","false});","far","far.","fast","fast)","fenc","fence/","fill","filter","final","finally,","find","find(int","find(parent[x]);","find(x);","find(y);","find,","find_p","find_q","findanagrams(str","findcelebrity(int","findduplicate(vector","findfirstbadversion(int","finditinerary(vector>&","findladders(str","findleaves(treenode*","findmaxlength(vector&","findmedian()","findmin(vector","findminarrowshots(vector>&","findmissingranges(vector","findnext()","findnext();","findnodes(","findnodes(neighbor,","findnodes(target,","findpath(begin,","findpath(neighbor,","findpath(root","findpath(root,","findpath(treenode*","findsubtree(treenod","findsuccessor(auto","findsuccessor(root,","findtargetsumways(vector&","findwords(vector>&","findzero(board);","findzero(const","finish","first","firstli","firstwillwin(int","firstwillwin(vector","fit","five","flatten","flatten(node*","flatten(treenod","flatten(vector","flight","flip","flip(int","flow","follow","form","format:","forward","foursum(vector&","fraction","frame.","freq(128);","freq(128,","freq(26);","freq(const","freq(s2))","freq)","freq.end());","freq[25];","freq[ch];","freq[i]","freq[i]);","freq[s[l++]];","freq_p(128);","freq_s(128),","freq_t(128);","frequenc","frog","front","fuction","fulfil","func(i","function","futhermore,","futur","g","g)","g_diff","g_diff,","game","game.","game/","game/descript","gap.","gap;","gate","gates/","genabbreviation(const","genabbreviation(word);","gener","genpow(doubl","genpow(x,","genrange(long","get(int","getinteger()","getline(stream,","getmin()","getpredecessors(preds);","getpredecessors(stack&","getrandom","getrandom()","getsuccessors(stack&","getsuccessors(succs);","gettoken(const","github:","given","go","god","good","gradual","graduat","graph","graph)","graph);","graph,","graph;","graph[begin])","graph[curr])","graph[nod","graph[node].emplace(nod","graph[s])","graph[s].emplace(t);","graph[s].push_back({t,","graph[src])","great","greater","greater>","greater>>","grid","grid(m,","grid)","grid,","grid.size();","grid/","grid[0].size();","grid[i][j]","grid[i][j];","grid[i][k];","grid[r][c]","grid[r][c];","grid[x][y]","group","groupanagrams(vector","groups(k);","groups)","groups;","groups[0]","groups[0]:","groups[1]:","groups[2]:","groups[3]:","groups[4]:","groups[key].push_back(word);","guarante","guid","h","h)","h,","h.","h;","half","half;","hand","hand,","handl","happi","hard","hare","has_odd","hascycle(listnod","hasnext()","haspath(vector>","haspathsum(treenode*","head","head)","head);","head,","head.","head;","heada;","headb;","heap","height","height.","height:","heights(num_c,","heights.size();","help","helper(","helper(0,","helper(bgn,","helper(const","helper(inorder,","helper(int","helper(left","helper(mid","helper(node*","helper(nums,","helper(pre,","helper(preorder,","helper(root","helper(root,","helper(s1,","helper(stream);","helper(stringstream&","helper(treenod","helper(treenode*","hence,","here","here.","hhttps://www.lintcode.com/problem/remov","hi","hi)","hi);","high","highfive(vector>&","histogram","histogram.","histogram/descript","hit","hit(1)","hold","holds,","hole","hop","hop.","hot","hot(2)","hour","hous","house,","houserobber(vector","houserobber2(vector","houserobber3(treenod","houses,","houses.","however,","https://github.com/zsshen","https://leetcode.com/problems/3sum","https://leetcode.com/problems/4sum","https://leetcode.com/problems/al","https://leetcode.com/problems/alien","https://leetcode.com/problems/alloc","https://leetcode.com/problems/balanc","https://leetcode.com/problems/best","https://leetcode.com/problems/binari","https://leetcode.com/problems/candy/","https://leetcode.com/problems/check","https://leetcode.com/problems/cherri","https://leetcode.com/problems/clon","https://leetcode.com/problems/closest","https://leetcode.com/problems/coin","https://leetcode.com/problems/combin","https://leetcode.com/problems/construct","https://leetcode.com/problems/continu","https://leetcode.com/problems/convert","https://leetcode.com/problems/copi","https://leetcode.com/problems/cours","https://leetcode.com/problems/delet","https://leetcode.com/problems/distinct","https://leetcode.com/problems/divid","https://leetcode.com/problems/edit","https://leetcode.com/problems/find","https://leetcode.com/problems/flatten","https://leetcode.com/problems/frog","https://leetcode.com/problems/graph","https://leetcode.com/problems/high","https://leetcode.com/problems/i","https://leetcode.com/problems/inord","https://leetcode.com/problems/insert","https://leetcode.com/problems/interleav","https://leetcode.com/problems/intersect","https://leetcode.com/problems/island","https://leetcode.com/problems/jump","https://leetcode.com/problems/k","https://leetcode.com/problems/kth","https://leetcode.com/problems/link","https://leetcode.com/problems/longest","https://leetcode.com/problems/lowest","https://leetcode.com/problems/mak","https://leetcode.com/problems/max","https://leetcode.com/problems/maxim","https://leetcode.com/problems/maximum","https://leetcode.com/problems/meet","https://leetcode.com/problems/merg","https://leetcode.com/problems/mi","https://leetcode.com/problems/min","https://leetcode.com/problems/minimum","https://leetcode.com/problems/miss","https://leetcode.com/problems/mov","https://leetcode.com/problems/n","https://leetcode.com/problems/nest","https://leetcode.com/problems/next","https://leetcode.com/problems/non","https://leetcode.com/problems/numb","https://leetcode.com/problems/odd","https://leetcode.com/problems/on","https://leetcode.com/problems/open","https://leetcode.com/problems/pacif","https://leetcode.com/problems/paint","https://leetcode.com/problems/palindrom","https://leetcode.com/problems/partit","https://leetcode.com/problems/path","https://leetcode.com/problems/permut","https://leetcode.com/problems/previ","https://leetcode.com/problems/random","https://leetcode.com/problems/reconstruct","https://leetcode.com/problems/regular","https://leetcode.com/problems/remov","https://leetcode.com/problems/reorgan","https://leetcode.com/problems/revers","https://leetcode.com/problems/scrambl","https://leetcode.com/problems/search","https://leetcode.com/problems/shortest","https://leetcode.com/problems/slid","https://leetcode.com/problems/sort","https://leetcode.com/problems/ston","https://leetcode.com/problems/subarray","https://leetcode.com/problems/subset","https://leetcode.com/problems/sudoku","https://leetcode.com/problems/sup","https://leetcode.com/problems/surround","https://leetcode.com/problems/symmetr","https://leetcode.com/problems/target","https://leetcode.com/problems/th","https://leetcode.com/problems/ugli","https://leetcode.com/problems/uncross","https://leetcode.com/problems/uniqu","https://leetcode.com/problems/valid","https://leetcode.com/problems/wal","https://leetcode.com/problems/wildcard","https://leetcode.com/problems/word","https://leetcode.com/problems/zigzag","https://mzl.la/2fo3bjq","https://www.linkedin.com/in/zsshen","https://www.lintcode.com/problem/4","https://www.lintcode.com/problem/405","https://www.lintcode.com/problem/add","https://www.lintcode.com/problem/backpack","https://www.lintcode.com/problem/backpack/descript","https://www.lintcode.com/problem/best","https://www.lintcode.com/problem/binari","https://www.lintcode.com/problem/burst","https://www.lintcode.com/problem/coin","https://www.lintcode.com/problem/combin","https://www.lintcode.com/problem/contigu","https://www.lintcode.com/problem/convert","https://www.lintcode.com/problem/copi","https://www.lintcode.com/problem/decod","https://www.lintcode.com/problem/decreas","https://www.lintcode.com/problem/diamet","https://www.lintcode.com/problem/evalu","https://www.lintcode.com/problem/express","https://www.lintcode.com/problem/find","https://www.lintcode.com/problem/first","https://www.lintcode.com/problem/flatten","https://www.lintcode.com/problem/group","https://www.lintcode.com/problem/happi","https://www.lintcode.com/problem/hous","https://www.lintcode.com/problem/impl","https://www.lintcode.com/problem/insert","https://www.lintcode.com/problem/integ","https://www.lintcode.com/problem/intersect","https://www.lintcode.com/problem/k","https://www.lintcode.com/problem/kth","https://www.lintcode.com/problem/largest","https://www.lintcode.com/problem/lett","https://www.lintcode.com/problem/longest","https://www.lintcode.com/problem/lowest","https://www.lintcode.com/problem/lru","https://www.lintcode.com/problem/max","https://www.lintcode.com/problem/maxim","https://www.lintcode.com/problem/maximum","https://www.lintcode.com/problem/merg","https://www.lintcode.com/problem/minimum","https://www.lintcode.com/problem/miss","https://www.lintcode.com/problem/mov","https://www.lintcode.com/problem/next","https://www.lintcode.com/problem/numb","https://www.lintcode.com/problem/palindrom","https://www.lintcode.com/problem/partit","https://www.lintcode.com/problem/powx","https://www.lintcode.com/problem/recov","https://www.lintcode.com/problem/remov","https://www.lintcode.com/problem/roman","https://www.lintcode.com/problem/rot","https://www.lintcode.com/problem/search","https://www.lintcode.com/problem/sequ","https://www.lintcode.com/problem/seri","https://www.lintcode.com/problem/set","https://www.lintcode.com/problem/simplifi","https://www.lintcode.com/problem/sort","https://www.lintcode.com/problem/spars","https://www.lintcode.com/problem/split","https://www.lintcode.com/problem/sqrtx","https://www.lintcode.com/problem/sqrtx/descript","https://www.lintcode.com/problem/ston","https://www.lintcode.com/problem/str","https://www.lintcode.com/problem/strobogrammat","https://www.lintcode.com/problem/subarray","https://www.lintcode.com/problem/task","https://www.lintcode.com/problem/th","https://www.lintcode.com/problem/uniqu","https://www.lintcode.com/problem/valid","https://www.lintcode.com/problem/wood","https://www.lintcode.com/problem/word","https://www.lintcode.com/problem/zigzag","https://www.slideshare.net/zongshenshen","https://www.zsshen.com","i(nestedlist);","i(v1,","i)","i,","i.","i6l","i6t","i7n","i;","i>","id","id(id),","id,","id;","ideal","idl","idle_slot","idx_a(idx_a),","idx_a,","idx_a;","idx_b(idx_b)","idx_b)","idx_b;","ieee","ignor","ii","ii/","ii/descript","ii/submiss","iii","iii/","iii/descript","implement","implementation,","imposs","improv","in(s);","in5l","in6n","in_bgn","in_bgn,","in_bgn},","in_end","in_end)","in_end});","in_end},","in_index)","in_index,","in_index.first,","in_index.second;","in_mid","includ","increas","indeg)","indeg.size()","indeg;","indeg[c]","indeg[d];","indeg[t];","indegree;","index","index(index)","index)","index,","index.","index2]","index;","index_a","index_w","indic","industri","ineg","inf","inf)","infix","information.","initi","inord","inorder)","inorder,","inorder.size();","inordersuccessor(treenode*","inordertraversal(treenode*","input","insert","insert(","insert(int","insert(node*","insert(num);","insert(str","insert(vector>&","insertnode(treenod","instanti","int","int&","int4l","int5n","int_max","int_max)","int_max));","int_max);","int_max,","int_max;","int_min","int_min)","int_min));","int_min);","int_min;","int_part_bin","int_part_bin;","int_part_dec","inte3l","inte4n","integ","integer,","integer.","integer/descript","integers.","intens","inter2l","interexchan","interexchang","interfac","interleav","intern","intern1l","internet","intersect","intersection(vector","interv","interv1l","interval(int","interval(interval),","interval,","interval/descript","interval:","interval;","interval?","intervals)","intervals,","intervals.begin();","intervals.end())","intervals.end());","intervals.end(),","intervals.insert(it,","intervals.size();","intervals:","intervals[0];","intervals[i][1];","intial","intput","intr4n","introduct","intrus","inttoroman(int","invalid","invers","ip","ip)","ip,","ip.find('.');","ip.find(':');","is,","is:","is_palin","is_palin;","is_word","is_word(false)","is_word;","isbadversion(int","isbalanced(treenode*","iscompletetree(treenode*","ishappy(int","isinteger()","isinterleave(str","island","island,","island/","islandperimeter(vector>&","ismatch(str","isnumber(str","isoneeditdistance(str","ispalindrome(int","ispalindrome(listnode*","isscramble(str","isstrobogrammatic(str","issubsequence(str","issymmetric(treenode*","istringstream","isunique(str","isv4(ip)","isv6(ip)","isvalid(const","isvalidbst(treenode*","iswateredarea(","it'","it)","it,","it.","item","item.getinteger()","item.getlist();","item[0];","item[1];","items)","items.","items.size();","iter","iteration,","iteration.","ith","itinerari","iv","iv/descript","i});","j","j)","j),","j).","j):","j,","j.","j]","javascript","jit","job.","jth","judg","jump","jump/","k","k)","k)),","k),","k);","k,","k.","k/","k/descript","k:","k;","k]","k])","k],","k];","k]`,","k^2","kclosest(vector>&","kclosestnumbers(vector","keep","key","key(word);","key)","key,","key.end());","key:","key;","keyboard","keyboard/solut","keys.","knapsack","knight","know","knows(a,","knows(int","ksumii(vector","kth","kthinarrays(vector>","kthsmallest(int","kthsmallest(vector>&","kthsmallestsum(vector","l","l)","l))","l),","l);","l,","l.find_p","l.find_q","l.second","l.size","l.sum","l1/","l2/","l2e","l2r(n,","l:","l;","l[1]","l[i]","l[i]:","l[j]","l]","l_candi","l_sum","l_sum);","la","la)","la;","label","labels/","ladder","ladderlength(str","larg","largest","largestisland(vector>&","largestnumber(vector","largestrectanglearea(vector","largestsumafterknegations(vector&","last","last(26,","last)","last[a]","last[b]","last[c]","last[d]","last[e]","last[f]","last[g]","last[h]","last[i]","last[j]","last[k]","last_l","last_l;","last_node_visit","last_r","last_r;","lb","lb)","lb;","lc","lca","lcadeepestleaves(treenode*","lead","leaf","leastinterval(vector&","leav","leaves/","leetcod","left","left(left),","left(null),","left(nullptr),","left)","left,","left.","left;","legal","len","len)","len;","len_","len_a","len_s);","len_s,","len_t","len_t)","len_t);","len_w","length","lengthoflis(vector&","lengthoflongestsubstring(str","lengthoflongestsubstringkdistinct(str","less","less<>>","less>","let'","letter","letter.","lettercombinations(str","level","level,","level.","level;","lhs,","lhs.city1.compare(rhs.city1);","lhs.city2","lhs.d","lhs.interval.end","lhs.interval.start","lhs.num","lhs.sum","li","line","line.","line/descript","lines/","link","linkedin:","lintcod","lis.","lis.back())","lis.emplace_back(nums[0]);","lis.emplace_back(nums[i]);","lis.size()","lis;","list","list)","list.","list.begin();","list.end();","list.erase(iter);","list.push_front(std::make_pair(key,","list.size();","list/","list/descript","list::iterator,","list;","listnod","listnode()","listnode(int","listnode*","lists)","lists);","lists.","lists.size()","lists/descript","lists[bgn];","ll","lmax","ln/","lo)","lo,","local","local);","lock","log","log(26)),","log(4)","log*(k)),","log5),","logk)","logn","long","longer","longest","longestcommonsubsequence(str","longestcommonsubstring(str","longestconsecutive(vector&","longestincreasingpath(vector>&","longestones(vector&","longestpalindrome(str","longestpalindromesubseq(str","longestrepeatingsubstring(str","loop","losabl","lose","lot","lot(3)","lower","lower,","lower:","lowest","lowestcommonancestor(node*","lowestcommonancestor(root","lowestcommonancestor(treenode*","lowestcost(vector&","lp","lr","lru","lrucach","ls","lsit","lt","m","m)","m,","m:","m;","m]","m_size","m_size)","mailbox","mailboxes/","main","maintain","make","make_shared();","map","map({","map({{\"*\",","map)","map);","map,","map.begin())","map.end()","map.end())","map.lower_bound(num);","map.lower_bound(start);","map.upper_bound(num);","map;","map[0]","map[0][num","map[1][(num","map[2][(num","map[3][num","map[a[n","map[ch];","map[col].emplace_back(nod","map[digit])","map[digits[i]])","map[dst]","map[h].emplace_back(root","map[id].emplace(score);","map[id].pop();","map[mod]","map[node]","map[node];","map[num]","map[pre[pre_bgn","map[prefix","map[prefix];","map[s[i","map[s[i]];","map[s[n","map[src]","map[start]","map[stk.top()]","map[sum","map[val];","mapped.","mark","mat)","mat,","mat.size();","mat[0].size();","match","match.","matrix","matrix)","matrix,","matrix.size();","matrix/","matrix/descript","matrix:","matrix[0].size();","matrix[0][0];","matrix[m][0])","matrix[r][0])","matrix[r][c])","matrix[r][c]));","mats(9,","mats)","mats);","matter","max","max(","max(0,","max(1,","max(ans,","max(avg,","max(bgn","max(cand[l]","max(cand[l],","max(dp[i","max(l,","max(l.second,","max(l_candi","max(lis,","max(max(num,","max(max_col,","max(max_depth,","max(opt,","max(piles[i]","max(root","max(sums[i].second,","max(v[i","max;","max_col","max_curr","max_curr);","max_curr;","max_depth","max_gap","max_gap)","max_len","max_len)","max_q,","max_q.begin();","max_q.emplace(*it);","max_q.emplace(min_q.top());","max_q.emplace(num);","max_q.end())","max_q.erase(it);","max_q.find(num);","max_q.pop();","max_q.size()","max_q.size();","max_q.top()","max_q;","max_sofar","max_sofar:","maxa(int","maxaverage(vector","maxcoins(vector","maxdepth(treenode*","maxdiff","maxdiff,","maxim","maximal.","maximalrectangle(vector>","maximum","maximumaveragesubtree(treenode*","maxjumps(vector&","maxpathsum(treenode*","maxproduct(vector&","maxprofit(int","maxprofit(vector","maxprofit(vector&","maxslidingwindow(vector&","maxsubarray(vector&","maxsubarraylen(vector&","maxsubmatrix(vector>","maxtree(vector","maxuncrossedlines(vector&","max{","mayb","maze","maze,","maze.size();","maze/descript","maze:","maze[0].size();","media","median","medianfind","medianfinder()","medianfinder();","medianfinder*","medianslidingwindow(vector&","meet","mellon","memo","memo(n);","memo)","memo);","memo;","memo[i][k]","memo[i][k];","memo[i][sum]","memo[i][sum];","memo[root]","memo[root];","memo[s1].count(s2)","memo[s1][s2]","memo[s1][s2];","memo[s];","merg","merge(bgn,","merge(head,","merge(int","merge(listnode*","merge(slow,","merge(vector>&","mergeklists(vector&","mergeksortedintervallists(vector>","messag","mid","mid,","middl","min","min(ans,","min(bgn","min(f_max","min(min(num,","min(min_col,","min(n,","min(sums[i].second,","min_col","min_curr","min_curr;","min_l_sum","min_l_sum)","min_l_sum;","min_q)","min_q));","min_q);","min_q.begin();","min_q.emplace(*it);","min_q.emplace(max_q.top());","min_q.erase(it);","min_q.find(num);","min_q.pop();","min_q.size()","min_q.size())","min_q.size();","min_q.top())","min_q.top();","min_q;","min_sofar","min_sofar:","mincostclimbingstairs(vector&","mincosttickets(vector&","mindepth(treenode*","mindistance(str","mindistance(vector&","minflips(vector>&","minim","minimum","mininsertions(str","minjumps(vector&","minknightmoves(int","minmeetingrooms(vector>&","minstack","minstack()","minstack();","minstack*","minsubarraylen(int","minut","minute;","minwindow(str","min{dp[i","mirror","mirror.end());","mirror.push_back('6');","mirror.push_back('9');","mirror.push_back(ch);","mirror;","miss","missingelement(vector&","mobil","mod","mod(1000000007)","mod(1e9","mod);","mod;","modifi","money","monoton","more","moreover,","mountain","mountainsequence(vector","move","move(next);","movement","moves/","movezeroes(vector","movingaverag","movingaverage(int","movingaverage(size);","movingaverage*","mozilla'","mozilla:","multilevel","multipl","multiplication/descript","multiply(vector>","multiset>","multiset>&","must_fill_1st_row","mycalendar","mycalendar()","mycalendar();","mycalendar*","mycalendarthre","mycalendarthree()","mycalendarthree();","mycalendarthree*","mycalendartwo","mycalendartwo()","mycalendartwo();","mycalendartwo*","mypow(doubl","n","n!),","n(n),","n)","n))","n)),","n),","n);","n,","n.find('.');","n.length()","n.substr(0,","n.substr(pos,","n/descript","n1","n2","n3","n3)","n:","n;","n^2)","n^4","n^8","n^9","na","name","name_2_id;","name_2_id[dst]","name_2_id[dst];","name_2_id[src]","name_2_id[src];","nb","nc","necessari","necessary.","need","need)","neg","negat","negations/","neighbor","neighbors,","neighbors.","neighbors;","nest","nested.size();","nestedinteg","nestedinteger();","nestedinteger(int","nestediter","nestediterator(vector","nestedlist","never","new","new_diff","new_diff;","new_timestamp","new_timestamp;","newinterval)","newinterval);","newinterval[0])","next","next()","next(int","next(next)","next(null)","next(nullptr)","next,","next.emplace(nod","next;","next[1]","next[2]","next[3]","next[4]","nextclosesttime(str","nextgreaterelement(vector&","nextgreaterelements(vector&","nextpermutation(vector&","nil","nj","nk","nk.","nn","nn)","nn);","no);","no;","node","node()","node(curr","node(dst","node(int","node(nod","node(val);","node)","node*","node*&","node,","node.","node:","node;","nodes,","nodes.","non","nonzero(n,","normal","not.","notat","notation/descript","note","note:","noth","now","now.","np","np)","np,","np;","nr","ns","ns)","ns,","nt","nth","nthsuperuglynumber(int","nthuglynumber(int","null;","nullptr);","nullptr,","nullptr;","num","num(num),","num)","num),","num);","num,","num:","num;","num[0]","num[1]","num[i","num[j]","num];","num_c","num_c,","num_r","num_r,","number","number)","number,","number.","number/descript","number:","numberofoperations(str","numbers,","numbers.","numcourses,","numcourses;","numdecodings(str","numdistinct(str","numislands(vector>&","numislands2(int","numofways(int","numrollstotarget(int","nums(nums)","nums)","nums,","nums.end());","nums.end(),","nums.pop_back();","nums.push_back(val);","nums.size()","nums.size(),","nums.size();","nums1","nums1)","nums1,","nums1.end());","nums1.size(),","nums1:","nums2","nums2)","nums2.end());","nums2.size();","nums2:","nums:","nums;","nums[0]","nums[0],","nums[0];","nums[1]","nums[bgn","nums[bgn];","nums[end]);","nums[i","nums[i]","nums[i])","nums[i],","nums[i];","nums[index]);","nums[index];","nums[j","nums[j]","nums[j]);","nums[j],","nums[j]}","nums[k]","nums[l]","nums[m]","nums[mid];","nums[n","nums[q.back()])","nums[r","nums[r]","nums[r])","nums[stk.top()])","numsubarrayproductlessthank(vector","numtrees(int","numways(int","nx","nx,","ny","ny,","ny});","o","o(","o(1)","o(2","o(26)","o(2^n),","o(3","o(4^n),","o(9","o(c(9,","o(c)","o(d","o(d^n","o(h","o(h)","o(h),","o(k","o(k)","o(k),","o(klogk)","o(kn)","o(l)","o(log(x)),","o(logk)","o(logn)","o(logn),","o(m","o(m),","o(n","o(n!)","o(n!),","o(n)","o(n),","o(n).","o(n^2)","o(n^2),","o(n^3),","o(n^4)","o(n^5),","o(nlogk),","o(nlogl)","o(nlogn)","o(nlogn),","o(nlogs)","o(ns)","o(r","o(s1","o(s^2)","o(s^2),","o(t)","o(t),","o(v","o(|x|","o1/descript","obj","obj.getrandom();","obj.insert(val);","obj.isunique(word);","obj.remove(val);","object","obstacl","occurr","occurrance.","odd","odd,","oddevenjumps(vector&","oddevenlist(listnode*","odds(n,","odds[(","odds[i]","odds[n","offic","offset","offset)","offset:","on","onc","one!","one.","onto","op)","op1","op2","op2;","open","openlock(vector&","oper","operator()","opt","opt(int_min,","opt(pool);","opt)","opt);","opt.root","opt.root;","opt.sum","opt.sum)","opt;","opt_diff","optim","optimization.","option","orchestr","order","order.emplace_back(s);","order.size()","order;","org:","origin","orign","or{","otherwis","otherwise,","ouptut","out","outer","outgo","overflow.","overlap","overrid","p","p)","p),","p,","p.length(),","p.length();","p.second;","p2s;","p2s[ch]","p2s[ch])","p:","p;","p[0],","p[1];","p[i];","p[ip];","p[j","p[j]","pacif","pacific(m,","pacificatlantic(vector>&","page","pages:","paint","pair","pair,","pair.first","pair.first;","pair.second","pair.second;","pair;","pairs.","palin(n,","palin,","palin[i","palin[i][j]","palin[i][j]:","palindrom","palindrome.","palindrome/","palindrome/descript","palindromepartition(str","palindromic.","param","param_1","param_2","param_3","param_4","parent","parent(n)","parent(std::vector(n))","parent;","parent[px]","parent[x]","parent[x])","parenthes","part","part.","parti","partit","partition(listnode*","partition(str","partitionarray(vector","partitionlabels(str","pass","patch","patent","path","path.","path.length();","path/descript","path:","pathsum(treenode*","pattern","pc","pc,","peopl","per","perform","perimet","period","period)","period,","period.","period;","permut","permutation.","permute(vector&","permuteunique(vector&","person","phone","pick","pick(int","pickup","pickup/","piec","pigeon","pile","pile.","piles)","piles,","piles.size();","piles[i","piles[i]","piles[i];","piles[j]","pipelin","pivot","pivot)","place","plan","plan_a","plan_b","plan_b);","player","pleas","pn.push_back(stack.top());","pn;","po","point","point.","point:","pointer","pointer.","pointers,","points)","points,","points.end());","points.end(),","points.size();","points[0][1];","points[i][1];","polish","pool,","pool.push_back(time[0]","pool.push_back(time[1]","pool.push_back(time[3]","pool.push_back(time[4]","pool;","pool[1])","pool[3]);","pop","pop()","pope","portfolio:","portion","portion.","portions.","pos);","posibl","posit","position.","positions)","positions,","positive,","possibl","post","post)","post,","post.size();","post_bgn","post_end","post_index,","post_index.first,","post_index.second;","postfix","postiv","postord","postorder)","postorder,","postorder:","postorder[post_end];","postordertraversal(treenode*","potenti","pow","pow(x,","power","pre","pre,","pre[pre_bgn];","pre_bgn","pre_end","pre_end)","pre_end},","pre_index,","pre_index.first,","pre_index.second;","precedence)","pred","pred)","pred,","pred.","pred:","pred;","predecessor","predecessor,","predict","preds)","preds.emplace(curr);","preds.emplace(root);","preds.pop();","preds.top();","preds;","prefix","prefix(i","prefix(i)","prefix(j)","prefix(n","prefix(nn","prefix)","prefix,","prefix.","prefix:","prefix[i];","prefix[j","prefix[l],","prefix[r]","prefix_len","prefix_len)","prefix_lens(n);","preix(i)","preorder","preorder,","preorder.size();","preorder:","preorder[pre_bgn];","preordertraversal(treenode*","prerequisites)","present","press","prev","prev.end","prev.end)","prev;","previou","prevpermopt1(vector&","price","price);","price:","price[h])","price[j]","price[j]},","prices)","prices.size();","prices:","prices[0];","prices[i","prices[i]","price}","prime","primes)","priority_queue,","private:","problem","procedure,","procedure.","produc","product","profit","profit[i]","program","projects,","prolif","proper","protect","public:","publications.","purchase.","push","push(int","put","puzzl","puzzles.","px","py","py)","py;","q","q)","q);","q,","q.emplace(\"0000\");","q.emplace(0,","q.emplace(begin);","q.emplace(code);","q.emplace(d);","q.emplace(dst);","q.emplace(mat[0][0],","q.emplace(nod","q.emplace(node);","q.emplace(nx,","q.emplace(root);","q.emplace(start);","q.emplace(zero.first,","q.emplace_back(index);","q.emplace_back(val);","q.front().second;","q.front();","q.pop();","q.pop_back();","q.pop_front();","q.push(record(x,","q.push({0,","q.push({a.first","q.push({b.first","q.push({freq[i],","q.push({nod","q.push({nx,","q.push({root,","q.size();","q.top();","q;","q[0];","q[1];","qps,","quadrant","queen","queens,","queens;","queri","query(","query()","queue","queue.emplace(0);","queue.emplace(pair.first);","queue.emplace(src","queue.emplace(start[0],","queue.emplace(t);","queue.front();","queue.pop();","queue.push(num);","queue.push(record(a[0]","queue.push(record(start[0],","queue.size();","queue.top();","queue;","queue>","quickselect(auto&","quickselect(nums,","quot","quot;","r","r(r),","r)","r));","r);","r,","r.","r.find_p","r.find_q","r.second","r.second)","r.second);","r.size;","r.sum;","r.y});","r1,","r2,","r2l(n,","r2l[i]","r;","r]);","r_candi","r_rate","r_sum","radix","radix;","radixes;","radixes[a]))","radixes[b]))","radixes[num]","random","random()","random;","randomizedset","randomizedset()","randomizedset();","rang","range(i,","range/descript","ranges/descript","rate(c)","rate(l)","rate(r)","rate)","ratings)","ratings.size();","ratings[id","re","reach","real","rebalance();","rebalance(max_q,","rec","rec.first;","rec.id;","rec.index;","rec.interval;","rec.second;","rec.x;","rec.y;","reconstruct","reconstruction/descript","record","record&","record();","record(int","record(interv","record.s","record.size;","record.sum","record;","recordcompar","recordcompare>","recov","rectangl","rectangle/descript","recurs","reduc","refs.erase(expired_key);","refs.erase(val);","refs;","refs[key]","refs[key];","refs[nums[index]]","refs[val]","refs[val];","regard","region","regular","relev","remain","remaind","remainders:","remained,","remov","removal.","remove(","remove(deque&","remove(int","remove(nums[i","removeduplicates(vector","removeelements(listnode*","removeinvalidparentheses(str","removenode(treenod","removenthfromend(listnode*","reorgan","reorganizestring(str","repeat","replac","replic","replicas.","repres","represent","representation/descript","requir","requirements.","res)","res.end());","res.first;","res.push_back('0');","res.push_back('1');","res.push_back({item.getinteger(),","res.second","res.second;","res;","research","reson","respect","respectively.","restor","result","result&","result()","result();","result(int","result(sum,","result.push_back(solution.next());","result;","return","return;","revers","reverse(int","reverse(nums.begin()","reversebetween(listnode*","reves","rght","rhs)","rhs.cost)","rhs.interval.end)","rhs.interval.end;","rhs.interval.start;","rhs.num;","rhs.sum;","right","right(null)","right(nullptr)","right(right)","right)","right;","rl","rl,","rob","rob(const","rob(nums,","robber","robber/descript","roll","roman","roman/descript","romantoint(str","room","rooms)","rooms.size();","rooms[0].size();","root","root(nullptr)","root(root)","root(std::make_shared())","root)","root))","root);","root,","root:","root;","rotat","rotatestring(str","round","round.","rover","rover,","row","row,","row.","row[l]","row[m])","row[r])","row_end","row_end)","row_end;","rows(9,","rows,","rows.","rpn","rpn)","rpn.push_back(stack.top());","rpn.push_back(stk.top());","rpn;","rr","rtn","rtn.find_p","rtn.find_q","rtn.find_q)","rtn.lca","rtn.lca;","rtn;","run","runbacktracking(","runbacktracking(0,","runbacktracking(cands,","runbacktracking(i","runbacktracking(index","runbacktracking(pool,","runbacktracking(s,","runbacktracking(str,","rundfs(","runinorder(","runinorder(curr","runinorder(root,","runpostorder(root","runpostorder(root);","runpostorder(root,","runpostorder(treenode*","runpreorder(","runpreorder(root","runpreorder(root,","runpreorder(treenode*","runreverseinorder(root","runreverseinorder(root,","runreverseinorder(treenode*","s","s(i,","s)","s)),","s),","s,","s.","s.length()","s.length(),","s.length();","s.size();","s.substr(is,","s1","s1)","s1,","s1.length();","s1[i]","s2","s2)","s2),","s2,","s2.","s2.length();","s2[j],","s2p;","s2p[word]","s2p[word])","s3","s3)","s3.length();","s3[i","s:","s;","s[0]","s[0],","s[1]","s[1],","s[2]","s[2],","s[2]:","s[3]","s[i","s[i]","s[i]:","s[j]","s[j],","s[l++];","s[n","s[n]","sa","sa:","same","same_color","same_color)","sb''.","sb'.","sb:","sc","sc:","scalabl","scale","scan","schedul","scheduler/descript","score","scrambl","scs.end());","scs.push_back(s1[","scs.push_back(s2[","scs;","search","search(str","search(vector","search(vector&","searchmatrix(vector>","searchrange(vector","searchrow(const","searchrow(matrix[r],","second","second)","secur","see","segment","segment.","segments,","segments:","select","select(piles,","select;","sell","sell_1st","sell_1st,","sell_1st:","sell_2nd","sell_2nd,","sell_2nd:","sell_first","sell_second","sell_second;","selling.","seq)","seq);","seq.pop_back();","seq.push_back(\"jfk\");","seq.push_back(edge.first);","seq;","seqs)","seqs:","sequenc","sequence/descript","sequencereconstruction(vector","ser,","serial","serialize(root","serialize(treenode*","serv","servic","set","set(id);","set(int","set(m","set(nums.begin(),","set)","set);","set.add(src_id);","set.begin();","set.emplace(1);","set.emplace(dst);","set.emplace(node);","set.emplace(p);","set.erase(it);","set.erase(next);","set.insert(n);","set.unite(src_id,","set;","setinteger(int","setzeroes(vector>","share","shared_ptr","shift","shortest","shortestcommonsupersequence(str","shortestdistance(vector>&","shortestpath(vector>&","show","shown","side","side.","signs.","similar","simpli","simplifi","simplifypath(str","singl","singli","situat","siutat","size","size(0)","size(0),","size)","size,","size;","size_1","size_2","size_a","size_b","size_left","size_left,","size_left},","size});","sk","skip","slide","slideshare:","slidingpuzzle(vector>&","slot","slots.begin();","slots.end();","slots.erase(rover);","slots.push_back({v1.begin(),","slots.push_back({v2.begin(),","slots;","slow","slow);","slow,","slow;","slowest","small","smaller","smallest","sn","so,","social","solut","solution()","solution(nums);","solution(vecs);","solution(vector&","solution(w);","solution*","solution.","solv","solve(vector>&","solvenqueens(int","solver","solvesudoku(vector>&","sort","sort(a.begin(),","sort(ans.begin(),","sort(edges.begin(),","sort(events.begin(),","sort(freq.begin(),","sort(intervals.begin(),","sort(nums.begin(),","sort(points.begin(),","sort.","sortcolors(vector","sortlist(listnode*","sourc","sp","space","span","spars","specif","specifi","specific,","specifically,","specul","split","splitstring(string&","sqrt","sqrt(doubl","sqrt(int","sqrt(n)),","sqrt(x","sqrt(x)","squar","square/descript","squares/descript","srand(time(nullptr));","src","src,","src_id","ss","stack","stack&","stack),","stack,","stack.","stack.pop();","stack.push(result);","stack.push(std::stoi(token));","stack.push(token);","stack.top();","stack:","stack;","stack>","stair","start","start)","start,","start:","start;","start[1]));","start[1],","startswith(str","state,","state.","states;","static","static_cast(max_q.top()","static_cast(nums[i","static_cast(nums[i])","static_cast(nums[i]));","static_cast(pr","static_cast(record.sum)","static_cast(std::floor(std::log10(num)))","static_cast(std::pow(10,","static_cast(succ","static_cast(sum)","stay","std::abs(len_","std::div(n,","std::greater>","std::list>","std::make_pair(pred,","std::make_shared();","std::max(a[0],","std::max(buy_first,","std::max(buy_second,","std::max(nums[bgn],","std::max(plan_a,","std::max(prev.end,","std::max(r,","std::max(rob(nums,","std::max(root","std::max(sell_first,","std::max(sell_second,","std::min(min_l_sum,","std::move(curr);","std::numeric_limits::min();","std::pair","std::priority_queue,","std::queue","std::reverse(mirror.begin(),","std::reverse(res.begin(),","std::reverse(scs.begin(),","std::reverse(str.begin()","std::reverse(str.begin(),","std::shared_ptr","std::sort(cands.begin(),","std::sort(connections.begin(),","std::sort(key.begin(),","std::sort(nums.begin(),","std::sort(nums1.begin(),","std::sort(nums2.begin(),","std::stack","std::stod(str);","std::stoi(str);","std::stoi(token);","std::stoi(token,","std::string","std::string&","std::string::npos)","std::stringstream","std::swap(nums.back(),","std::swap(nums[mid],","std::swap(src","std::to_string(bgn)","std::to_string(bgn);","std::to_string(end);","std::to_string(len","std::to_string(num);","std::unordered_map","std::unordered_map&","std::unordered_map>","std::unordered_map>&","std::unordered_map>::iterator>","std::unordered_set","std::vector","std::vector&","std::vector());","std::vector();","std::vector(n","std::vector(n,","std::vector(nn,","std::vector(num_c,","std::vector(size_b,","std::vector(t,","std::vector(target","std::vector::iterator>","std::vector>","std::vector>&","std::vector>(","step","step,","steps.","steps/","still","stk","stk)","stk);","stk.back()","stk.back();","stk.emplace(curr","stk.emplace(head);","stk.emplace(j);","stk.emplace(move(items[i]));","stk.emplace(move(list[i]));","stk.emplace(nod","stk.emplace(node);","stk.emplace(num);","stk.emplace(root);","stk.emplace_back(x);","stk.pop();","stk.pop_back();","stk.push(root);","stk.push(token);","stk.push({list[i],","stk.push({nested[i],","stk.push_back(curr);","stk.size();","stk.top()","stk.top())","stk.top().getinteger();","stk.top().getlist();","stk.top();","stk:","stk;","stk[0]","stock","stock/descript","ston","stone","stonegame(vector","stonegame(vector&","stonegame2(vector","stonegameiii(vector&","stonegamev(vector&","stones)","stones,","stones.count(next)","stones.size();","stones[1]","stones[next],","stop","store","str","str)","str,","str.begin()","str.end());","str.length();","str.push_back('","str.substr(0,","str.substr(index,","str:","str;","str[0]","str[i]","str[len","strategi","stream","stream(data);","stream)","stream;","string","string&","string(n,","string,","string.","string/descript","strings,","stringstream","strobogrammat","strs)","strs:","struct","structur","structure,","student","subarray","subarray,","subarray/","subarraysdivbyk(vector&","subarraysum(const","subarraysum(vector","subarraysum(vector&","subarraysumclosest(vector","submatrix","submatrix/descript","submatrixsum(vector>","subproblem","subsequ","subsequence'","subsequence/descript","subset","subsets(vector&","subsetswithdup(vector&","substr","substring,","substring.","substring/","substring/descript","subtract","subtre","subtree/descript","succ","succ);","succ:","succ;","successor","succs)","succs.emplace(curr);","succs.emplace(root);","succs.pop();","succs.top();","succs;","sucessor","such","such:","sudoku","suffix","suffix,","suffix.","sum","sum(0)","sum(0),","sum(0,","sum(i","sum(i)","sum(i):","sum(i,","sum(n,","sum(sum),","sum)","sum);","sum,","sum.emplace_back(w[0]);","sum/","sum/descript","sum:","sum;","sum[0];","sum[0][n","sum[i","sum[i]","sum[i][j]","sum[n","sums.push_back({0,","sums;","sums[i","super","supersequ","supersequence/","suppos","sure","surround","svnrepo","svnrepo::isbadversion(k)","swap","swap(nums[i],","swap/","switch","switch(op)","symbol","symbol)","symbol,","symbol;","symmetr","syn(m);","synthet","system","t","t)","t),","t,","t.","t.length();","t.size();","t[j],","tail","tail;","take","taken","target","target)","target))","target);","target,","target.","target:","target;","target];","task","tasks)","tasks,","tasks.size()","tasks.size();","tc:","temp","temp.quot;","test","test;","text1,","text1.length();","text2)","text2.length();","tgrea","th","that'","then,","theory,","therefore,","this,","those","threesum(vector&","threesumclosest(vector&","threesumsmaller(vector&","thu","thw","ticket","ticket[0];","ticket[1];","tickets)","tickets.size();","tickets/","tile","till","time","time);","time,","time/descript","time:","times.","times:","timestamp","timestamp)","timestamp,","timestamp;","to.","to_string(root","token","token,","token.length();","token;","tokens)","tokens:","tokens;","tonight","too.","top","top()","topdown(","topdown(0,","topdown(arr,","topdown(grid,","topdown(i","topdown(i,","topdown(m,","topdown(map,","topdown(nums,","topdown(piles,","topdown(prefix,","topdown(stones,","topolog","tortois","total","total(0),","total;","tp","tp,","trace(n1","track","transact","transform","travel","travers","traversal.","tree","tree)","tree,","tree.","tree/","tree/descript","tree/solut","tree:","treenod","treenode()","treenode(inorder[in_bgn]);","treenode(int","treenode(num);","treenode(pre[pre_bgn]);","treenode(stoi(token));","treenode(val);","treenode*","treenode*&","treenode,","treenode:","trees/descript","treetodoublylist(node*","tri","trie","trie()","trie,","trie.","trie;","trie[\"\"].insert(word);","trie[key])","trienod","trienode()","tries,","trigger","trim(s);","triplets.","trival","true","true:","true;","ts","ts,","turn","turn(0)","turn(0),","turn);","turn,","turn;","twice","twice.","two","twos,","twosum(","twosum(nums,","tx","tx,","ty","ty)","type","u.s.","ugli","uncross","undefin","underli","union","uniqu","uniquepathsiii(vector>&","unit","unordered_map","unordered_map&","unordered_map,","unordered_map>","unordered_map>&","unordered_map>>","unordered_map>>&","unordered_set","unordered_set&","unsort","until","up","updat","upon","upper","upper)","upper));","upper)};","upper:","us","v","v/","v/descript","v1,","v1.end()});","v2)","v2);","v2.end()});","v:","v[i","v[i]","val","val(0),","val(x),","val)","val);","val:","val;","valid","validipaddress(str","validtree(int","validwordabbr","validwordabbr(dictionary);","validwordabbreviation(str","validwordsquare(vector","valu","value)","value));","value);","value.","value:","value;","values.size();","values:","values[i","values[i]","values[i];","values[j]","values[n","varabl","variou","vec","vec)","vec.begin();","vec.end();","vec_bgn","vec_end","vec_end)","vecs(vecs)","vecs)","vecs:","vecs;","vector","vector&","vector(","vector();","vector(10));","vector(k,","vector(lp","vector(m","vector(n","vector(n));","vector(n,","vector(n2","vector(nb","vector(nt","vector(target","vector,","vector.","vector2d","vector2d(vec);","vector2d(vector>&","vector2d*","vector::iter","vector::iterator>>","vector::iterator>>::iter","vector>","vector>&","vector>(","vector>(n,","vector>::iter","vector>>","vector>>&","vector>>(","vector>>>","vector>>>&","veri","version","version.","version/descript","vertic","verticalorder(treenode*","vi","viii","visit","visit(1","visit(deadends.begin(),","visit(n);","visit(num_r,","visit(size_a,","visit,","visit.count(np)","visit.count(target)","visit.emplace(\"0000\");","visit.emplace(0);","visit.emplace(move(code));","visit.emplace(np);","visit;","visit[0]","visit[0][0]","visit[dst]","visit[i]","visit[src","visit[start[0]][start[1]]","visualization:","void","w","w)","w),","w.size();","w[i]","wall","wallsandgates(vector>&","want","water","way","ways/descript","weight","weight/","well.","whenev","whether","white","whitespac","whose","width","widthofbinarytree(treenode*","wildcard","win","window","window.","winnabl","winnable.","winnersquaregame(int","within","without","won't","wood","woodcut(vector","word","word)","word.","word.length();","word:","word;","word[index];","wordbreak(str","wordpattern(str","wordpatternmatch(str","words)","words.","words.end());","words.size();","words:","words;","words[0].size();","words[word]","wordsabbreviation(vector","wordsquares(vector","work","work.","write","wrong!","x","x(x),","x)","x,","x:","x;","y","y(y)","y(y),","y)","y);","y,","y;","year","zag","zero","zero.second,","zeroes/descript","zeros,","zig","zigzag","zigzagiter","zigzagiterator(vector&","zigzagiterator2","zigzaglevelorder(treenode*","{","{\"","{\"\",","{\"\"};","{\"(\",","{\"+\",","{\"/\",","{'2',","{'3',","{'4',","{'5',","{'6',","{'7',","{'8',","{'9',","{'a',","{'c',","{'d',","{'g',","{'i',","{'j',","{'l',","{'m',","{'p',","{'t',","{'v',","{'w',","{'x',","{0,","{1,","{2,","{3,","{7,","{bgn,","{dp[i","{false,","{genrange(lower,","{i","{in_bgn,","{in_mid","{l.first,","{nullptr,","{post_bgn","{post_bgn,","{pre_bgn","{r.first,","{root,","{true,","{{1,","{{}};","{}","{};","|","|x|","|y|","|y|)","|y|),","||","}","})","},","};","~","×"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction\nBrief memo about common programming puzzles.\nAbout Me\nGraduate student at Carnegie Mellon with expertise in distributed system and compiler optimization. 6-year industry experience in scalable e-Commerce backends serving 1M+ QPS, large-scale data pipeline orchestrating 10TB+ daily generated data, cloud security service protecting 250M+ endpoints.  An active open-source developer contributing to various projects, including Mozilla's JavaScript JIT compiler. A prolific security researcher with U.S. patents and IEEE Transaction on Mobile Computing publications.\nSocial Media\n\nLinkedIn: https://www.linkedin.com/in/zsshen\nGitHub: https://github.com/ZSShen\nSlideShare: https://www.slideshare.net/ZongShenShen\nMozilla: https://mzl.la/2fO3bJQ\nPortfolio: https://www.zsshen.com\n\n"},"Prefix Sum and Subarray/Subarray Sum.html":{"url":"Prefix Sum and Subarray/Subarray Sum.html","title":"Subarray Sum","keywords":"","body":"Problem\nLintCode 138. Subarray Sum\nhttps://www.lintcode.com/problem/subarray-sum\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integers\n     * @return: A list of integers includes the index of the first number and the index of the last number\n     */\n    vector subarraySum(vector &nums) {\n        // write your code here\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         *\n         *  preix(i) = num[0] + num[1] + ... + nums[i]\n         *  sum(i, j) = prefix(j) - prefix(i - 1)\n         *             = nums[i] + num[i + 1] + ... + num[j]\n         *\n         *  sum(i, j) = 0\n         *  => prefix(j) - prefix(i - 1) = 0\n         *  => prefix(j) = prefix(i - 1)\n         */\n\n        unordered_map map;\n        map[0] = -1;\n\n        int prefix = 0;\n        int n = nums.size();\n\n        for (int i = 0 ; i \n"},"Prefix Sum and Subarray/Submatrix Sum.html":{"url":"Prefix Sum and Subarray/Submatrix Sum.html","title":"Submatrix Sum","keywords":"","body":"Problem\nLintCode 405. Submatrix Sum\nhttps://www.lintcode.com/problem/405\nSolution\n\nclass Solution {\npublic:\n    /*\n     * @param matrix: an integer matrix\n     * @return: the coordinate of the left-up and right-down number\n     */\n    vector> submatrixSum(vector> &matrix) {\n        // write your code here\n\n        /**\n         *  TC: O(R * (C^2)), where\n         *      R is the number of rows\n         *      C is the number of columns\n         *\n         *  SC: O(R * C)\n         *\n         *  prefix(i) = array[0] + array[1] + ... + array[i];\n         *  sum(i, j) = prefix(j) - prefix(i - 1)\n         *  sum(i, j) = 0 => prefix(j) = prefix(i - 1)\n         *\n         *   a b c d      (a + b) -> A\n         *   e f g h  =>  (e + f) -> B\n         *   i j k l      (i + j) -> C\n         *   m n o p      (m + n) -> D\n         *\n         *   Suppose that we want to scan the matrixes spanning from the\n         *   first 2 columns, we can generate a synthetic column which merges\n         *   these 2 columns and then apply the 1D solution we use to solve\n         *   subarray sum problem to scan this synthetic column.\n         */\n\n        int m = matrix.size();\n        int n = matrix[0].size();\n\n        for (int i = 0 ; i  syn(m);\n\n            for (int j = i ; j  subarraySum(const vector& nums) {\n\n        unordered_map map;\n        map[0] = -1;\n\n        int n = nums.size();\n        int prefix = 0;\n\n        for (int i = 0 ; i \n"},"Prefix Sum and Subarray/Subarray Sum Closest.html":{"url":"Prefix Sum and Subarray/Subarray Sum Closest.html","title":"Subarray Sum Closest","keywords":"","body":"Problem\nLintCode 139. Subarray Sum Closest\nhttps://www.lintcode.com/problem/subarray-sum-closest/description\nSolution\n\n\nstruct Record {\n    int sum;\n    int index;\n\n    Record(int sum, int index)\n      : sum(sum), index(index)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /*\n     * @param nums: A list of integers\n     * @return: A list of integers includes the index of the first number and the index of the last number\n     */\n    vector subarraySumClosest(vector &nums) {\n        // write your code here\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         *\n         *  Sort the prefix sums and find the pair of the neighboring prefix\n         *  sums that has the minimum gap.\n         *\n         *  s[0] = 0\n         *  s[1] = nums[0]\n         *  s[2] = nums[1] + s[1]\n         *   .\n         *   .\n         *   .\n         *  s[n] = nums[n - 1] + s[n - 1]\n         *\n         *  s[1], s[2], s[0], s[n - 1], ..., s[3]\n         */\n\n        // \n        // key   -> the prefix sum\n        // value -> the ending index of the prefix sum\n        vector> sums;\n        sums.push_back({0, -1});\n\n        int n = nums.size(), prefix = 0;\n        for (int i = 0 ; i = max_gap) {\n                continue;\n            }\n            max_gap = gap;\n            bgn = min(sums[i].second, sums[i - 1].second) + 1;\n            end = max(sums[i].second, sums[i - 1].second);\n        }\n\n        return {bgn, end};\n    }\n};\n\n"},"Prefix Sum and Subarray/Subarray Sum Equals K.html":{"url":"Prefix Sum and Subarray/Subarray Sum Equals K.html","title":"Subarray Sum Equals K","keywords":"","body":"Problem\nLeetCode 560. Subarray Sum Equals K\nhttps://leetcode.com/problems/subarray-sum-equals-k\nSolution\nclass Solution {\npublic:\n    int subarraySum(vector& nums, int k) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         *\n         *  sum(i, j) = prefix(j) - prefix(i - 1)\n         *  => prefix(i - 1) = prefix(j) - sum(i, j)\n         *  => prefix(i - 1) = prefix(j) - k\n         */\n\n        unordered_map map;\n\n        // Set for the case that we have a prefix array sums up to k.\n        // sum(0, i) = k\n        map[0] = 1;\n\n        int ans = 0, prefix = 0;\n\n        for (int num : nums) {\n            prefix += num;\n            ans += map[sum - k];\n            ++map[prefix];\n        }\n\n        return ans;\n    }\n};\n\n"},"Prefix Sum and Subarray/Subarray Sum Divisible by K.html":{"url":"Prefix Sum and Subarray/Subarray Sum Divisible by K.html","title":"Subarray Sum Divisible by K","keywords":"","body":"Problem\nLeetCode 974. Subarray Sums Divisible by K\nhttps://leetcode.com/problems/subarray-sums-divisible-by-k/\nSolution\nclass Solution {\npublic:\n    int subarraysDivByK(vector& nums, int k) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         *\n         *  Classify prefix sums based on their remainders divided by k.\n         *\n         *  nums: 4, 5, 0, -2, -3, 1\n         *  k: 5\n         *\n         *  Prefixes  : 4, 9, 9, 7, 4, 5\n         *  Remainders: 4, 4, 4, 2, 4, 0\n         *\n         *  Groups[0]:  1  1  1  1  1  2\n         *  Groups[1]:  0  0  0  0  0  0\n         *  Groups[2]:  0  0  1  1  1  1\n         *  Groups[3]:  0  0  0  0  0  0\n         *  Groups[4]:  1  2  3  3  4  4\n         *\n         *  Count:      0  1  3  3  6  1\n         *\n         */\n\n        vector groups(k);\n\n        // Set for the case that we have a prefix array sums up to a multiple\n        // of k. sum(0, i) = nk.\n        groups[0] = 1;\n\n        int ans = 0, prefix = 0;\n\n        for (int num : nums) {\n            prefix += num;\n            prefix %= k;\n            if (prefix \n"},"Prefix Sum and Subarray/Minimum Size Subarray Sum.html":{"url":"Prefix Sum and Subarray/Minimum Size Subarray Sum.html","title":"Minimum Size Subarray Sum","keywords":"","body":"Problem\nLeetCode 209. Minimum Size Subarray Sum\nhttps://leetcode.com/problems/minimum-size-subarray-sum\nSolution\nclass Solution {\npublic:\n    int minSubArrayLen(int target, vector& nums) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(1)\n         *\n         *  Use 2 pointers, r and l, to scan the prefix sum array. In the\n         *  procedure, r is the main pointer which controls the movement of\n         *  our sliding window. In each iteration, when the subarray sum bounded\n         *  by r and l, namely prefix[r] - prefix[l], is less than or eqaul to\n         *  s, we try to adjust l so that we are able to get a smaller window\n         *  that also fulfills the problem descpretion.\n         *\n         *  Note: In real implementation, we may use a single varable to\n         *        represent the prefix sum array.\n         *\n         *    l\n         *          r\n         *  a b c d e f g h i\n         *\n         */\n\n        int n = nums.size();\n        int prefix = 0, l = 0, ans = INT_MAX;\n\n        for (int r = 0 ; r = target && l \n"},"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html":{"url":"Prefix Sum and Subarray/Maximum Size Subarray Sum Equals K.html","title":"Maximum Size Subarray Sum Equals K","keywords":"","body":"Problem\nLintCode 911. Maximum Size Subarray Sum Equals k\nhttps://www.lintcode.com/problem/maximum-size-subarray-sum-equals-k/description\nSolution\nclass Solution {\npublic:\n    int maxSubArrayLen(vector& nums, int k) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         *\n         *  sum(i, j) = prefix(j) - prefix(i - 1) = k\n         *  => prefix(i - 1) = prefix(j) - k\n         *\n         *  Since we concern the longest subarray, we only record a prefix\n         *  sum for its first occurrance. This makes sure that whenever\n         *  we query `map[prefix - k]`, we always get the minimal index, which\n         *  helps enlarge the current subarray ending at index i.\n         */\n\n        unordered_map map;\n\n        // Set up for the case that we have a prefix array sums up to k.\n        // sum(0, i) = k.\n        map[0] = -1;\n\n        int prefix = 0, ans = 0, n = nums.size();\n\n        for (int i = 0 ; i \n"},"Prefix Sum and Subarray/Contiguous Array.html":{"url":"Prefix Sum and Subarray/Contiguous Array.html","title":"Contiguous Array","keywords":"","body":"Problem\nLintCode 994. Contiguous Array\nhttps://www.lintcode.com/problem/contiguous-array/description\nSolution\nclass Solution {\npublic:\n    int findMaxLength(vector& nums) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         *\n         *  By converting 0 to -1, we transform the problem into finding\n         *  the maximum size subarray that sums up to 0.\n         */\n\n        unordered_map map;\n\n        // Set up for the case that we have a prefix array sums up to 0.\n        // sum(0, i) = 0.\n        map[0] = -1;\n\n        int prefix = 0, ans = 0, n = nums.size();\n\n        for (int i = 0 ; i \n"},"Prefix Sum and Subarray/Maximum Subarray.html":{"url":"Prefix Sum and Subarray/Maximum Subarray.html","title":"Maximum Subarray","keywords":"","body":"Problem\nLeetCode 53. Maximum Subarray\nhttps://leetcode.com/problems/maximum-subarray\nSolution\nclass Solution {\npublic:\n    int maxSubArray(vector& nums) {\n\n        int ans = nums[0], sum = 0;\n\n        for (int num : nums) {\n            sum += num;\n            ans = max(ans, sum);\n            if (sum \n"},"Prefix Sum and Subarray/Maximum Submatrix.html":{"url":"Prefix Sum and Subarray/Maximum Submatrix.html","title":"Maximum Submatrix","keywords":"","body":"Problem\nLintCode 944. Maximum Submatrix\nhttps://www.lintcode.com/problem/maximum-submatrix/description\nSolution\n\n\nclass Solution {\npublic:\n    /**\n     * @param matrix: the given matrix\n     * @return: the largest possible sum\n     */\n    int maxSubmatrix(vector> &matrix) {\n        // write your code here\n\n        /**\n         *  TC: O(R * (C^2)), where\n         *      R is the number of rows\n         *      C is the number of columns\n         *\n         *  SC: O(R * C)\n         *\n         *  i        j\n         *  a1  b1  c1  d1      s1 (a1 + b1 + c1)\n         *  a2  b2  c2  d2      s2\n         *  a3  b3  c3  d3      s3                    s2    a2 b2 c2\n         *  .   .   .   .    => .                 =>  .  => .  .  .\n         *  .   .   .   .       .                     sk    ak bk ck\n         *  an  bn  cn  dn      sn\n         *\n         */\n\n        int m = matrix.size();\n        if (m == 0) {\n            return 0;\n        }\n        int n = matrix[0].size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int max = matrix[0][0];\n\n        for (int i = 0 ; i  syn(m);\n\n            for (int j = i ; j \n"},"Prefix Sum and Subarray/Maximum Product Subarray.html":{"url":"Prefix Sum and Subarray/Maximum Product Subarray.html","title":"Maximum Product Subarray","keywords":"","body":"Problem\nLeetcode 152. Maximum Product Subarray\nhttps://leetcode.com/problems/maximum-product-subarray/\nSolution\nclass Solution {\npublic:\n    int maxProduct(vector& nums) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(1)\n         *\n         *       nums:    2, 3, -2,  4\n         *\n         *  min_sofar: 1  2  3 -12 -48\n         *  max_sofar: 1  2  6  -2   4\n         *\n         *\n         *       nums:    2, 3, -1,  4, -4\n         *\n         *  min_sofar: 1  2  3  -6 -24 -16\n         *  max_sofar: 1  2  6  -1   4  96\n         */\n\n        int min_sofar = 1, max_sofar = 1;\n        int ans = nums[0];\n\n        for (int num : nums) {\n            int min_curr = min(min(num, min_sofar * num), max_sofar * num);\n            int max_curr = max(max(num, min_sofar * num), max_sofar * num);\n\n            ans = max(ans, max_curr);\n            min_sofar = min_curr;\n            max_sofar = max_curr;\n        }\n\n        return ans;\n    }\n};\n\n"},"Prefix Sum and Subarray/Continuous Subarray Sum.html":{"url":"Prefix Sum and Subarray/Continuous Subarray Sum.html","title":"Continuous Subarray Sum","keywords":"","body":"Problem\nLeetCode 523. Continuous Subarray Sum\nhttps://leetcode.com/problems/continuous-subarray-sum\nSolution\nclass Solution {\npublic:\n    bool checkSubarraySum(vector& nums, int k) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         *\n         *  Classify prefix sums based on their remainders divided by k.\n         *\n         *  Also, since we concern the longer subarray (with size at least 2),\n         *  we only record a prefix sum for its first occurrance. This makes\n         *  sure that whenever we query `map[mod]`, we always get the minimal\n         *  index, which helps enlarge the current subarray ending at index i.\n         */\n\n        unordered_map map;\n\n        // Set for the case that we have a prefix array sums up to a multiple\n        // of k. sum(0, i) = nk.\n        map[0] = -1;\n\n        int mod = 0, n = nums.size();\n\n        for (int i = 0 ; i  1) {\n                    return true;\n                }\n            } else {\n                map[mod] = i;\n            }\n        }\n\n        return false;\n    }\n};\n\n"},"Prefix Sum and Subarray/Max Consecutive Ones III.html":{"url":"Prefix Sum and Subarray/Max Consecutive Ones III.html","title":"Max Consecutive Ones III","keywords":"","body":"Problem\nLeetcode 1004. Max Consecutive Ones III\nhttps://leetcode.com/problems/max-consecutive-ones-iii/\nSolution\nclass Solution {\npublic:\n    int longestOnes(vector& A, int K) {\n\n        /**\n         * Since all the elements in the array are either 1s or 0s,\n         * we can transform the problem into finding the longest subarray\n         * that fits the following equation:\n         *\n         * (j - i + 1) - SUM(i, j)  K) {\n                sum -= A[l++];\n            }\n\n            ans = max(ans, r - l + 1);\n        }\n\n        return ans;\n    }\n};\n\n"},"Sliding Window/Subarray Product Less than K.html":{"url":"Sliding Window/Subarray Product Less than K.html","title":"Subarray Product Less than K","keywords":"","body":"Problem\nLintCode 1075. Subarray Product Less Than K\nhttps://www.lintcode.com/problem/subarray-product-less-than-k/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array\n     * @param k: an integer\n     * @return: the number of subarrays where the product of all the elements in the subarray is less than k\n     */\n    int numSubarrayProductLessThanK(vector &nums, int k) {\n        // Write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int count = 0;\n        int res = 1;\n        int l = 0;\n\n        for (int r = 0 ; r = k && l \n"},"Sliding Window/Longest Substring without Repeating Characters.html":{"url":"Sliding Window/Longest Substring without Repeating Characters.html","title":"Longest Substring without Repeating Characters","keywords":"","body":"Problem\nLeetCode 3. Longest Substring Without Repeating Characters\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/\nSolution\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the length of string s\n         *\n         *  SC: O(1)\n         */\n\n        vector freq(128);\n        int n = s.length(), ans = 0, l = 0;\n\n        for (int r = 0 ; r  1) {\n                --freq[s[l++]];\n            }\n\n            ans = max(ans, r - l + 1);\n        }\n\n        return ans;\n    }\n};\n\n"},"Sliding Window/Longest Substring with at Most K Distinct Characters.html":{"url":"Sliding Window/Longest Substring with at Most K Distinct Characters.html","title":"Longest Substring with at Most K Distinct Characters","keywords":"","body":"Problem\nLeetCode 340. Longest Substring with At Most K Distinct Characters\nhttps://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters\nSolution\nclass Solution {\npublic:\n    int lengthOfLongestSubstringKDistinct(string s, int k) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the length of string s\n         *\n         *  SC: O(1)\n         */\n\n        vector freq(128);\n        int n = s.length(), ans = 0, count = 0, l = 0;\n\n        for (int r = 0 ; r  k) {\n                ch = s[l++];\n                --freq[ch];\n                if (freq[ch] == 0) {\n                    --count;\n                }\n            }\n\n            ans = max(ans, r - l + 1);\n        }\n\n        return ans;\n    }\n};\n\n"},"Sliding Window/Find All Anagrams in a String.html":{"url":"Sliding Window/Find All Anagrams in a String.html","title":"Find All Anagrams in a String","keywords":"","body":"Problem\nLeetCode 438. Find All Anagrams in a String\nhttps://leetcode.com/problems/find-all-anagrams-in-a-string\nSolution\nclass Solution {\npublic:\n    vector findAnagrams(string s, string p) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the length of string s\n         *\n         *  SC: O(1)\n         */\n\n        vector freq_s(128), freq_p(128);\n        int unique = 0;\n        for (char ch : p) {\n            ++freq_p[ch];\n            if (freq_p[ch] == 1) {\n                ++unique;\n            }\n        }\n\n        vector ans;\n        int ls = s.length(), lp = p.length();\n        int l = 0, count = 0;\n\n        for (int r = 0 ; r \n"},"Sliding Window/Minimum Window Substring.html":{"url":"Sliding Window/Minimum Window Substring.html","title":"Minimum Window Substring","keywords":"","body":"Problem\nLeetCode 76. Minimum Window Substring\nhttps://leetcode.com/problems/minimum-window-substring\nSolution\nclass Solution {\npublic:\n    string minWindow(string s, string t) {\n\n        vector freq_s(128), freq_t(128);\n        int count_s = 0, count_t = 0;\n\n        for (char ch : t) {\n            ++freq_t[ch];\n            if (freq_t[ch] == 1) {\n                ++count_t;\n            }\n        }\n\n        int ls = s.length(), bgn = -1, opt = INT_MAX, l = 0;\n\n        for (int r = 0 ; r \n"},"Sliding Window/Moving Average from Data Stream.html":{"url":"Sliding Window/Moving Average from Data Stream.html","title":"Moving Average from Data Stream","keywords":"","body":"Problem\nLeetCode 346. Moving Average from Data Stream\nhttps://leetcode.com/problems/moving-average-from-data-stream\nSolution\nclass MovingAverage {\npublic:\n    /** Initialize your data structure here. */\n    MovingAverage(int size)\n        : capacity(size), size(0), sum(0)\n    { }\n\n    double next(int val) {\n        sum += val;\n        q.emplace_back(val);\n        ++size;\n\n        if (size > capacity) {\n            sum -= q.front();\n            q.pop_front();\n            --size;\n        }\n\n        return static_cast(sum) / size;\n    }\n\nprivate:\n    int capacity, size, sum;\n    deque q;\n};\n\n/**\n * Your MovingAverage object will be instantiated and called as such:\n * MovingAverage* obj = new MovingAverage(size);\n * double param_1 = obj->next(val);\n */\n\n"},"Sliding Window/Find Median from Data Stream.html":{"url":"Sliding Window/Find Median from Data Stream.html","title":"Find Median from Data Stream","keywords":"","body":"Problem\nLeetCode 295. Find Median from Data Stream\nhttps://leetcode.com/problems/find-median-from-data-stream\nSolution\nclass MedianFinder {\npublic:\n    /** initialize your data structure here. */\n    MedianFinder()\n    { }\n\n    void addNum(int num) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         */\n\n        if (max_q.empty()) {\n            max_q.emplace(num);\n            return;\n        }\n\n        insert(num);\n        rebalance();\n    }\n\n    double findMedian() {\n\n        if (max_q.size() == min_q.size()) {\n            return static_cast(max_q.top() + min_q.top()) / 2;\n        } else {\n            return max_q.size() > min_q.size() ? max_q.top() : min_q.top();\n        }\n    }\n\nprivate:\n    void insert(int num) {\n\n        if (num  min_q.size() + 1) {\n            min_q.emplace(max_q.top());\n            max_q.pop();\n        }\n\n        if (min_q.size() > max_q.size() + 1) {\n            max_q.emplace(min_q.top());\n            min_q.pop();\n        }\n    }\n\n    priority_queue, less> max_q;\n    priority_queue, greater> min_q;\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */\n\n"},"Sliding Window/Sliding Window Median.html":{"url":"Sliding Window/Sliding Window Median.html","title":"Sliding Window Median","keywords":"","body":"Problem\nLeetCode 480. Sliding Window Median\nhttps://leetcode.com/problems/sliding-window-median\nSolution\nclass Solution {\npublic:\n    vector medianSlidingWindow(vector& nums, int k) {\n\n        /**\n         *  TC: O(NlogK), where\n         *      N is the number of elements\n         *      K is the window size\n         *\n         *  SC: O(K)\n         */\n\n        multiset> max_q;\n        multiset> min_q;\n        vector ans;\n\n        int n = nums.size(), c = 0;\n        for (int i = 0 ; i  k) {\n                remove(nums[i - k], max_q, min_q);\n                --c;\n            }\n\n            rebalance(max_q, min_q);\n\n            if (c == k) {\n                ans.emplace_back(query(max_q, min_q));\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    void insert(\n            int num,\n            multiset>& max_q,\n            multiset>& min_q) {\n\n        if (max_q.empty()) {\n            max_q.emplace(num);\n            return;\n        }\n\n        if (num >& max_q,\n            multiset>& min_q) {\n\n        int M_size = max_q.size();\n        int m_size = min_q.size();\n\n        if (M_size - m_size > 1) {\n            auto it = max_q.begin();\n            min_q.emplace(*it);\n            max_q.erase(it);\n            return;\n        }\n\n        if (m_size - M_size > 1) {\n            auto it = min_q.begin();\n            max_q.emplace(*it);\n            min_q.erase(it);\n        }\n    }\n\n    void remove(\n            int num,\n            multiset>& max_q,\n            multiset>& min_q) {\n\n        auto it = max_q.find(num);\n        if (it != max_q.end()) {\n            max_q.erase(it);\n            return;\n        }\n\n        it = min_q.find(num);\n        min_q.erase(it);\n    }\n\n    double query(\n            multiset>& max_q,\n            multiset>& min_q) {\n\n        int M_size = max_q.size();\n        int m_size = min_q.size();\n\n        if (M_size == m_size) {\n            double a = *max_q.begin();\n            double b = *min_q.begin();\n            return (a + b) / 2;\n        }\n\n        return M_size > m_size ? *max_q.begin() : *min_q.begin();\n    }\n};\n\n"},"Sliding Window/Sliding Window Maximum.html":{"url":"Sliding Window/Sliding Window Maximum.html","title":"Sliding Window Maximum","keywords":"","body":"Problem\nLeetCode 239. Sliding Window Maximum\nhttps://leetcode.com/problems/sliding-window-maximum\nSolution\nclass Solution {\npublic:\n    vector maxSlidingWindow(vector& nums, int k) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(K), where\n         *      K is the window size\n         */\n\n        int n = nums.size();\n\n        deque q;\n        for (int i = 0 ; i  ans;\n        ans.emplace_back(nums[q.front()]);\n\n        for (int i = k ; i & q, vector& nums, int index) {\n\n        int num = nums[index];\n        while (!q.empty() && num > nums[q.back()]) {\n            q.pop_back();\n        }\n        q.emplace_back(index);\n    }\n\n    void remove(deque& q, int index) {\n        if (q.front() == index) {\n            q.pop_front();\n        }\n    }\n};\n\n"},"Two Sum/3Sum.html":{"url":"Two Sum/3Sum.html","title":"3Sum","keywords":"","body":"Problem\nLeetCode 15. 3Sum\nhttps://leetcode.com/problems/3sum\nSolution\nclass Solution {\npublic:\n    vector> threeSum(vector& nums) {\n\n        /**\n         *  TC: O(N^2), where\n         *      N is the number of elements\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         */\n\n        sort(nums.begin(), nums.end());\n\n        vector> ans;\n        int n = nums.size();\n\n        for (int i = 0 ; i  0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n\n            // Since the remaining numbers are all positive, it is impossible\n            // to generate the legal triplets. We thus exit the loop here.\n            if (nums[i] > 0) {\n                break;\n            }\n\n            twoSum(nums, i + 1, n - 1, -nums[i], ans);\n        }\n\n        return ans;\n    }\n\nprivate:\n    void twoSum(\n            const vector& nums,\n            int l, int r, int t,\n            vector>& ans) {\n\n        while (l  l && nums[r] == nums[r + 1]);\n                continue;\n            }\n\n            if (sum > t) {\n                while (--r > l && nums[r] == nums[r + 1]);\n            } else {\n                while (++l \n"},"Two Sum/4Sum.html":{"url":"Two Sum/4Sum.html","title":"4Sum","keywords":"","body":"Problem\nLeetCode 18. 4Sum\nhttps://leetcode.com/problems/4sum\nSolution\nclass Solution {\npublic:\n    vector> fourSum(vector& nums, int target) {\n\n        /**\n         *  TC: O(N^3), where\n         *      N is the number of elements\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         */\n\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n\n        vector> ans;\n\n        for (int i = 0 ; i  0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n\n            for (int j = i + 1 ; j  i + 1 && nums[j] == nums[j - 1]) {\n                    continue;\n                }\n\n                int l = j + 1, r = n - 1;\n                helper(nums, i, j, l, r, target - nums[i] - nums[j], ans);\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    void helper(\n            const vector& nums,\n            int i, int j, int l, int r, int t,\n            vector>& ans) {\n\n        while (l  t) {\n                while (l \n"},"Two Sum/3Sum Closest.html":{"url":"Two Sum/3Sum Closest.html","title":"3Sum Closest","keywords":"","body":"Problem\nLeetCode 16. 3Sum Closest\nhttps://leetcode.com/problems/3sum-closest\nSolution\nclass Solution {\npublic:\n    int threeSumClosest(vector& nums, int target) {\n\n        /**\n         *  TC: O(N^2), where\n         *      N is the number of elements\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         */\n\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n\n        int ans = 0, opt_diff = INT_MAX;\n\n        for (int i = 0 ; i \n"},"Two Sum/3Sum Smaller.html":{"url":"Two Sum/3Sum Smaller.html","title":"3Sum Smaller","keywords":"","body":"Problem\nLeetCode 259. 3Sum Smaller\nhttps://leetcode.com/problems/3sum-smaller\nSolution\nclass Solution {\npublic:\n    int threeSumSmaller(vector& nums, int target) {\n\n        /**\n         *  TC: O(N^2), where\n         *      N is the number of elements\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         */\n\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n\n        int ans = 0;\n\n        for (int i = 0 ; i = target) {\n                    --r;\n                } else {\n                    ans += r - l;\n                    ++l;\n                }\n            }\n\n            target += nums[i];\n        }\n\n        return ans;\n    }\n};\n\n"},"Element Partition/Move Zeros.html":{"url":"Element Partition/Move Zeros.html","title":"Move Zeros","keywords":"","body":"Problem\nLintCode 539. Move Zeros\nhttps://www.lintcode.com/problem/move-zeroes/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an integer array\n     * @return: nothing\n     */\n    void moveZeroes(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        int l = 0, r = 0;\n\n        while (r \n"},"Element Partition/Partition Array.html":{"url":"Element Partition/Partition Array.html","title":"Partition Array","keywords":"","body":"Problem\nLintCode 31. Partition Array\nhttps://www.lintcode.com/problem/partition-array/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: The integer array you should partition\n     * @param k: An integer\n     * @return: The index after partition\n     */\n    int partitionArray(vector &nums, int k) {\n        // write your code here\n\n        int n = nums.size();\n        int l = 0, r = 0;\n\n        while (r \n"},"Element Partition/Sort Colors.html":{"url":"Element Partition/Sort Colors.html","title":"Sort Colors","keywords":"","body":"Problem\nLintCode 148. Sort Colors\nhttps://www.lintcode.com/problem/sort-colors/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integer which is 0, 1 or 2\n     * @return: nothing\n     */\n    void sortColors(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        int zero = 0, one = 0, two = n - 1;\n\n        /**\n         * We use 3 pointers to track the elements:\n         *\n         *  1. The \"one\" pointer guides the scanning procedure.\n         *  2. The \"zero\" pointer points to tail of the consecutive zeros, which\n         *     are shifted to the left hand side of the array.\n         *  3. The \"two\" pointer points to the tail of the consecutive twos,\n         *     which are shifted to the right hand size of the array.\n         *\n         *       zero     two\n         *          |     |\n         *          v     v\n         *  0 0 0 0 1 1 1 1 2 2 2 2\n         */\n\n        while (one \n"},"Element Partition/Kth Smallest Number in Unsorted Array.html":{"url":"Element Partition/Kth Smallest Number in Unsorted Array.html","title":"Kth Smallest Number in Unsorted Array","keywords":"","body":"Problem\nLintCode 461. Kth Smallest Numbers in Unsorted Array\nhttps://www.lintcode.com/problem/kth-smallest-numbers-in-unsorted-array/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param k: An integer\n     * @param nums: An integer array\n     * @return: kth smallest element\n     */\n    int kthSmallest(int k, vector &nums) {\n        // write your code here\n\n        return quickSelect(nums, 0, nums.size() - 1, k - 1);\n    }\n\nprivate:\n    int quickSelect(auto& nums, int bgn, int end, int k) {\n\n        int mid = (bgn + end) / 2;\n        int pivot = nums[mid];\n\n        std::swap(nums[mid], nums[end]);\n\n        int l = bgn, r = bgn;\n        while (r \n"},"Element Partition/Remove Duplicates from Sorted Array.html":{"url":"Element Partition/Remove Duplicates from Sorted Array.html","title":"Remove Duplicates from Sorted Array","keywords":"","body":"Problem\nLintCode 100. Remove Duplicates from Sorted Array\nhhttps://www.lintcode.com/problem/remove-duplicates-from-sorted-array/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param nums: An ineger array\n     * @return: An integer\n     */\n    int removeDuplicates(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int l = 0;\n        for (int r = 1 ; r \n"},"Element Partition/Remove Duplicates from Sorted Array II.html":{"url":"Element Partition/Remove Duplicates from Sorted Array II.html","title":"Remove Duplicates from Sorted Array II","keywords":"","body":"Problem\nLintCode 101. Remove Duplicates from Sorted Array II\nhttps://www.lintcode.com/problem/remove-duplicates-from-sorted-array-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: a list of integers\n     * @return : return an integer\n     */\n    int removeDuplicates(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int l = 0;\n        if (l \n"},"Element Partition/Intersection of Two Arrays II.html":{"url":"Element Partition/Intersection of Two Arrays II.html","title":"Intersection of Two Arrays II","keywords":"","body":"Problem\nLeetCode 548. Intersection of Two Arrays II\nhttps://www.lintcode.com/problem/intersection-of-two-arrays-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums1: an integer array\n     * @param nums2: an integer array\n     * @return: an integer array\n     */\n    vector intersection(vector &nums1, vector &nums2) {\n        // write your code here\n\n        std::sort(nums1.begin(), nums1.end());\n        std::sort(nums2.begin(), nums2.end());\n\n        std::vector ans;\n        int i = 0, j = 0;\n        int size_1 = nums1.size(), size_2 = nums2.size();\n        while (i \n"},"Element Partition/Rotate String.html":{"url":"Element Partition/Rotate String.html","title":"Rotate String","keywords":"","body":"Problem\nLintCode 8. Rotate String\nhttps://www.lintcode.com/problem/rotate-string/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param str: An array of char\n     * @param offset: An integer\n     * @return: nothing\n     */\n    void rotateString(string &str, int offset) {\n        // write your code here\n\n        int n = str.length();\n\n        if (offset == 0 || n == 0) {\n            return;\n        }\n\n        int r = n - (offset % n);\n\n        /**\n         *  a b c d e f g\n         *\n         *  offset = 3\n         *  r = n - offset = 4\n         *\n         *  (a b c d) (e f g)\n         *  (d c b a) (g f e)\n         * => e f g a b c d\n         *\n         */\n\n        std::reverse(str.begin(), str.begin() + r);\n        std::reverse(str.begin() + r, str.end());\n        std::reverse(str.begin(), str.end());\n    }\n};\n\n"},"Monotonous Stack/Min Stack.html":{"url":"Monotonous Stack/Min Stack.html","title":"Min Stack","keywords":"","body":"Problem\nLeetCode 155. Min Stack\nhttps://leetcode.com/problems/min-stack\nSolution\nclass MinStack {\npublic:\n    /** initialize your data structure here. */\n    MinStack()\n        : size(0) {\n\n    }\n\n    void push(int x) {\n\n        stk.emplace_back(x);\n\n        if (size == 0) {\n            dp.emplace_back(x);\n        } else {\n            dp.emplace_back(min(x, dp.back()));\n        }\n\n        ++size;\n    }\n\n    void pop() {\n        stk.pop_back();\n        dp.pop_back();\n        --size;\n    }\n\n    int top() {\n        return stk.back();\n    }\n\n    int getMin() {\n        return dp.back();\n    }\n\nprivate:\n    int size;\n    vector stk;\n    vector dp;\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj->push(x);\n * obj->pop();\n * int param_3 = obj->top();\n * int param_4 = obj->getMin();\n */\n\n"},"Monotonous Stack/Next Greater Element I.html":{"url":"Monotonous Stack/Next Greater Element I.html","title":"Next Greater Element I","keywords":"","body":"Problem\nLeetCode 496. Next Greater Element I\nhttps://leetcode.com/problems/next-greater-element-i\nSolution\nclass Solution {\npublic:\n    vector nextGreaterElement(vector& nums1, vector& nums2) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements of nums2\n         *\n         *  SC: O(N)\n         *\n         *  Maintain a monotonous non-increasing stack for the elements of nums2\n         *\n         *  nums2:  1 3 4 2\n         *\n         *  stk:\n         *  next[1] = -1, next[3] = -1, next[4] = -1, next[2] = -1\n         *\n         *  stk: 1\n         *  next[1] = -1, next[3] = -1, next[4] = -1, next[2] = -1\n         *\n         *  stk: 3\n         *  next[1] = 3 , next[3] = -1, next[4] = -1, next[2] = -1\n         *\n         *  stk: 4\n         *  next[1] = 3 , next[3] = 4, next[4] = -1, next[2] = -1\n         *\n         *  stk: 4 2\n         *  next[1] = 3 , next[3] = 4, next[4] = -1, next[2] = -1\n         *\n         *\n         *  Then, map the next greater elements for the elements of nums1\n         */\n\n        unordered_map map;\n        stack stk;\n\n        for (int num : nums2) {\n            while (!stk.empty() && num > stk.top()) {\n                map[stk.top()] = num;\n                stk.pop();\n            }\n            stk.emplace(num);\n        }\n\n        vector ans;\n        for (int num : nums1) {\n            int next = (map.count(num) == 1) ? map[num] : -1;\n            ans.emplace_back(next);\n        }\n\n        return ans;\n    }\n};\n\n"},"Monotonous Stack/Next Greater Element II.html":{"url":"Monotonous Stack/Next Greater Element II.html","title":"Next Greater Element II","keywords":"","body":"Problem\nLintCode 1201. Next Greater Element II\nhttps://www.lintcode.com/problem/next-greater-element-ii/description\nSolution\nclass Solution {\npublic:\n    vector nextGreaterElements(vector& nums) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: (N)\n         *\n         *  Flatten the circular traversal by doubling the array size and\n         *  checking each element twice.\n         */\n\n        int n = nums.size();\n        int nn = n  stk;\n        vector ans(n, -1);\n\n        for (int i = 0 ; i  nums[stk.top()]) {\n                ans[stk.top()] = num;\n                stk.pop();\n            }\n\n            stk.emplace(j);\n        }\n\n        return ans;\n    }\n};\n\n"},"Monotonous Stack/Largest Rectangle in Histogram.html":{"url":"Monotonous Stack/Largest Rectangle in Histogram.html","title":"Largest Rectangle in Histogram","keywords":"","body":"Problem\nLintCode 122. Largest Rectangle in Histogram\nhttps://www.lintcode.com/problem/largest-rectangle-in-histogram/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param height: A list of integer\n     * @return: The area of largest rectangle in the histogram\n     */\n    int largestRectangleArea(vector &heights) {\n        // write your code here\n\n        /**\n         *\n         *         *\n         *       * *\n         *       * *\n         *       * *   *\n         *   *   * * * *\n         *   * * * * * *\n         *   2 1 5 6 2 3\n         *\n         *\n         *   Let's consider the siutation that the stack has 1, 5, and 6, and\n         *   then we see 2, the number that is less than 6.\n         *\n         *   1st:   2nd:\n         *\n         *    *\n         *    *     * *\n         *    *     * *\n         *    *     * *\n         *    *     * *\n         *    *     * *\n         *    6     5 6\n         *\n         *    1x6   2x5\n         *\n         *    Let' consider the situation that the stack has 1, 2, 3, and\n         *    then we use a dummy number, -1, to trigger the last examination.\n         *\n         *   1st:   2nd:       3rd:\n         *\n         *    *\n         *    *     * * * *\n         *    *     * * * *    * * * * * *\n         *    3     5 6 2 3    2 1 5 6 2 3\n         *\n         *    1x3   4x2        6x1\n         *\n         */\n\n        int n = heights.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int max = 0;\n        std::stack stk;\n\n        for (int i = 0 ; i \n"},"Monotonous Stack/Maximal Rectangle.html":{"url":"Monotonous Stack/Maximal Rectangle.html","title":"Maximal Rectangle","keywords":"","body":"Problem\nLintCode 510. Maximal Rectangle\nhttps://www.lintcode.com/problem/maximal-rectangle/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: a boolean 2D matrix\n     * @return: an integer\n     */\n    int maximalRectangle(vector> &matrix) {\n        // write your code here\n\n        /**\n         *    Reduce the problem to find the maximal rectangle in a histogram.\n         *\n         *                                 *\n         *    [1, 1, 0, 0, 1],             *\n         *    [0, 1, 0, 0, 1],         * * *\n         *    [0, 0, 1, 1, 1],  =>     * * *\n         *    [0, 0, 1, 1, 1]      0 0 2 2 4\n         *\n         */\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return 0;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        int max = 0;\n        std::vector heights(num_c, 0);\n\n        for (int i = 0 ; i  stk;\n\n        for (int i = 0 ; i \n"},"Monotonous Stack/Max Tree.html":{"url":"Monotonous Stack/Max Tree.html","title":"Max Tree","keywords":"","body":"Problem\nLintCode 128. Max Tree\nhttps://www.lintcode.com/problem/max-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param A: Given an integer array with no duplicates.\n     * @return: The root of max tree.\n     */\n    TreeNode * maxTree(vector &A) {\n        // write your code here\n\n        /**\n         *  1. If the value stored in the new node is greater than the value\n         *     storeed in the previous node (the node on top of the stack),\n         *     we need to pop all the nodes from the stack until that we meet\n         *     a node contains the greater value or the stack is empty.\n         *     Moreover, we need to assign the last poped node as the left\n         *     child of this new node.\n         *\n         *  2. If the value stored in the new node is less than the value\n         *     stored in the previous node (the node on top of the stack),\n         *     we need to assign this new node as the right child of the\n         *     previous node.\n         *\n         *      2, 5, 6, 0, 3, 1\n         *\n         *  Stack: 2,\n         *         2, 5\n         *         5\n         *         5, 6\n         *         6\n         *         6, 0\n         *         6, 0, 3\n         *         6, 3\n         *         6, 3, 1\n         *\n         *  Tree:\n         *\n         *      2 =>  5  =>  6  =>  6    =>  6   =>   6\n         *           /      /      / \\      / \\      / \\\n         *          2      5      5   0    5   3    5   3\n         *                /      /        /   /    /   / \\\n         *               2      2        2   0    2   0   1\n         */\n\n        std::vector stk;\n\n        for (int num : A) {\n\n            auto curr = new TreeNode(num);\n\n            while (!stk.empty() && num > stk.back()->val) {\n                curr->left = stk.back();\n                stk.pop_back();\n            }\n\n            if (!stk.empty()) {\n                stk.back()->right = curr;\n            }\n\n            stk.push_back(curr);\n        }\n\n        return (!stk.empty()) ? stk[0] : nullptr;\n    }\n};\n\n"},"Priority Queue/Kth Smallest Number in Sorted Matrix.html":{"url":"Priority Queue/Kth Smallest Number in Sorted Matrix.html","title":"Kth Smallest Number in Sorted Matrix","keywords":"","body":"Problem\nLeetCode 378. Kth Smallest Element in a Sorted Matrix\nhttps://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix\nSolution\nstruct Record {\n    int num;\n    int r;\n    int c;\n\n    Record(int num, int r, int c)\n      : num(num),\n        r(r),\n        c(c)\n    { }\n};\n\n\nstruct RecordCompare {\n    bool operator() (const Record& lhs, const Record& rhs) {\n        return lhs.num > rhs.num;\n    }\n};\n\n\nclass Solution {\npublic:\n    int kthSmallest(vector>& mat, int k) {\n\n        /**\n         *  TC: O(KlogK)\n         *\n         *  SC: O(K)\n         *      We have up to K elements stored in the minimum heap\n         */\n\n        int m = mat.size();\n        int n = mat[0].size();\n\n        priority_queue, RecordCompare> q;\n        q.emplace(mat[0][0], 0, 0);\n\n        unordered_set visit;\n        visit.emplace(0);\n\n        int num;\n        for (int i = 0 ; i \n"},"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html":{"url":"Priority Queue/Kth Smallest Sum in Two Sorted Arrays.html","title":"Kth Smallest Sum in Two Sorted Arrays","keywords":"","body":"Problem\nLintCode 465. Kth Smallest Sum In Two Sorted Arrays\nhttps://www.lintcode.com/problem/kth-smallest-sum-in-two-sorted-arrays/description\nSolution\n\nstruct Record {\n    int sum;\n    int idx_a;\n    int idx_b;\n\n    Record(int sum, int idx_a, int idx_b)\n      : sum(sum), idx_a(idx_a), idx_b(idx_b)\n    { }\n};\n\n\nstruct RecordCompare {\n\n    bool operator() (const auto& lhs, const auto& rhs) {\n        return lhs.sum > rhs.sum;\n    }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param A: an integer arrays sorted in ascending order\n     * @param B: an integer arrays sorted in ascending order\n     * @param k: An integer\n     * @return: An integer\n     */\n    int kthSmallestSum(vector &A, vector &B, int k) {\n        // write your code here\n\n        /**\n         *  a = [1, 7, 11]\n         *  b = [2, 4, 6]\n         *\n         *\n         *  3, 5, 7, 9\n         *\n         *  (1, 2) -> (1, 4) -> (1, 6) -> (6, 7) -> (2, 11)\n         *            (2, 7)    (4, 7)              (7, 4)\n         *\n         *  O(KlogK)\n         */\n\n        int size_a = A.size();\n        int size_b = B.size();\n\n        std::priority_queue, RecordCompare> queue;\n        queue.push(Record(A[0] + B[0], 0, 0));\n\n        std::vector>\n            visit(size_a, std::vector(size_b, false));\n        visit[0][0] = true;\n\n        for (int i = 0 ; i \n"},"Priority Queue/Kth Largest in N Arrays.html":{"url":"Priority Queue/Kth Largest in N Arrays.html","title":"Kth Largest in N Arrays","keywords":"","body":"Problem\nLintCode 543. Kth Largest in N Arrays\nhttps://www.lintcode.com/problem/kth-largest-in-n-arrays/description\nSolution\n\nclass Solution {\npublic:\n    /**\n     * @param arrays: a list of array\n     * @param k: An integer\n     * @return: an integer, K-th largest element in N arrays\n     */\n    int KthInArrays(vector> &arrays, int k) {\n        // write your code here\n\n        std::priority_queue, std::greater> queue;\n        for (const auto& array : arrays) {\n            for (int num : array) {\n                queue.push(num);\n\n                if (queue.size() > k) {\n                    queue.pop();\n                }\n            }\n        }\n\n        return queue.top();\n    }\n};\n\n"},"Priority Queue/Ugly Number II.html":{"url":"Priority Queue/Ugly Number II.html","title":"Ugly Number II","keywords":"","body":"Problem\nLeetCode 264. Ugly Number II\nhttps://leetcode.com/problems/ugly-number-ii\nSolution\nclass Solution {\npublic:\n    int nthUglyNumber(int n) {\n\n        /**\n         * TC: O(NlogN)\n         * SC: O(N)\n         */\n\n        set set;\n        set.emplace(1);\n        long ans = 1;\n\n        for (int i = 0 ; i \n"},"Priority Queue/Super Ugly Number.html":{"url":"Priority Queue/Super Ugly Number.html","title":"Super Ugly Number","keywords":"","body":"Problem\nLeetCode 313. Super Ugly Number\nhttps://leetcode.com/problems/super-ugly-number\nSolution\nclass Solution {\npublic:\n    int nthSuperUglyNumber(int n, vector& primes) {\n\n        /**\n         *  TC: O(N * logN * K), where\n         *      K is the number of primes\n         *\n         *  SC: O(N * K)\n         */\n\n        set set;\n        set.emplace(1);\n\n        int ans;\n        for (int i = 0 ; i \n"},"Priority Queue/K Closest Points.html":{"url":"Priority Queue/K Closest Points.html","title":"K Closest Points","keywords":"","body":"Problem\nLeetCode 973. K Closest Points to Origin\nhttps://leetcode.com/problems/k-closest-points-to-origin\nSolution\nstruct Record {\n    int x, y;\n    double d;\n\n    Record(int x, int y, double d)\n        : x(x), y(y), d(d)\n    { }\n};\n\n\nstruct RecordCompare {\n    bool operator() (const Record& lhs, const Record& rhs) {\n        return lhs.d > kClosest(vector>& points, int k) {\n\n        /**\n         *  TC: O(N * logK)\n         *  SC: O(K)\n         */\n\n        priority_queue, RecordCompare> q;\n\n        for (const auto& p : points) {\n            int x = p[0], y = p[1];\n            double d = sqrt(x * x + y * y);\n\n            q.push(Record(x, y, d));\n            if (q.size() > k) {\n                q.pop();\n            }\n        }\n\n        vector> ans;\n        while (!q.empty()) {\n            auto r = q.top();\n            q.pop();\n            ans.push_back({r.x, r.y});\n        }\n\n        return ans;\n    }\n};\n\n"},"Priority Queue/High Five.html":{"url":"Priority Queue/High Five.html","title":"High Five","keywords":"","body":"Problem\nLeetCode 1086. High Five\nhttps://leetcode.com/problems/high-five\nSolution\nclass Solution {\npublic:\n    vector> highFive(vector>& items) {\n\n        /**\n         *  TC: O(N * log5), where\n         *      N is the number of items\n         *\n         *  SC: O(N)\n         */\n\n        unordered_map, greater>> map;\n\n        for (const auto& item : items) {\n            int id = item[0];\n            int score = item[1];\n\n            map[id].emplace(score);\n            if (map[id].size() > 5) {\n                map[id].pop();\n            }\n        }\n\n        vector> ans;\n\n        for (auto& entry : map) {\n            int id = entry.first;\n            int score = 0;\n\n            auto& queue = entry.second;\n            int size = queue.size();\n\n            while (!queue.empty()) {\n                score += queue.top();\n                queue.pop();\n            }\n\n            ans.push_back({id, score / size});\n        }\n\n        sort(ans.begin(), ans.end());\n\n        return ans;\n    }\n};\n\n"},"Priority Queue/Merge K Sorted Interval Lists.html":{"url":"Priority Queue/Merge K Sorted Interval Lists.html","title":"Merge K Sorted Interval Lists","keywords":"","body":"Problem\nLintCode 577. Merge K Sorted Interval Lists\nhttps://www.lintcode.com/problem/merge-k-sorted-interval-lists/description\nSolution\n/**\n * Definition of Interval:\n * classs Interval {\n *     int start, end;\n *     Interval(int start, int end) {\n *         this->start = start;\n *         this->end = end;\n *     }\n * }\n */\n\n\nstruct Record {\n    Interval interval;\n    int id;\n    int index;\n\n    Record(Interval interval, int id, int index)\n      : interval(interval), id(id), index(index)\n    { }\n};\n\n\nstruct RecordCompare {\n    bool operator() (const auto& lhs, const auto& rhs) {\n        if (lhs.interval.start == rhs.interval.end) {\n            return lhs.interval.end > rhs.interval.end;\n        }\n        return lhs.interval.start > rhs.interval.start;\n    }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param intervals: the given k sorted interval lists\n     * @return:  the new sorted interval list\n     */\n    vector mergeKSortedIntervalLists(vector> &intervals) {\n        // write your code here\n\n        std::priority_queue, RecordCompare> queue;\n        int k = intervals.size();\n        for (int i = 0 ; i  ans;\n\n        while (!queue.empty()) {\n            rec = queue.top();\n            queue.pop();\n\n            auto curr = rec.interval;\n            id = rec.id;\n            index = rec.index;\n\n            if (index  prev.end) {\n                ans.emplace_back(std::move(prev));\n                prev = std::move(curr);\n                continue;\n            }\n\n            prev.end = std::max(prev.end, curr.end);\n        }\n        ans.emplace_back(std::move(prev));\n\n        return ans;\n    }\n};\n\n"},"Greedy/Reorganize String.html":{"url":"Greedy/Reorganize String.html","title":"Reorganize String","keywords":"","body":"Problem\nLeetCode 767. Reorganize String\nhttps://leetcode.com/problems/reorganize-string\nSolution\nclass Solution {\npublic:\n    string reorganizeString(string s) {\n\n        /**\n         *  TC: O(N * log(26)), where\n         *      N is the string length\n         *\n         *  SC: O(26)\n         */\n\n        vector freq(26);\n        for (char ch : s) {\n            ++freq[ch - 'a'];\n        }\n\n        using T = pair;\n        priority_queue, less<>> q;\n        for (int i = 0 ; i  0) {\n                q.push({freq[i], 'a' + i});\n            }\n        }\n\n        string ans;\n\n        while (!q.empty()) {\n            auto a = q.top();\n            q.pop();\n\n            if (q.empty()) {\n                if (a.first > 1) {\n                    return \"\";\n                } else {\n                    ans.push_back(a.second);\n                    break;\n                }\n            }\n\n            auto b = q.top();\n            q.pop();\n\n            ans.push_back(a.second);\n            ans.push_back(b.second);\n\n            if (a.first > 1) {\n                q.push({a.first - 1, a.second});\n            }\n            if (b.first > 1) {\n                q.push({b.first - 1, b.second});\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Greedy/Task Scheduler.html":{"url":"Greedy/Task Scheduler.html","title":"Task Scheduler","keywords":"","body":"Problem\nLintCode 945. Task Scheduler\nhttps://www.lintcode.com/problem/task-scheduler/description\nSolution\nclass Solution {\npublic:\n    int leastInterval(vector& tasks, int n) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of tasks\n         *\n         *  SC: O(26)\n         *\n         *  A: 5\n         *  B: 4\n         *  C: 2\n         *\n         *  n = 2\n         *\n         *  A _ _ A _ _ A _ _ A _ _ A\n         *\n         *  A B _ A B _ A B _ A B _ A\n         *\n         *  A B C A B C A B _ A B _ A\n         *\n         *  # of tasks      : 11\n         *  # of idle slots : 2\n         */\n\n        vector freq(26);\n        for (char ch : tasks) {\n            ++freq[ch - 'A'];\n        }\n\n        sort(freq.begin(), freq.end());\n\n        int f_max = freq[25];\n        int idle_slots = (f_max - 1) * n;\n        for (int i = 24 ; i >= 0 && freq[i] > 0 && idle_slots > 0 ; --i) {\n            idle_slots -= min(f_max - 1, freq[i]);\n        }\n\n        return (idle_slots > 0) ? tasks.size() + idle_slots : tasks.size();\n    }\n};\n\n"},"Greedy/Candy.html":{"url":"Greedy/Candy.html","title":"Candy","keywords":"","body":"Problem\nLeetCode 135. Candy\nhttps://leetcode.com/problems/candy/\nSolution\nclass Solution {\npublic:\n    int candy(vector& ratings) {\n\n        /*\n            L, C, R  rate(L) >= rate(C) && rate(R) >= rate(C)  => 1\n                     rate(L)  max(cand[L], cand[R]) + 1\n                     rate(L) >= rate(C) && rate(R)  max(1, cand[R] + 1)\n                     rate(L) = rate(C) => max(cand[L] + 1, 1)\n\n             0, 1, 2\n            [1, 2, 2]  => (0, 1), (1, 2), (2, 2)\n                           1       2       1\n\n             0, 1, 2\n            [1, 0, 2]  => (1, 0), (0, 1), (2, 2)\n                           1       2       2\n\n        int n = ratings.size();\n        vector candies(n, 0);\n\n        // (first, second) => (id, rate)\n        vector> children;\n        for (int i = 0 ; i  0) ? ratings[id - 1] : -1;\n            int r_rate = (id = c_rate && r_rate >= c_rate) {\n                candies[id] = 1;\n            }\n            // 2nd\n            else if (l_rate  0) ? candies[id - 1] : 0;\n                int r_candy = (id = c_rate && r_rate = c_rate) {\n                int l_candy = (id > 0) ? candies[id - 1] : 0;\n                candies[id] = max(l_candy + 1, 1);\n            }\n\n            ans += candies[id];\n        }\n\n        return ans;\n        */\n\n        int n = ratings.size();\n\n        vector l2r(n, 1);\n        for (int i = 1 ; i  r2l(n, 1);\n        for (int i = n - 2 ; i >= 0 ; --i) {\n            r2l[i] = (ratings[i + 1] \n"},"Greedy/Maximize Sum Of Array After K Negations.html":{"url":"Greedy/Maximize Sum Of Array After K Negations.html","title":"Maximize Sum Of Array After K Negations","keywords":"","body":"Problem\nLeetCode 1005. Maximize Sum Of Array After K Negations\nhttps://leetcode.com/problems/maximize-sum-of-array-after-k-negations/\nSolution\nclass Solution {\npublic:\n    int largestSumAfterKNegations(vector& A, int K) {\n\n        sort(A.begin(), A.end());\n\n        int n = A.size();\n        for (int i = 0 ; i = 0) {\n                break;\n            }\n\n            A[i] = -A[i];\n            --K;\n            if (K == 0) {\n                break;\n            }\n        }\n\n        int sum = accumulate(A.begin(), A.end(), 0);\n        if (K % 2 == 1) {\n            sum -= *min_element(A.begin(), A.end()) * 2;\n        }\n        return sum;\n    }\n};\n\n"},"Greedy/Partition Labels.html":{"url":"Greedy/Partition Labels.html","title":"Partition Labels","keywords":"","body":"Problem\nLeetCode 763. Partition Labels\nhttps://leetcode.com/problems/partition-labels/\nSolution\nclass Solution {\npublic:\n    vector partitionLabels(string S) {\n        /**\n                            8           14        19\n            a b a b c b a c a d e f e g d e h i j h k l i j\n\n            last[a] = 8\n            last[b] = 5\n            last[c] = 7\n\n            last[d] = 14\n            last[e] = 15\n            last[f] = 11\n            last[g] = 13\n\n            last[h] = 19\n            last[i] = 22\n            last[j] = 23\n            last[k] = 20\n        */\n\n        int n = S.length();\n\n        vector last(26, 0);\n        for (int i = 0 ; i  ans;\n        int window = 0;\n        for (int i = 0, j = 0 ; i \n"},"Greedy/Minimum Number of Arrows to Burst Balloons.html":{"url":"Greedy/Minimum Number of Arrows to Burst Balloons.html","title":"Minimum Number of Arrows to Burst Balloons","keywords":"","body":"Problem\nLeetCode 452. Minimum Number of Arrows to Burst Balloons\nhttps://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/\nSolution\nclass Solution {\npublic:\n    int findMinArrowShots(vector>& points) {\n\n        int n = points.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        sort(points.begin(), points.end());\n\n        int ans = 0;\n        int base = points[0][1];\n\n        for (int i = 1 ; i \n"},"Flood and Fill/Number of Islands.html":{"url":"Flood and Fill/Number of Islands.html","title":"Number of Islands","keywords":"","body":"Problem\nLeetCode 200. Number of Islands\nhttps://leetcode.com/problems/number-of-islands\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    int numIslands(vector>& grid) {\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *\n         *  SC: O(M * N)\n         */\n\n        int m = grid.size();\n        int n = grid[0].size();\n\n        int ans = 0;\n\n        for (int i = 0 ; i > directs;\n\n    void dfs(\n            vector>& grid,\n            int m, int n, int x, int y) {\n\n        grid[x][y] = '0';\n\n        for (const auto& d : directs) {\n            int nx = x + d[0];\n            int ny = y + d[1];\n\n            if (!(nx >= 0 && ny >= 0 && nx \n"},"Flood and Fill/Number of Islands II.html":{"url":"Flood and Fill/Number of Islands II.html","title":"Number of Islands II","keywords":"","body":"Problem\nLintCode 434. Number of Islands II\nhttps://www.lintcode.com/problem/number-of-islands-ii/description\nSolution\n\nclass DisjointSet {\npublic:\n    DisjointSet(int n)\n        : count(0) {\n    }\n\n    void add(int x) {\n        parent[x] = x;\n        ++count;\n    }\n\n    int find(int x) {\n\n        if (x == parent[x]) {\n            return x;\n        }\n\n        return parent[x] = find(parent[x]);\n    }\n\n    void merge(int x, int y) {\n\n        int px = find(x);\n        int py = find(y);\n\n        if (px == py) {\n            return;\n        }\n\n        --count;\n        parent[px] = py;\n    }\n\n    int query() {\n        return count;\n    }\n\nprivate:\n    int count;\n    unordered_map parent;\n};\n\n\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    vector numIslands2(int m, int n, vector>& positions) {\n\n        /**\n         *  TC: O(K * log*(K)), where\n         *      K is the number of given positions, or the potential number\n         *      of islands\n         *\n         *  SC: O(M * N), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *\n         *  00000       00000       01000        01000        01000\n         *  00000  =>   01000   =>  01000   =>   01000   =>   01000\n         *  00000       00000       00000        00000        00000\n         *  00000       00000       00000        00010        00011\n         *\n         *           1 (1, 1)    2 (0, 1)     1 (1, 1)     1 (1, 1)\n         *                       1 (1, 1)       (0, 1)       (0, 1)\n         *\n         *                       1 (1, 1)     3 (3, 3)     3 (3, 3)\n         *                         (0, 1)                    (3, 4)\n         */\n\n        DisjointSet set(m * n);\n        vector> grid(m, vector(n));\n\n        vector ans;\n\n        for (const auto& q : positions) {\n            int x = q[0];\n            int y = q[1];\n\n            // If the grid cell is already part of an island,\n            // we need to skip it to avoid duplicates\n            if (grid[x][y] == 1) {\n                ans.push_back(set.query());\n                continue;\n            }\n\n            grid[x][y] = 1;\n            int src_id = x * n + y;\n            set.add(src_id);\n\n            for (const auto& d : directs) {\n                int nx = x + d[0];\n                int ny = y + d[1];\n\n                if (!(nx >= 0 && ny >= 0 && nx > directs;\n};\n\n"},"Flood and Fill/Surrounded Regions.html":{"url":"Flood and Fill/Surrounded Regions.html","title":"Surrounded Regions","keywords":"","body":"Problem\nLeetCode 130. Surrounded Regions\nhttps://leetcode.com/problems/surrounded-regions\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    void solve(vector>& board) {\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *\n         *  SC: O(M * N)\n         *\n         *  X X X X      X X X X      X X X X\n         *  X O O X  =>  X O O X  =>  X X X X\n         *  X X O X      X X O X      X X X X\n         *  X O X X      X V X X      X O X X\n         *\n         *  X X X X      X X X X      X X X X\n         *  X O O X  =>  X V V X  =>  X O O X\n         *  X O O X      X V V X      X O O X\n         *  X O X X      X V X X      X O X X\n         */\n\n        int m = board.size();\n        int n = board[0].size();\n\n        // Check the first and the last rows.\n        for (int j = 0 ; j > directs;\n\n    void dfs(\n            vector>& board,\n            int x, int y, int m, int n) {\n\n        board[x][y] = 'V';\n\n        for (const auto& d : directs) {\n            int nx = x + d[0];\n            int ny = y + d[1];\n\n            if (!(nx >= 0 && ny >= 0 && nx \n"},"Flood and Fill/Walls and Gates.html":{"url":"Flood and Fill/Walls and Gates.html","title":"Walls and Gates","keywords":"","body":"Problem\nLeetCode 286. Walls and Gates\nhttps://leetcode.com/problems/walls-and-gates/\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    void wallsAndGates(vector>& rooms) {\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *\n         *  SC: O(M * N)\n         */\n\n        int m = rooms.size();\n        int n = rooms[0].size();\n\n        queue> q;\n        for (int i = 0 ; i = 0 && ny >= 0 && nx > directs;\n\n    static const int INF = INT_MAX;\n};\n\n"},"Flood and Fill/Pacific Atlantic Water Flow.html":{"url":"Flood and Fill/Pacific Atlantic Water Flow.html","title":"Pacific Atlantic Water Flow","keywords":"","body":"Problem\nLeetCode 417. Pacific Atlantic Water Flow\nhttps://leetcode.com/problems/pacific-atlantic-water-flow\nSolution\nclass Solution {\npublic:\n    vector> pacificAtlantic(vector>& matrix) {\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the number of rows\n         *\n         *  SC: O(M * N)\n         */\n\n        int m = matrix.size();\n        int n = matrix[0].size();\n\n        vector> pacific(m, vector(n, false));\n        vector> atlantic(m, vector(n, false));\n\n        for (int i = 0 ; i > ans;\n        for (int i = 0 ; i = m || c >= n) {\n            return;\n        }\n        if (board[r][c] \n"},"Flood and Fill/Set Matrix Zeros.html":{"url":"Flood and Fill/Set Matrix Zeros.html","title":"Set Matrix Zeros","keywords":"","body":"Problem\nLintCode 162. Set Matrix Zeros\nhttps://www.lintcode.com/problem/set-matrix-zeroes/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: A lsit of lists of integers\n     * @return: nothing\n     */\n    void setZeroes(vector> &matrix) {\n        // write your code here\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return;\n        }\n\n\n        /**\n         *    1 1 0 1\n         *    0 1 1 1\n         *    1 0 1 1\n         *    1 1 1 1\n         *\n         *  Step 1. Check the outer frame. To be more specific, if we can find\n         *  a cell containing 0 in the first row, we need to modify that entire\n         *  row. Futhermore, if we can find a cell containing 0 in the first\n         *  column, we need to modify that entire column as well.\n         *\n         *\n         *  Step 2. Check the internal matrix and fill the leading rows and\n         *  columns with 0s for the cells that are now 0s.\n         *\n         *    1 1 0 1      1 0 0 1\n         *    0 1 1 1  =>  0 1 1 1\n         *    1 0 1 1      0 0 1 1\n         *    1 1 1 1      1 1 1 1\n         *\n         *  Step 3. Fill the internal matrix with 0s by checking the leading\n         *  rows and columns.\n         *\n         *    1 0 0 1      1 0 0 1\n         *    0 1 1 1  =>  0 0 0 0\n         *    0 0 1 1      0 0 0 0\n         *    1 1 1 1      1 0 0 1\n         *\n         *  Step 4. Based on the result determined in the first step, we should\n         *  fill the first row and column with 0s if necessary.\n         *\n         *    0 0 0 0\n         *    0 0 0 0\n         *    0 0 0 0\n         *    0 0 0 1\n         */\n\n        bool must_fill_1st_row = false;\n        for (int i = 0 ; i \n"},"Flood and Fill/Island Perimeter.html":{"url":"Flood and Fill/Island Perimeter.html","title":"Island Perimeter","keywords":"","body":"Problem\nLeetCode 463. Island Perimeter\nhttps://leetcode.com/problems/island-perimeter\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    int islandPerimeter(vector>& grid) {\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *\n         *  SC: O(1)\n         */\n\n        int m = grid.size();\n        int n = grid[0].size();\n\n        int ans = 0;\n        for (int x = 0 ; x > directs;\n\n    bool isWateredArea(\n            const vector>& grid,\n            int x, int y, int m, int n) {\n\n        if (x \n"},"Flood and Fill/Making a Large Island.html":{"url":"Flood and Fill/Making a Large Island.html","title":"Making a Large Island","keywords":"","body":"Problem\nLeetCode 827. Making A Large Island\nhttps://leetcode.com/problems/making-a-large-island/\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    int largestIsland(vector>& grid) {\n\n        int color = 2;\n        unordered_map areas;\n\n        int ans = 0;\n\n        int n = grid.size();\n        for (int x = 0 ; x  select;\n                int area = 1;\n\n                for (const auto& d : directs) {\n                    int nx = x + d[0];\n                    int ny = y + d[1];\n\n                    if (!(nx >= 0 && ny >= 0 && nx > directs;\n\n    int runDFS(\n            int n, int x, int y,\n            vector>& grid,\n            int color) {\n\n        int area = 1;\n        grid[x][y] = color;\n\n        for (const auto& d : directs) {\n            int nx = x + d[0];\n            int ny = y + d[1];\n\n            if (!(nx >= 0 && ny >= 0 && nx \n"},"Post Office/Post Office Problem.html":{"url":"Post Office/Post Office Problem.html","title":"Post Office Problem","keywords":"","body":"Problem\nLeetCode 1478. Allocate Mailboxes\nhttps://leetcode.com/problems/allocate-mailboxes/\nSolution\nclass Solution {\npublic:\n    int minDistance(vector& houses, int k) {\n\n        /**\n         * dp[i][j]: The minimum cost to build i mailboxes to serve the first\n         *           j houses.\n         *\n         * cost[i][j]: The minimum cost to build a mailbox to serve the\n         *             houses within the range i and j.\n         *\n         * dp[i][j] =     MIN   {dp[i - 1][k] + cost[k + 1][j]}\n         *            (i-1)> cost(n, vector(n, 0));\n        for (int i = 0 ; i > dp(k, vector(n, INT_MAX));\n        for (int i = 0 ; i \n"},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html":{"url":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks.html","title":"Best Time to Buy and Sell Stocks","keywords":"","body":"Problem\nLintCode 149. Best Time to Buy and Sell Stocks\nhttps://www.lintcode.com/problem/best-time-to-buy-and-sell-stock/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param prices: Given an integer array\n     * @return: Maximum profit\n     */\n    int maxProfit(vector &prices) {\n        // write your code here\n\n        int size = prices.size();\n        if (size == 0) {\n            return 0;\n        }\n\n        int opt = 0;\n        int min = prices[0];\n\n        for (int i = 1 ; i \n"},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html":{"url":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks II.html","title":"Best Time to Buy and Sell Stocks II","keywords":"","body":"Problem\nLeetCode 122. Best Time to Buy and Sell Stock II\nhttps://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii\nSolution\nclass Solution {\npublic:\n    int maxProfit(vector& prices) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of days\n         *\n         *  SC: O(1)\n         *\n         *      7 1 5 3 6 4\n         *\n         *      *\n         *      *       *\n         *      *   *   *\n         *      *   *   * *\n         *      *   * * * *\n         *      *   * * * *\n         *      * * * * * *\n         *\n         *  Segments: (1, 2), (3, 4)\n         *  profits : 4     , 3\n         */\n\n        int n = prices.size();\n        int ans = 0;\n\n        for (int i = 1 ; i  prices[i - 1]) {\n                ans += prices[i] - prices[i - 1];\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html":{"url":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks III.html","title":"Best Time to Buy and Sell Stocks III","keywords":"","body":"Problem\nLintCode 151. Best Time to Buy and Sell Stocks III\nhttps://www.lintcode.com/problem/best-time-to-buy-and-sell-stock-iii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param prices: Given an integer array\n     * @return: Maximum profit\n     */\n    int maxProfit(vector &prices) {\n        // write your code here\n\n        /**\n         *  buy_1st : The maximum profits that we can get after conducting\n         *            the first purchase.\n         *\n         *  sell_1st: The maximum profits that we can get after conducting\n         *            the first selling.\n         *\n         *  buy_2nd : The maximum profits that we can get after conducting\n         *            the second purchase.\n         *\n         *  sell_2nd: The maximum profits that we can get after conducting\n         *            the second selling.\n         *\n         *\n         *  price: The stock price of the ith day.\n         *\n         *  buy_1st  = MAX{ buy_1st, -price }\n         *  sell_1st = MAX{ sell_1st, buy_1st + price}\n         *  buy_2nd  = MAX{ buy_2nd, sell_1st - price }\n         *  sell_2nd = MAX{ sell_2nd, buy_2nd + price }\n         *  ^^^^^^^^\n         */\n\n        int buy_first = std::numeric_limits::min();\n        int buy_second = std::numeric_limits::min();\n\n        int sell_first = 0;\n        int sell_second = 0;\n\n        for (int price : prices) {\n            buy_first = std::max(buy_first, -price);\n            sell_first = std::max(sell_first, buy_first + price);\n\n            buy_second = std::max(buy_second, sell_first - price);\n            sell_second = std::max(sell_second, buy_second + price);\n        }\n\n        return sell_second;\n    }\n};\n\n"},"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html":{"url":"Best Time to Buy and Sell Stocks/Best Time to Buy and Sell Stocks IV.html","title":"Best Time to Buy and Sell Stocks IV","keywords":"","body":"Problem\nLintCode 393. Best Time to Buy and Sell Stocks IV\nhttps://www.lintcode.com/problem/best-time-to-buy-and-sell-stock-iv/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param K: An integer\n     * @param prices: An integer array\n     * @return: Maximum profit\n     */\n    int maxProfit(int k, vector &prices) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The maximum profits that we can get after we conduct at\n         *           most i transactions in the first j days.\n         *\n         * dp[i][j] = MAX | no transaction on the jth day, dp[i][j - 1]\n         *                | otherwise,\n         *                |     MAX { (price[j] - price[h]) + dp[i - 1][h] }\n         *                     0 price[j] + MaxDiff, determine the optimal value\n         *  => MaxDiff = MAX{ MaxDiff, dp[i - 1][j] - price[j]}, update the cache\n         *\n         *      O(kn)\n         */\n\n        int n = prices.size();\n        if (n == 0 || k == 0) {\n            return 0;\n        }\n\n        if (k >= n / 2) {\n            int sum = 0;\n            for (int i = 1 ; i  prices[i - 1]) {\n                    sum += prices[i] - prices[i - 1];\n                }\n            }\n            return sum;\n        }\n\n        std::vector> dp(k + 1, std::vector(n, 0));\n\n        /*\n            O(k * n^2)\n\n        for (int i = 1 ; i \n"},"Knapsack Problem/Backpack I.html":{"url":"Knapsack Problem/Backpack I.html","title":"Backpack I","keywords":"","body":"Problem\nLintCode 92 Backpack\nhttps://www.lintcode.com/problem/backpack/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param m: An integer m denotes the size of a backpack\n     * @param A: Given n items with size A[i]\n     * @return: The maximum size\n     */\n    int backPack(int m, vector &A) {\n        // write your code here\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the capacity of the backpack\n         *      N is the number of items\n         *\n         *  SC: O(M * N)\n         *\n         *  dp[i][j]: The maximal size the knapsack which holds up to j units of\n         *            weight can aggregate by choosing the first i items.\n         *\n         *  dp[i][j] = | A[i] > dp(n + 1, vector(m + 1));\n\n        for (int i = 1 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - A[i - 1]] + A[i - 1]);\n            }\n        }\n\n        return dp[n][m];\n    }\n};\n\n"},"Knapsack Problem/Backpack II.html":{"url":"Knapsack Problem/Backpack II.html","title":"Backpack II","keywords":"","body":"Problem\nLintCode 125 Backpack II\nhttps://www.lintcode.com/problem/backpack-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param m: An integer m denotes the size of a backpack\n     * @param A: Given n items with size A[i]\n     * @param V: Given n items with value V[i]\n     * @return: The maximum value\n     */\n    int backPackII(int m, vector &A, vector &V) {\n        // write your code here\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the capacity of the backpack\n         *      N is the number of items\n         *\n         *  SC: O(M * N)\n         *\n         *  dp[i][j]: The maximal values the knapsack which holds up to j units\n         *            of weight can aggregate by using the first i items.\n         *\n         *  dp[i][j] = | W[i] > dp(n + 1, vector(m + 1));\n\n        for (int i = 1 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = max(V[i - 1] + dp[i - 1][j - A[i - 1]], dp[i - 1][j]);\n            }\n        }\n\n        return dp[n][m];\n    }\n};\n\n"},"Knapsack Problem/Backpack III.html":{"url":"Knapsack Problem/Backpack III.html","title":"Backpack III","keywords":"","body":"Problem\nLintCode 440 Backpack III\nhttps://www.lintcode.com/problem/backpack-iii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer array\n     * @param V: an integer array\n     * @param m: An integer\n     * @return: an array\n     */\n    int backPackIII(vector &A, vector &V, int m) {\n        // write your code here\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the capacity of the backpack\n         *      N is the number of items\n         *\n         *  SC: O(M * N)\n         *\n         *  dp[i][j]: The maximal values the knapsack which holds up to j units\n         *            of weight can aggregate by using the first i items\n         *\n         *  dp[i][j] = | W[i] > dp(n + 1, vector(m + 1));\n\n        for (int i = 1 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = max(dp[i - 1][j], V[i - 1] + dp[i][j - A[i - 1]]);\n            }\n        }\n\n        return dp[n][m];\n    }\n};\n\n"},"Knapsack Problem/Backpack IV.html":{"url":"Knapsack Problem/Backpack IV.html","title":"Backpack IV","keywords":"","body":"Problem\nLintCode 562 Backpack IV\nhttps://www.lintcode.com/problem/backpack-iv/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an integer array and all positive numbers, no duplicates\n     * @param target: An integer\n     * @return: An integer\n     */\n    int backPackIV(vector &nums, int target) {\n        // write your code here\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the capacity of the backpack\n         *      N is the number of items\n         *\n         *  SC: O(M * N)\n         *\n         *  dp[i][j]: The number of ways to fill the knapsack which holds up to j\n         *            units of weight using the first i items.\n         *\n         *  *Note: An item can be used multiple times.\n         *\n         *  dp[i][j] = | nums[i] > dp(n + 1, vector(target + 1));\n\n        for (int i = 0 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = dp[i - 1][j] + dp[i][j - nums[i - 1]];\n            }\n        }\n\n        return dp[n][target];\n    }\n};\n\n"},"Knapsack Problem/Backpack V.html":{"url":"Knapsack Problem/Backpack V.html","title":"Backpack V","keywords":"","body":"Problem\nLintCode 563 Backpack V\nhttps://www.lintcode.com/problem/backpack-v/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an integer array and all positive numbers\n     * @param target: An integer\n     * @return: An integer\n     */\n    int backPackV(vector &nums, int target) {\n        // write your code here\n\n        /**\n         *  TC: O(M * N), where\n         *      M is the capacity of the backpack\n         *      N is the number of items\n         *\n         *  SC: O(M * N)\n         *\n         *  dp[i][j]: The number of ways to fill the knapsack which holds up to j\n         *            units of weight using the first i items.\n         *\n         *  *Note: An item can be used multiple times.\n         *\n         *  dp[i][j] = | nums[i] > dp(n + 1, vector(target + 1));\n\n        for (int i = 0 ; i  j) {\n                    dp[i][j] = dp[i - 1][j];\n                    continue;\n                }\n\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]];\n            }\n        }\n\n        return dp[n][target];\n    }\n};\n\n"},"Knapsack Problem/Backpack VI.html":{"url":"Knapsack Problem/Backpack VI.html","title":"Backpack VI","keywords":"","body":"Problem\nLintCode 564 Combination Sum IV\nhttps://www.lintcode.com/problem/combination-sum-iv/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an integer array and all positive numbers, no duplicates\n     * @param target: An integer\n     * @return: An integer\n     */\n    int backPackVI(vector &nums, int target) {\n        // write your code here\n\n        /**\n         *  TC: O(N * T), where\n         *      N is the number of elements\n         *      T is the given target\n         *\n         *  SC: O(T)\n         *\n         *\n         *  dp[i]: The number of ways to sum up to i using any combination of numbers.\n         *\n         *  dp[i] =  SUM { dp[i - nums[j] | i >= nums[j]}\n         *          0 dp(target + 1);\n        dp[0] = 1;\n\n        for (int i = 1 ; i  i) {\n                    continue;\n                }\n                dp[i] += dp[i - num];\n            }\n        }\n\n        return dp[target];\n    }\n};\n\n"},"Knapsack Problem/K Sum.html":{"url":"Knapsack Problem/K Sum.html","title":"K Sum","keywords":"","body":"Problem\nLintCode 89 K Sum\nhttps://www.lintcode.com/problem/k-sum/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An integer array\n     * @param k: A positive integer (k  &A, int k, int target) {\n        // write your code here\n\n        /**\n         * dp[i][j][h]: The number of ways to use j integers from the first i\n         *              integers to compose h.\n         *\n         * dp[i][j][h] = | A[i] >>\n            dp(n + 1, std::vector>(\n                k + 1, std::vector(target + 1, 0)));\n\n        for (int i = 0 ; i  h) {\n                        dp[i][j][h] = dp[i - 1][j][h];\n                        continue;\n                    }\n\n                    dp[i][j][h] = dp[i - 1][j][h] + dp[i - 1][j - 1][h - A[i - 1]];\n                }\n            }\n        }\n\n        return dp[n][k][target];\n    }\n};\n\n"},"Knapsack Problem/Coin Change.html":{"url":"Knapsack Problem/Coin Change.html","title":"Coin Change","keywords":"","body":"Problem\nLeetCode 322. Coin Change\nhttps://leetcode.com/problems/coin-change\nSolution\nclass Solution {\npublic:\n    int coinChange(vector& coins, int amount) {\n\n        /**\n         *  TC: O(N * C), where\n         *      N is the number of coins\n         *      C is the given amount\n         *\n         *  SC: O(C)\n         *\n         *  dp[i]: The minimum number of coins that make i dollars.\n         *\n         *  dp[i] = MIN { dp[i - coins[j] | 0 = coins[j] } + 1\n         */\n\n        vector dp(amount + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int c : coins) {\n            for (int i = c ; i \n"},"Knapsack Problem/Coin Change II.html":{"url":"Knapsack Problem/Coin Change II.html","title":"Coin Change II","keywords":"","body":"Problem\nLeetCode 518. Coin Change 2\nhttps://leetcode.com/problems/coin-change-2\nSolution\nclass Solution {\npublic:\n    int change(int amount, vector& coins) {\n\n        /**\n         *  TC: O(N * C), where\n         *      N is number of coins\n         *      C is the given amount\n         *\n         *  SC: O(C)\n         *\n         *  dp[i]: The number of ways to make i dollars.\n         *\n         *  dp[i] =  SUM { dp[i - coin[k]] | i >= coin[k] }\n         *          0 dp(amount + 1);\n        dp[0] = 1;\n\n        for (int c : coins) {\n            for (int i = c ; i \n"},"Knapsack Problem/Number of Dice Rolls with Target Sum.html":{"url":"Knapsack Problem/Number of Dice Rolls with Target Sum.html","title":"Number of Dice Rolls with Target Sum","keywords":"","body":"Problem\nLeetCode 1155. Number of Dice Rolls With Target Sum\nhttps://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\nSolution\nclass Solution {\npublic:\n    int numRollsToTarget(int d, int f, int target) {\n\n        /**\n         *  TC: O(D * F * T), where\n         *      D is the number of dices\n         *      F is the number of faces\n         *      T it the target amount\n         *\n         *  SC: O(D * T)\n         *\n         *  dp[i][j]: The number of ways to sum up to j using the first i dices.\n         *\n         *  dp[i][j] =   SUM { dp[i - 1][j - k] | j >= k }\n         *             0> dp(d + 1, vector(target + 1));\n        dp[0][0] = 1;\n\n        for (int i = 1 ; i \n"},"Knapsack Problem/Target Sum.html":{"url":"Knapsack Problem/Target Sum.html","title":"Target Sum","keywords":"","body":"Problem\nLeetCode 494. Target Sum\nhttps://leetcode.com/problems/target-sum\nSolution\nclass Solution {\npublic:\n    int findTargetSumWays(vector& nums, int target) {\n\n        /**\n         *  TC: O(N * T), where\n         *      N is the number of elements\n         *      T is the target sum\n         *\n         *  SC: O(N * T)\n         */\n\n        int n = nums.size();\n        vector> memo(n);\n        return topDown(nums, 0, n, target, memo);\n    }\n\nprivate:\n    int topDown(\n            const vector& nums,\n            int i, int n, long sum,\n            vector>& memo) {\n\n        if (i == n) {\n            return sum == 0;\n        }\n\n        if (memo[i].count(sum) == 1) {\n            return memo[i][sum];\n        }\n\n        int res = topDown(nums, i + 1, n, sum - nums[i], memo) +\n                  topDown(nums, i + 1, n, sum + nums[i], memo);\n        return memo[i][sum] = res;\n    }\n};\n\n"},"Matrix Chain Multiplication/Stone Game.html":{"url":"Matrix Chain Multiplication/Stone Game.html","title":"Stone Game","keywords":"","body":"Problem\nLintCode 476. Stone Game\nhttps://www.lintcode.com/problem/stone-game/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An integer array\n     * @return: An integer\n     */\n    int stoneGame(vector &A) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The minimum cost to merge the piles starting from the\n         *           ith pile to the jth pile.\n         *\n         * dp[i][j] =  MIN { dp[i][k] + dp[k + 1][j] + sum(i, j) }\n         *            i prefix(n + 1, 0);\n        for (int i = 1 ; i > dp(n, std::vector(n, 0));\n\n        for (int i = 1 ; i ::max();\n                int sum = prefix[j + 1] - prefix[i];\n\n                for (int k = i ; k \n"},"Matrix Chain Multiplication/Stone Game II.html":{"url":"Matrix Chain Multiplication/Stone Game II.html","title":"Stone Game II","keywords":"","body":"Problem\nLintCode 593. Stone Game II\nhttps://www.lintcode.com/problem/stone-game-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An integer array\n     * @return: An integer\n     */\n    int stoneGame2(vector &A) {\n        // write your code here\n\n        /**\n         *     A\n         *              A good way to break the loop is to flatten the loop\n         *  B     E     with 2 consecutive replicas.\n         *\n         *   C   D      => A B C D E A B C D E\n         *\n         * dp[i][j]: The minimum cost to merge the piles starting from the\n         *           ith pile to the jth pile.\n         *\n         * dp[i][j] =  MIN { dp[i][k] + dp[k + 1][j] + sum(i, j) }\n         *            i prefix(nn + 1, 0);\n        for (int i = 1 ; i > dp(nn, std::vector(nn, 0));\n        for (int i = 1 ; i ::max();\n                int sum = prefix[j + 1] - prefix[i];\n\n                for (int k = i ; k ::max();\n        for (int i = 0 ; i \n"},"Matrix Chain Multiplication/Burst Balloons.html":{"url":"Matrix Chain Multiplication/Burst Balloons.html","title":"Burst Balloons","keywords":"","body":"Problem\nLintCode 168. Burst Balloons\nhttps://www.lintcode.com/problem/burst-balloons/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of integer\n     * @return: An integer, maximum coins\n     */\n    int maxCoins(vector &nums) {\n        // write your code here\n\n        /**\n         * | ........ B ....... |\n         * | .... B ........... |\n         * | ............ B ... |\n         *\n         * dp[i][j]: The maximum score that we can secure among the ith balloon\n         *           to the jth balloon.\n         *\n         * Consider k is the last balloon that we can burst among the range(i, j).\n         *\n         * dp[i][j] =  MAX { dp[i][k - 1] + dp[k + 1][j] + nums[i - 1] * nums[k] * nums[j + 1} }\n         *           i> dp(n + 2, std::vector(n + 2, 0));\n\n        for (int l = 1 ; l \n"},"Matrix Chain Multiplication/Unique Binary Search Trees.html":{"url":"Matrix Chain Multiplication/Unique Binary Search Trees.html","title":"Unique Binary Search Trees","keywords":"","body":"Problem\nLintCode 163. Unique Binary Search Trees\nhttps://www.lintcode.com/problem/unique-binary-search-trees/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: An integer\n     */\n    int numTrees(int n) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The number of unique binary search trees generated by\n         *           the nodes starting from the ith node to the jth node.\n         *\n         * dp[i][j] =   SUM { dp[i][k - 1] * dp[k + 1][j] }\n         *            i> dp(n, std::vector(n, 0));\n        for (int i = 0 ; i  i) ? dp[i][k - 1] : 1;\n                    int rght = (k \n"},"Matrix Chain Multiplication/Palindrome Partitioning III.html":{"url":"Matrix Chain Multiplication/Palindrome Partitioning III.html","title":"Palindrome Partitioning III","keywords":"","body":"Problem\nLintCode 1278. Palindrome Partitioning III\nhttps://leetcode.com/problems/palindrome-partitioning-iii/\nSolution\nclass Solution {\npublic:\n    int palindromePartition(string s, int K) {\n\n        /**\n            dp[i][k]: The minimum cost to convert each of the k substrings\n                      of the string with length i to palindrome.\n\n            dp[i][k] =   MIN { dp[j][k - 1] + cost[j + 1][i] }\n                       0> cost(n, vector(n, 0));\n        for (int l = 2 ; l > dp(n, vector(K, INT_MAX >> 1));\n        for (int i = 0 ; i \n"},"Memoization and Top Down Dynamic Programming/Cherry Pickup.html":{"url":"Memoization and Top Down Dynamic Programming/Cherry Pickup.html","title":"Cherry Pickup","keywords":"","body":"Problem\nLeetCode 741. Cherry Pickup\nhttps://leetcode.com/problems/cherry-pickup/\nSolution\nclass Solution {\npublic:\n    int cherryPickup(vector>& grid) {\n\n        int n = grid.size();\n\n        vector>>>\n            dp(n, vector>>(\n                n, vector>(\n                    n, vector(n, -1))));\n\n        return max(0, topDown(grid, dp, n, 0, 0, 0, 0));\n    }\n\nprivate:\n    int topDown(\n            const vector>& grid,\n            vector>>>& dp,\n            int n, int r1, int c1, int r2, int c2) {\n\n        if (!(r1 \n"},"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html":{"url":"Memoization and Top Down Dynamic Programming/Cherry Pickup II.html","title":"Cherry Pickup II","keywords":"","body":"Problem\nLeetCode 1463. Cherry Pickup II\nhttps://leetcode.com/problems/cherry-pickup-ii/\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({\n            {-1, -1}, {-1, 0}, {-1, 1},\n            {0,  -1}, { 0, 0}, { 0, 1},\n            {1,  -1}, { 1, 0}, { 1, 1}})\n        { }\n\n    int cherryPickup(vector>& grid) {\n\n        /**\n            (i, j)\n            -> (i, j - 1)\n            -> (i, j)\n            -> (i, j + 1)\n\n            (i, k)\n            -> (i, k - 1)\n            -> (i, k)\n            -> (i, k + 1)\n\n\n            dp[i][j][k] = MAX{\n                        func(i + 1, j - 1, k - 1),\n                        func(i + 1, j - 1, k),\n                        func(i = 1, j - 1, k + 1),\n                        ... }\n        */\n\n        int m = grid.size();\n        int n = grid[0].size();\n\n        vector>>\n            dp(m, vector>(n, vector(n, 0)));\n\n        return topDown(grid, m, n, dp, 0, 0, n - 1);\n    }\n\nprivate:\n    vector> directs;\n\n    int topDown(\n            vector>& grid,\n            int m, int n,\n            vector>>& dp,\n            int i, int j, int k) {\n\n        if (i == m) {\n            return 0;\n        }\n\n        if (dp[i][j][k] != 0) {\n            return dp[i][j][k];\n        }\n\n        int opt;\n        if (j == k) {\n            opt = grid[i][j];\n        } else {\n            opt = grid[i][j] + grid[i][k];\n        }\n\n        int res = 0;\n        for (const auto& direct : directs) {\n            int nj = j + direct[0];\n            int nk = k + direct[1];\n\n            if (!(nj >= 0 && nk >= 0 && nj \n"},"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html":{"url":"Memoization and Top Down Dynamic Programming/Longest Increasing Path in a Matrix.html","title":"Longest Increasing Path in a Matrix","keywords":"","body":"Problem\nLeetCode 329. Longest Increasing Path in a Matrix\nhttps://leetcode.com/problems/longest-increasing-path-in-a-matrix/\nSolution\nclass Solution {\npublic:\n    int longestIncreasingPath(vector>& matrix) {\n\n        int m = matrix.size();\n        if (m == 0) {\n            return 0;\n        }\n\n        int n = matrix[0].size();\n        if (n == 0) {\n            return 0;\n        }\n\n        vector> dp(m, vector(n));\n        int lis = INT_MIN;\n\n        for (int r = 0 ; r >& matrix,\n            vector>& dp,\n            int pred) {\n\n        if (r = matrix[r][c]) {\n            return 0;\n        }\n\n        if (dp[r][c] > 0) {\n            return dp[r][c];\n        }\n\n        int lis = 1;\n        lis = max(lis, 1 + topDown(m, n, r - 1, c, matrix, dp, matrix[r][c]));\n        lis = max(lis, 1 + topDown(m, n, r + 1, c, matrix, dp, matrix[r][c]));\n        lis = max(lis, 1 + topDown(m, n, r, c - 1, matrix, dp, matrix[r][c]));\n        lis = max(lis, 1 + topDown(m, n, r, c + 1, matrix, dp, matrix[r][c]));\n\n        dp[r][c] = lis;\n        return lis;\n    }\n};\n\n"},"Stone Game/Stone Game.html":{"url":"Stone Game/Stone Game.html","title":"Stone Game","keywords":"","body":"Problem\nLeetCode 877. Stone Game\nhttps://leetcode.com/problems/stone-game\nSolution\nclass Solution {\npublic:\n    bool stoneGame(vector& piles) {\n\n        /**\n         *  TC: O(N^2), where\n         *      N is the number of stons\n         *  \n         *  SC: O(N^2)\n         * \n         *  dp[i][j]: The optimal value difference that the current \n         *            player can acquire when considering stones in the \n         *            range (i, j).\n         * \n         *  dp[i][j] = MAX | piles[i] - dp[i + 1][j]\n         *                 | piles[j] - dp[i][j - 1]\n         */\n\n        int n = piles.size();\n        vector> dp(n, vector(n, INT_MIN));\n        return topDown(piles, 0, n - 1, dp) > 0;\n    }\n\nprivate:\n    int topDown(\n            const vector& piles,\n            int i, int j,\n            vector>& dp) {\n\n        if (i == j) {\n            return piles[i];\n        }\n\n        if (dp[i][j] != INT_MIN) {\n            return dp[i][j];\n        }\n\n        int opt = max(\n                piles[i] - topDown(piles, i + 1, j, dp),\n                piles[j] - topDown(piles, i , j - 1, dp)\n            );\n        return dp[i][j] = opt;\n    }\n};\n\n"},"Stone Game/Stone Game III.html":{"url":"Stone Game/Stone Game III.html","title":"Stone Game III","keywords":"","body":"Problem\nLeetCode 1406. Stone Game III\nhttps://leetcode.com/problems/stone-game-iii\nSolution\nclass Solution {\npublic:\n    string stoneGameIII(vector& piles) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of stones\n         * \n         *  SC: O(N)\n         * \n         *  dp[i]: The optimal value difference that the current \n         *         player can acquire when considering the stones in\n         *         the range [i, n)\n         * \n         *  dp[i] = MAX | piles[i] - dp[i + 1]\n         *              | piles[i] + piles[i + 1] - dp[i + 2]\n         *              | piles[i] + piles[i + 1] + piles[i + 2] - dp[i + 3]\n         */\n\n        int n = piles.size();\n        vector dp(n, INT_MIN);\n\n        int res = topDown(piles, 0, n, dp);\n        if (res == 0) {\n            return \"Tie\";\n        }\n        return res > 0 ? \"Alice\" : \"Bob\";\n    }\n\nprivate:\n    int topDown(\n            const vector& piles,\n            int i, int n,\n            vector& dp) {\n\n        if (i == n) {\n            return 0;\n        }\n\n        if (dp[i] != INT_MIN) {\n            return dp[i];\n        }\n\n        int sum = piles[i];\n        int opt = sum - topDown(piles, i + 1, n, dp);\n\n        if (i + 1 \n"},"Stone Game/Stone Game IV.html":{"url":"Stone Game/Stone Game IV.html","title":"Stone Game IV","keywords":"","body":"Problem\nLeetCode 1510. Stone Game IV\nhttps://leetcode.com/problems/stone-game-iv\nSolution\nclass Solution {\npublic:\n    bool winnerSquareGame(int n) {\n\n        /**\n         *  TC: O(N * sqrt(N)), where\n         *      N is the number of stones\n         * \n         *  SC: O(N)\n         * \n         *  dp[i]: Whether the current player can win the game\n         *         when there are i stones remained\n         * \n         *  dp[i] = OR{ dp[i - j * j] | i >= j * j }\n         */\n\n        vector dp(n, -1);\n        return topDown(0, n, dp);\n    }\n\nprivate:\n    bool topDown(\n        int i, int n, vector& dp) {\n\n        if (i == n) {\n            return false;\n        }\n\n        if (dp[i] != -1) {\n            return dp[i];\n        }\n\n        bool res = false;\n        for (int j = 1 ; i + j * j \n"},"Stone Game/Stone Game V.html":{"url":"Stone Game/Stone Game V.html","title":"Stone Game V","keywords":"","body":"Problem\nLeetCode 1563. Stone Game V\nhttps://leetcode.com/problems/stone-game-v\nSolution\nclass Solution {\npublic:\n    int stoneGameV(vector& piles) {\n\n        /**\n         *  TC: O(N ^ 3), where\n         *      N is the number of stones\n         *\n         *  SC: O(N ^ 2)\n         */\n\n        int n = piles.size();\n        vector prefix(n + 1);\n        for (int i = 0 ; i > dp(n, vector(n, -1));\n        return topDown(prefix, 0, n - 1, dp);\n    }\n\nprivate:\n    int topDown(\n            const vector& prefix,\n            int i, int j,\n            vector>& dp) {\n\n        if (i == j) {\n            return 0;\n        }\n        if (dp[i][j] != -1) {\n            return dp[i][j];\n        }\n\n        int opt = INT_MIN;\n\n        for (int k = i ; k  right) {\n                opt = max(opt, right + topDown(prefix, k + 1, j, dp));\n                continue;\n            }\n            if (right > left) {\n                opt = max(opt, left + topDown(prefix, i, k, dp));\n                continue;\n            }\n\n            opt = max(opt, right + topDown(prefix, k + 1, j, dp));\n            opt = max(opt, left + topDown(prefix, i, k, dp));\n        }\n\n        return dp[i][j] = opt;\n    }\n};\n\n"},"Jump Game/Jump Game III.html":{"url":"Jump Game/Jump Game III.html","title":"Jump Game III","keywords":"","body":"Problem\nLeetCode 1306. Jump Game III\nhttps://leetcode.com/problems/jump-game-iii\nSolution\nclass Solution {\npublic:\n    bool canReach(vector& arr, int start) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         */\n\n        queue q;\n        q.emplace(start);\n\n        int n = arr.size();\n        vector visit(n);\n\n        while (!q.empty()) {\n            int src = q.front();\n            q.pop();\n\n            if (arr[src] == 0) {\n                return true;\n            }\n\n            int dst = src + arr[src];\n            if (dst = 0 && !visit[dst]) {\n                q.emplace(dst);\n                visit[dst] = true;\n            }\n        }\n\n        return false;\n    }\n};\n\n"},"Jump Game/Jump Game IV.html":{"url":"Jump Game/Jump Game IV.html","title":"Jump Game IV","keywords":"","body":"Problem\nLeetCode 1345. Jump Game IV\nhttps://leetcode.com/problems/jump-game-iv\nSolution\nclass Solution {\npublic:\n    int minJumps(vector& arr) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         */\n\n        int n = arr.size();\n\n        unordered_map> map;\n        for (int i = 0 ; i  visit(n);\n        visit[0] = true;\n\n        queue queue;\n        queue.emplace(0);\n\n        int level = 0;\n\n        while (!queue.empty()) {\n            int size = queue.size();\n\n            for (int i = 0 ; i  0 && !visit[src - 1]) {\n                    queue.emplace(src - 1);\n                    visit[src - 1] = true;\n                }\n\n                if (src \n"},"Jump Game/Jump Game V.html":{"url":"Jump Game/Jump Game V.html","title":"Jump Game V","keywords":"","body":"Problem\nLeetCode 1340. Jump Game V\nhttps://leetcode.com/problems/jump-game-v/\nSolution\nclass Solution {\npublic:\n    int maxJumps(vector& arr, int d) {\n\n        /**\n         *  TC: O(N * D), where\n         *      N is the number of bars\n         *      D is the given range\n         *\n         *  SC: O(N)\n         */\n\n        int n = arr.size();\n        vector dp(n);\n\n        int ans = 1;\n        for (int i = 0 ; i & arr,\n            int bgn, int n, int d, int h,\n            vector& dp) {\n\n        if (dp[bgn] > 0) {\n            return dp[bgn];\n        }\n\n        int opt = 1;\n\n        // Check the left neighbors.\n        int end = max(bgn - d, 0);\n        for (int i = bgn - 1 ; i >= end ; --i) {\n            if (arr[i] >= h) {\n                break;\n            }\n            opt = max(opt, 1 + topDown(arr, i, n, d, arr[i], dp));\n        }\n\n        end = min(bgn + d, n - 1);\n        for (int i = bgn + 1 ; i = h) {\n                break;\n            }\n            opt = max(opt, 1 + topDown(arr, i, n, d, arr[i], dp));\n        }\n\n        return dp[bgn] = opt;\n    }\n};\n\n"},"Jump Game/Frog Jump.html":{"url":"Jump Game/Frog Jump.html","title":"Frog Jump","keywords":"","body":"Problem\nLeetCode 403. Frog Jump\nhttps://leetcode.com/problems/frog-jump\nSolution\nclass Solution {\npublic:\n    bool canCross(vector& stones) {\n\n        /**\n         *  TC: O(N^2), where\n         *      N is the number of hops\n         *\n         *  SC: O(N^2)\n         *\n         * dp[i][j]: Whether we can reach the target if we take\n         *           a j units jump to reach the ith hop\n         */\n\n        if (stones[0] != 0 || stones[1] != 1) {\n            return false;\n        }\n\n        unordered_map map;\n        int n = stones.size();\n        for (int i = 0 ; i > memo(n);\n        return topDown(map, 0, 0, n, 0, memo);\n    }\n\nprivate:\n    bool topDown(\n            unordered_map& stones,\n            int i, int num, int n, int k,\n            vector>& memo) {\n\n        if (i == n - 1) {\n            return true;\n        }\n\n        if (memo[i].count(k) == 1) {\n            return memo[i][k];\n        }\n\n        // Take k - 1 steps\n        int next = num + k - 1;\n        if (next > num && stones.count(next) == 1) {\n            bool res = topDown(stones, stones[next], next, n, k - 1, memo);\n            if (res) {\n                return memo[i][k] = true;\n            }\n        }\n\n        // Take k steps\n        next = num + k;\n        if (next > num && stones.count(next) == 1) {\n            bool res = topDown(stones, stones[next], next, n, k, memo);\n            if (res) {\n                return memo[i][k] = true;\n            }\n        }\n\n        // Take k + 1 steps\n        next = num + k + 1;\n        if (next > num && stones.count(next) == 1) {\n            bool res = topDown(stones, stones[next], next, n, k + 1, memo);\n            if (res) {\n                return memo[i][k] = true;\n            }\n        }\n\n        return memo[i][k] = false;\n    }\n};\n\n"},"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html":{"url":"Jump Game/Number of Ways to Stay in the Same Place After Some Steps.html","title":"Number of Ways to Stay in the Same Place After Some Steps","keywords":"","body":"Problem\nLeetCode 1269. Number of Ways to Stay in the Same Place After Some Steps\nhttps://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/\nSolution\nclass Solution {\npublic:\n    Solution()\n        : mod(1e9 + 7)\n    { }\n\n    int numWays(int s, int n) {\n\n        /**\n         *  TC: O(S * MIN(N, S)), where\n         *      S is the number of steps\n         *      N is the array length\n         *\n         *  SC: O(S^2)\n         *\n         *  dp[i][j]: The number of ways to reach index i\n         *            by taking j steps.\n         *\n         *  dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1] + dp[i + 1][j - 1]\n         */\n\n        vector> dp(s / 2 + 1, vector(s + 1, -1));\n        dp[0][0] = 1;\n        return topDown(0, s, n, dp);\n    }\n\nprivate:\n    long mod;\n\n    long topDown(\n            int i, int j, int n,\n            vector>& dp) {\n\n        if (i = n || j  j) {\n            return 0;\n        }\n\n        if (dp[i][j] != -1) {\n            return dp[i][j];\n        }\n\n        long res = topDown(i - 1, j - 1, n, dp) +\n                   topDown(i,     j - 1, n, dp) +\n                   topDown(i + 1, j - 1, n, dp);\n        return dp[i][j] = (res % mod);\n    }\n};\n\n"},"Fibonacci Sequence/Min Cost Climbing Stairs.html":{"url":"Fibonacci Sequence/Min Cost Climbing Stairs.html","title":"Min Cost Climbing Stairs","keywords":"","body":"Problem\nLeetCode 746. Min Cost Climbing Stairs\nhttps://leetcode.com/problems/min-cost-climbing-stairs\nSolution\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector& cost) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of cells\n         *\n         *  SC: O(N)\n         *\n         *  dp[i]: The minimum cost to reach the ith hop.\n         *\n         *  dp[i] = MIN | dp[i - 1] + cost[i - 1]\n         *              | dp[i - 2] + cost[i - 2]\n         */\n\n        int n = cost.size();\n        vector dp(n + 1);\n\n        for (int i = 2 ; i \n"},"Fibonacci Sequence/Decode Ways.html":{"url":"Fibonacci Sequence/Decode Ways.html","title":"Decode Ways","keywords":"","body":"Problem\nLintCode 512. Decode Ways\nhttps://www.lintcode.com/problem/decode-ways/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: a string,  encoded message\n     * @return: an integer, the number of ways decoding\n     */\n    int numDecodings(string &s) {\n        // write your code here\n\n        /**\n         * dp[i]: The number of ways to decode the prefix ending at index i.\n         *\n         * dp[i] = dp[i - 1] + dp[i - 2]\n         *\n         * - Handle 1 digit:\n         *   s[i]: 0              -> 0\n         *   s[i]: {1, 2, ..., 9} -> 1\n         *\n         * - Handle 2 digits:\n         *   s[i - 1]: 0                  -> 0\n         *   s[i - 1]: 1\n         *      - s[i]: {0, 1, 2, ..., 9} -> 1\n         *   s[i - 1]: 2\n         *      - s[i]: {0, 1, 2, ..., 6} -> 1\n         *      - s[i]: {7, 8, 9}         -> 0\n         *   s[i - 1]: {3, 4, ..., 9}     -> 0\n         */\n\n        int n = s.length();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector dp(n + 1, 1);\n\n        for (int i = 1 ; i = 2) {\n                dp[i] += countTwoDigits(s, i - 2, i - 1) * dp[i - 2];\n            }\n        }\n\n        return dp[n];\n    }\n\nprivate:\n    int countOneDigit(const std::string& str, int s1) {\n\n        return (str[s1] == '0') ? 0 : 1;\n    }\n\n    int countTwoDigits(const std::string& str, int s1, int s2) {\n\n        if (str[s1] == '0') {\n            return 0;\n        }\n\n        if (str[s1] == '1') {\n            return 1;\n        }\n\n        if (str[s1] == '2') {\n            return ('0' \n"},"Fibonacci Sequence/Decode Ways II.html":{"url":"Fibonacci Sequence/Decode Ways II.html","title":"Decode Ways II","keywords":"","body":"Problem\nLintCode 676. Decode Ways II\nhttps://www.lintcode.com/problem/decode-ways-ii/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : mod(1000000007)\n    { }\n\n    /**\n     * @param s: a message being encoded\n     * @return: an integer\n     */\n    int numDecodings(string &s) {\n        // write your code here\n\n        /**\n         *            i\n         *      *******\n         *           (i - 1)\n         *  ->  ******\n         *           (i - 2)\n         *  ->  *****\n         *\n         *  dp[i]: The number of ways to decode the given substring ending at\n         *         the ith letter.\n         *\n         *  dp[i] = dp[i - 1] + dp[i - 2]\n         *\n         *\n         *  dp[i - 1]:\n         *      - s[i]: 0           , get 0\n         *      - s[i]: {1, ..., 9} , get dp[i - 1]\n         *      - s[i]: *           , get 9 * dp[i - 1]\n         *\n         *  dp[i - 2]:\n         *      - s[i - 1]: 0           , get 0\n         *      - s[i - 1]: 1\n         *          - s[i]: {0, ..., 9} , get dp[i - 2]\n         *          - s[i]: *           , get 9 * dp[i - 2]\n         *      - s[i - 1]: 2\n         *          - s[i]: {0, ..., 6} , get dp[i - 2]\n         *          - s[i]: {7, 8, 9}   , get 0\n         *          - s[i]: *           , get 6 * dp[i - 2]\n         *      - s[i - 1]: {3, ..., 9} , get 0\n         *      - s[i - 1]: *\n         *          - s[i]: {0, ..., 6} , get 2 * dp[i - 2]\n         *          - s[i]: {7, 8, 9}   , get dp[i - 2]\n         *          - s[2]: *           , get 15 * dp[i - 2]\n         *\n         */\n\n        int n = s.length();\n\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector dp(n + 1, 0);\n        dp[0] = 1;\n\n        for (int i = 0, j = 1 ; i \n"},"Fibonacci Sequence/House Robber.html":{"url":"Fibonacci Sequence/House Robber.html","title":"House Robber","keywords":"","body":"Problem\nLintCode 392. House Robber\nhttps://www.lintcode.com/problem/house-robber/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: An array of non-negative integers\n     * @return: The maximum amount of money you can rob tonight\n     */\n    long long houseRobber(vector &A) {\n        // write your code here\n\n        /**\n         * dp[i]: The maximum profits that we can aggregate from the first i\n         *        houses.\n         *\n         * dp[i] = MAX{ profit[i] + dp[i - 2], dp[i - 1] }\n         */\n\n        int n = A.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector dp(n, 0);\n        dp[0] = A[0];\n        dp[1] = std::max(A[0], A[1]);\n\n        for (int i = 2 ; i \n"},"Fibonacci Sequence/House Robber II.html":{"url":"Fibonacci Sequence/House Robber II.html","title":"House Robber II","keywords":"","body":"Problem\nLintCode 534. House Robber II\nhttps://www.lintcode.com/problem/house-robber-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: An array of non-negative integers.\n     * @return: The maximum amount of money you can rob tonight\n     */\n    int houseRobber2(vector &nums) {\n        // write your code here\n\n        /**\n         *       A      =>  The key to break the loop is generating 2\n         *                  subproblems and solving them respectively.\n         *   B       E\n         *              =>  (A B C D) or (B C D E)\n         *     C   D\n         *\n         *  1. Rob the 1st house, solve the problem within the range (0, n - 2).\n         *  2. Rob the last house, solve the problem within the range (1, n - 1).\n         *\n         *  dp[i]: The maximum profits that we can aggregate from the first\n         *         i houses.\n         *\n         *  dp[i] = MAX { profit[i] + dp[i - 2], dp[i - 1] }\n         */\n\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return nums[0];\n        }\n\n        return std::max(rob(nums, n, 0, n - 2), rob(nums, n, 1, n - 1));\n    }\n\nprivate:\n    int rob(const std::vector& nums, int n, int bgn, int end) {\n\n        std::vector dp(n, 0);\n\n        dp[bgn] = nums[bgn];\n        dp[bgn + 1] = std::max(nums[bgn], nums[bgn + 1]);\n\n        for (int i = bgn + 2 ; i \n"},"Fibonacci Sequence/House Robber III.html":{"url":"Fibonacci Sequence/House Robber III.html","title":"House Robber III","keywords":"","body":"Problem\nLintCode 535. House Robber III\nhttps://www.lintcode.com/problem/house-robber-iii/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: The root of binary tree.\n     * @return: The maximum amount of money you can rob tonight\n     */\n    int houseRobber3(TreeNode * root) {\n        // write your code here\n\n        /**\n         *        A\n         *       / \\\n         *     B     C\n         *    / \\   / \\\n         *   D   E F   G\n         *\n         * dp[c]: The maximum profits that we can aggregate in the subtree\n         *        rooted by c.\n         *\n         * dp[c] = MAX | c->val + dp[c->l->l] + dp[c->l->r] + dp[c->r->r] + dp[c->r->l]\n         *             | dp[c->l] + dp[c->r]\n         */\n\n        std::unordered_map memo;\n        return runPostOrder(root, memo);\n    }\n\nprivate:\n    int runPostOrder(TreeNode* root, std::unordered_map& memo) {\n\n        if (!root) {\n            return 0;\n        }\n\n        if (memo.count(root) == 1) {\n            return memo[root];\n        }\n\n        int l = 0, ll = 0, lr = 0, r = 0, rr = 0, rl = 0;\n\n        if (root->left) {\n            l = runPostOrder(root->left, memo);\n            ll = runPostOrder(root->left->left, memo);\n            lr = runPostOrder(root->left->right, memo);\n        }\n        if (root->right) {\n            r = runPostOrder(root->right, memo);\n            rr = runPostOrder(root->right->right, memo);\n            rl = runPostOrder(root->right->left, memo);\n        }\n\n        int max = std::max(root->val + ll + lr + rr + rl, l + r);\n\n        memo[root] = max;\n        return max;\n    }\n};\n\n"},"Fibonacci Sequence/4 Keys Keyboard.html":{"url":"Fibonacci Sequence/4 Keys Keyboard.html","title":"4 Keys Keyboard","keywords":"","body":"Problem\nLintCode 867. 4 Keys Keyboard\nhttps://www.lintcode.com/problem/4-keys-keyboard/solution\nSolution\nclass Solution {\npublic:\n    /**\n     * @param N: an integer\n     * @return: return an integer\n     */\n    int maxA(int N) {\n        // write your code here\n\n        /**\n         * dp[i]: The maximum number of letters we can get after pressing\n         *        i times of keys.\n         *\n         *\n         * dp[i] = MAX | dp[i - 1] + 1\n         *             | MAX { dp[j] * (i - j - 1) | 0  dp(N);\n        dp[0] = 1;\n\n        for (int i = 1 ; i \n"},"Fibonacci Sequence/Minimum Cost for Tickets.html":{"url":"Fibonacci Sequence/Minimum Cost for Tickets.html","title":"Minimum Cost for Tickets","keywords":"","body":"Problem\nLeetCode 983. Minimum Cost For Tickets\nhttps://leetcode.com/problems/minimum-cost-for-tickets/\nSolution\nclass Solution {\npublic:\n    int mincostTickets(vector& days, vector& costs) {\n\n        /*\n            dp[i]: The minimum cost till the ith day.\n\n            dp[i] = | dp[i - 1]                  ,we don't need to travel in the ith day.\n                    |     | cost[D] + dp[i - 1]\n                    | MIN | cost[W] + dp[i - 7]  ,we must travel in the ith day.\n                    |     | cost[M] + dp[i - 30]\n        */\n\n        int n = days.back();\n\n        vector dp(n + 1, -1);\n        for (int day : days) {\n            dp[day] = 0;\n        }\n\n        dp[0] = 0;\n        for (int i = 1 ; i \n"},"Fibonacci Sequence/Paint Fence.html":{"url":"Fibonacci Sequence/Paint Fence.html","title":"Paint Fence","keywords":"","body":"Problem\nLeetCode 276. Paint Fence\nhttps://leetcode.com/problems/paint-fence/\nSolution\nclass Solution {\npublic:\n    int numWays(int n, int k) {\n\n        /**\n            1st => k\n\n            1st 2nd\n            => diff color => k^2 - k\n            => same color => k\n\n            1st 2nd 3rd\n            => make the 3rd one have different colors with the 2nd one\n                (diff_color + same_color) * (k - 1)\n            => make the 3rd one have the same color as the 2nd one\n                diff_color * 1\n        */\n\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return k;\n        }\n        if (n == 2) {\n            return k * k;\n        }\n\n        int diff_color = k * k - k;\n        int same_color = k;\n\n        for (int i = 3 ; i \n"},"String and Sequence Extremum/Minimum Edit Distance.html":{"url":"String and Sequence Extremum/Minimum Edit Distance.html","title":"Minimum Edit Distance","keywords":"","body":"Problem\nLeetCode 72. Edit Distance\nhttps://leetcode.com/problems/edit-distance\nSolution\nclass Solution {\npublic:\n    int minDistance(string s, string t) {\n\n        /**\n         *  TC: O(S * T), where\n         *      S is the length of string s\n         *      T is the length of string t\n         *\n         *  SC: O(S * T)\n         *\n         *  dp[i][j]: The minimum costs to transform the prefix of A ending at\n         *            the index i to the prefix of B ending at the index j.\n         *\n         *  dp[i][j] = | if A[i] == B[j], dp[i - 1][j - 1]\n         *             | otherwise      , MIN | 1 + dp[i - 1][j - 1], replace A[i].\n         *                                    | 1 + dp[i][j - 1]    , insert a letter.\n         *                                    | 1 + dp[i - 1][j]    , delete a letter.\n         */\n\n        int ns = s.length();\n        int nt = t.length();\n\n        vector> dp(ns + 1, vector(nt + 1));\n\n        for (int i = 0 ; i \n"},"String and Sequence Extremum/One Edit Distance.html":{"url":"String and Sequence Extremum/One Edit Distance.html","title":"One Edit Distance","keywords":"","body":"Problem\nLeetCode 161. One Edit Distance\nhttps://leetcode.com/problems/one-edit-distance\nSolution\nclass Solution {\npublic:\n    bool isOneEditDistance(string &s, string &t) {\n\n        /**\n         *  TC: O(S * T), where\n         *      S is the length of string s\n         *      T is the length of string t\n         *\n         *  SC: O(S + T)\n         */\n\n        int len_s = s.length();\n        int len_t = t.length();\n\n        int diff = std::abs(len_s - len_t);\n\n        if (diff > 1) {\n            return false;\n        }\n\n        if (diff == 0) {\n            return checkStringsWithSameLength(s, t, len_s);\n        }\n\n        return checkStringsWithDifferentLength(s, t, len_s, len_t);\n    }\n\nprivate:\n    bool checkStringsWithSameLength(\n        const string& s, const string& t, int len) {\n\n        int count = 0;\n\n        for (int i = 0 ; i  len_t) {\n                ++i;\n            } else {\n                ++j;\n            }\n        }\n\n        return true;\n    }\n};\n\n"},"String and Sequence Extremum/Longest Common Subsequence.html":{"url":"String and Sequence Extremum/Longest Common Subsequence.html","title":"Longest Common Subsequence","keywords":"","body":"Problem\nLeetCode 1143. Longest Common Subsequence\nhttps://leetcode.com/problems/longest-common-subsequence\nSolution\nclass Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n\n        /**\n         *  TC: O(S * T), where\n         *      S is the length of the first string\n         *      T is the length of the second string\n         *\n         *  SC: O(S * T)\n         *\n         *\n         *  dp[i][j]: The LCS of the prefixes A(0, i) and B(0, j).\n         *\n         *  dp[i][j] = | if A[i] == B[j], dp[i - 1][j - 1] + 1\n         *             | Otherwise      , MAX(dp[i - 1][j], dp[i][j - 1])\n         */\n\n        int n1 = text1.length();\n        int n2 = text2.length();\n\n        vector> dp(n1 + 1, vector(n2 + 1, 0));\n\n        for (int i = 1 ; i \n"},"String and Sequence Extremum/Shortest Common Supersequence.html":{"url":"String and Sequence Extremum/Shortest Common Supersequence.html","title":"Shortest Common Supersequence","keywords":"","body":"Problem\nLeetCode 1092. Shortest Common Supersequence\nhttps://leetcode.com/problems/shortest-common-supersequence/\nSolution\nclass Solution {\npublic:\n    string shortestCommonSupersequence(string s1, string s2) {\n\n        /**\n            dp[i][j]: The length of the SCS of the prefix of S1 ending at offset i\n                      and the prefix of S2 ending at offset j.\n\n            dp[i][j] = | if S1[i] == S2[j], 1 + dp[i - 1][j - 1]\n                       | Otherwise        , 1 + MIN{dp[i - 1][j], dp[i][j - 1]}\n         */\n\n        int n1 = s1.length();\n        int n2 = s2.length();\n\n        vector> dp(n1 + 1, vector(n2 + 1, 0));\n        vector> trace(n1 + 1, vector(n2 + 1, 0));\n\n        for (int i = 1 ; i  0 || c > 0) {\n            if (trace[r][c] == S1) {\n                scs.push_back(s1[--r]);\n            } else if (trace[r][c] == S2) {\n                scs.push_back(s2[--c]);\n            } else {\n                scs.push_back(s1[--r]);\n                --c;\n            }\n        }\n\n        std::reverse(scs.begin(), scs.end());\n        return scs;\n    }\n\nprivate:\n    enum {\n        S1 = 1,\n        S2 = 2,\n        C = 3\n    };\n};\n\n"},"String and Sequence Extremum/Longest Common Substring.html":{"url":"String and Sequence Extremum/Longest Common Substring.html","title":"Longest Common Substring","keywords":"","body":"Problem\nLintCode 79. Longest Common Substring\nhttps://www.lintcode.com/problem/longest-common-substring/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: A string\n     * @param B: A string\n     * @return: the length of the longest common substring.\n     */\n    int longestCommonSubstring(string &A, string &B) {\n        // write your code here\n\n        /**\n         *  TC: O(S * T), where\n         *      S is the length of string s\n         *      T is the length of string t\n         *\n         *  SC: O(S * T)\n         *\n         *\n         *  dp[i][j]: The length of the longest common substring of the 2\n         *            prefixes A(0, i) and B(0, j).\n         *\n         *  dp[i][j] = | if A[i] == B[j], 1 + dp[i - 1][j - 1]\n         *             | Otherwise      , 0\n         *\n         *\n         *   e.g.: ABCD, CBCE\n         *\n         *       0 A B C D\n         *     0 0 0 0 0 0\n         *     C 0 0 0 1 0\n         *     B 0 0 1 0 0\n         *     C 0 0 0 2 0\n         *     E 0 0 0 0 0\n         */\n\n        int na = A.size();\n        int nb = B.size();\n\n        int ans = 0;\n        vector> dp(na + 1, vector(nb + 1, 0));\n\n        for (int i = 1 ; i \n"},"String and Sequence Extremum/Longest Palindromic Subsequence.html":{"url":"String and Sequence Extremum/Longest Palindromic Subsequence.html","title":"Longest Palindromic Subsequence","keywords":"","body":"Problem\nLintCode 667. Longest Palindromic Subsequence\nhttps://www.lintcode.com/problem/longest-palindromic-subsequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: the maximum length of s is 1000\n     * @return: the longest palindromic subsequence's length\n     */\n    int longestPalindromeSubseq(string &s) {\n        // write your code here\n\n        /**\n         * dp[i][j]: The length of the longest palindromic subsequence in\n         *           the substring starting at the index i and ending at the\n         *           index j.\n         *\n         * dp[i][j] = | if s[i] == s[j], 2 + dp[i + 1][j - 1]\n         *            | otherwise      , max{ dp[i][j - 1], dp[i + 1][j] }\n         */\n\n        int n = s.length();\n        if (n == 0) {\n            return 0;\n        }\n\n        std::vector> dp(n, std::vector(n, 0));\n\n        for (int i = 0 ; i \n"},"String and Sequence Extremum/Longest Palindromic Substring.html":{"url":"String and Sequence Extremum/Longest Palindromic Substring.html","title":"Longest Palindromic Substring","keywords":"","body":"Problem\nLeetCode 5. Longest Palindromic Substring\nhttps://leetcode.com/problems/longest-palindromic-substring\nSolution\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n\n        /**\n         *  TC: O(S^2), where\n         *      S is the length of string s\n         *\n         *  SC: O(S^2)\n         *\n         *  palin[i][j]: Whether the substring starting at the index i and\n         *               ending at the index j is palindromic.\n         *\n         *  palin[i][j] = s[i] == s[j] && palin[i + 1][j - 1]\n         *\n         *  Since the beginning and the ending offsets already show the\n         *  length of this palindromic substring, we do not need an extra\n         *  data structure to keep track of the length information.\n         */\n\n        int n = s.length();\n\n        vector> dp(n, vector(n));\n        int len = 1, bgn = 0;\n\n        for (int i = 0 ; i \n"},"String and Sequence Extremum/Longest Increasing Subsequence.html":{"url":"String and Sequence Extremum/Longest Increasing Subsequence.html","title":"Longest Increasing Subsequence","keywords":"","body":"Problem\nLeetCode 300. Longest Increasing Subsequence\nhttps://leetcode.com/problems/longest-increasing-subsequence\nSolution\nclass Solution {\npublic:\n    int lengthOfLIS(vector& nums) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of elements.\n         *\n         *  SC: O(N)\n         *\n         *  L[i]: The length of the LIS ending at index i such that nums[i] is\n         *        the last element of the LIS.\n         *\n         *  L[i] = | 1 + MAX{ L[j] }, where 0  lis;\n        lis.emplace_back(nums[0]);\n\n        int n = nums.size();\n        for (int i = 1 ; i  lis.back()) {\n                lis.emplace_back(nums[i]);\n                continue;\n            }\n\n            int l = 0, r = lis.size() - 1;\n            while (l + 1 \n"},"String and Sequence Extremum/Longest Repeating Substring.html":{"url":"String and Sequence Extremum/Longest Repeating Substring.html","title":"Longest Repeating Substring","keywords":"","body":"Problem\nLeetCode 1062. Longest Repeating Substring\nhttps://leetcode.com/problems/longest-repeating-substring/\nSolution\nclass Solution {\npublic:\n    int longestRepeatingSubstring(string S) {\n\n        /**\n         *  TC: O(S^2), where\n         *      S is the length of string s\n         *\n         *  SC: O(S^2)\n         *\n         *\n         *  dp[i][j]: The length of the longest common substring shared by the\n         *            substring ending at the index i and the other one ending\n         *            at the index j.\n         *\n         *  dp[i][j] = | if s[i] == s[j] and j > dp(n + 1, vector(n + 1));\n\n        int ans = 0;\n\n        for (int i = 1 ; i \n"},"String and Sequence Extremum/Longest Consecutive Sequence.html":{"url":"String and Sequence Extremum/Longest Consecutive Sequence.html","title":"Longest Consecutive Sequence","keywords":"","body":"Problem\nLeetCode 128. Longest Consecutive Sequence\nhttps://leetcode.com/problems/longest-consecutive-sequence\nSolution\nclass Solution {\npublic:\n    int longestConsecutive(vector& nums) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         */\n\n        unordered_set set(nums.begin(), nums.end());\n\n        int ans = 0;\n        while (!set.empty()) {\n            auto it = set.begin();\n            int num = *it;\n            int local = 1;\n            set.erase(it);\n\n            int next = num + 1;\n            while (set.count(next) == 1) {\n                set.erase(next);\n                ++local;\n                ++next;\n            }\n\n            next = num - 1;\n            while (set.count(next) == 1) {\n                set.erase(next);\n                ++local;\n                --next;\n            }\n\n            ans = max(ans, local);\n        }\n\n        return ans;\n    }\n};\n\n"},"String and Sequence Extremum/Longest Palindrome.html":{"url":"String and Sequence Extremum/Longest Palindrome.html","title":"Longest Palindrome","keywords":"","body":"Problem\nLeetCode 409. Longest Palindrome\nhttps://leetcode.com/problems/longest-palindrome\nSolution\nclass Solution {\npublic:\n    int longestPalindrome(string s) {\n\n        vector freq(128, 0);\n        for (char ch : s) {\n            ++freq[ch];\n        }\n\n        int len = 0;\n        bool has_odd = false;\n        for (int f : freq) {\n            if (f % 2 == 1) {\n                has_odd = true;\n                len += f - 1;\n            } else {\n                len += f;\n            }\n        }\n\n        if (has_odd) {\n            ++len;\n        }\n        return len;\n    }\n};\n\n"},"String and Sequence Extremum/Decrease to be Palindrome.html":{"url":"String and Sequence Extremum/Decrease to be Palindrome.html","title":"Decrease to be Palindrome","keywords":"","body":"Problem\nLintCode 1784. Decrease to be Palindrome\nhttps://www.lintcode.com/problem/decrease-to-be-palindrome/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param s: the string s\n     * @return: the number of operations at least\n     */\n    int numberOfOperations(string &s) {\n        // Write your code here\n\n        int count = 0;\n\n        int l = 0, r = s.length() - 1;\n        while (l \n"},"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html":{"url":"String and Sequence Extremum/Minimum Insertion Steps to Make a String Palindrome.html","title":"Minimum Insertion Steps to Make a String Palindrome","keywords":"","body":"Problem\nLeetCode 1312. Minimum Insertion Steps to Make a String Palindrome\nhttps://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\nSolution\nclass Solution {\npublic:\n    int minInsertions(string s) {\n\n        /**\n         *  TC: O(S^2), where\n         *      S is the length of string s\n         *\n         *  SC: O(S^2)\n         *\n         *  dp[i][j]: The minimum number of steps to make the substring s(i, j)\n         *            palindromic.\n         *\n         *  dp[i][j] = | if s[i] == s[j], dp[i + 1][j - 1]\n         *             | otherwise      , 1 + MIN | dp[i][j - 1], insert a letter in front of s[i]\n         *                                        | dp[i + 1][j], insert a letter behind s[j]\n         */\n\n        int n = s.length();\n        vector> dp(n, vector(n, 0));\n\n        for (int i = 0 ; i \n"},"String and Sequence Extremum/Uncrossed Lines.html":{"url":"String and Sequence Extremum/Uncrossed Lines.html","title":"Uncrossed Lines","keywords":"","body":"Problem\nLeetCode 1035. Uncrossed Lines\nhttps://leetcode.com/problems/uncrossed-lines/\nSolution\nclass Solution {\npublic:\n    int maxUncrossedLines(vector& S, vector& T) {\n\n        /**\n         *  TC: O(S * T), where\n         *      S is the length of string s\n         *      T is the length of string t\n         *\n         *  SC: O(S * T)\n         *\n         *  dp[i][j]: The max number of uncrossing lines produced by using\n         *            the first i numbers of A and the first j numbers of B.\n         *\n         *  dp[i][j] = | if S[i] == T[j], 1 + dp[i - 1][j - 1]\n         *             | otherwise      , MAX | dp[i][j - 1]\n         *                                    | dp[i + 1][j]\n         */\n\n        int ns = S.size();\n        int nt = T.size();\n        vector> dp(ns + 1, vector(nt + 1));\n\n        for (int i = 1 ; i \n"},"String and Sequence Properties/Is Subsequence.html":{"url":"String and Sequence Properties/Is Subsequence.html","title":"Is Subsequences","keywords":"","body":"Problem\nLeetCode 392. Is Subsequence\nhttps://leetcode.com/problems/is-subsequence\nSolution\nclass Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n\n        /**\n         *  TC: O(T), where\n         *      T is the length of string t\n         *\n         *  SC: O(1)\n         */\n\n        int ls = s.length();\n        int lt = t.length();\n\n        int i = 0;\n        for (int j = 0 ; i \n"},"String Scramble/Distinct Subsequences.html":{"url":"String Scramble/Distinct Subsequences.html","title":"Distinct Subsequences","keywords":"","body":"Problem\nLeetCode 115. Distinct Subsequences\nhttps://leetcode.com/problems/distinct-subsequences\nSolution\nclass Solution {\npublic:\n    int numDistinct(string s, string t) {\n\n        /**\n         *  TC: O(S * T), where\n         *      S is the length of string s\n         *      T is the length of string t\n         *\n         *  SC: O(S * T)\n         *\n         *  dp[i][j]: The number of distinct ways to produce the prefix of T\n         *            ending at the jth position by removing any character\n         *            of the prefix of S ending at the ith position.\n         *\n         *  dp[i][j] = | if S[i] == T[j], dp[i - 1][j - 1] + dp[i - 1][j]\n         *             | otherwise      , dp[i - 1][j]\n         *\n         *    0 r a b b b i t\n         *  0 1 1 1 1 1 1 1 1\n         *  r 0 1 1 1 1 1 1 1\n         *  a 0 0 1 1 1 1 1 1\n         *  b 0 0 0 1 2 3 3 3\n         *  b 0 0 0 0 1 3 3 3\n         *  i 0 0 0 0 0 0 3 3\n         *  t 0 0 0 0 0 0 0 3\n         */\n\n        int ns = s.length();\n        int nt = t.length();\n\n        long mod = 1e9 + 7;\n        vector> dp(ns + 1, vector(nt + 1));\n\n        for (int i = 0 ; i \n"},"String Scramble/Interleaving String.html":{"url":"String Scramble/Interleaving String.html","title":"Interleaving String","keywords":"","body":"Problem\nLeetCode 97. Interleaving String\nhttps://leetcode.com/problems/interleaving-string\nSolution\nclass Solution {\npublic:\n    bool isInterleave(string s1, string s2, string s3) {\n\n        /**\n         *  TC: O(S1 * S2), where\n         *      S1 is the length of string s1\n         *      S2 is the length of string s2\n         *\n         *  SC: O(S1 * S2)\n         *\n         *\n         *  dp[i][j]: Whether we can form the first (i + j) characters of S3\n         *            by using the first i characters of S1 and the first j\n         *            characters of S2.\n         *\n         *  dp[i][j] = (S1[i] == S3[i + j] && dp[i - 1][j]) ||\n         *             (S2[j] == S3[i + j] && dp[i][j - 1])\n         */\n\n        int n1 = s1.length();\n        int n2 = s2.length();\n        int n3 = s3.length();\n\n        if (n1 + n2 != n3) {\n            return false;\n        }\n\n        vector> dp(n1 + 1, vector(n2 + 1));\n        dp[0][0] = true;\n\n        for (int i = 1 ; i \n"},"String Scramble/Scramble String.html":{"url":"String Scramble/Scramble String.html","title":"Scramble String","keywords":"","body":"Problem\nLeetCode 87. Scramble String\nhttps://leetcode.com/problems/scramble-string\nSolution\nclass Solution {\npublic:\n    bool isScramble(string s1, string s2) {\n\n        /**\n         *  TC: O(N^5), where\n         *      N is the string length\n         *\n         *  SC: O(N^4)\n         *\n         *   great\n         *   => atgre, eatgr\n         *             => tgrea\n         *\n         *  A scrambled version of a string can be generated by interexchanging\n         *  its prefix and suffix. For example, \"deabc\" is derived from\n         *  interexchaning \"abc\", the prefix, and \"de\", the suffix, of \"abcde\".\n         *\n         *  Given 2 strings, S and T, we can determine if T is a scrambled version\n         *  of S by decompsing these 2 strings into 2 parts respectively and\n         *  checking if these 2 substrings are equal:\n         *\n         *      S = Sp + Ss\n         *      T = Tp + Ts\n         *\n         *      => Sp == Tp && Ss == Ts, scrambled one!\n         *      => Sp == Ts && Ss == Tp, scrambled one!\n         */\n\n        unordered_map> memo;\n        return helper(s1, s2, memo);\n    }\n\nprivate:\n    bool helper(const string& s1, const string& s2,\n                unordered_map>& memo) {\n\n        if (memo.count(s1) == 1 && memo[s1].count(s2) == 1) {\n            return memo[s1][s2];\n        }\n\n        int n = s1.length();\n\n        if (s1 == s2) {\n            return memo[s1][s2] = true;\n        }\n        if (freq(s1) != freq(s2)) {\n            return memo[s1][s2] = false;\n        }\n\n        for (int i = 1 ; i  freq(const string& s) {\n        vector f(26);\n        for (char ch : s) {\n            ++f[ch - 'a'];\n        }\n        return f;\n    }\n};\n\n"},"String Scramble/Wildcard Matching.html":{"url":"String Scramble/Wildcard Matching.html","title":"Wildcard Matching","keywords":"","body":"Problem\nLeetCode 44. Wildcard Matching\nhttps://leetcode.com/problems/wildcard-matching\nSolution\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n\n        /**\n         *  TC: O(S * P), where\n         *      S is the length of string S\n         *      P is the length of pattern P\n         *\n         *  SC: O(S * P)\n         *\n         *  dp[i][j]: Whether the prefix of S ending at the index i can\n         *            be matched by the prefix of P ending at index j.\n         *\n         *             | if s[i] == p[j] || p[j] == '?', dp[i - 1][j - 1]\n         *  dp[i][j] = | if p[j] == '*'                , dp[i - 1][j] || dp[i][j- 1]\n         *             | otherwise                     , false\n         */\n\n        int ls = s.length();\n        int lp = p.length();\n\n        vector> dp(ls + 1, vector(lp + 1));\n        dp[0][0] = true;\n\n        // dp[0][0...lp]\n        // S:\n        // P: *, **, ***A\n\n        for (int i = 1 ; i \n"},"String Scramble/Regular Expression Matching.html":{"url":"String Scramble/Regular Expression Matching.html","title":"Regular Expression Matching","keywords":"","body":"Problem\nLeetCode 10. Regular Expression Matching\nhttps://leetcode.com/problems/regular-expression-matching\nSolution\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n\n        /**\n         *  TC: O(S * P), where\n         *      S is the length of string S\n         *      P is the length of pattern P\n         *\n         *  SC: O(S * P)\n         *\n         *  dp[i][j]: Whether the prefix of S ending at index i can\n         *            be matched by the prefix of P ending at index j.\n         *\n         *             | if s[i] == p[j] || p[j] == '.'        , dp[i - 1][j - 1]\n         *             |\n         *  dp[i][j] = | if p[j] == '*'\n         *             | |  s[i] == p[j - 1] || p[j - 1] == '.', dp[i - 1][j]\n         *             | |  No plan to match                   , dp[i][j - 2]\n         *             |\n         *             | Otherwise                             , false\n         */\n\n        int ls = s.length();\n        int lp = p.length();\n\n        vector> dp(ls + 1, vector(lp + 1));\n        dp[0][0] = true;\n\n        // dp[0][0...lp]\n        // S:\n        // P: a*b*, .*c*\n        // The reson why we do not assign dp[0][i] = true: *C**\n        for (int i = 2 ; i = 2 && p[j - 1] == '*') {\n                    // By default, no plan to match.\n                    dp[i][j] = dp[i][j - 2];\n\n                    if (s[i - 1] == p[j - 2] || p[j - 2] == '.') {\n                        dp[i][j] = dp[i][j] || dp[i - 1][j];\n                    }\n                }\n            }\n        }\n\n        return dp[ls][lp];\n    }\n};\n\n"},"Game Theory/Coins in a Line.html":{"url":"Game Theory/Coins in a Line.html","title":"Coins in a Line","keywords":"","body":"Problem\nLintCode 394. Coins in a Line\nhttps://www.lintcode.com/problem/coins-in-a-line/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: A boolean which equals to true if the first player will win\n     */\n    bool firstWillWin(int n) {\n        // write your code here\n\n        /**\n         *  A and B 2 competitors\n         *\n         *  1. If A can push B to step into a losable state, A is winnable.\n         *\n         *  2. No matter how hard A tries, B can always step into a winnable\n         *     state. Then, A is guaranteed to lose the game.\n         *\n         *             4(W)\n         *            / \\\n         *        (L)3   2(W)\n         *          / \\\n         *      (W)2   1(W)\n         *\n         *  dp[i]: Whether a player is going to win the game if there are i\n         *         coins in a line.\n         *\n         *  dp[i] = dp[i - 1] == False || dp[i - 2] == False\n         */\n\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1 || n == 2) {\n            return true;\n        }\n\n        std::vector dp(n + 1, false);\n        dp[1] = true;\n        dp[2] = true;\n\n        for (int i = 3 ; i \n"},"Game Theory/Coins in a Line II.html":{"url":"Game Theory/Coins in a Line II.html","title":"Coins in a Line II","keywords":"","body":"Problem\nLintCode 395. Coins in a Line II\nhttps://www.lintcode.com/problem/coins-in-a-line-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param values: a vector of integers\n     * @return: a boolean which equals to true if the first player will win\n     */\n    bool firstWillWin(vector &values) {\n        // write your code here\n\n        /**\n         *  A and B, 2 competitors\n         *\n         *  Sum(i): The total value of the remained coins covering from the\n         *          ith coin to the last one.\n         *\n         *  Sa: The total value A can aggregate in the current iteration.\n         *  Sb: The total value B can aggregate in the next iteration.\n         *\n         *  When there are (n - i + 1) coins remained, player A has 2 choices.\n         *      1. Pick the ith coin,\n         *          Sa = values[i] + Sum(i + 1) - Sb'.\n         *             = Sum(i) - Sb'.\n         *\n         *      2. Pick the ith and the (i+1)th coin,\n         *          Sa = values[i] + values[i + 1] + Sum(i + 2) - Sb''.\n         *             = Sum(i) - Sb''.\n         *\n         * dp[i]: The maximum value that a person can aggregate when there\n         *        are (n - i + 1) coins left.\n         *\n         * dp[i] = MAX | pick the ith coin                , sum[i] - dp[i + 1]\n         *             | pick the ith and the (i+1)th coin, sum[i] - dp[i + 2]\n         */\n\n        int n = values.size();\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1 || n == 2) {\n            return true;\n        }\n\n        std::vector sum(n, 0);\n        std::vector dp(n, 0);\n\n        sum[n - 1] = values[n - 1];\n        sum[n - 2] = sum[n - 1] + values[n - 2];\n        dp[n - 1] = values[n - 1];\n        dp[n - 2] = dp[n - 1] + values[n - 2];\n\n        for (int i = n - 3 ; i >= 0 ; --i) {\n            sum[i] = sum[i + 1] + values[i];\n\n            // values[i] + (sum[i + 1] - dp[i + 1])\n            int plan_a = sum[i] - dp[i + 1];\n\n            // values[i] + values[i + 1] + (sum[i + 2) - dp[i + 2])\n            int plan_b = sum[i] - dp[i + 2];\n\n            dp[i] = std::max(plan_a, plan_b);\n        }\n\n        return dp[0] * 2 > sum[0];\n    }\n};\n\n"},"Game Theory/Coins in a Line III.html":{"url":"Game Theory/Coins in a Line III.html","title":"Coins in a Line III","keywords":"","body":"Problem\nLintCode 396. Coins in a Line III\nhttps://www.lintcode.com/problem/coins-in-a-line-iii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param values: a vector of integers\n     * @return: a boolean which equals to true if the first player will win\n     */\n    bool firstWillWin(vector &values) {\n        // write your code here\n\n        /**\n         *  A and B, 2 competitors\n         *\n         *  Sum(i, j): The total value of the remained coins covering from the\n         *             ith coin to the jth one.\n         *\n         *  Sa: The total value A can aggregate in the current iteration.\n         *  Sb: The total value B can aggregate in the next iteration.\n         *\n         *  When there are (j - i + 1) coins remained, player A has 2 choices.\n         *      1. Pick the ith coin,\n         *          Sa = values[i] + Sum(i + 1, j) - Sb'.\n         *             = Sum(i, j) - Sb'.\n         *\n         *      2. Pick the jth coin,\n         *          Sa = values[j] + Sum(i, j - 1) - Sb''.\n         *             = Sum(i, j) - Sb''.\n         *\n         * dp[i][j]: The maximum value that a person can aggregate when there\n         *           are (j - i + 1) coins left.\n         *\n         * dp[i][j] = MAX | pick the ith coin, sum[i][j] - dp[i + 1][j]\n         *                | pick the jth coin, sum[i][j] - dp[i][j - 1]\n         */\n\n        int n = values.size();\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n\n        std::vector> sum(n, std::vector(n, 0));\n        std::vector> dp(n, std::vector(n, 0));\n\n        for (int i = 0 ; i  sum[0][n - 1];\n    }\n};\n\n"},"Game Theory/Stones in a Line.html":{"url":"Game Theory/Stones in a Line.html","title":"Stones in a Line","keywords":"","body":"Problem\nLintCode 877. Stone Game\nhttps://leetcode.com/problems/stone-game/\nSolution\nclass Solution {\npublic:\n    bool stoneGame(vector& piles) {\n\n        /**\n            piles[i] -> piles[j]\n\n            select(piles, i, j):\n                The maximum score difference Alex can get from\n                the piles starting at index i and ending at index j.\n\n            MAX(piles[i] - select(piles, i + 1, j),\n                piles[j] - select(piles, i, j - 1))\n\n\n            dp[i][j]: Just like the objective function\n\n            dp[i][j] = MAX | piles[i] - dp[i + 1][j]\n                           | piles[j] - dp[i][j - 1]\n        */\n\n        int n = piles.size();\n\n        vector> dp(n, vector(n, 0));\n        for (int i = 0 ; i  0;\n    }\n};\n\n"},"Iterator/Binary Tree Iterative Preorder Traversal.html":{"url":"Iterator/Binary Tree Iterative Preorder Traversal.html","title":"Binary Tree Iterative Preorder Traversal","keywords":"","body":"Problem\nLeetCode 144. Binary Tree Preorder Traversal\nhttps://leetcode.com/problems/binary-tree-preorder-traversal\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector preorderTraversal(TreeNode* root) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes.\n         *\n         *  SC: O(N)\n         */\n\n        vector ans;\n\n        stack stk;\n        if (root) {\n            stk.emplace(root);\n        }\n\n        while (!stk.empty()) {\n            auto node = stk.top();\n            stk.pop();\n\n            ans.emplace_back(node->val);\n\n            if (node->right) {\n                stk.emplace(node->right);\n            }\n            if (node->left) {\n                stk.emplace(node->left);\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Iterator/Binary Tree Iterative Inorder Traversal.html":{"url":"Iterator/Binary Tree Iterative Inorder Traversal.html","title":"Binary Tree Iterative Inorder Traversal","keywords":"","body":"Problem\nLeetCode 94. Binary Tree Inorder Traversal\nhttps://leetcode.com/problems/binary-tree-inorder-traversal\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector inorderTraversal(TreeNode* root) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        vector ans;\n\n        stack stk;\n        while (root) {\n            stk.emplace(root);\n            root = root->left;\n        }\n\n        while (!stk.empty()) {\n            auto node = stk.top();\n            stk.pop();\n\n            ans.emplace_back(node->val);\n\n            node = node->right;\n            while (node) {\n                stk.emplace(node);\n                node = node->left;\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Iterator/Binary Tree Iterative Postorder Traversal.html":{"url":"Iterator/Binary Tree Iterative Postorder Traversal.html","title":"Binary Tree Iterative Postorder Traversal","keywords":"","body":"Problem\nLeetCode 145. Binary Tree Postorder Traversal\nhttps://leetcode.com/problems/binary-tree-postorder-traversal\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector postorderTraversal(TreeNode* root) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        vector ans;\n\n        stack stk;\n        collectNodes(root, stk);\n\n        while (!stk.empty()) {\n            auto node = stk.top();\n            stk.pop();\n\n            ans.emplace_back(node->val);\n\n            if (!stk.empty() && node == stk.top()->left) {\n                collectNodes(stk.top()->right, stk);\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    void collectNodes(TreeNode* root, stack& stk) {\n\n        while (root) {\n            stk.emplace(root);\n\n            if (root->left) {\n                root = root->left;\n            } else {\n                root = root->right;\n            }\n        }\n    }\n};\n\n"},"Iterator/Inorder Successor in BST.html":{"url":"Iterator/Inorder Successor in BST.html","title":"Inorder Sucessor in BST","keywords":"","body":"Problem\nLeetCode 285. Inorder Successor in BST\nhttps://leetcode.com/problems/inorder-successor-in-bst\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {\n\n        /**\n         *  TC: O(H), where\n         *      H is the tree height\n         *\n         *  SC: O(1)\n         */\n\n        TreeNode* succ = nullptr;\n\n        while (root) {\n            if (root->val > p->val) {\n                succ = root;\n                root = root->left;\n            } else {\n                root = root->right;\n            }\n        }\n\n        return succ;\n    }\n};\n\n"},"Iterator/Flatten Binary Tree to Linked List.html":{"url":"Iterator/Flatten Binary Tree to Linked List.html","title":"Flatten Binary Tree to Linked List","keywords":"","body":"Problem\nLintCode 453. Flatten Binary Tree to Linked List\nhttps://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: a TreeNode, the root of the binary tree\n     * @return: nothing\n     */\n    void flatten(TreeNode * root) {\n        // write your code here\n\n        /**\n         *  case 1: no child\n         *\n         *      a\n         *\n         *  case 2: Has a left child\n         *\n         *      a    a\n         *     /  =>  \\\n         *    b        b  Return b as the last node.\n         *\n         *\n         *  case 3: Has a right child\n         *\n         *    a      a\n         *     \\  =>  \\\n         *      b      b  Return b as the last node.\n         *\n         *\n         *  case 4: Has two children\n         *\n         *     a         a      a\n         *    / \\   =>  /   =>   \\\n         *   b   c     b          b\n         *              \\          \\\n         *               c          c  Return c as the last node.\n         *\n         *\n         *  Demo:\n         *\n         *      1             1          1              1       1\n         *     / \\           / \\        / \\            /         \\\n         *    2   5    =>   2   5  =>  2   5      =>  2     =>    2\n         *   / \\   \\       /     \\      \\   \\          \\           \\\n         *  3*  4*  6     3       6*     3   6*         3           3\n         *                 \\              \\              \\           \\\n         *                  4*             4*             4           4\n         *                                                 \\           \\\n         *                                                  5           5\n         *                                                   \\           \\\n         *                                                    6           6*\n         */\n\n         runPostOrder(root);\n    }\n\nprivate:\n    TreeNode* runPostOrder(TreeNode* root) {\n\n        if (!root) {\n            return nullptr;\n        }\n\n        auto last_l = runPostOrder(root->left);\n        auto last_r = runPostOrder(root->right);\n\n        if (last_l) {\n            last_l->right = root->right;\n            root->right = root->left;\n            root->left = nullptr;\n        }\n\n        if (last_r) {\n            return last_r;\n        }\n\n        if (last_l) {\n            return last_l;\n        }\n\n        return root;\n    }\n};\n\n"},"Iterator/Flatten Nested List Iterator.html":{"url":"Iterator/Flatten Nested List Iterator.html","title":"Flatten Nested List Iterator","keywords":"","body":"Problem\nLeetCode 341. Flatten Nested List Iterator\nhttps://leetcode.com/problems/flatten-nested-list-iterator\nSolution\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector &getList() const;\n * };\n */\n\nclass NestedIterator {\npublic:\n    NestedIterator(vector &list) {\n\n        int n = list.size();\n        for (int i = n - 1 ; i >= 0 ; --i) {\n            stk.emplace(move(list[i]));\n        }\n    }\n\n    int next() {\n        int elem = stk.top().getInteger();\n        stk.pop();\n        return elem;\n    }\n\n    bool hasNext() {\n\n        while (!stk.empty()) {\n            if (stk.top().isInteger()) {\n                return true;\n            }\n\n            auto list = stk.top().getList();\n            stk.pop();\n\n            int n = list.size();\n            for (int i = n - 1 ; i >= 0 ; --i) {\n                stk.emplace(move(list[i]));\n            }\n        }\n\n        return false;\n    }\n\nprivate:\n    stack stk;\n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout \n"},"Iterator/ZigZag Iterator.html":{"url":"Iterator/ZigZag Iterator.html","title":"ZigZag Iterator","keywords":"","body":"Problem\nLeetCode 281. Zigzag Iterator\nhttps://leetcode.com/problems/zigzag-iterator\nSolution\nclass ZigzagIterator {\npublic:\n    ZigzagIterator(vector& v1, vector& v2) {\n\n        k = 0;\n\n        if (!v1.empty()) {\n            slots.push_back({v1.begin(), v1.end()});\n            ++k;\n        }\n        if (!v2.empty()) {\n            slots.push_back({v2.begin(), v2.end()});\n            ++k;\n        }\n\n        rover = slots.begin();\n        end = slots.end();\n    }\n\n    int next() {\n        int elem;\n\n        auto& vec_bgn = rover->first;\n        auto& vec_end = rover->second;\n\n        elem = *vec_bgn++;\n        if (vec_bgn == vec_end) {\n            rover = slots.erase(rover);\n            --k;\n        } else {\n            ++rover;\n        }\n\n        if (rover == end) {\n            rover = slots.begin();\n        }\n\n        return elem;\n    }\n\n    bool hasNext() {\n        return k > 0;\n    }\n\nprivate:\n    int k;\n    list::iterator, vector::iterator>> slots;\n    list::iterator, vector::iterator>>::iterator rover, end;\n};\n\n/**\n * Your ZigzagIterator object will be instantiated and called as such:\n * ZigzagIterator i(v1, v2);\n * while (i.hasNext()) cout \n"},"Iterator/ZigZag Iterator II.html":{"url":"Iterator/ZigZag Iterator II.html","title":"ZigZag Iterator II","keywords":"","body":"Problem\nLintCode 541. ZigZag Iterator II\nhttps://www.lintcode.com/problem/zigzag-iterator-ii/description\nSolution\nclass ZigzagIterator2 {\npublic:\n    /*\n    * @param vecs: a list of 1d vectors\n    */ZigzagIterator2(vector>& vecs)\n      : turn(0),\n        total(0),\n        vecs(vecs) {\n        // do intialization if necessary\n\n        for (auto& vec : vecs) {\n            if (!vec.empty()) {\n                bgns.push_back(vec.begin());\n                ends.push_back(vec.end());\n                ++total;\n            }\n        }\n    }\n\n    /*\n     * @return: An integer\n     */\n    int next() {\n        // write your code here\n\n        int elem = *bgns[turn];\n        ++bgns[turn];\n\n        if (bgns[turn] == ends[turn]) {\n            bgns.erase(bgns.begin() + turn);\n            ends.erase(ends.begin() + turn);\n\n            --total;\n            if (total > 0) {\n                turn = turn % total;\n            }\n        } else {\n            turn = (turn + 1) % total;\n        }\n\n        return elem;\n    }\n\n    /*\n     * @return: True if has next\n     */\n    bool hasNext() {\n        // write your code here\n\n        return total > 0;\n    }\n\nprivate:\n    int turn, total;\n\n    std::vector::iterator> bgns;\n    std::vector::iterator> ends;\n\n    std::vector> vecs;\n};\n\n/**\n * Your ZigzagIterator2 object will be instantiated and called as such:\n * ZigzagIterator2 solution(vecs);\n * while (solution.hasNext()) result.push_back(solution.next());\n * Ouptut result\n */\n\n\nclass ZigzagIterator2 {\npublic:\n    /*\n    * @param vecs: a list of 1d vectors\n    */ZigzagIterator2(vector>& vecs)\n      : total(0), turn(0) {\n        // do intialization if necessary\n\n        for (auto& vec : vecs) {\n            if (!vec.empty()) {\n                bgns.emplace_back(vec.begin());\n                ends.emplace_back(vec.end());\n                ++total;\n            }\n        }\n    }\n\n    /*\n     * @return: An integer\n     */\n    int next() {\n        // write your code here\n\n        return cache;\n    }\n\n    /*\n     * @return: True if has next\n     */\n    bool hasNext() {\n        // write your code here\n\n        if (total == 0) {\n            return false;\n        }\n\n        cache = *bgns[turn];\n        ++bgns[turn];\n\n        if (bgns[turn] == ends[turn]) {\n            bgns.erase(bgns.begin() + turn);\n            ends.erase(ends.begin() + turn);\n\n            --total;\n            if (total > 0) {\n                turn = turn % total;\n            }\n        } else {\n            turn = (turn + 1) % total;\n        }\n\n        return true;\n    }\n\nprivate:\n    std::vector::iterator> bgns;\n    std::vector::iterator> ends;\n\n    int total;\n    int turn;\n\n    int cache;\n};\n\n/**\n * Your ZigzagIterator2 object will be instantiated and called as such:\n * ZigzagIterator2 solution(vecs);\n * while (solution.hasNext()) result.push_back(solution.next());\n * Ouptut result\n */\n\n"},"Iterator/Nested List Weight Sum.html":{"url":"Iterator/Nested List Weight Sum.html","title":"Nested List Weight Sum","keywords":"","body":"Problem\nLeetCode 339. Nested List Weight Sum\nhttps://leetcode.com/problems/nested-list-weight-sum\nSolution\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     void add(const NestedInteger &ni);\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector &getList() const;\n * };\n */\nclass Solution {\npublic:\n    int depthSum(vector& list) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of objects\n         *\n         *  SC: O(N)\n         */\n\n        int ans = 0;\n\n        stack> stk;\n        int n = list.size();\n        for (int i = n - 1 ; i >= 0 ; --i) {\n            stk.push({list[i], 1});\n        }\n\n        while (!stk.empty()) {\n            auto rec = stk.top();\n            stk.pop();\n\n            auto& item = rec.first;\n            int depth = rec.second;\n\n            if (item.isInteger()) {\n                ans += item.getInteger() * depth;\n            } else {\n                auto& nested = item.getList();\n                n = nested.size();\n                for (int i = n - 1 ; i >= 0 ; --i) {\n                    stk.push({nested[i], depth + 1});\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Iterator/Nested List Weight Sum II.html":{"url":"Iterator/Nested List Weight Sum II.html","title":"Nested List Weight Sum II","keywords":"","body":"Problem\nLeetCode 364. Nested List Weight Sum II\nhttps://leetcode.com/problems/nested-list-weight-sum-ii\nSolution\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     void add(const NestedInteger &ni);\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector &getList() const;\n * };\n */\nclass Solution {\npublic:\n    int depthSumInverse(vector& list) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of objects\n         *\n         *  SC: O(N)\n         */\n\n        stack> stk;\n        int n = list.size();\n        for (int i = n - 1 ; i >= 0 ; --i) {\n            stk.push({list[i], 1});\n        }\n\n        vector> res;\n        int max_depth = 0;\n\n        while (!stk.empty()) {\n            auto pair = stk.top();\n            stk.pop();\n\n            auto& item = pair.first;\n            int depth = pair.second;\n            max_depth = max(max_depth, depth);\n\n            if (item.isInteger()) {\n                res.push_back({item.getInteger(), depth});\n            } else {\n                auto nested = item.getList();\n                n = nested.size();\n                for (int i = n - 1 ; i >= 0 ; --i) {\n                    stk.push({nested[i], depth + 1});\n                }\n            }\n        }\n\n        int ans = 0;\n        for (auto& pair : res) {\n            ans += pair.first * (max_depth - pair.second + 1);\n        }\n        return ans;\n    }\n};\n\n"},"Structure Conversion/Flatten a Multilevel Doubly Linked List.html":{"url":"Structure Conversion/Flatten a Multilevel Doubly Linked List.html","title":"Flatten a Multilevel Doubly Linked List","keywords":"","body":"Problem\nLeetCode 430. Flatten a Multilevel Doubly Linked List\nhttps://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list\nSolution\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\n\nclass Solution {\npublic:\n    Node* flatten(Node* head) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        if (!head) {\n            return head;\n        }\n\n        stack stk;\n        stk.emplace(head);\n\n        Node dummy;\n        auto prev = &dummy;\n\n        while (!stk.empty()) {\n            auto curr = stk.top();\n            stk.pop();\n\n            while (curr) {\n                prev->next = curr;\n                curr->prev = prev;\n                prev = curr;\n\n                if (curr->child) {\n                    stk.emplace(curr->next);\n                    stk.emplace(curr->child);\n                    curr->child = nullptr;\n                    break;\n                }\n\n                curr = curr->next;\n            }\n        }\n\n        dummy.next->prev = nullptr;\n        return dummy.next;\n    }\n};\n\n"},"Structure Conversion/Flatten Nested List.html":{"url":"Structure Conversion/Flatten Nested List.html","title":"Flatten Nested List","keywords":"","body":"Problem\nLintCode 22. Flatten List\nhttps://www.lintcode.com/problem/flatten-list\nSolution\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer,\n *     // rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds,\n *     // if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds,\n *     // if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector &getList() const;\n * };\n */\nclass Solution {\npublic:\n    // @param nestedList a list of NestedInteger\n    // @return a list of integer\n    vector flatten(vector &list) {\n        // Write your code here\n\n        vector ans;\n\n        stack stk;\n        int n = list.size();\n\n        for (int i = n - 1 ; i >= 0 ; --i) {\n            stk.emplace(move(list[i]));\n        }\n\n        while (!stk.empty()) {\n            auto item = stk.top();\n            stk.pop();\n\n            if (item.isInteger()) {\n                ans.emplace_back(item.getInteger());\n            } else {\n                auto& items = item.getList();\n                n = items.size();\n\n                for (int i = n - 1 ; i >= 0 ; --i) {\n                    stk.emplace(move(items[i]));\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Structure Conversion/Flatten 2D Vector.html":{"url":"Structure Conversion/Flatten 2D Vector.html","title":"Flatten 2D Vector","keywords":"","body":"Problem\nLeetCode 251. Flatten 2D Vector\nhttps://leetcode.com/problems/flatten-2d-vector\nSolution\nclass Vector2D {\npublic:\n    Vector2D(vector>& vec) {\n\n        row = vec.begin();\n        row_end = vec.end();\n\n        if (row != row_end) {\n            col = row->begin();\n            findNext();\n        }\n    }\n\n    int next() {\n        int elem = cache;\n        findNext();\n        return elem;\n    }\n\n    bool hasNext() {\n        return row != row_end;\n    }\n\nprivate:\n    int cache;\n    vector>::iterator row, row_end;\n    vector::iterator col;\n\n    void findNext() {\n\n        if (row == row_end) {\n            return;\n        }\n\n        if (col != row->end()) {\n            cache = *col++;\n            return;\n        }\n\n        ++row;\n        while (row != row_end) {\n            if (!row->empty()) {\n                col = row->begin();\n                cache = *col++;\n                break;\n            }\n\n            ++row;\n        }\n    }\n};\n\n/**\n * Your Vector2D object will be instantiated and called as such:\n * Vector2D* obj = new Vector2D(vec);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */\n\n"},"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html":{"url":"Structure Conversion/Convert Binary Search Tree to Sorted Doubly Linked List.html","title":"Convert Binary Search Tree to Sorted Doubly Linked List","keywords":"","body":"Problem\nLeetCode 426. Convert Binary Search Tree to Sorted Doubly Linked List\nhttps://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list\nSolution\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n        left = NULL;\n        right = NULL;\n    }\n\n    Node(int _val, Node* _left, Node* _right) {\n        val = _val;\n        left = _left;\n        right = _right;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* treeToDoublyList(Node* root) {\n\n        /**\n         *  Run in-order traversal.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        if (!root) {\n            return nullptr;\n        }\n\n        Node *pred = nullptr, *head = nullptr;\n\n        helper(root, pred, head);\n        head->left = pred;\n        pred->right = head;\n\n        return head;\n    }\n\nprivate:\n    void helper(Node* root, Node*& pred, Node*& head) {\n\n        if (!root) {\n            return;\n        }\n\n        helper(root->left, pred, head);\n\n        if (pred) {\n            pred->right = root;\n            root->left = pred;\n        }\n        pred = root;\n\n        if (!head) {\n            head = root;\n        }\n\n        helper(root->right, pred, head);\n    }\n};\n\n"},"Binary Tree/Validate Binary Search Tree.html":{"url":"Binary Tree/Validate Binary Search Tree.html","title":"Validate Binary Search Tree","keywords":"","body":"Problem\nLeetCode 98. Validate Binary Search Tree\nhttps://leetcode.com/problems/validate-binary-search-tree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n\n        /**\n         *  Use Pre-Order traversal.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        return runPreOrder(root, nullptr, nullptr);\n    }\n\nprivate:\n    bool runPreOrder(TreeNode* root, TreeNode* lo, TreeNode* hi) {\n\n        if (!root) {\n            return true;\n        }\n\n        if (lo && root->val val) {\n            return false;\n        }\n        if (hi && root->val >= hi->val) {\n            return false;\n        }\n\n        if (!runPreOrder(root->left, lo, root)) {\n            return false;\n        }\n        return runPreOrder(root->right, root, hi);\n    }\n};\n\n"},"Binary Tree/Balanced Binary Tree.html":{"url":"Binary Tree/Balanced Binary Tree.html","title":"Balanced Binary Tree","keywords":"","body":"Problem\nLeetCode 110. Balanced Binary Tree\nhttps://leetcode.com/problems/balanced-binary-tree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        auto res = runPostOrder(root);\n        return res.first;\n    }\n\nprivate:\n    pair runPostOrder(TreeNode* root) {\n\n        if (!root) {\n            return {true, 0};\n        }\n\n        auto l = runPostOrder(root->left);\n        if (!l.first) {\n            return {false, -1};\n        }\n\n        auto r = runPostOrder(root->right);\n        if (!r.first) {\n            return {false, -1};\n        }\n\n        int diff = abs(l.second - r.second);\n        if (diff > 1) {\n            return {false, -1};\n        }\n\n        return {true, max(l.second, r.second) + 1};\n    }\n};\n\n"},"Binary Tree/Check Completeness of a Binary Tree.html":{"url":"Binary Tree/Check Completeness of a Binary Tree.html","title":"Check Completeness of a Binary Tree","keywords":"","body":"Problem\nLeetCode 958. Check Completeness of a Binary Tree\nhttps://leetcode.com/problems/check-completeness-of-a-binary-tree/\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n\n        /**\n         *  Use BFS.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        queue q;\n        q.emplace(root);\n        bool last_node_visited = false;\n\n        while (!q.empty()) {\n            auto node = q.front();\n            q.pop();\n\n            if (!node) {\n                last_node_visited = true;\n            } else {\n                if (last_node_visited) {\n                    return false;\n                }\n\n                q.emplace(node->left);\n                q.emplace(node->right);\n            }\n        }\n\n        return true;\n    }\n};\n\n"},"Binary Tree/Maximum Width of Binary Tree.html":{"url":"Binary Tree/Maximum Width of Binary Tree.html","title":"Maximum Width of Binary Tree","keywords":"","body":"Problem\nLeetCode 662. Maximum Width of Binary Tree\nhttps://leetcode.com/problems/maximum-width-of-binary-tree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n\n        /**\n         *  Use level order BFS. When labeling tree nodes, make sure to\n         *  normalize labels with regard to the minimum label of a level.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        queue> q;\n        q.push({root, 1});\n\n        int ans = 1;\n\n        while (!q.empty()) {\n            int n = q.size();\n\n            int left = INT_MAX;\n            int right = INT_MIN;\n            int base = q.front().second;\n\n            for (int i = 0 ; i left) {\n                    q.push({node->left, id right) {\n                    q.push({node->right, (id \n"},"Binary Tree/Diameter of Binary Tree.html":{"url":"Binary Tree/Diameter of Binary Tree.html","title":"Diameter of Binary Tree","keywords":"","body":"Problem\nLintCode 1181. Diameter of Binary Tree\nhttps://www.lintcode.com/problem/diameter-of-binary-tree/description\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n\n        /**\n         *  Use post-order traversal.\n         *\n         *  To get the diameter of the subtree rooted by a node R, we can divide\n         *  the diamter into 2 segments, each of which can be calculated from\n         *  either the left branch or the right branch of R. Then, we merge\n         *  these 2 segments to form the diameter. Please note that the segment\n         *  is essentially the maximum depth of a tree. Therefore, we collect\n         *  the maximum depths from both branches and combine them to form\n         *  a diameter path.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        int opt = 0;\n        runPostOrder(root, opt);\n        return opt;\n    }\n\nprivate:\n    int runPostOrder(TreeNode* root, int& opt) {\n\n        if (!root) {\n            return 0;\n        }\n\n        int l = runPostOrder(root->left, opt);\n        int r = runPostOrder(root->right, opt);\n        opt = max(opt, l + r);\n        return max(l, r) + 1;\n    }\n};\n\n"},"Binary Tree/Minimum Depth of Binary Tree.html":{"url":"Binary Tree/Minimum Depth of Binary Tree.html","title":"Minimum Depth of Binary Tree","keywords":"","body":"Problem\nLeetCode 111. Minimum Depth of Binary Tree\nhttps://leetcode.com/problems/minimum-depth-of-binary-tree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n\n        /**\n         *  Use pre-order traversal.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        int ans = INT_MAX;\n        runPreOrder(root, 0, ans);\n        return ans left && !root->right) {\n            ans = min(ans, depth);\n        }\n\n        runPreOrder(root->left, depth, ans);\n        runPreOrder(root->right, depth, ans);\n    }\n};\n\n"},"Binary Tree/Maximum Depth of Binary Tree.html":{"url":"Binary Tree/Maximum Depth of Binary Tree.html","title":"Maximum Depth of Binary Tree","keywords":"","body":"Problem\nLeetCode 104. Maximum Depth of Binary Tree\nhttps://leetcode.com/problems/maximum-depth-of-binary-tree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n\n        /**\n         *  Use pre-order traversal.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        int ans = INT_MIN;\n        helper(root, 0, ans);\n        return ans > INT_MIN ? ans : 0;\n    }\n\nprivate:\n    void helper(TreeNode *root, int depth, int& ans) {\n\n        if (!root) {\n            return;\n        }\n\n        ++depth;\n\n        if (!root->left && !root->right) {\n            ans = max(ans, depth);\n        }\n\n        helper(root->left, depth, ans);\n        helper(root->right, depth, ans);\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html":{"url":"Binary Tree/Lowest Common Ancestor of a Binary Search Tree.html","title":"Lowest Common Ancestor of a Binary Search Tree","keywords":"","body":"Problem\nLintCode 1311. Lowest Common Ancestor of a Binary Search Tree\nhttps://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-search-tree/description\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        while (root) {\n            if (root->val val && root->val val) {\n                root = root->right;\n            } else if (root->val > p->val && root->val > q->val) {\n                root = root->left;\n            } else {\n                break;\n            }\n        }\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of a Binary Tree.html":{"url":"Binary Tree/Lowest Common Ancestor of a Binary Tree.html","title":"Lowest Common Ancestor of a Binary Tree","keywords":"","body":"Problem\nLintCode 88. Lowest Common Ancestor of a Binary Tree\nhttps://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-tree/description\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n\n        /**\n         *  Use post-order traversal.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        if (!root || root == p || root == q) {\n            return root;\n        }\n\n        auto l = lowestCommonAncestor(root->left, p, q);\n        auto r = lowestCommonAncestor(root->right, p, q);\n\n        if (l && r) {\n            return root;\n        }\n\n        if (l) {\n            return l;\n        }\n        return r;\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html":{"url":"Binary Tree/Lowest Common Ancestor of a Binary Tree II.html","title":"Lowest Common Ancestor of a Binary Tree II","keywords":"","body":"Problem\nLeetCode Lowest Common Ancestor of a Binary Tree II\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nstruct Record {\n    bool find_p = false;\n    bool find_q = false;\n    TreeNode* lca = nullptr;\n};\n\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n\n        /**\n         *  Use post-order traversal.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        auto rtn = helper(root, p, q);\n        return rtn.lca;\n    }\n\nprivate:\n    Record helper(TreeNode* root, TreeNode* p, TreeNode* q) {\n\n        if (!root) {\n            return Record();\n        }\n\n        auto l = helper(root->left, p, q);\n        if (l.lca) {\n            return l;\n        }\n\n        auto r = helper(root->right, p, q);\n        if (r.lca) {\n            return r;\n        }\n\n        Record rtn;\n        rtn.find_p = l.find_p || r.find_p || root == p;\n        rtn.find_q = l.find_q || r.find_q || root == q;\n\n        if (rtn.find_p && rtn.find_q) {\n            rtn.lca = root;\n        }\n        return rtn;\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html":{"url":"Binary Tree/Lowest Common Ancestor of a Binary Tree III.html","title":"Lowest Common Ancestor of a Binary Tree III","keywords":"","body":"Problem\nLeetCode 1650. Lowest Common Ancestor of a Binary Tree III\nhttps://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii\nSolution\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* parent;\n};\n*/\n\nclass Solution {\npublic:\n    Node* lowestCommonAncestor(Node* p, Node * q) {\n\n        /**\n         *  TC: O(H), where\n         *      H is the height of the tree\n         *\n         *  SC: O(H)\n         */\n\n        unordered_set set;\n        while (p) {\n            set.emplace(p);\n            p = p->parent;\n        }\n\n        while (q) {\n            if (set.count(q) == 1) {\n                return q;\n            }\n            q = q->parent;\n        }\n\n        return nullptr;\n    }\n};\n\n"},"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html":{"url":"Binary Tree/Lowest Common Ancestor of Deepest Leaves.html","title":"Lowest Common Ancestor of Deepest Leaves","keywords":"","body":"Problem\nLeetCode 1123. Lowest Common Ancestor of Deepest Leaves\nhttps://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lcaDeepestLeaves(TreeNode* root) {\n\n        /**\n         *  Use post-order traversal.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        auto res = runPostOrder(root);\n        return res.first;\n    }\n\nprivate:\n    pair runPostOrder(TreeNode* root) {\n        if (!root) {\n            return {nullptr, -1};\n        }\n\n        auto l = runPostOrder(root->left);\n        auto r = runPostOrder(root->right);\n\n        if (l.second == r.second) {\n            return {root, l.second + 1};\n        }\n\n        if (l.second > r.second) {\n            return {l.first, l.second + 1};\n        }\n        return {r.first, r.second + 1};\n    }\n};\n\n"},"Binary Tree/Recover Binary Search Tree.html":{"url":"Binary Tree/Recover Binary Search Tree.html","title":"Recover Binary Search Tree","keywords":"","body":"Problem\nLintCode 691. Recover Binary Search Tree\nhttps://www.lintcode.com/problem/recover-binary-search-tree/description\nSolution\n\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\nclass Solution {\npublic:\n    /**\n     * @param root: the given tree\n     * @return: the tree after swapping\n     */\n    TreeNode * bstSwappedNode(TreeNode * root) {\n        // write your code here\n\n        /**\n         *  Apply inorder traversal to finde the inversed number pairs.\n         *\n         *  Specifically, we use 2 pointers curr and pred, which is the inorder\n         *  predecessor of curr, to traverse the tree. For the first time,\n         *  if we find out an inversed number pair, namely pred > curr, we record\n         *  pred. For the second time, if we discover another inversed number\n         *  pair, we record curr.\n         *\n         *    *     *\n         *  1 5 3 4 2  => 5 > 3 => (5, 2)\n         *  1 2 3 4 5     4 > 2\n         *\n         *  *     *    => 4 > 2 => (4, 1)\n         *  4 2 3 1 5     3 > 1\n         *  1 2 3 4 5\n         *\n         */\n\n        TreeNode *pred = nullptr, *src = nullptr, *dst = nullptr;\n        runInOrder(root, pred, src, dst);\n\n        if (src && dst) {\n            std::swap(src->val, dst->val);\n        }\n\n        return root;\n    }\n\nprivate:\n    void runInOrder(\n        TreeNode* curr, TreeNode*& pred, TreeNode*& src, TreeNode*& dst) {\n\n        if (curr->left) {\n            runInOrder(curr->left, pred, src, dst);\n        }\n\n        if (pred && pred->val > curr->val) {\n            if (!src) {\n                src = pred;\n            }\n            if (src) {\n                dst = curr;\n            }\n\n            /**\n             *  This is wrong!\n             *  Consider the trival case like {1, 3, 4}.\n             *\n             *  if (!src) {\n             *      src = pred;\n             *  } else {\n             *      dst = curr;\n             *  }\n             *\n             */\n        }\n        pred = curr;\n\n        if (curr->right) {\n            runInOrder(curr->right, pred, src, dst);\n        }\n    }\n};\n\n"},"Binary Tree/Binary Tree Maximum Path Sum.html":{"url":"Binary Tree/Binary Tree Maximum Path Sum.html","title":"Binary Tree Maximum Path Sum","keywords":"","body":"Problem\nLeetCode 124. Binary Tree Maximum Path Sum\nhttps://leetcode.com/problems/binary-tree-maximum-path-sum\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n\n        /**\n         *  Consider the following tree rooted by T. If we want to generate\n         *  a maximum path sum which passes T, we need to check thw following\n         *  cases.\n         *\n         *      T       Let L denote the maximum path sum returned from the\n         *     / \\      left branch of T.\n         *    /   \\\n         *   /\\   /\\    Let R denote the maximum path sum returned from the\n         *  /__\\ /__\\   right branch of T.\n         *\n         *              Then, the candidate sum for T would be:\n         *              MAX { T, T + L, T + R, T + L + R }\n         *\n         *              And the path sum that we need to return to the parent\n         *              level is:\n         *              MAX { T, T + L, T + R }\n         *\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        int opt = INT_MIN;\n        findPath(root, opt);\n        return opt;\n    }\n\nprivate:\n    int findPath(TreeNode* root, int& opt) {\n\n        if (!root) {\n            return 0;\n        }\n\n        int l = findPath(root->left, opt);\n        int r = findPath(root->right, opt);\n\n        opt = max(opt, root->val);\n        opt = max(opt, root->val + r);\n        opt = max(opt, root->val + l);\n        opt = max(opt, root->val + r + l);\n\n        return max(root->val, max(root->val + l, root->val + r));\n    }\n};\n\n"},"Binary Tree/Path Sum.html":{"url":"Binary Tree/Path Sum.html","title":"Path Sum","keywords":"","body":"Problem\nLeetCode 112. Path Sum\nhttps://leetcode.com/problems/path-sum\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int sum) {\n\n        int prefix = 0;\n        return runPreOrder(root, prefix, sum);\n    }\n\nprivate:\n    bool runPreOrder(TreeNode* root, int prefix, int target) {\n\n        if (!root) {\n            return false;\n        }\n\n        prefix += root->val;\n\n        if (!root->left && !root->right) {\n            return prefix == target;\n        }\n\n        if (runPreOrder(root->left, prefix, target)) {\n            return true;\n        }\n        return runPreOrder(root->right, prefix, target);\n    }\n};\n\n"},"Binary Tree/Path Sum II.html":{"url":"Binary Tree/Path Sum II.html","title":"Path Sum II","keywords":"","body":"Problem\nLeetCode 113. Path Sum II\nhttps://leetcode.com/problems/path-sum-ii\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector> pathSum(TreeNode* root, int target) {\n\n        /**\n         *  Use post-order traversal.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        vector config;\n        vector> ans;\n        runPreOrder(root, target, 0, config, ans);\n        return ans;\n    }\n\nprivate:\n    void runPreOrder(\n            TreeNode* root, int target,\n            int prefix, vector& config, vector>& ans) {\n\n        if (!root) {\n            return;\n        }\n\n        prefix += root->val;\n        config.emplace_back(root->val);\n\n        // Check the leaf node.\n        if (!root->left && !root->right) {\n            if (prefix == target) {\n                ans.emplace_back(config);\n            }\n            config.pop_back();\n            return;\n        }\n\n        runPreOrder(root->left, target, prefix, config, ans);\n        runPreOrder(root->right, target, prefix, config, ans);\n\n        config.pop_back();\n    }\n};\n\n"},"Binary Tree/Path Sum III.html":{"url":"Binary Tree/Path Sum III.html","title":"Path Sum III","keywords":"","body":"Problem\nLeetCode 437. Path Sum III\nhttps://leetcode.com/problems/path-sum-iii\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int pathSum(TreeNode* root, int target) {\n\n        /**\n         *  Similar to https://leetcode.com/problems/subarray-sum-equals-k\n         *\n         *  sum(i, j) = prefix(j) - prefix(i - 1) = target\n         *  => prefix(i - 1) = prefix(j) - target\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        unordered_map map;\n        map[0] = 1;\n\n        int ans = 0;\n        runPreOrder(root, target, 0, map, ans);\n        return ans;\n    }\n\nprivate:\n    void runPreOrder(\n            TreeNode* root, int target,\n            int prefix, unordered_map& map, int& ans) {\n\n        if (!root) {\n            return;\n        }\n\n        prefix += root->val;\n        ans += map[prefix - target];\n\n        ++map[prefix];\n        runPreOrder(root->left, target, prefix, map, ans);\n        runPreOrder(root->right, target, prefix, map, ans);\n        --map[prefix];\n    }\n};\n\n"},"Binary Tree/Convert BST to Greater Tree.html":{"url":"Binary Tree/Convert BST to Greater Tree.html","title":"Convert BST to Greater Tree","keywords":"","body":"Problem\nLeetCode 538. Convert BST to Greater Tree\nhttps://leetcode.com/problems/convert-bst-to-greater-tree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n\n        if (!root) {\n            return root;\n        }\n\n        int sum = 0;\n        runReverseInOrder(root, sum);\n        return root;\n    }\n\nprivate:\n    void runReverseInOrder(TreeNode* root, int& sum) {\n\n        if (!root) {\n            return;\n        }\n\n        runReverseInOrder(root->right, sum);\n        sum += root->val;\n        root->val = sum;\n        runReverseInOrder(root->left, sum);\n    }\n};\n\n"},"Binary Tree/Find Leaves of Binary Tree.html":{"url":"Binary Tree/Find Leaves of Binary Tree.html","title":"Find Leaves of Binary Tree","keywords":"","body":"Problem\nLeetCode 366. Find Leaves of Binary Tree\nhttps://leetcode.com/problems/find-leaves-of-binary-tree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector> findLeaves(TreeNode* root) {\n\n        /**\n         *  Use post-order traversal. Also, classify a node using its height.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        unordered_map> map;\n        int h = runPostOrder(root, map);\n\n        vector> ans;\n        for (int i = 1 ; i >& map) {\n\n        if (!root) {\n            return 0;\n        }\n\n        int l = runPostOrder(root->left, map);\n        int r = runPostOrder(root->right, map);\n        int h = max(l, r) + 1;\n\n        map[h].emplace_back(root->val);\n        return h;\n    }\n};\n\n"},"Binary Tree/Binary Tree Vertical Order Traversal.html":{"url":"Binary Tree/Binary Tree Vertical Order Traversal.html","title":"Binary Tree Vertical Order Traversal","keywords":"","body":"Problem\nLeetCode 314. Binary Tree Vertical Order Traversal\nhttps://leetcode.com/problems/binary-tree-vertical-order-traversal\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector> verticalOrder(TreeNode* root) {\n\n        /**\n         *  Use level-order traversal. Also, classify a node using its column\n         *  index.\n         *\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        if (!root) {\n            return {};\n        }\n\n        queue> q;\n        q.push({root, 0});\n\n        unordered_map> map;\n        int min_col = INT_MAX, max_col = INT_MIN;\n\n        while (!q.empty()) {\n            auto pair = q.front();\n            q.pop();\n\n            auto node = pair.first;\n            int col = pair.second;\n\n            map[col].emplace_back(node->val);\n\n            min_col = min(min_col, col);\n            max_col = max(max_col, col);\n\n            if (node->left) {\n                q.push({node->left, col - 1});\n            }\n            if (node->right) {\n                q.push({node->right, col + 1});\n            }\n        }\n\n        vector> ans;\n        for (int i = min_col ; i \n"},"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html":{"url":"Binary Tree/Binary Tree Zig Zag Level Order Traversal.html","title":"Binary Tree Zig Zag Level Order Traversal","keywords":"","body":"Problem\nLeetCode 103. Binary Tree Zigzag Level Order Traversal\nhttps://leetcode.com/problems/binary-tree-zigzag-level-order-traversal\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector> zigzagLevelOrder(TreeNode* root) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         *\n         * We can use 2 stacks to control the traversal.\n         *\n         * In a specific level, we consume all the nodes collected in the first\n         * stack and explore the children of those nodes.\n         *\n         * If the level number is even, e.g. 0 and 2, we explore the children\n         * from the very left side to the very right side and push them onto\n         * the second stack.\n         *\n         * If the level number is odd, e.g. 1 and 3, we explore the children\n         * from the very right side to the very left side and push them onto\n         * the second stack.\n         *\n         * Upon finishing consuming the nodes collected in the first stack,\n         * we override the first stack with the content of the second stack.\n         *\n         *      Visualization:\n         *\n         *      ------>-----> level 0  L -> R\n         *                  |\n         *       L\n         *      |\n         *      |----->-----> level 2  L -> R\n         *\n         */\n\n        if (!root) {\n            return {};\n        }\n\n        vector> ans;\n\n        stack stk;\n        stk.emplace(root);\n\n        int round = 0;\n\n        while (!stk.empty()) {\n            stack next;\n            vector level;\n\n            int n = stk.size();\n            for (int i = 0 ; i val);\n\n                if (round % 2 == 0) {\n                    if (node->left) {\n                        next.emplace(node->left);\n                    }\n                    if (node->right) {\n                        next.emplace(node->right);\n                    }\n                } else {\n                    if (node->right) {\n                        next.emplace(node->right);\n                    }\n                    if (node->left) {\n                        next.emplace(node->left);\n                    }\n                }\n            }\n\n            ++round;\n            stk = move(next);\n            ans.emplace_back(move(level));\n        }\n\n        return ans;\n    }\n};\n\n"},"Binary Tree/Serialize and Deserialize Binary Tree.html":{"url":"Binary Tree/Serialize and Deserialize Binary Tree.html","title":"Serialize and Deserialize Binary Tree","keywords":"","body":"Problem\nLintCode 7. Serialize and Deserialize Binary Tree\nhttps://www.lintcode.com/problem/serialize-and-deserialize-binary-tree/description\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         *\n         *      3\n         *     / \\\n         *    9   20\n         *       /  \\\n         *      15   7\n         *\n         *   3, 9, #, #, 20, 15, #, #, 7, #, #\n         */\n\n        if (!root) {\n            return \"#\";\n        }\n\n        return to_string(root->val) + \",\" +\n                serialize(root->left) + \",\" +\n                serialize(root->right);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n\n        stringstream stream(data);\n        return helper(stream);\n    }\n\nprivate:\n    TreeNode* helper(stringstream& stream) {\n\n        string token;\n        getline(stream, token, ',');\n\n        if (token == \"#\") {\n            return nullptr;\n        }\n\n        auto node = new TreeNode(stoi(token));\n        node->left = helper(stream);\n        node->right = helper(stream);\n        return node;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\n\n"},"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html":{"url":"Binary Tree/Construct Binary Tree from Preorder and Inorder Traversal.html","title":"Construct Binary Tree from Preorder and Inorder Traversal","keywords":"","body":"Problem\nLeetCode 105. Construct Binary Tree from Preorder and Inorder Traversal\nhttps://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector& preorder, vector& inorder) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         *\n         *  PreOrder: Root (left Branch) (Right Branch)\n         *  InOrder : (Left Branch) Root (Right Branch)\n         *\n         *       1                    T     L        R\n         *     /   \\        PreOrder: 1, 2, 4, 5, 3, 6, 7\n         *    2     3                    -------  -------\n         *   / \\   / \\                   L     T     R\n         *  4   5 6   7     InOrder : 4, 2, 5, 1, 6, 3, 7\n         *                            -------     -------\n         */\n\n        int n = preorder.size();\n        return helper(preorder, inorder, {0, n - 1}, {0, n - 1});\n    }\n\nprivate:\n    TreeNode* helper(\n            const vector& preorder, const vector& inorder,\n            pair pre_index, pair in_index) {\n\n        int in_bgn = in_index.first, in_end = in_index.second;\n        if (in_bgn > in_end) {\n            return nullptr;\n        }\n        if (in_bgn == in_end) {\n            return new TreeNode(inorder[in_bgn]);\n        }\n\n        int pre_bgn = pre_index.first, pre_end = pre_index.second;\n        int val = preorder[pre_bgn];\n\n        int i;\n        for (i = in_bgn ; i left = helper(preorder, inorder,\n                            {pre_bgn + 1, pre_bgn + i - in_bgn},\n                            {in_bgn, i - 1});\n\n        root->right = helper(preorder, inorder,\n                             {pre_bgn + i - in_bgn + 1, pre_end},\n                             {i + 1, in_end});\n        return root;\n    }\n};\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector& preorder, vector& inorder) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        unordered_map map;\n        int n = inorder.size();\n        for (int i = 0 ; i & preorder, const vector& inorder,\n            pair pre_index, pair in_index,\n            unordered_map& map) {\n\n        int in_bgn = in_index.first, in_end = in_index.second;\n        if (in_bgn > in_end) {\n            return nullptr;\n        }\n        if (in_bgn == in_end) {\n            return new TreeNode(inorder[in_bgn]);\n        }\n\n        int pre_bgn = pre_index.first, pre_end = pre_index.second;\n        int val = preorder[pre_bgn];\n\n        // Find the root node index of the in-order vector.\n        int in_mid = map[val];\n\n        auto root = new TreeNode(val);\n\n        root->left = helper(preorder, inorder,\n                            {pre_bgn + 1, pre_bgn + in_mid - in_bgn},\n                            {in_bgn, in_mid - 1}, map);\n\n        root->right = helper(preorder, inorder,\n                             {pre_bgn + in_mid - in_bgn + 1, pre_end},\n                             {in_mid + 1, in_end}, map);\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html":{"url":"Binary Tree/Construct Binary Tree from Postorder and Inorder Traversal.html","title":"Construct Binary Tree from Postorder and Inorder Traversal","keywords":"","body":"Problem\nLeetCode 106. Construct Binary Tree from Inorder and Postorder Traversal\nhttps://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector& inorder, vector& postorder) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         *\n         * PostOrder: (Left Branch) (Right Branch) Root\n         * InOrder  : (Left Branch) Root (Right Branch)\n         *\n         *       1                        L        R     T\n         *     /   \\        PostOrder: 4, 5, 2, 6, 7, 3, 1\n         *    2     3                  -------  -------\n         *   / \\   / \\                    L     T     R\n         *  4   5 6   7     InOrder  : 4, 2, 5, 1, 6, 3, 7\n         *                             -------     -------\n         */\n\n        unordered_map map;\n        int n = inorder.size();\n        for (int i = 0 ; i & inorder, const vector& postorder,\n            pair in_index, pair post_index,\n            unordered_map& map) {\n\n        int in_bgn = in_index.first, in_end = in_index.second;\n        if (in_bgn > in_end) {\n            return nullptr;\n        }\n        if (in_bgn == in_end) {\n            return new TreeNode(inorder[in_bgn]);\n        }\n\n        int post_bgn = post_index.first, post_end = post_index.second;\n        int val = postorder[post_end];\n\n        // Find the root node index of the in-order vector.\n        int in_mid = map[val];\n\n        auto root = new TreeNode(val);\n\n        root->left = helper(inorder, postorder,\n                            {in_bgn, in_mid - 1},\n                            {post_bgn, post_bgn + in_mid - in_bgn - 1},\n                            map);\n\n        root->right = helper(inorder, postorder,\n                             {in_mid + 1, in_end},\n                             {post_bgn + in_mid - in_bgn, post_end - 1},\n                             map);\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html":{"url":"Binary Tree/Construct Binary Tree from Preorder and Postorder Traversal.html","title":"Construct Binary Tree from Preorder and Postorder Traversal","keywords":"","body":"Problem\nLeetCode 889. Construct Binary Tree from Preorder and Postorder Traversal\nhttps://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructFromPrePost(vector& pre, vector& post) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         *\n         *  PreOrder : Root (Left Branch) (Right Branch)\n         *  PostOrder: (Left Branch) (Right Branch) Root\n         *\n         *                                *\n         *      1                      T  P  L        R\n         *    /   \\         PreOrder : 1, 2, 4, 5, 3, 6, 7\n         *   2     3                      -------  -------\n         *  / \\   / \\                     L  P     R     T\n         * 4   5 6   7      PostOrder: 4, 5, 2, 6, 7, 3, 1\n         *                             -------  -------\n         */\n\n        unordered_map map;\n        int n = post.size();\n        for (int i = 0 ; i & pre, const vector& post,\n            pair pre_index, pair post_index,\n            unordered_map& map) {\n\n        int pre_bgn = pre_index.first, pre_end = pre_index.second;\n        if (pre_bgn > pre_end) {\n            return nullptr;\n        }\n        if (pre_bgn == pre_end) {\n            return new TreeNode(pre[pre_bgn]);\n        }\n\n        int post_bgn = post_index.first, post_end = post_index.second;\n        int val = pre[pre_bgn];\n\n        // Find the index of the first node of the left branch of the\n        // pre-order vector.\n        int pivot = map[pre[pre_bgn + 1]];\n        int size_left = pivot - post_bgn + 1;\n\n        auto root = new TreeNode(val);\n\n        root->left = helper(pre, post,\n                            {pre_bgn + 1, pre_bgn + size_left},\n                            {post_bgn, post_bgn + size_left - 1},\n                            map);\n\n        root->right = helper(pre, post,\n                             {pre_bgn + size_left + 1, pre_end},\n                             {post_bgn + size_left, post_end - 1},\n                             map);\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Maximum Subtree.html":{"url":"Binary Tree/Maximum Subtree.html","title":"Maximum Subtree","keywords":"","body":"Problem\nLintCode 628. Maximum Subtree\nhttps://www.lintcode.com/problem/maximum-subtree/description\nSolution\nstruct Result {\n    int sum;\n    TreeNode* root;\n\n    Result()\n      : sum(0), root(nullptr)\n    { }\n\n    Result(int sum, TreeNode* root)\n      : sum(sum), root(root)\n    { }\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param root: the root of binary tree\n     * @return: the root of the maximum subtree\n     */\n    TreeNode * findSubtree(TreeNode * root) {\n        // write your code here\n\n        Result opt(INT_MIN, nullptr);\n        runPostOrder(root, opt);\n        return opt.root;\n    }\n\nprivate:\n    Result runPostOrder(TreeNode* root, Result& opt) {\n\n        if (!root) {\n            return Result();\n        }\n\n        auto l = runPostOrder(root->left, opt);\n        auto r = runPostOrder(root->right, opt);\n\n        int sum = root->val + l.sum + r.sum;\n        if (sum > opt.sum) {\n            opt.sum = sum;\n            opt.root = root;\n        }\n\n        return Result(sum, root);\n    }\n};\n\n"},"Binary Tree/Maximum Average Subtree.html":{"url":"Binary Tree/Maximum Average Subtree.html","title":"Maximum Average Subtree","keywords":"","body":"Problem\nLeetCode 1120. Maximum Average Subtree\nhttps://leetcode.com/problems/maximum-average-subtree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nstruct Record {\n    int size = 0;\n    int sum = 0;\n};\n\n\nclass Solution {\npublic:\n    double maximumAverageSubtree(TreeNode* root) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        double ans = 0;\n        runPostOrder(root, ans);\n        return ans;\n    }\n\nprivate:\n    Record runPostOrder(TreeNode* root, double& ans) {\n\n        if (!root) {\n            return Record();\n        }\n\n        auto l = runPostOrder(root->left, ans);\n        auto r = runPostOrder(root->right, ans);\n\n        Record record;\n        record.size = 1 + l.size + r.size;\n        record.sum = root->val + l.sum + r.sum;\n\n        double avg = static_cast(record.sum) / record.size;\n        ans = max(avg, ans);\n\n        return record;\n    }\n};\n\n"},"Binary Tree/Symmetric Tree.html":{"url":"Binary Tree/Symmetric Tree.html","title":"Symmetric Tree","keywords":"","body":"Problem\nLeetCode 101. Symmetric Tree\nhttps://leetcode.com/problems/symmetric-tree/solution\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(H), where\n         *      H is the height of the tree\n         */\n\n        return helper(root, root);\n    }\n\nprivate:\n    bool helper(TreeNode* left, TreeNode* right) {\n\n        if (!left || !right) {\n            return left == right;\n        }\n\n        if (left->val != right->val) {\n            return false;\n        }\n\n        return helper(left->left, right->right) &&\n               helper(left->right, right->left);\n    }\n};\n\n"},"Binary Tree/Closest Binary Search Tree Value.html":{"url":"Binary Tree/Closest Binary Search Tree Value.html","title":"Closest Binary Search Tree Value","keywords":"","body":"Problem\nLeetCode 270. Closest Binary Search Tree Value\nhttps://leetcode.com/problems/closest-binary-search-tree-value\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int closestValue(TreeNode* root, double target) {\n\n        double g_diff = INT_MAX;\n        int ans = root->val;\n        helper(root, target, g_diff, ans);\n        return ans;\n    }\n\nprivate:\n    void helper(TreeNode* root, double target, double& g_diff, int& ans) {\n\n        if (!root) {\n            return;\n        }\n\n        double diff = abs(static_cast(root->val) - target);\n        if (diff val;\n        }\n\n        if (target >= root->val) {\n            helper(root->right, target, g_diff, ans);\n        } else {\n            helper(root->left, target, g_diff, ans);\n        }\n    }\n};\n\n"},"Binary Tree/Closest Binary Search Tree Value II.html":{"url":"Binary Tree/Closest Binary Search Tree Value II.html","title":"Closest Binary Search Tree Value II","keywords":"","body":"Problem\nLeetCode 272. Closest Binary Search Tree Value II\nhttps://leetcode.com/problems/closest-binary-search-tree-value-ii\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector closestKValues(TreeNode* root, double target, int k) {\n\n        /**\n         *  TC: O(H + K), where\n         *      H is the height of the tree\n         *\n         *  SC: O(H + K)\n         *\n         *  target = 19.\n         *  k = 3\n         *\n         *          20\n         *         /  \\\n         *       15    30\n         *      /  \\    \\\n         *    10    17   35\n         *   /  \\    \\\n         *  5   12    18\n         *\n         *\n         *  pred: 20\n         *  succ: 15, 17, 18\n         *\n         *  20 -> 15 -> 17 -> 18\n         */\n\n        stack preds;\n        stack succs;\n\n        while (root) {\n            if (root->val >= target) {\n                succs.emplace(root);\n                root = root->left;\n            } else {\n                preds.emplace(root);\n                root = root->right;\n            }\n        }\n\n        vector ans;\n\n        for (int i = 0 ; i val);\n                getSuccessors(succs);\n                continue;\n            }\n\n            if (succs.empty()) {\n                ans.emplace_back(preds.top()->val);\n                getPredecessors(preds);\n                continue;\n            }\n\n            auto pred = preds.top();\n            auto succ = succs.top();\n\n            double diff_p = abs(target - static_cast(pred->val));\n            double diff_s = abs(target - static_cast(succ->val));\n\n            if (diff_p val);\n                getPredecessors(preds);\n            } else {\n                ans.emplace_back(succ->val);\n                getSuccessors(succs);\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    void getPredecessors(stack& preds) {\n\n        auto curr = preds.top();\n        preds.pop();\n\n        if (curr) {\n            curr = curr->left;\n            while (curr) {\n                preds.emplace(curr);\n                curr = curr->right;\n            }\n        }\n    }\n\n    void getSuccessors(stack& succs) {\n\n        auto curr = succs.top();\n        succs.pop();\n\n        if (curr) {\n            curr = curr->right;\n            while (curr) {\n                succs.emplace(curr);\n                curr = curr->left;\n            }\n        }\n    }\n};\n\n"},"Binary Tree/Insert Node in Binary Search Tree.html":{"url":"Binary Tree/Insert Node in Binary Search Tree.html","title":"Insert Node in Binary Search Tree","keywords":"","body":"Problem\nLintCode 85. Insert Node in Binary Search Tree\nhttps://www.lintcode.com/problem/insert-node-in-a-binary-search-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: The root of the binary search tree.\n     * @param node: insert this node into the binary search tree\n     * @return: The root of the new binary search tree.\n     */\n    TreeNode * insertNode(TreeNode * root, TreeNode * node) {\n        // write your code here\n\n        if (!root) {\n            return node;\n        }\n\n        auto curr = root;\n        auto pred = root;\n        while (curr) {\n            pred = curr;\n            if (curr->val > node->val) {\n                curr = curr->left;\n            } else {\n                curr = curr->right;\n            }\n        }\n\n        if (node->val > pred->val) {\n            pred->right = node;\n        } else {\n            pred->left = node;\n        }\n\n        return root;\n    }\n};\n\n"},"Binary Tree/Remove Node in Binary Search Tree.html":{"url":"Binary Tree/Remove Node in Binary Search Tree.html","title":"Remove Node in Binary Search Tree","keywords":"","body":"Problem\nLintCode 87. Remove Node in Binary Search Tree\nhttps://www.lintcode.com/problem/remove-node-in-binary-search-tree/description\nSolution\n/**\n * Definition of TreeNode:\n * class TreeNode {\n * public:\n *     int val;\n *     TreeNode *left, *right;\n *     TreeNode(int val) {\n *         this->val = val;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    /*\n     * @param root: The root of the binary search tree.\n     * @param value: Remove the node with given value.\n     * @return: The root of the binary search tree after removal.\n     */\n    TreeNode * removeNode(TreeNode * root, int value) {\n        // write your code here\n\n        // Find the target node.\n        TreeNode* pred;\n        auto curr = root;\n        while (curr) {\n            if (curr->val == value) {\n                break;\n            }\n\n            pred = curr;\n            if (curr->val > value) {\n                curr = curr->left;\n            } else {\n                curr = curr->right;\n            }\n        }\n\n        if (!curr) {\n            return root;\n        }\n\n        // The node we want to remove has 2 children.\n        if (curr->left && curr->right) {\n            auto res = findSuccessor(root, curr);\n            pred = res.first;\n            curr->val = res.second->val;\n            curr = res.second;\n        }\n\n        // The node has no child.\n        if (!curr->left && !curr->right) {\n\n            if (curr == root) {\n                delete curr;\n                return nullptr;\n            }\n\n            if (curr == pred->left) {\n                pred->left = nullptr;\n            } else {\n                pred->right = nullptr;\n            }\n\n            delete curr;\n            return root;\n        }\n\n        // The node has only 1 child.\n        auto child = (curr->left) ? curr->left : curr->right;\n\n        if (curr == root) {\n            delete curr;\n            return child;\n        }\n\n        if (curr == pred->left) {\n            pred->left = child;\n        } else {\n            pred->right = child;\n        }\n\n        delete curr;\n        return root;\n    }\n\nprivate:\n    std::pair findSuccessor(auto root, auto dst) {\n\n        TreeNode* pred;\n        auto succ = dst;\n\n        if (succ->right) {\n            pred = succ;\n            succ = succ->right;\n\n            while (succ->left) {\n                pred = succ;\n                succ = succ->left;\n            }\n\n            return std::make_pair(pred, succ);\n        }\n\n        pred = succ = nullptr;\n        auto curr = root;\n\n        while (curr != dst) {\n            if (curr->val > dst->val) {\n                pred = succ;\n                succ = curr;\n                curr = curr->left;\n            } else {\n                curr = curr->right;\n            }\n        }\n\n        return std::make_pair(pred, succ);\n    }\n};\n\n"},"Binary Tree/All Nodes Distance K in Binary Tree.html":{"url":"Binary Tree/All Nodes Distance K in Binary Tree.html","title":"All Nodes Distance K in Binary Tree","keywords":"","body":"Problem\nLeetCode 863. All Nodes Distance K in Binary Tree\nhttps://leetcode.com/problems/all-nodes-distance-k-in-binary-tree\nSolution\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector distanceK(TreeNode* root, TreeNode* target, int K) {\n\n        /**\n         *  TC: O(N),\n         *      where N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        unordered_map> graph;\n        buildGraph(root, graph);\n\n        vector ans;\n        findNodes(target, nullptr, graph, K, ans);\n        return ans;\n    }\n\nprivate:\n    void buildGraph(\n        TreeNode* root, unordered_map>& graph) {\n\n        queue q;\n        q.emplace(root);\n\n        while (!q.empty()) {\n            auto node = q.front();\n            q.pop();\n\n            if (node->left) {\n                graph[node->left].emplace(node);\n                graph[node].emplace(node->left);\n                q.emplace(node->left);\n            }\n            if (node->right) {\n                graph[node->right].emplace(node);\n                graph[node].emplace(node->right);\n                q.emplace(node->right);\n            }\n        }\n    }\n\n    void findNodes(\n        TreeNode* curr, TreeNode* pred,\n        unordered_map>& graph,\n        int k, vector& ans) {\n\n        if (k == 0) {\n            ans.emplace_back(curr->val);\n        }\n\n        for (auto neighbor : graph[curr]) {\n            if (neighbor != pred) {\n                findNodes(neighbor, curr, graph, k - 1, ans);\n            }\n        }\n    }\n};\n\n"},"Binary Search/First Bad Version.html":{"url":"Binary Search/First Bad Version.html","title":"First Bad Version","keywords":"","body":"Problem\nLintCode 74. First Bad Version\nhttps://www.lintcode.com/problem/first-bad-version/description\nSolution\n/**\n * class SVNRepo {\n *     public:\n *     static bool isBadVersion(int k);\n * }\n * you can use SVNRepo::isBadVersion(k) to judge whether\n * the kth code version is bad or not.\n*/\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: An integer which is the first bad version.\n     */\n    int findFirstBadVersion(int n) {\n        // write your code here\n\n        int l = 1, r = n;\n        while (l + 1 \n"},"Binary Search/Search a 2D Matrix.html":{"url":"Binary Search/Search a 2D Matrix.html","title":"Search a 2D Matrix","keywords":"","body":"Problem\nLintCode 28. Search a 2D Matrix\nhttps://www.lintcode.com/problem/search-a-2d-matrix/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: matrix, a list of lists of integers\n     * @param target: An integer\n     * @return: a boolean, indicate whether matrix contains target\n     */\n    bool searchMatrix(vector> &matrix, int target) {\n        // write your code here\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return false;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return false;\n        }\n\n        int r = determineRow(matrix, num_r, target);\n        return searchRow(matrix[r], num_c, target);\n    }\n\nprivate:\n    int determineRow(const auto& matrix, int num_r, int target) {\n\n        int l = 0, r = num_r - 1;\n        while (l + 1 = matrix[m][0]) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        return (target >= matrix[r][0]) ? r : l;\n    }\n\n    bool searchRow(const auto& row, int num_c, int target) {\n\n        int l = 0, r = num_c - 1;\n        while (l + 1 = row[m]) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        return (target == row[l] || target == row[r]) ? true : false;\n    }\n};\n\n"},"Binary Search/Search a 2D Matrix II.html":{"url":"Binary Search/Search a 2D Matrix II.html","title":"Search a 2D Matrix II","keywords":"","body":"Problem\nLintCode 38. Search a 2D Matrix II\nhttps://www.lintcode.com/problem/search-a-2d-matrix-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param matrix: A list of lists of integers\n     * @param target: An integer you want to search in matrix\n     * @return: An integer indicate the total occurrence of target in the given matrix\n     */\n    int searchMatrix(vector> &matrix, int target) {\n        // write your code here\n\n        int num_r = matrix.size();\n        if (num_r == 0) {\n            return 0;\n        }\n\n        int num_c = matrix[0].size();\n        if (num_c == 0) {\n            return 0;\n        }\n\n        int count = 0;\n        int x = 0, y = num_c - 1;\n        while (x = 0) {\n            if (matrix[x][y] == target) {\n                ++count;\n            }\n\n            if (target \n"},"Binary Search/Search for a Range.html":{"url":"Binary Search/Search for a Range.html","title":"Search for a Range","keywords":"","body":"Problem\nLintCode 61. Search for a Range\nhttps://www.lintcode.com/problem/search-for-a-range/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer sorted array\n     * @param target: an integer to be inserted\n     * @return: a list of length 2, [index1, index2]\n     */\n    vector searchRange(vector &A, int target) {\n        // write your code here\n\n        int n = A.size();\n        if (n == 0) {\n            return {-1, -1};\n        }\n\n        // Find the starting position.\n        int l = 0, r = n - 1;\n        while (l + 1 = A[m]) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        int end = (A[r] == target) ? r : l;\n\n        return {bgn, end};\n    }\n};\n\n"},"Binary Search/Pow x n.html":{"url":"Binary Search/Pow x n.html","title":"Pow (x,n)","keywords":"","body":"Problem\nLintCode 428. Pow(x, n)\nhttps://www.lintcode.com/problem/powx-n/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param x: the base number\n     * @param n: the power number\n     * @return: the result\n     */\n    double myPow(double x, int n) {\n        // write your code here\n\n        /**\n         *   n^8 = n^4 x n^4\n         *       = (n^2 x n^2) x (n^2 x n^2)\n         *\n         *   n^9 = n^8 x n\n         *         ---\n         *\n         *  Corner Case: n maybe -2147483648\n         *               That's way we use long type to store the exponential.\n         */\n\n        if (n == 0) {\n            return 1;\n        }\n\n        long nn = n;\n        return (n > 0) ? genPow(x, nn) : 1 / genPow(x, -nn);\n    }\n\nprivate:\n    double genPow(double x, long n) {\n\n        if (n == 1) {\n            return x;\n        }\n\n        long d = n >> 1;\n        double half = genPow(x, d);\n\n        double res = half * half;\n        if (d \n"},"Binary Search/Find K Closest Elements.html":{"url":"Binary Search/Find K Closest Elements.html","title":"Find K Closest Elements","keywords":"","body":"Problem\nLintCode 460. Find K Closest Elements\nhttps://www.lintcode.com/problem/find-k-closest-elements/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer array\n     * @param target: An integer\n     * @param k: An integer\n     * @return: an integer array\n     */\n    vector kClosestNumbers(vector &A, int target, int k) {\n        // write your code here\n\n        int n = A.size();\n        if (n == 0 || k == 0) {\n            return {};\n        }\n\n        int l = 0, r = n - 1;\n        while (l + 1  ans;\n        ans.push_back(closest);\n\n        l = pivot - 1;\n        r = pivot + 1;\n        for (int i = 0 ; i = 0 && r = n) {\n                    ans.push_back(A[l--]);\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Binary Search/Find Minimum in Rotated Sorted Array.html":{"url":"Binary Search/Find Minimum in Rotated Sorted Array.html","title":"Find Minimum in Rotated Sorted Array","keywords":"","body":"Problem\nLintCode 159. Find Minimum in Rotated Sorted Array\nhttps://www.lintcode.com/problem/find-minimum-in-rotated-sorted-array/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: a rotated sorted array\n     * @return: the minimum number in the array\n     */\n    int findMin(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        int l = 0, r = n - 1;\n\n        while (l + 1 \n"},"Binary Search/Maximum Number in Mountain Sequence.html":{"url":"Binary Search/Maximum Number in Mountain Sequence.html","title":"Maximum Number in Mountain Sequence","keywords":"","body":"Problem\nLintCode 585. Maximum Number in Mountain Sequence\nhttps://www.lintcode.com/problem/maximum-number-in-mountain-sequence/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: a mountain sequence which increase firstly and then decrease\n     * @return: then mountain top\n     */\n    int mountainSequence(vector &nums) {\n        // write your code here\n\n        int n = nums.size();\n        int l = 0, r = n - 1;\n\n        while (l + 1 \n"},"Binary Search/Search in Rotated Sorted Array.html":{"url":"Binary Search/Search in Rotated Sorted Array.html","title":"Search in Rotated Sorted Array","keywords":"","body":"Problem\nLintCode 62. Search in Rotated Sorted Array\nhttps://www.lintcode.com/problem/search-in-rotated-sorted-array/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: an integer rotated sorted array\n     * @param target: an integer to be searched\n     * @return: an integer\n     */\n    int search(vector &A, int target) {\n        // write your code here\n\n        int n = A.size();\n        if (n == 0) {\n            return -1;\n        }\n\n        int l = 0, r = n - 1;\n\n        while (l + 1 \n"},"Binary Search/Search in Rotated Sorted Array II.html":{"url":"Binary Search/Search in Rotated Sorted Array II.html","title":"Search in Rotated Sorted Array II","keywords":"","body":"Problem\nLeetCode 81. Search in Rotated Sorted Array II\nhttps://leetcode.com/problems/search-in-rotated-sorted-array-ii/\nSolution\nclass Solution {\npublic:\n    bool search(vector& nums, int target) {\n\n        int n = nums.size();\n        if (n == 0) {\n            return false;\n        }\n\n        int l = 0;\n        int r = n - 1;\n\n        while (l + 1  nums[r]) {\n                if (nums[l] \n"},"Binary Search/Divide Two Integers.html":{"url":"Binary Search/Divide Two Integers.html","title":"Divide Two Integers","keywords":"","body":"Problem\nLeetCode 29. Divide Two Integers\nhttps://leetcode.com/problems/divide-two-integers\nSolution\nclass Solution {\npublic:\n    int divide(int dividend, int divisor) {\n\n        /**\n         *  TC: O(logN), where\n         *      N is the dividend\n         *\n         *  SC: O(1)\n         *\n            dividend = 29, divisor = 4\n\n            Round 1:\n                divd = 29\n                divr = 4\n\n                step = 2\n                => quot = 1  quot = 1  quot = 1 (dividend));\n        long divr = abs(static_cast(divisor));\n\n        long quot = 0;\n\n        while (divd >= divr) {\n            long step = 0;\n            long temp = divr;\n\n            while (temp  0) ||\n            (dividend > 0 && divisor  INT_MAX ? INT_MAX : quot;\n    }\n};\n\n"},"Binary Search/Missing Element in Sorted Array.html":{"url":"Binary Search/Missing Element in Sorted Array.html","title":"Missing Element in Sorted Array","keywords":"","body":"Problem\nLeetCode 1060. Missing Element in Sorted Array\nhttps://leetcode.com/problems/missing-element-in-sorted-array/\nSolution\nclass Solution {\npublic:\n    int missingElement(vector& nums, int k) {\n\n        /**\n            L = 0, R = n - 1\n            M = L + (R - L) / 2;\n\n            # of numbers in [0, M] = nums[M] - nums[0] + 1\n            # of missing numbers   = total - M - 1\n\n            if (k  nums[L] + (k - LO)\n            k in (HI, INF) => nums[R] + (k - HI)\n        */\n\n        int n = nums.size();\n        int l = 0, r = n - 1;\n\n        while (l + 1 \n"},"Binary Approximation/Sqrt.html":{"url":"Binary Approximation/Sqrt.html","title":"Sqrt(x)","keywords":"","body":"Problem\nLintCode 141. Sqrt(x)\nhttps://www.lintcode.com/problem/sqrtx/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param x: An integer\n     * @return: The sqrt of x\n     */\n    int sqrt(int x) {\n        // write your code here\n\n        int l = 1, r = x;\n\n        while (l + 1 = m) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        return (r * r > x) ? l : r;\n    }\n};\n\n"},"Binary Approximation/Sqrt II.html":{"url":"Binary Approximation/Sqrt II.html","title":"Sqrt(x) II","keywords":"","body":"Problem\nLintCode 586. Sqrt(x) II\nhttps://www.lintcode.com/problem/sqrtx-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param x: a double\n     * @return: the square root of x\n     */\n    double sqrt(double x) {\n        // write your code here\n\n        if (x == 0) {\n            return 0;\n        }\n\n        double l = (x >= 1) ? 1 : 0;\n        double r = (x >= 1) ? x : 1;\n\n        while (l + 1e-10 = m) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        return (x / r > r) ? r : l;\n    }\n};\n\n"},"Binary Approximation/Wood Cut.html":{"url":"Binary Approximation/Wood Cut.html","title":"Wood Cut","keywords":"","body":"Problem\nLintCode 183. Wood Cut\nhttps://www.lintcode.com/problem/wood-cut/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param L: Given n pieces of wood with length L[i]\n     * @param k: An integer\n     * @return: The maximum length of the small pieces\n     */\n    int woodCut(vector &L, int k) {\n        // write your code here\n\n        /**\n         *  n pieces of woods\n         *\n         *  s: The length of small pieces\n         *  L1/s + L2/s + ... + Ln/s = ?\n         *\n         *  We need to find a s so that the above fuction is equal to k.\n         *  Besides, s should be maximal.\n         *\n         *  For this, we can use binary approximation to gradually approach\n         *  the ideal s:\n         *      l = 1, r = Lmax\n         *      s = (l + r) / 2\n         *\n         *  O(nlogL)\n         */\n\n        if (L.empty() || k == 0) {\n            return 0;\n        }\n\n        int l = 1;\n        int r = 0;\n        for (int len : L) {\n            if (len > r) {\n                r = len;\n            }\n        }\n\n        while (l + 1 = k) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        if (countSmallPieces(L, l) & L, int s) {\n\n        int count = 0;\n        for (int len : L) {\n            count += len / s;\n        }\n\n        return count;\n    }\n};\n\n"},"Binary Approximation/Copy Books.html":{"url":"Binary Approximation/Copy Books.html","title":"Copy Books","keywords":"","body":"Problem\nLintCode 437. Copy Books\nhttps://www.lintcode.com/problem/copy-books/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param pages: an array of integers\n     * @param k: An integer\n     * @return: an integer\n     */\n    int copyBooks(vector &books, int k) {\n        // write your code here\n\n        /**\n         *  Given N books, K copiers, and the total number of pages is S. We\n         *  need to find the shortest time period for the slowest copier to\n         *  finish his work.\n         *\n         *  Let the candidate period be T, we can gradually increase T from 1\n         *  to S to check whether all the copiers can finish their works with\n         *  this time period. Hence, we get an O(NS) algorithm. However, we\n         *  still can boost the performance by estimating the ideal T with\n         *  binary approximation, thus acquiring a O(NlogS) solution.\n         */\n\n        if (books.empty() || k == 0) {\n            return 0;\n        }\n\n        int l = 1, r = 0;\n        for (int book : books) {\n            r += book;\n        }\n\n        while (l + 1 & books, int period, int k) {\n\n        int sum = 1;\n        int left = period;\n\n        for (int book : books) {\n            if (book > period) {\n                return false;\n            }\n\n            left -= book;\n            if (left \n"},"Binary Approximation/Copy Books II.html":{"url":"Binary Approximation/Copy Books II.html","title":"Copy Books II","keywords":"","body":"Problem\nLintCode 438. Copy Books II\nhttps://www.lintcode.com/problem/copy-books-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @param times: an array of integers\n     * @return: an integer\n     */\n    int copyBooksII(int n, vector &times) {\n        // write your code here\n\n        /**\n         *  Given N books, K copiers, and the total number of pages is S. We\n         *  need to find the shortest time period for the copiers to finish\n         *  the job.\n         *\n         *  Let the candidate period be T, we can gradually increase T from 1\n         *  to S to check whether all the copiers can finish their tasks with\n         *  this time period. Hence, we get an O(NS) algorithm. However, we\n         *  still can boost the performance by estimating the ideal T with\n         *  binary approximation, thus acquiring a O(NlogS) solution.\n         */\n\n        if (times.empty() || n == 0) {\n            return 0;\n        }\n\n        int l = 1;\n        int r = 0;\n        for (int time :times) {\n            r = std::max(r, time);\n        }\n        r *= n;\n\n        while (l + 1 = n;\n    }\n};\n\n"},"Binary Approximation/Find the Duplicate Number.html":{"url":"Binary Approximation/Find the Duplicate Number.html","title":"Find the Duplicate Number","keywords":"","body":"Problem\nLintCode 633. Find the Duplicate Number\nhttps://www.lintcode.com/problem/find-the-duplicate-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array containing n + 1 integers which is between 1 and n\n     * @return: the duplicate one\n     */\n    int findDuplicate(vector &nums) {\n        // write your code here\n\n        /**\n         *  There are (n + 1) numbers, and suppose that p is the duplicate.\n         *  We can divide these numbers into 3 portions.\n         *\n         *  1, 2, ..., (p - 1) | p, ..., p | (p + 1), ..., n\n         *\n         *  Based on the pigeon hole theory,\n         *\n         *  The amount of numbers = (p + 1) at least\n         *  The amount of numbers  p:  >= (x + 1) at least\n         *  The amount of numbers = (x + 1), we know that we\n         *  should decrase the upper bound to find our target. Otherwise,\n         *  if the amount of numbers that are = m + 1) {\n                r = m;\n            } else {\n                l = m;\n            }\n        }\n\n        return (countNumber(nums, l) \n"},"Binary Approximation/Maximum Average Subarray II.html":{"url":"Binary Approximation/Maximum Average Subarray II.html","title":"Maximum Average Subarray II","keywords":"","body":"Problem\nLintCode 617. Maximum Average Subarray II\nhttps://www.lintcode.com/problem/maximum-average-subarray-ii/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: an array with positive and negative numbers\n     * @param k: an integer\n     * @return: the maximum average\n     */\n    double maxAverage(vector &nums, int k) {\n        // write your code here\n\n        /**\n         * Use binary approximation, and then we transform the problem into\n         * checking if it is possible to find a subarray whose average sum\n         * is equal to or less than T.\n         *\n         *     A[i] + ... + A[j] / (j - i + 1) >= T , (j - i + 1) >= k\n         *  => A[i] + ... + A[j] >= T + ... + T\n         *  => (A[i] - T) + ... + (A[j] - T) >= 0\n         *  => B[i] + ... + B[j] >= 0               , (j - i + 1) >= k\n         *\n         *          j             i\n         *  -------------------------\n         *  | MIN | *     MAX     * |\n         *  -------------------------\n         */\n\n        int n = nums.size();\n        if (n == 0 || k == 0) {\n            return 0;\n        }\n\n        double l = nums[0], r = nums[0];\n        for (int i = 1 ; i (nums[i]));\n            r = std::max(r, static_cast(nums[i]));\n        }\n\n        while (l + 1e-5 (nums[i]) - x;\n        }\n\n        for (int i = k ; i = min_l_sum) {\n                return true;\n            }\n\n            // B[i] ... B[j]\n            r_sum += static_cast(nums[i]) - x;\n            l_sum += static_cast(nums[i - k]) - x;\n            min_l_sum = std::min(min_l_sum, l_sum);\n        }\n\n        return r_sum >= min_l_sum;\n    }\n};\n\n"},"Binary Search with STL or Map/Odd Even Jump.html":{"url":"Binary Search with STL or Map/Odd Even Jump.html","title":"Odd Even Jump","keywords":"","body":"Problem\nLeetCode 975. Odd Even Jump\nhttps://leetcode.com/problems/odd-even-jump/\nSolution\nclass Solution {\npublic:\n    int oddEvenJumps(vector& A) {\n\n        int n = A.size();\n\n        vector odds(n, false);\n        vector evens(n, false);\n        odds[n - 1] = true;\n        evens[n - 1] = true;\n\n        map map;\n        map[A[n - 1]] = n - 1;\n        int ans = 1;\n\n        for (int i = n - 2 ; i >= 0 ; --i) {\n            int num = A[i];\n\n            // Plan to apply a up jump from this position.\n            auto it = map.lower_bound(num);\n            if (it != map.end()) {\n                odds[i] = evens[it->second];\n            }\n\n            // Plan to apply a down jump from this position.\n            it = map.upper_bound(num);\n            if (it != map.begin()) {\n                evens[i] = odds[(--it)->second];\n            }\n\n            if (odds[i]) {\n                ++ans;\n            }\n            map[num] = i;\n        }\n\n        return ans;\n    }\n};\n\n"},"Binary Search with STL or Map/Random Pick with Weight.html":{"url":"Binary Search with STL or Map/Random Pick with Weight.html","title":"Random Pick with Weight","keywords":"","body":"Problem\nLeetCode 528. Random Pick with Weight\nhttps://leetcode.com/problems/random-pick-with-weight/\nSolution\nclass Solution {\npublic:\n    Solution(vector& w) {\n\n        /**\n         *  TC: O(logN), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         *\n         *\n         *    Input     : 3, 4, 1, 2\n         *    Prefix Sum: 3, 7, 8, 10\n         *\n         *    1st element: [0, 2]\n         *    2nd        : [3, 6]\n         *    3rd        : [7, 7]\n         *    4th        : [8, 10]\n         */\n\n        sum.emplace_back(w[0]);\n\n        int n = w.size();\n        for (int i = 1 ; i  sum;\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(w);\n * int param_1 = obj->pickIndex();\n */\n\n"},"Expression Parsing/Convert Infix Expression to Postfix Expression.html":{"url":"Expression Parsing/Convert Infix Expression to Postfix Expression.html","title":"Convert Infix Expression to Postfix Expression","keywords":"","body":"Problem\nLintCode 370. Convert Expression to Reverse Polish Notation\nhttps://www.lintcode.com/problem/convert-expression-to-reverse-polish-notation/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({{\"*\", 2}, {\"/\", 2}, {\"+\", 1}, {\"-\", 1}, {\"(\", 0}})\n    { }\n\n    /**\n     * @param expression: A string array\n     * @return: The Reverse Polish notation of this expression\n     */\n    vector convertToRPN(vector &exp) {\n        // write your code here\n\n        /**\n         *  *, /: 2,\n         *  +, -: 1,\n         *  (   : 0\n         *\n         *      A + B / C * (D + E) - F\n         *\n         *  Symbol      Stack       Postfix\n         *    A                     A\n         *    +           +         A\n         *    B           +         AB\n         *    /           +/        AB\n         *    C           +/        ABC\n         *    *           +*        ABC/\n         *    (           +*(       ABC/\n         *    D           +*(       ABC/D\n         *    +           +*(+      ABC/D\n         *    E           +*(+      ABC/DE\n         *    )           +*        ABC/DE+\n         *    -           -         ABC/DE+*+\n         *    F           -         ABC/DE+*+F\n         *                          ABC/DE+*+F-\n         */\n\n        std::vector rpn;\n        std::stack stack;\n\n        for (const auto& token : exp) {\n\n            if (token == \"(\") {\n                stack.push(token);\n\n            } else if (token == \")\") {\n                while (stack.top() != \"(\") {\n                    rpn.push_back(stack.top());\n                    stack.pop();\n                }\n                stack.pop();\n\n            } else if ('0'  map;\n};\n\n"},"Expression Parsing/Convert Infix Expression to Prefix Expression.html":{"url":"Expression Parsing/Convert Infix Expression to Prefix Expression.html","title":"Convert Infix Expression to Prefix Expression","keywords":"","body":"Problem\nLintCode 369. Convert Expression to Polish Notation\nhttps://www.lintcode.com/problem/convert-expression-to-polish-notation/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({{\"*\", 2}, {\"/\", 2}, {\"+\", 1}, {\"-\", 1}, {\"(\", 0}})\n    { }\n\n    /**\n     * @param expression: A string array\n     * @return: The Polish notation of this expression\n     */\n    vector convertToPN(vector &exp) {\n        // write your code here\n\n        std::stack stack;\n        std::vector pn;\n\n        int n = exp.size();\n        for (int i = n - 1 ; i >= 0 ; --i) {\n            const auto& token = exp[i];\n\n            if (token == \")\") {\n                stack.push(token);\n\n            } else if (token == \"(\") {\n                while (stack.top() != \")\") {\n                    pn.push_back(stack.top());\n                    stack.pop();\n                }\n                stack.pop();\n\n            } else if ('0'  map;\n};\n\n"},"Expression Parsing/Evaluate Postfix Expression.html":{"url":"Expression Parsing/Evaluate Postfix Expression.html","title":"Evaluate Postfix Expression","keywords":"","body":"Problem\nLintCode 424. Evaluate Reverse Polish Notation\nhttps://www.lintcode.com/problem/evaluate-reverse-polish-notation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param tokens: The Reverse Polish Notation\n     * @return: the value\n     */\n    int evalRPN(vector &tokens) {\n        // write your code here\n\n        std::stack stack;\n\n        for (const auto& token : tokens) {\n            if (token == \"+\") {\n                evaluate(stack, '+');\n            } else if (token == \"-\") {\n                evaluate(stack, '-');\n            } else if (token == \"*\") {\n                evaluate(stack, '*');\n            } else if (token == \"/\") {\n                evaluate(stack, '/');\n            } else {\n                stack.push(std::stoi(token));\n            }\n        }\n\n        return stack.top();\n    }\n\nprivate:\n    void evaluate(std::stack& stack, char op) {\n\n        int op2 = stack.top();\n        stack.pop();\n        int op1 = stack.top();\n        stack.pop();\n\n        int result;\n        switch(op) {\n            case '+':\n                result = op1 + op2;\n                break;\n            case '-':\n                result = op1 - op2;\n                break;\n            case '*':\n                result = op1 * op2;\n                break;\n            case '/':\n                result = op1 / op2;\n                break;\n        }\n\n        stack.push(result);\n    }\n};\n\n"},"Expression Parsing/Evaluate Infix Expression.html":{"url":"Expression Parsing/Evaluate Infix Expression.html","title":"Evaluate Infix Expression","keywords":"","body":"Problem\nLintCode 368. Expression Evaluation\nhttps://www.lintcode.com/problem/expression-evaluation/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({{\"*\", 2}, {\"/\", 2}, {\"+\", 1}, {\"-\", 1}, {\"(\", 0}})\n    { }\n\n    /**\n     * @param expression: a list of strings\n     * @return: an integer\n     */\n    int evaluateExpression(vector &expression) {\n        // write your code here\n\n        auto rpn = convertToRPN(expression);\n        return evaluateRPN(rpn);\n    }\n\nprivate:\n    std::vector convertToRPN(const std::vector& exp) {\n\n        /**\n         *  *, /: 2\n         *  +, -: 1\n         *  (   : 0\n         */\n\n        std::vector rpn;\n        std::stack stk;\n\n        for (const auto& token : exp) {\n\n            if ('0' = precedence) {\n                    rpn.push_back(stk.top());\n                    stk.pop();\n                }\n\n                stk.push(token);\n            }\n        }\n\n        while (!stk.empty()) {\n            rpn.push_back(stk.top());\n            stk.pop();\n        }\n\n        return rpn;\n    }\n\n    int evaluateRPN(const std::vector& rpn) {\n\n        std::stack stk;\n\n        for (const auto& token : rpn) {\n\n            if ('0'  map;\n};\n\n"},"Expression Parsing/Expression Tree Construction.html":{"url":"Expression Parsing/Expression Tree Construction.html","title":"Expression Tree Construction","keywords":"","body":"Problem\nLintCode 367. Expression Tree Build\nhttps://www.lintcode.com/problem/expression-tree-build/description\nSolution\n/**\n * Definition of ExpressionTreeNode:\n * class ExpressionTreeNode {\n * public:\n *     string symbol;\n *     ExpressionTreeNode *left, *right;\n *     ExpressionTreeNode(string symbol) {\n *         this->symbol = symbol;\n *         this->left = this->right = NULL;\n *     }\n * }\n */\n\n\nclass Solution {\npublic:\n    Solution()\n      : map({{\"*\", 2}, {\"/\", 2}, {\"+\", 1}, {\"-\", 1}, {\"(\", 0}})\n    { }\n\n    /*\n     * @param expression: A string array\n     * @return: The root of expression tree\n     */\n    ExpressionTreeNode * build(vector &expression) {\n        // write your code here\n\n        auto rpn = convertToRPN(expression);\n        return buildTree(rpn);\n    }\n\nprivate:\n    std::vector convertToRPN(const std::vector& exp) {\n\n        /**\n         * *, /: 2\n         * +, -: 1\n         * (   : 0\n         */\n\n        std::vector rpn;\n        std::stack stk;\n\n        for (const auto& token : exp) {\n\n            if ('0' = precedence) {\n                    rpn.push_back(stk.top());\n                    stk.pop();\n                }\n\n                stk.push(token);\n            }\n        }\n\n        while (!stk.empty()) {\n            rpn.push_back(stk.top());\n            stk.pop();\n        }\n\n        return rpn;\n    }\n\n\n    ExpressionTreeNode* buildTree(const std::vector& rpn) {\n\n        std::stack stk;\n\n        for (const auto& token : rpn) {\n\n            if ('0' left = left;\n                root->right = right;\n\n                stk.push(root);\n            }\n        }\n\n        return !stk.empty() ? stk.top() : nullptr;\n    }\n\n\n    std::unordered_map map;\n};\n\n"},"Number Parsing/Reverse Integer.html":{"url":"Number Parsing/Reverse Integer.html","title":"Reverse Integer","keywords":"","body":"Problem\nLeetCode 7. Reverse Integer\nhttps://leetcode.com/problems/reverse-integer\nSolution\nclass Solution {\npublic:\n    int reverse(int x) {\n\n        /**\n         *  TC: O(log(x)), with base 10\n         *  SC: O(1)\n         */\n\n        int ans = 0;\n\n        while (x != 0) {\n            int test = ans * 10 + (x % 10);\n            // Check for potential integer overflow.\n            if (test / 10 != ans) {\n                return 0;\n            }\n            ans = test;\n            x /= 10;\n        }\n\n        return ans;\n    }\n};\n\n"},"Number Parsing/Valid Number.html":{"url":"Number Parsing/Valid Number.html","title":"Valid Number","keywords":"","body":"Problem\nLintCode 417. Valid Number\nhttps://www.lintcode.com/problem/valid-number/description\nSolution\nclass Solution {\npublic:\n    bool isNumber(string s) {\n\n        /**\n         * Decompose the number format:\n         *\n         * (): Include the necessary part.\n         * []: Include the optional part.\n         *\n         * [+/-] (Real Number) [Exponent [+/-] (Integer)]\n         *                                     *********\n         * Once we encounter a exponent symbol, then the remaining integer\n         * becomes necessary now.\n         *\n         * Real Number: abcd\n         *              abcd.ef\n         *              abce.\n         */\n\n        auto str = trim(s);\n\n        int len = str.length();\n        int i = 0;\n        if (i == len) {\n            return false;\n        }\n\n        // Patch a dummy white space at the back of the string.\n        str.push_back(' ');\n\n        // Check the optional +/- signs.\n        if (str[i] == '+' || str[i] == '-') {\n            ++i;\n        }\n\n        // Check the necessary real number.\n        int count_num = 0;\n        int count_dot = 0;\n        while (('0'  1) {\n            return false;\n        }\n\n        // Step into the checking for the optional exponent.\n        if (str[i] == 'e') {\n            ++i;\n\n            // If we already visit the exponent symbol, the remaining integer\n            // now becomes necessary.\n\n            if (str[i] == '+' || str[i] == '-') {\n                ++i;\n            }\n\n            if (i == len) {\n                // 123e\n                // 123e+\n                // 123e-\n\n                return false;\n            }\n\n            // Check the final necessary integer.\n            while ('0' \n"},"Number Parsing/String to Integer.html":{"url":"Number Parsing/String to Integer.html","title":"String to Integer (atoi)","keywords":"","body":"Problem\nLintCode 54. String to Integer (atoi)\nhttps://www.lintcode.com/problem/string-to-integer-atoi/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param str: A string\n     * @return: An integer\n     */\n    int atoi(string &str) {\n        // write your code here\n\n        int len = str.length();\n        int i = 0;\n\n        if (i == len) {\n            return 0;\n        }\n\n        // Ignore the whitespaces before the first non-whitespace character.\n        while (i  INT_MAX) {\n                break;\n            }\n            ++i;\n        }\n\n        if (!positive) {\n            sum = -sum;\n        }\n\n        if (sum > INT_MAX) {\n            return INT_MAX;\n        }\n        if (sum \n"},"Number Parsing/Binary Representation.html":{"url":"Number Parsing/Binary Representation.html","title":"Binary Representation","keywords":"","body":"Problem\nLintCode 180. Binary Representation\nhttps://www.lintcode.com/problem/binary-representation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: Given a decimal number that is passed in as a string\n     * @return: A string\n     */\n    string binaryRepresentation(string &n) {\n        // write your code here\n\n        /**\n         * The strategy to handle the fractional part.\n         *\n         * e.g: 0.125 (demical)\n         *\n         *      0.25  -> 0\n         *\n         *      0.5   -> 0\n         *\n         *      1.0   -> 1\n         *      0.0   -> end\n         *\n         *      0.001 (binary)\n         */\n\n        auto pos = n.find('.');\n        if (pos == std::string::npos) {\n            return convertIntegralPart(n);\n        }\n\n        auto int_part_dec = n.substr(0, pos);\n        auto fac_part_dec = n.substr(pos, n.length() - pos);\n        auto int_part_bin = convertIntegralPart(int_part_dec);\n        auto fac_part_bin = convertFractionalPart(fac_part_dec);\n\n        if (fac_part_bin == \"ERROR\") {\n            return \"ERROR\";\n        }\n        if (fac_part_bin.empty()) {\n            return int_part_bin;\n        }\n\n        return int_part_bin + \".\" + fac_part_bin;\n    }\n\nprivate:\n    std::string convertIntegralPart(const std::string& str) {\n\n        std::string res;\n\n        int n = std::stoi(str);\n        while (n > 0) {\n            div_t temp = std::div(n, 2);\n            n = temp.quot;\n\n            if (temp.rem == 0) {\n                res.push_back('0');\n            } else {\n                res.push_back('1');\n            }\n        }\n\n        if (res.empty()) {\n            res.push_back('0');\n        }\n\n        std::reverse(res.begin(), res.end());\n        return res;\n    }\n\n    std::string convertFractionalPart(const std::string& str) {\n\n        int max_len = 32;\n        int len = 0;\n        std::string res;\n\n        double n = std::stod(str);\n        while (n > 0) {\n            n *= 2;\n\n            if (n  max_len) {\n                return \"ERROR\";\n            }\n        }\n\n        return res;\n    }\n};\n\n"},"Number Parsing/Palindrome Number.html":{"url":"Number Parsing/Palindrome Number.html","title":"Palindrome Number","keywords":"","body":"Problem\nLintCode 491. Palindrome Number\nhttps://www.lintcode.com/problem/palindrome-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param num: a positive number\n     * @return: true if it's a palindrome or false\n     */\n    bool isPalindrome(int num) {\n        // write your code here\n\n        long mirror = 0;\n\n        long copy = num;\n        while (copy > 0) {\n            mirror *= 10;\n            mirror += copy % 10;\n            copy /= 10;\n        }\n\n        return mirror == num;\n    }\n};\n\n"},"Number Parsing/Add Digits.html":{"url":"Number Parsing/Add Digits.html","title":"Add Digits","keywords":"","body":"Problem\nLintCode 569. Add Digits\nhttps://www.lintcode.com/problem/add-digits/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param num: a non-negative integer\n     * @return: one digit\n     */\n    int addDigits(int num) {\n        // write your code here\n\n        while (num >= 10) {\n            num = decompose(num);\n        }\n\n        return num;\n    }\n\nprivate:\n    int decompose(int n) {\n\n        int res = 0;\n        while (n > 0) {\n            res += n % 10;\n            n /= 10;\n        }\n\n        return res;\n    }\n};\n\n"},"Number Parsing/Happy Number.html":{"url":"Number Parsing/Happy Number.html","title":"Happy Number","keywords":"","body":"Problem\nLintCode 488. Happy Number\nhttps://www.lintcode.com/problem/happy-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param n: An integer\n     * @return: true if this is a happy number or false\n     */\n    bool isHappy(int n) {\n        // write your code here\n\n        std::unordered_set set;\n        while (n != 1) {\n            n = decompose(n);\n            if (set.count(n) == 1) {\n                return false;\n            }\n            set.insert(n);\n        }\n\n        return true;\n    }\n\nprivate:\n    int decompose(int n) {\n\n        int res = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            n /= 10;\n            res += digit * digit;\n        }\n\n        return res;\n    }\n};\n\n"},"Number Parsing/Validate IP Address.html":{"url":"Number Parsing/Validate IP Address.html","title":"Validate IP Address","keywords":"","body":"Problem\nLintCode 1222. Validate IP Address\nhttps://www.lintcode.com/problem/validate-ip-address/description\nSolution\nclass Solution {\npublic:\n    string validIPAddress(string IP) {\n\n        auto pos = IP.find('.');\n        if (pos != std::string::npos) {\n            return isV4(IP) ? \"IPv4\" : \"Neither\";\n        }\n\n        pos = IP.find(':');\n        if (pos != std::string::npos) {\n            return isV6(IP) ? \"IPv6\" : \"Neither\";\n        }\n\n        return \"Neither\";\n    }\n\nprivate:\n    std::string getToken(const auto& str, int& bgn, int end, char delm) {\n\n        if (bgn >= end) {\n            return \"\";\n        }\n\n        int base = bgn;\n        while (bgn  3) {\n            return false;\n        }\n\n        if (str.length() > 1 && str[0] == '0') {\n            return false;\n        }\n\n        for (char ch : str) {\n            if (!('0'  4) {\n            return false;\n        }\n\n        for (char ch : str) {\n            if (!(('0'  4) {\n                break;\n            }\n\n            int value = std::stoi(token);\n            if (!(value >= 0 && value  8) {\n                break;\n            }\n\n            int value = std::stoi(token, 0, 16);\n            if (!(value >= 0 && value \n"},"Word Puzzle/Word Break.html":{"url":"Word Puzzle/Word Break.html","title":"Word Break","keywords":"","body":"Problem\nLeetCode 139. Word Break\nhttps://leetcode.com/problems/word-break\nSolution\nclass Solution {\npublic:\n    bool wordBreak(string s, vector& words) {\n\n        /**\n         *  TC: O(N^3), where\n         *      N is the string length\n         *\n         *  Improved TC: O(N * K * L), where\n         *      N is the string length\n         *      K is the number of dictionary words\n         *      L is the average word length\n         *\n         *  SC: O(N)\n         *\n         *\n         * dp[i]: Whether the prefix ending at the ith position can be composed\n         *        by the dictionary words.\n         *\n         * dp[i] =   OR { dp[j] && (s.substr(j + 1, i) in dict) }\n         *         0 i.\n         *\n         */\n\n        int n = s.length();\n        vector dp(n + 1);\n        dp[0] = true;\n\n        for (int i = 0 ; i  n) {\n                    continue;\n                }\n\n                if (s.substr(i, l) != word) {\n                    continue;\n                }\n\n                dp[i + l] = true;\n            }\n        }\n\n        return dp[n] == true;\n    }\n};\n\n"},"Word Puzzle/Word Break II.html":{"url":"Word Puzzle/Word Break II.html","title":"Word Break II","keywords":"","body":"Problem\nLeetCode 140. Word Break II\nhttps://leetcode.com/problems/word-break-ii\nSolution\nclass Solution {\npublic:\n    vector wordBreak(string s, vector& words) {\n\n        unordered_set dict(words.begin(), words.end());\n        unordered_map> memo;\n        return backTracking(s, dict, memo);\n    }\n\nprivate:\n    vector backTracking(\n            const string& s,\n            unordered_set& dict,\n            unordered_map>& memo) {\n\n        if (s.empty()) {\n            return {\"\"};\n        }\n\n        if (memo.count(s) == 1) {\n            return memo[s];\n        }\n\n        vector ans;\n\n        int n = s.length();\n        for (int i = 0 ; i \n"},"Word Puzzle/Word Ladder.html":{"url":"Word Puzzle/Word Ladder.html","title":"Word Ladder","keywords":"","body":"Problem\nLeetCode 127. Word Ladder\nhttps://leetcode.com/problems/word-ladder\nSolution\nclass Solution {\npublic:\n    int ladderLength(string begin, string end, vector& words) {\n\n        /**\n         *  TC: O(N * K * 25), where\n         *      N is the number of words\n         *      K is average word length\n         *\n         *  SC: O(N * K)\n         *\n         *              dot -- dog\n         *            /            \\\n         *  hit -- hot              cog\n         *            \\            /\n         *              lot -- log\n         */\n\n        unordered_set dict(words.begin(), words.end());\n\n        if (dict.count(end) == 0) {\n            return 0;\n        }\n\n        queue q;\n        q.emplace(begin);\n\n        int ans = 1;\n        while (!q.empty()) {\n            int n = q.size();\n            ++ans;\n\n            for (int i = 0 ; i \n"},"Word Puzzle/Word Ladder II.html":{"url":"Word Puzzle/Word Ladder II.html","title":"Word Ladder II","keywords":"","body":"Problem\nLintCode 121. Word Ladder II\nhttps://www.lintcode.com/problem/word-ladder-ii/description\nSolution\nclass Solution {\npublic:\n    vector> findLadders(string begin, string end, vector& words) {\n\n        /**\n         *  TC: O(N * K * 25), where\n         *      N is the number of words\n         *      K is average word length\n         *\n         *  SC: O(N * K)\n         *                  dot(3) -- dog(4)\n         *                /                 \\\n         * hit(1) - hot(2)                   cog(5)\n         *                \\                 /\n         *                  lot(3) -- log(4)\n         *\n         */\n\n        unordered_set dict(words.begin(), words.end());\n        unordered_map> graph;\n        unordered_map discovery;\n        discovery[begin] = 0;\n\n        buildGraph(begin, end, dict, graph, discovery);\n\n        vector config;\n        config.emplace_back(begin);\n        vector> ans;\n\n        findPath(begin, end, 0, graph, discovery, config, ans);\n\n        return ans;\n    }\n\nprivate:\n    void buildGraph(\n            const string& begin, const string& end,\n            unordered_set& dict,\n            unordered_map>& graph,\n            unordered_map& discovery) {\n\n        queue q;\n        q.emplace(begin);\n\n        int level = 0;\n\n        while (!q.empty()) {\n            int n = q.size();\n            ++level;\n\n            for (int i = 0 ; i >& graph,\n            unordered_map& discovery,\n            vector& config,\n            vector>& ans) {\n\n        if (begin == end) {\n            ans.emplace_back(config);\n            return;\n        }\n\n        for (const auto& neighbor : graph[begin]) {\n            if (discovery[neighbor] != level + 1) {\n                continue;\n            }\n\n            config.emplace_back(neighbor);\n            findPath(neighbor, end, level + 1, graph, discovery, config, ans);\n            config.pop_back();\n        }\n    }\n};\n\n"},"Word Puzzle/Word Search.html":{"url":"Word Puzzle/Word Search.html","title":"Word Search","keywords":"","body":"Problem\nLeetCode 79. Word Search\nhttps://leetcode.com/problems/word-search\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    bool exist(vector>& board, string word) {\n\n        /**\n         *  TC: O(M * N * (3^L)), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *      L is the word length\n         *\n         *  SC: O(L)\n         */\n\n        int m = board.size();\n        int n = board[0].size();\n        int l = word.length();\n\n        for (int x = 0 ; x > directs;\n\n    bool backTracking(\n            int x, int y, int m, int n,\n            int i, int l,\n            vector>& board,\n            const string& word) {\n\n        if (word[i] != board[x][y]) {\n            return false;\n        }\n\n        ++i;\n        if (i == l) {\n            return true;\n        }\n\n        char backup = board[x][y];\n        board[x][y] = 0;\n\n        for (const auto& d : directs) {\n            int nx = x + d[0];\n            int ny = y + d[1];\n\n            if (!(nx >= 0 && ny >= 0 && nx \n"},"Word Puzzle/Word Search II.html":{"url":"Word Puzzle/Word Search II.html","title":"Word Search II","keywords":"","body":"Problem\nLeetCode 212. Word Search II\nhttps://leetcode.com/problems/word-search-ii\nSolution\nstruct Node {\n    bool is_word = false;\n    unordered_map> branch;\n};\n\n\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    vector findWords(vector>& board, vector& words) {\n\n        /**\n         *  TC: O(M * N * (3^L)), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *      L is the word length\n         *\n         *  SC: O(L)\n         */\n\n        auto root = buildTrie(words);\n\n        int m = board.size();\n        int n = board[0].size();\n\n        unordered_set ans;\n\n        for (int x = 0 ; x (ans.begin(), ans.end());\n    }\n\nprivate:\n    vector> directs;\n\n    shared_ptr buildTrie(const vector& words) {\n\n        auto root = make_shared();\n\n        for (const auto& word : words) {\n            auto curr = root;\n\n            for (char ch : word) {\n                if (curr->branch.count(ch) == 0) {\n                    curr->branch[ch] = make_shared();\n                }\n                curr = curr->branch[ch];\n            }\n\n            curr->is_word = true;\n        }\n\n        return root;\n    }\n\n    void backTracking(\n            int x, int y, int m, int n,\n            shared_ptr curr,\n            vector>& board,\n            string& config,\n            unordered_set& ans) {\n\n        char ch = board[x][y];\n        config.push_back(ch);\n\n        if (curr->branch.count(ch) == 0) {\n            config.pop_back();\n            return;\n        }\n\n        curr = curr->branch[ch];\n\n        // If this is the tail of a word.\n        if (curr->is_word) {\n            ans.emplace(config);\n\n            // Mark the word as visited so we won't collect duplicates.\n            curr->is_word = false;\n        }\n\n        board[x][y] = 0;\n\n        for (const auto& d : directs) {\n            int nx = x + d[0];\n            int ny = y + d[1];\n\n            if (!(nx >= 0 && ny >= 0 && nx \n"},"Word Puzzle/Word Pattern.html":{"url":"Word Puzzle/Word Pattern.html","title":"Word Pattern","keywords":"","body":"Problem\nLeetCode 290. Word Pattern\nhttps://leetcode.com/problems/word-pattern\nSolution\nclass Solution {\npublic:\n    bool wordPattern(string p, string s) {\n\n        /**\n         *  O(N), where\n         *      N is the number of words\n         *\n         *  O(M), where\n         *      M is the number of unique words\n         */\n\n        int np = p.length();\n        istringstream in(s);\n\n        unordered_map p2s;\n        unordered_map s2p;\n\n        int i = 0;\n        for (string word ; in >> word ; ++i) {\n            if (i == np) {\n                return false;\n            }\n\n            char ch = p[i];\n            if (p2s.count(ch) == 0) {\n                p2s[ch] = word;\n            } else {\n                if (word != p2s[ch]) {\n                    return false;\n                }\n            }\n\n            if (s2p.count(word) == 0) {\n                s2p[word] = ch;\n            } else {\n                if (ch != s2p[word]) {\n                    return false;\n                }\n            }\n        }\n\n        return i == np;\n    }\n};\n\n"},"Word Puzzle/Word Pattern II.html":{"url":"Word Puzzle/Word Pattern II.html","title":"Word Pattern II","keywords":"","body":"Problem\nLeetCode 291. Word Pattern II\nhttps://leetcode.com/problems/word-pattern-ii\nSolution\nclass Solution {\npublic:\n    bool wordPatternMatch(string p, string s) {\n        unordered_map map;\n        unordered_set set;\n        return backTracking(\n            0, p.length(), 0, s.length(), p, s, map, set);\n    }\n\nprivate:\n    bool backTracking(\n            int ip, int np, int is, int ns,\n            const string& p, const string& s,\n            unordered_map& map,\n            unordered_set& set) {\n\n        if (ip == np && is == ns) {\n            return true;\n        }\n        if (ip == np || is == ns) {\n            return false;\n        }\n\n        char ch = p[ip];\n        if (map.count(ch) == 1) {\n            // The character has been mapped.\n\n            const auto& token = map[ch];\n            int l = token.length();\n\n            if (is + l > ns) {\n                return false;\n            }\n            if (token != s.substr(is, l)) {\n                return false;\n            }\n\n            bool res = backTracking(\n                ip + 1, np, is + l, ns, p, s, map, set);\n            if (res) {\n                return true;\n            }\n        } else {\n            // Try to find a mapping for the character.\n\n            for (int i = is ; i \n"},"Word Puzzle/Word Squares.html":{"url":"Word Puzzle/Word Squares.html","title":"Word Squares","keywords":"","body":"Problem\nLintCode 634. Word Squares\nhttps://www.lintcode.com/problem/word-squares/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param words: a set of words without duplicates\n     * @return: all word squares\n     */\n    vector> wordSquares(vector &words) {\n        // write your code here\n\n        /**\n         *  1. To choose a proper candidate in the ith recursion step, we need\n         *     to check if there are words starting with the prefix formed by\n         *     the first (i - 1) words collected so far.\n         *\n         *   b a l l\n         *   a       => b a l l => the second word should start with \"a\".\n         *   l\n         *   l\n         *\n         *  2. Once we select a legal candidate, we need to predict if we can\n         *     find the words starting with the prefix formed by the suffixes\n         *     of the i words collected so far in the future round.\n         *\n         *       * *\n         *   b a l l  => b a l l => there must be words starting with \"le\"\n         *   a r e a     a r e a    and \"la\".\n         *   l e\n         *   l a\n         */\n\n        if (words.empty()) {\n            return {};\n        }\n\n        int n = words[0].size();\n\n        // Group the words sharing the same prefix.\n        std::unordered_map> trie;\n        for (const auto& word : words) {\n            trie[\"\"].insert(word);\n\n            int len = word.length();\n            for (int i = 1 ; i  config;\n        std::vector> ans;\n\n        runBackTracking(0, n, trie, config, ans);\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n        int index,\n        int bound,\n        std::unordered_map>& trie,\n        std::vector& config,\n        std::vector>& ans) {\n\n        if (index == bound) {\n            ans.push_back(config);\n            return;\n        }\n\n        // Adopt the 1st filtering criterion.\n        std::string key;\n        for (const auto& word : config) {\n            key += word[index];\n        }\n\n        for (const auto& cand : trie[key]) {\n            config.push_back(cand);\n\n            // Adopt the 2nd filtering criterion.\n            if (canUse(index + 1, bound, trie, config)) {\n                runBackTracking(index + 1, bound, trie, config, ans);\n            }\n\n            config.pop_back();\n        }\n    }\n\n    bool canUse(\n        int index,\n        int bound,\n        std::unordered_map>& trie,\n        std::vector& config) {\n\n        for (int i = index ; i \n"},"Word Puzzle/Valid Word Square.html":{"url":"Word Puzzle/Valid Word Square.html","title":"Valid Word Square","keywords":"","body":"Problem\nLintCode 888. Valid Word Square\nhttps://www.lintcode.com/problem/valid-word-square/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param words: a list of string\n     * @return: a boolean\n     */\n    bool validWordSquare(vector &words) {\n        // Write your code here\n\n        int num_r = words.size();\n\n        for (int i = 0 ; i \n"},"Word Puzzle/Valid Anagram.html":{"url":"Word Puzzle/Valid Anagram.html","title":"Valid Anagram","keywords":"","body":"Problem\nLintCode 425. Letter Combinations of a Phone Number\nhttps://www.lintcode.com/problem/letter-combinations-of-a-phone-number/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({\n          {'2', {'a', 'b', 'c'}},\n          {'3', {'d', 'e', 'f'}},\n          {'4', {'g', 'h', 'i'}},\n          {'5', {'j', 'k', 'l'}},\n          {'6', {'m', 'n', 'o'}},\n          {'7', {'p', 'q', 'r', 's'}},\n          {'8', {'t', 'u', 'v'}},\n          {'9', {'w', 'x', 'y', 'z'}},\n      })\n    { }\n\n    /**\n     * @param digits: A digital string\n     * @return: all posible letter combinations\n     */\n    vector letterCombinations(string &digits) {\n        // write your code here\n\n        std::vector ans;\n        if (digits.empty()) {\n            return ans;\n        }\n\n        std::string config;\n        runBackTracking(0, digits.length(), digits, config, ans);\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            int index, int bound,\n            const std::string& digits,\n            std::string& config,\n            std::vector& ans) {\n\n        if (index == bound) {\n            ans.push_back(config);\n            return;\n        }\n\n        char digit = digits[index];\n        for (char ch : map[digit]) {\n            config.push_back(ch);\n            runBackTracking(index + 1, bound, digits, config, ans);\n            config.pop_back();\n        }\n    }\n\n    std::unordered_map> map;\n};\n\n"},"Word Puzzle/Group Anagrams.html":{"url":"Word Puzzle/Group Anagrams.html","title":"Group Anagrams","keywords":"","body":"Problem\nLintCode 772. Group Anagrams\nhttps://www.lintcode.com/problem/group-anagrams/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param strs: the given array of strings\n     * @return: The anagrams which have been divided into groups\n     */\n    vector> groupAnagrams(vector &strs) {\n        // write your code here\n\n        std::unordered_map> groups;\n\n        for (const auto& word : strs) {\n            auto key(word);\n            std::sort(key.begin(), key.end());\n            groups[key].push_back(word);\n        }\n\n        std::vector> ans;\n        for (auto& pair : groups) {\n            ans.emplace_back(std::move(pair.second));\n        }\n\n        return ans;\n    }\n};\n\n"},"Word Puzzle/Valid Word Abbreviation.html":{"url":"Word Puzzle/Valid Word Abbreviation.html","title":"Valid Word Abbreviation","keywords":"","body":"Problem\nLintCode 637. Valid Word Abbreviation\nhttps://www.lintcode.com/problem/valid-word-abbreviation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param word: a non-empty string\n     * @param abbr: an abbreviation\n     * @return: true if string matches with the given abbr or false\n     */\n    bool validWordAbbreviation(string &word, string &abbr) {\n        // write your code here\n\n        int len_w = word.length();\n        int len_a = abbr.length();\n\n        int index_w = 0, index_a = 0;\n        while (index_w \n"},"Word Puzzle/Word Abbreviation.html":{"url":"Word Puzzle/Word Abbreviation.html","title":"Word Abbreviation","keywords":"","body":"Problem\nLintCode 639. Word Abbreviation\nhttps://www.lintcode.com/problem/word-abbreviation/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param dict: an array of n distinct non-empty strings\n     * @return: an array of minimal possible abbreviations for every word\n     */\n    vector wordsAbbreviation(vector &dict) {\n        // write your code here\n\n        /**\n         *   like god internal me internet interval intension face intrusion\n         *\n         *   l2e  god i6l      me i6t      i6l      i7n       f2e  i7n\n         *\n         *   l2e  god in5l     me i6t      in5l     in6n      f2e  in6n\n         *\n         *   l2e  god int4l    me i6t      int4l    int5n     f2e  int5n\n         *\n         *   l2e  god inte3l   me i6t      inte3l   inte4n    f2e  intr4n\n         *\n         *   l2e  god inter2l  me i6t      inter2l  inte4n    f2e  intr4n\n         *\n         *          (no need) => intern1l interv1l\n         *\n         *           internal              interval\n         */\n\n        int n = dict.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::unordered_map states;\n        std::vector prefix_lens(n);\n        std::vector ans(n);\n\n        for (int i = 0 ; i     1\n            // intern1l ->    6\n            return str;\n        }\n\n        return  str.substr(0, prefix_len) +\n                std::to_string(len - prefix_len - 1) +\n                str[len - 1];\n    }\n};\n\n"},"Word Puzzle/Unique Word Abbreviation.html":{"url":"Word Puzzle/Unique Word Abbreviation.html","title":"Unique Word Abbreviation","keywords":"","body":"Problem\nLintCode 648. Unique Word Abbreviation\nhttps://www.lintcode.com/problem/unique-word-abbreviation/description\nSolution\nclass ValidWordAbbr {\npublic:\n    /*\n    * @param dictionary: a list of words\n    */ValidWordAbbr(vector dictionary) {\n        // do intialization if necessary\n\n        for (const auto& word: dictionary) {\n            auto abbr = genAbbreviation(word);\n            ++words[word];\n            ++abbrs[abbr];\n        }\n    }\n\n    /*\n     * @param word: a string\n     * @return: true if its abbreviation is unique or false\n     */\n    bool isUnique(string &word) {\n        // write your code here\n\n        /**\n         * 1. If a word is presented in the word dictionary, it should also be\n         *    stored in the abbreviation dictionary. Moreover, the appearance\n         *    frequencies of the word and its abbreviation must be equal.\n         *\n         * 2. On the other hand, if a word is not shown in the word dictionary,\n         *    it should not be presented in the abbreviation dictionary, too.\n         */\n\n        auto abbr = genAbbreviation(word);\n        if (words.count(word) == 1 && abbrs.count(abbr) == 1 &&\n            words[word] == abbrs[abbr]) {\n            return true;\n        }\n        if (words.count(word) == 0 && abbrs.count(abbr) == 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n\nprivate:\n    std::string genAbbreviation(const std::string& str) {\n\n        int len = str.length();\n        if (len  words;\n    std::unordered_map abbrs;\n};\n\n/**\n * Your ValidWordAbbr object will be instantiated and called as such:\n * ValidWordAbbr obj = new ValidWordAbbr(dictionary);\n * bool param = obj.isUnique(word);\n */\n\n"},"Linked List/Delete Node in a Linked List.html":{"url":"Linked List/Delete Node in a Linked List.html","title":"Delete Node in a Linked List","keywords":"","body":"Problem\nLeetCode 237. Delete Node in a Linked List\nhttps://leetcode.com/problems/delete-node-in-a-linked-list\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         */\n\n        auto pred = node;\n        auto curr = pred->next;\n\n        while (curr->next) {\n            pred->val = curr->val;\n            pred = curr;\n            curr = curr->next;\n        }\n        pred->val = curr->val;\n\n        delete curr;\n        pred->next = nullptr;\n    }\n};\n\n"},"Linked List/Remove Linked List Elements.html":{"url":"Linked List/Remove Linked List Elements.html","title":"Remove Linked List Elements","keywords":"","body":"Problem\nLeetCode 203. Remove Linked List Elements\nhttps://leetcode.com/problems/remove-linked-list-elements\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         */\n\n        ListNode dummy;\n        dummy.next = head;\n\n        auto curr = head, pred = &dummy;\n        while (curr) {\n            auto succ = curr->next;\n            if (curr->val == val) {\n                pred->next = succ;\n                delete curr;\n            } else {\n                pred = pred->next;\n            }\n            curr = succ;\n        }\n\n        return dummy.next;\n    }\n};\n\n"},"Linked List/Remove Nth Node From End of List.html":{"url":"Linked List/Remove Nth Node From End of List.html","title":"Remove Nth Node From End of List","keywords":"","body":"Problem\nLeetCode 19. Remove Nth Node From End of List\nhttps://leetcode.com/problems/remove-nth-node-from-end-of-list\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         *\n         *  Delete a normal node\n         *\n         *  1->2->3->4->5\n         *  n = 2\n         *\n         *  l     r\n         *  1->2->3->4->5\n         *\n         *           l     r\n         *  1->2->3->4->5  nil\n         *\n         *  1->2->3->5\n         *\n         *  Delete a head node\n         *\n         *  1->2->3\n         *  n = 3\n         *\n         *  l       r\n         *  1->2->3 nil\n         *\n         *  2->3\n         */\n\n        auto l = head;\n        auto p = head;\n        auto r = head;\n\n        for (int i = 0 ; i next;\n        }\n\n        while (r) {\n            r = r->next;\n            p = l;\n            l = l->next;\n        }\n\n        p->next = l->next;\n        head = (l != head) ? head : head->next;\n        delete l;\n        return head;\n    }\n};\n\n"},"Linked List/Reverse Linked List II.html":{"url":"Linked List/Reverse Linked List II.html","title":"Reverse Linked List II","keywords":"","body":"Problem\nLeetCode 92. Reverse Linked List II\nhttps://leetcode.com/problems/reverse-linked-list-ii/submissions\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int m, int n) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         *\n         *    first\n         *      |    m         n\n         *      1 -> 2 -> 3 -> 4 -> 5\n         *           |\n         *         second\n         *                   prev  curr\n         *      1  5\n         *\n         *      first->next = prev\n         *      second->next = curr\n         */\n\n        ListNode dummy;\n        dummy.next = head;\n\n        // Find the (m-1)th node.\n        auto first = &dummy;\n        for (int i = 0 ; i next;\n        }\n\n        // Reverse the internal segment.\n        auto tail = first->next;\n        ListNode* pred = nullptr;\n        auto curr = tail;\n        for (int i = m ; i next;\n            curr->next = pred;\n            pred = curr;\n            curr = succ;\n        }\n\n        first->next = pred;\n        tail->next = curr;\n\n        return dummy.next;\n    }\n};\n\n"},"Linked List/Palindrome Linked List.html":{"url":"Linked List/Palindrome Linked List.html","title":"Palindrome Linked List","keywords":"","body":"Problem\nLeetCode 234. Palindrome Linked List\nhttps://leetcode.com/problems/palindrome-linked-list\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         */\n\n        if (!head || !head->next) {\n            return true;\n        }\n\n        if (!head->next->next) {\n            return head->val == head->next->val;\n        }\n\n        // Find the middle point of the list.\n        auto slow = head, fast = head;\n        while (fast->next && fast->next->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        // Reverse the right portion.\n        auto pred = slow, curr = slow->next;\n        int count = 0;\n        while (curr) {\n            auto succ = curr->next;\n            curr->next = pred;\n            pred = curr;\n            curr = succ;\n            ++count;\n        }\n\n        auto left = head, right = pred;\n        bool is_palin = true;\n        for (int i = 0 ; i val != right->val) {\n                is_palin = false;\n                break;\n            }\n            left = left->next;\n            right = right->next;\n        }\n\n        // Restore the right portion.\n        curr = pred;\n        pred = nullptr;\n        for (int i = 0 ; i next;\n            curr->next = pred;\n            pred = curr;\n            curr = succ;\n        }\n        slow->next = pred;\n\n        return is_palin;\n    }\n};\n\n"},"Linked List/Sort List.html":{"url":"Linked List/Sort List.html","title":"Sort List","keywords":"","body":"Problem\nLeetCode 148. Sort List\nhttps://leetcode.com/problems/sort-list\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)  The cost to maintain call stack\n         */\n\n        return merge(head, nullptr);\n    }\n\nprivate:\n    ListNode* merge(ListNode* bgn, ListNode* end) {\n\n        if (bgn == end) {\n            return nullptr;\n        }\n        if (bgn->next == end) {\n            bgn->next = nullptr;\n            return bgn;\n        }\n\n        auto slow = bgn, fast = bgn;\n        while (fast != end && fast->next != end) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n\n        auto l = merge(bgn, slow);\n        auto r = merge(slow, end);\n\n        ListNode dummy;\n        auto curr = &dummy;\n\n        while (l && r) {\n            if (l->val val) {\n                curr->next = l;\n                l = l->next;\n            } else {\n                curr->next = r;\n                r = r->next;\n            }\n            curr = curr->next;\n        }\n\n        while (l) {\n            curr = curr->next = l;\n            l = l->next;\n        }\n        while (r) {\n            curr = curr->next = r;\n            r = r->next;\n        }\n\n        return dummy.next;\n    }\n};\n\n"},"Linked List/Merge k Sorted Lists.html":{"url":"Linked List/Merge k Sorted Lists.html","title":"Merge k Sorted Lists","keywords":"","body":"Problem\nLeetCode 23. Merge k Sorted Lists\nhttps://leetcode.com/problems/merge-k-sorted-lists\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector& lists) {\n\n        /**\n         *  TC: O(NlogK), where\n         *      N is the total number of nodes\n         *      K is the number of lists\n         *\n         *  SC: O(logK)  The cost to maintain call stack\n         */\n\n        return helper(0, lists.size() - 1, lists);\n    }\n\nprivate:\n    ListNode* helper(int bgn, int end, vector& lists) {\n\n        if (bgn > end) {\n            return nullptr;\n        }\n        if (bgn == end) {\n            return lists[bgn];\n        }\n\n        int mid = (bgn + end) >> 1;\n        auto l = helper(bgn, mid, lists);\n        auto r = helper(mid + 1, end, lists);\n\n        ListNode dummy;\n        auto curr = &dummy;\n\n        while (l && r) {\n            if (l->val val) {\n                curr->next = l;\n                l = l->next;\n            } else {\n                curr->next = r;\n                r = r->next;\n            }\n            curr = curr->next;\n        }\n\n        while (l) {\n            curr = curr->next = l;\n            l = l->next;\n        }\n        while (r) {\n            curr = curr->next = r;\n            r = r->next;\n        }\n\n        return dummy.next;\n    }\n};\n\n"},"Linked List/Partition List.html":{"url":"Linked List/Partition List.html","title":"Partition List","keywords":"","body":"Problem\nLintCode 96. Partition List\nhttps://www.lintcode.com/problem/partition-list/description\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         */\n\n        ListNode dummy_l, dummy_g;\n        auto l = &dummy_l, g = &dummy_g;\n\n        while (head) {\n            if (head->val next = head;\n            } else {\n                g = g->next = head;\n            }\n            head = head->next;\n        }\n\n        g->next = nullptr;\n        l->next = dummy_g.next;\n\n        return dummy_l.next;\n    }\n};\n\n"},"Linked List/Odd Even Linked List.html":{"url":"Linked List/Odd Even Linked List.html","title":"Odd Even Linked List","keywords":"","body":"Problem\nLeetCode 328. Odd Even Linked List\nhttps://leetcode.com/problems/odd-even-linked-list\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         */\n\n        if (!head || !head->next) {\n            return head;\n        }\n\n        ListNode dummy_odd, dummy_even;\n        auto odd = &dummy_odd, even = &dummy_even;\n\n        int index = 1;\n        while (head) {\n            auto succ = head->next;\n\n            if (index % 2 == 0) {\n                even->next = head;\n                even = even->next;\n                even->next = nullptr;\n            } else {\n                odd->next = head;\n                odd = odd->next;\n                odd->next = nullptr;\n            }\n\n            head = succ;\n            ++index;\n        }\n\n        odd->next = dummy_even.next;\n        return dummy_odd.next;\n    }\n};\n\n"},"Linked List/Intersection of Two Linked Lists.html":{"url":"Linked List/Intersection of Two Linked Lists.html","title":"Intersection of Two Linked Lists","keywords":"","body":"Problem\nLeetCode 160. Intersection of Two Linked Lists\nhttps://leetcode.com/problems/intersection-of-two-linked-lists\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n\n        /**\n         *  TC: O(M + N), where\n         *      M is the number of nodes of list A\n         *      N is the number of nodes of list B\n         *\n         *  SC: O(1)\n         */\n\n        auto a = headA;\n        auto b = headB;\n\n        int la = 0;\n        while (a) {\n            ++la;\n            a = a->next;\n        }\n\n        int lb = 0;\n        while (b) {\n            ++lb;\n            b = b->next;\n        }\n\n        a = headA;\n        b = headB;\n\n        while (la > lb) {\n            a = a->next;\n            --la;\n        }\n        while (lb > la) {\n            b = b->next;\n            --lb;\n        }\n\n        while (a != b) {\n            a = a->next;\n            b = b->next;\n        }\n\n        return a;\n    }\n};\n\n"},"Linked List/Copy List with Random Pointer.html":{"url":"Linked List/Copy List with Random Pointer.html","title":"Copy List with Random Pointer","keywords":"","body":"Problem\nLeetCode 138. Copy List with Random Pointer\nhttps://leetcode.com/problems/copy-list-with-random-pointer\nSolution\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n\n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         *\n         *      A -> B -> C -> ...\n         *\n         *  Step 1. Generate a replicated node for each node and put that copy\n         *  behind the original node.\n         *\n         *      A -> A+ -> B -> B+ -> C -> C+ -> ...\n         *\n         *  Step 2. For an orignal node, follow its random pointer.\n         *  Then, the node next to the pointed node would be the one that the\n         *  random pointer of the replicated node should point to.\n         *\n         *        random\n         *      A ------> C -> C+\n         *   => A+ -> C+\n         *\n         *      -----------------------\n         *      |                     |\n         *      |                     v\n         *      A -> A+ -> B -> B+ -> C -> C+ -> ...\n         *           |                      ^\n         *           |                      |\n         *           ------------------------\n         *\n         *  Step 3. Finally, we need to split the replicated list and the\n         *  original list.\n         */\n\n        if (!head) {\n            return nullptr;\n        }\n\n        auto curr = head;\n        while (curr) {\n            auto clone = new Node(curr->val);\n            clone->next = curr->next;\n            curr->next = clone;\n            curr = clone->next;\n        }\n\n        curr = head;\n        while (curr) {\n            auto clone = curr->next;\n            if (curr->random) {\n                clone->random = curr->random->next;\n            }\n            curr = clone->next;\n        }\n\n        curr = head;\n        auto res = curr->next;\n\n        while (curr) {\n            auto clone = curr->next;\n            curr->next = clone->next;\n            if (clone->next) {\n                clone->next = clone->next->next;\n            }\n            curr = curr->next;\n        }\n\n        return res;\n    }\n};\n\n"},"Linked List/Insert into a Cyclic Sorted List.html":{"url":"Linked List/Insert into a Cyclic Sorted List.html","title":"Insert into a Cyclic Sorted List","keywords":"","body":"Problem\nLeetCode 708. Insert into a Sorted Circular Linked List\nhttps://leetcode.com/problems/insert-into-a-sorted-circular-linked-list\nSolution\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* next;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n        next = NULL;\n    }\n\n    Node(int _val, Node* _next) {\n        val = _val;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* insert(Node* head, int val) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         *\n         *  p    s\n         *  3 -> 4 -> 1\n         *\n         *       p    s\n         *  3 -> 4 -> 1\n         *\n         *  1. pred->val val\n         *  2. pred->val > succ->val\n         *      a. val val (minimum)\n         *      b. val >= pred->val (maximum)\n         *\n         *  3 all the node values are equal, but val is different:\n         *      1 -> 1 -> 1\n         *      val = 2\n         */\n\n        if (!head) {\n            auto node = new Node(val);\n            node->next = node;\n            return node;\n        }\n\n        auto pred = head;\n        auto succ = pred->next;\n\n        do {\n            if ((pred->val val) ||\n                (pred->val > succ->val && val val) ||\n                (pred->val > succ->val && pred->val next = node;\n                node->next = succ;\n                return head;\n            }\n\n            pred = succ;\n            succ = succ->next;\n        } while (pred != head);\n\n        auto node = new Node(val);\n        node->next = head->next;\n        head->next = node;\n        return head;\n    }\n};\n\n"},"Linked List/Linked List Cycle.html":{"url":"Linked List/Linked List Cycle.html","title":"Linked List Cycle","keywords":"","body":"Problem\nLeetCode 141. Linked List Cycle\nhttps://leetcode.com/problems/linked-list-cycle\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         */\n\n        if (!head) {\n            return false;\n        }\n\n        auto slow = head, fast = head;\n\n        while (fast->next && fast->next->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n            if (slow == fast) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n};\n\n"},"Linked List/Linked List Cycle II.html":{"url":"Linked List/Linked List Cycle II.html","title":"Linked List Cycle II","keywords":"","body":"Problem\nLeetCode 142. Linked List Cycle II\nhttps://leetcode.com/problems/linked-list-cycle-ii\nSolution\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(1)\n         *\n         *        a    X  b  Y\n         *  ------------------\n         *             |     |\n         *             |     |\n         *             |     |\n         *             -------\n         *           c\n         *\n         *  The starting point of the cycle is X\n         *  The tortoise and the hare meet at Y\n         *\n         *  The # of steps that the tortoise has taken is a + b\n         *  The # of steps that the hare has taken is a + b + c + b\n         *\n         *  The # of steps taken by the hare is twice the # of steps\n         *  taken by the tortoise\n         *\n         *  2 * (a + b) = a + b + c + b\n         *  => a + b = c + b\n         *  => a = c\n         *\n         */\n\n        if (!head) {\n            return nullptr;\n        }\n\n        auto slow = head, fast = head;\n        while (fast->next && fast->next->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n            if (slow == fast) {\n                break;\n            }\n        }\n\n        if (!fast->next || !fast->next->next) {\n            return nullptr;\n        }\n\n        slow = head;\n        while (slow != fast) {\n            slow = slow->next;\n            fast = fast->next;\n        }\n\n        return slow;\n    }\n};\n\n"},"General BFS/Clone Graph.html":{"url":"General BFS/Clone Graph.html","title":"Clone Graph","keywords":"","body":"Problem\nLeetCode 133. Clone Graph\nhttps://leetcode.com/problems/clone-graph\nSolution\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector();\n    }\n    Node(int _val, vector _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* cloneGraph(Node* node) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of nodes\n         *\n         *  SC: O(N)\n         */\n\n        if (!node) {\n            return nullptr;\n        }\n\n        unordered_map map;\n        map[node] = new Node(node->val);\n\n        queue q;\n        q.emplace(node);\n\n        unordered_set set;\n        set.emplace(node);\n\n        while (!q.empty()) {\n            auto src = q.front();\n            q.pop();\n\n            for (auto dst : src->neighbors) {\n                if (set.count(dst) == 0) {\n                    map[dst] = new Node(dst->val);\n                    q.emplace(dst);\n                    set.emplace(dst);\n                }\n                map[src]->neighbors.emplace_back(map[dst]);\n            }\n        }\n\n        return map[node];\n    }\n};\n\n"},"General BFS/The Maze.html":{"url":"General BFS/The Maze.html","title":"The Maze","keywords":"","body":"Problem\nLintCode 787. The Maze\nhttps://www.lintcode.com/problem/the-maze/description\nSolution\n\nstruct Record {\n    int x, y;\n\n    Record(int x, int y)\n      : x(x), y(y)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n      : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    /**\n     * @param maze: the maze\n     * @param start: the start\n     * @param destination: the destination\n     * @return: whether the ball could stop at the destination\n     */\n    bool hasPath(vector> &maze, vector &start, vector &destination) {\n        // write your code here\n\n        int num_r = maze.size();\n        if (num_r == 0) {\n            return false;\n        }\n\n        int num_c = maze[0].size();\n        if (num_c == 0) {\n            return false;\n        }\n\n        std::vector>\n            visit(num_r, std::vector(num_c, false));\n        visit[start[0]][start[1]] = true;\n\n        std::queue queue;\n        queue.push(Record(start[0], start[1]));\n\n        while (!queue.empty()) {\n\n            auto rec = queue.front();\n            queue.pop();\n\n            int x = rec.x;\n            int y = rec.y;\n\n            for (const auto& direct : directs) {\n                int nx = x + direct[0];\n                int ny = y + direct[1];\n\n                while ((nx >= 0 && ny >= 0 && nx > directs;\n};\n\n"},"General BFS/The Maze II.html":{"url":"General BFS/The Maze II.html","title":"The Maze II","keywords":"","body":"Problem\nLeetCode 505. The Maze II\nhttps://leetcode.com/problems/the-maze-ii/\nSolution\n\nstruct Record {\n    int x;\n    int y;\n    int dist;\n\n    Record(int x, int y, int dist)\n        : x(x), y(y), dist(dist)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    int shortestDistance(vector>& maze, vector& start, vector& end) {\n\n        int m = maze.size();\n        if (m == 0) {\n            return 0;\n        }\n\n        int n = maze[0].size();\n        if (n == 0) {\n            return 0;\n        }\n\n        queue queue;\n        queue.emplace(start[0], start[1], 0);\n\n        vector> dp(m, vector(n, INT_MAX));\n        dp[start[0]][start[1]] = 0;\n\n        while (!queue.empty()) {\n            int size = queue.size();\n\n            for (int i = 0 ; i = 0 && ny >= 0 && nx > directs;\n};\n\n"},"General BFS/Shortest Path in a Grid with Obstacles Elimination.html":{"url":"General BFS/Shortest Path in a Grid with Obstacles Elimination.html","title":"Shortest Path in a Grid with Obstacles Elimination","keywords":"","body":"Problem\nLeetCode 1293. Shortest Path in a Grid with Obstacles Elimination\nhttps://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    int shortestPath(vector>& grid, int k) {\n\n        int m = grid.size();\n        int n = grid[0].size();\n\n        vector> dp(m, vector(n, INT_MAX));\n\n        queue> q;\n        q.emplace(0, 0, 0);\n\n        int step = 0;\n\n        while (!q.empty()) {\n            int size = q.size();\n\n            for (int i = 0 ; i = 0 && ny >= 0 && nx  k || no >= dp[nx][ny]) {\n                        continue;\n                    }\n\n                    dp[nx][ny] = no;\n                    q.emplace(nx, ny, no);\n                }\n            }\n\n            ++step;\n        }\n\n        return -1;\n    }\n\nprivate:\n    vector> directs;\n};\n\n"},"General BFS/Minimum Knight Moves.html":{"url":"General BFS/Minimum Knight Moves.html","title":"Minimum Knight Moves","keywords":"","body":"Problem\nLeetCode 1197. Minimum Knight Moves\nhttps://leetcode.com/problems/minimum-knight-moves/\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs(\n            {{1, 2},\n             {2, 1},\n             {2, -1},\n             {1, -2},\n             {-1, -2},\n             {-2, -1},\n             {-2, 1},\n             {-1, 2}})\n    { }\n\n    int minKnightMoves(int tx, int ty) {\n\n        /**\n         *  TC: O(|X| * |Y|), where\n         *      |X| is the x index in the first quadrant\n         *      |Y| is the y index in the first quadrant\n         *\n         *  SC: O(|X| * |Y|)\n         */\n\n        if (tx == 0 && ty == 0) {\n            return 0;\n        }\n\n        tx = abs(tx);\n        ty = abs(ty);\n\n        unordered_set visit;\n        visit.emplace(0);\n\n        queue> q;\n        q.push({0, 0});\n\n        int level = 0;\n\n        while (!q.empty()) {\n            int size = q.size();\n            ++level;\n\n            for (int i = 0 ; i = -1 && ny >= -1) || visit.count(np) == 1) {\n                        continue;\n                    }\n\n                    if (nx == tx && ny == ty) {\n                        return level;\n                    }\n\n                    q.push({nx, ny});\n                    visit.emplace(np);\n                }\n            }\n        }\n\n        // Should never reach here.\n        return -1;\n    }\n\nprivate:\n    static const int dim = 1e4;\n\n    vector> directs;\n};\n\n"},"BFS with State Encoding/Open the Lock.html":{"url":"BFS with State Encoding/Open the Lock.html","title":"Open the Lock","keywords":"","body":"Problem\nLeetCode 752. Open the Lock\nhttps://leetcode.com/problems/open-the-lock\nSolution\nclass Solution {\npublic:\n    int openLock(vector& deadends, string target) {\n\n        /**\n         *  TC: O(N * D^N + S), where\n         *      N is the length of the lock\n         *      D is the number of digits\n         *      S is the cost to convert deadend vector to set\n         *\n         *  So, we need to enumerate D^N combinations. Per each iteration, when\n         *  generating new neighbors, the cost is O(N).\n         *\n         *  SC: O(D^N + S)\n         */\n\n        if (target == \"0000\") {\n            return 0;\n        }\n\n        unordered_set visit(deadends.begin(), deadends.end());\n        if (visit.count(\"0000\") == 1 || visit.count(target) == 1) {\n            return -1;\n        }\n        visit.emplace(\"0000\");\n\n        queue q;\n        q.emplace(\"0000\");\n\n        int level = 0;\n\n        while (!q.empty()) {\n            int n = q.size();\n            ++level;\n\n            for (int i = 0 ; i \n"},"BFS with State Encoding/Sliding Puzzle.html":{"url":"BFS with State Encoding/Sliding Puzzle.html","title":"Sliding Puzzle","keywords":"","body":"Problem\nLeetCode 773. Sliding Puzzle\nhttps://leetcode.com/problems/sliding-puzzle\nSolution\nstruct Record {\n    int x, y;\n    string code;\n\n    Record(int x, int y, const string& code)\n        : x(x), y(y), code(code)\n    { }\n};\n\n\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    int slidingPuzzle(vector>& board) {\n\n        /**\n         *  TC: O(N!), where\n         *      N is the number of tiles\n         *\n         *  SC: O(N!)\n         */\n\n        auto zero = findZero(board);\n        auto code = encode(board);\n\n        if (code == \"123450\") {\n            return 0;\n        }\n\n        queue q;\n        q.emplace(zero.first, zero.second, code);\n\n        unordered_set visit;\n        visit.emplace(move(code));\n\n        int level = 0;\n\n        while (!q.empty()) {\n            int n = q.size();\n            ++level;\n\n            for (int i = 0 ; i = 0 && ny >= 0 && nx > directs;\n\n    string encode(const vector>& board) {\n        string code(6, 0);\n        code[0] = board[0][0] + '0';\n        code[1] = board[0][1] + '0';\n        code[2] = board[0][2] + '0';\n        code[3] = board[1][0] + '0';\n        code[4] = board[1][1] + '0';\n        code[5] = board[1][2] + '0';\n        return code;\n    }\n\n    pair findZero(const vector>& board) {\n        if (board[0][0] == 0) {\n            return {0, 0};\n        }\n        if (board[0][1] == 0) {\n            return {0, 1};\n        }\n        if (board[0][2] == 0) {\n            return {0, 2};\n        }\n        if (board[1][0] == 0) {\n            return {1, 0};\n        }\n        if (board[1][1] == 0) {\n            return {1, 1};\n        }\n        if (board[1][2] == 0) {\n            return {1, 2};\n        }\n        return {-1, -1};\n    }\n};\n\n"},"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html":{"url":"BFS with State Encoding/Minimum Number of Flips to Convert Binary Matrix to Zero Matrix.html","title":"Minimum Number of Flips to Convert Binary Matrix to Zero Matrix","keywords":"","body":"Problem\nLeetCode 1284. Minimum Number of Flips to Convert Binary Matrix to Zero Matrix\nhttps://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    int minFlips(vector>& mat) {\n\n        /**\n         *  TC: O(2 ^ (M * N)), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *\n         *  SC: O(2 ^ (M * N))\n         */\n\n        int m = mat.size();\n        int n = mat[0].size();\n        vector visit(1  q;\n        q.emplace(code);\n\n        int level = 0;\n\n        while (!q.empty()) {\n            int size = q.size();\n            ++level;\n\n            for (int i = 0 ; i > directs;\n\n    int flip(int code, int m, int n, int x, int y) {\n\n        for (const auto& d : directs) {\n            int nx = x + d[0];\n            int ny = y + d[1];\n\n            if (!(nx >= 0 && ny >= 0 && nx >& mat, int m, int n) {\n        int code = 0;\n\n        for (int i = 0 ; i \n"},"General DFS/N Queens.html":{"url":"General DFS/N Queens.html","title":"N Queens","keywords":"","body":"Problem\nLeetCode 51. N-Queens\nhttps://leetcode.com/problems/n-queens\nSolution\nclass Solution {\npublic:\n    vector> solveNQueens(int n) {\n\n        /**\n         *  TC: O(N!), where\n         *      N is the board size\n         *\n         *  SC: O(N)\n         */\n\n        vector> ans;\n        vector queens;\n        backTracking(0, n, queens, ans);\n        return ans;\n    }\n\nprivate:\n    void backTracking(\n            int c, int n,\n            vector& queens,\n            vector>& ans) {\n\n        if (c == n) {\n            vector config(n, string(n, '.'));\n            for (int c = 0 ; c \n"},"General DFS/Letter Combinations of a Phone Number.html":{"url":"General DFS/Letter Combinations of a Phone Number.html","title":"Letter Combination of a Phone Number","keywords":"","body":"Problem\nLintCode 425. Letter Combinations of a Phone Number\nhttps://www.lintcode.com/problem/letter-combinations-of-a-phone-number/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({\n          {'2', {'a', 'b', 'c'}},\n          {'3', {'d', 'e', 'f'}},\n          {'4', {'g', 'h', 'i'}},\n          {'5', {'j', 'k', 'l'}},\n          {'6', {'m', 'n', 'o'}},\n          {'7', {'p', 'q', 'r', 's'}},\n          {'8', {'t', 'u', 'v'}},\n          {'9', {'w', 'x', 'y', 'z'}}\n      })\n    { }\n\n    vector letterCombinations(string digits) {\n\n        /**\n         *  TC: O(4^N), where\n         *      N is the string length\n         *\n         *  SC: O(N)\n         */\n\n        int n = digits.length();\n        if (n == 0) {\n            return {};\n        }\n\n        string config;\n        vector ans;\n\n        runBacktracking(0, n, digits, config, ans);\n        return ans;\n    }\n\nprivate:\n    void runBacktracking(\n            int i, int n,\n            const string& digits,\n            string& config,\n            vector& ans) {\n\n        if (i == n) {\n            ans.push_back(config);\n            return;\n        }\n\n        for (char alphabet : map[digits[i]]) {\n            config.push_back(alphabet);\n            runBacktracking(i + 1, n, digits, config, ans);\n            config.pop_back();\n        }\n    }\n\nprivate:\n    unordered_map> map;\n};\n\n"},"General DFS/Sudoku Solver.html":{"url":"General DFS/Sudoku Solver.html","title":"Sudoku Solver","keywords":"","body":"Problem\nLeetCode 37. Sudoku Solver\nhttps://leetcode.com/problems/sudoku-solver\nSolution\nclass Solution {\npublic:\n    void solveSudoku(vector>& board) {\n\n        /**\n         *  TC: O(9 ^ (M * N)), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *\n         *  SC: O(M * N)\n         */\n\n        vector> rows(9, vector(10));\n        vector> cols(9, vector(10));\n        vector> mats(9, vector(10));\n\n        for (int i = 0 ; i >& board,\n            int x, int y, int m, int n,\n            vector>& rows,\n            vector>& cols,\n            vector>& mats) {\n\n        if (x == m && y == 0) {\n            return true;\n        }\n\n        int nx = x;\n        int ny = y + 1;\n        if (ny == n) {\n            ny = 0;\n            ++nx;\n        }\n\n        if (board[x][y] != '.') {\n            return backTracking(board, nx, ny, m, n, rows, cols, mats);\n        }\n\n        for (int i = 1 ; i \n"},"General DFS/Palindrome Partitioning.html":{"url":"General DFS/Palindrome Partitioning.html","title":"Palindrome Partitioning","keywords":"","body":"Problem\nLeetCode 131. Palindrome Partitioning\nhttps://leetcode.com/problems/palindrome-partitioning\nSolution\nclass Solution {\npublic:\n    vector> partition(string s) {\n\n        /**\n         *  TC: O(N * (2^N)), where\n         *      N is the string length\n         *\n         *  SC: O(N^2)\n         */\n\n        int n = s.length();\n        vector> palin(n, vector(n));\n\n        for (int i = 0 ; i  config;\n        vector> ans;\n        helper(0, s.length(), s, palin, config, ans);\n        return ans;\n    }\n\nprivate:\n    void helper(\n            int bgn, int end,\n            const string& s,\n            vector>& palin,\n            vector& config,\n            vector>& ans) {\n\n        if (bgn == end) {\n            ans.emplace_back(config);\n            return;\n        }\n\n        for (int i = bgn; i \n"},"General DFS/Remove Invalid Parentheses.html":{"url":"General DFS/Remove Invalid Parentheses.html","title":"Remove Invalid Parentheses","keywords":"","body":"Problem\nLeetCode 301. Remove Invalid Parentheses\nhttps://leetcode.com/problems/remove-invalid-parentheses\nSolution\nclass Solution {\npublic:\n    vector removeInvalidParentheses(string s) {\n\n        /**\n         *  TC: O(2^N), where\n         *       N is the string length\n         *\n         *  SC: O(N)\n         */\n\n        int l = 0, r = 0;\n        for (char ch : s) {\n            if (ch == '(') {\n                ++l;\n            } else if (ch == ')') {\n                if (l > 0) {\n                    --l;\n                } else {\n                    ++r;\n                }\n            }\n        }\n\n        vector ans;\n        backTracking(s, 0, s.length(), l, r, ans);\n        return ans;\n    }\n\nprivate:\n    bool isValid(const string& s) {\n\n        int l = 0, r = 0;\n        for (char ch : s) {\n            if (ch == '(') {\n                ++l;\n            } else if (ch == ')') {\n                if (l > 0) {\n                    --l;\n                } else {\n                    ++r;\n                }\n            }\n        }\n        return l == 0 && r == 0;\n    }\n\n    void backTracking(\n            const string& s,\n            int bgn, int end, int l, int r,\n            vector& ans) {\n\n        if (l == 0 && r == 0) {\n            if (isValid(s)) {\n                ans.push_back(s);\n            }\n            return;\n        }\n\n        for (int i = bgn ; i  \"()\" \"()\"\n            if (i > bgn && s[i] == s[i - 1]) {\n                continue;\n            }\n\n            if (s[i] == '(' && l > 0) {\n                auto copy(s);\n                copy.erase(i, 1);\n                backTracking(copy, i, end - 1, l - 1, r, ans);\n            }\n            if (s[i] == ')' && r > 0) {\n                auto copy(s);\n                copy.erase(i, 1);\n                backTracking(copy, i, end - 1, l, r - 1, ans);\n            }\n        }\n    }\n};\n\n"},"General DFS/Reconstruct Itinerary.html":{"url":"General DFS/Reconstruct Itinerary.html","title":"Reconstruct Itinerary","keywords":"","body":"Problem\nLeetCode 332. Reconstruct Itinerary\nhttps://leetcode.com/problems/reconstruct-itinerary\nSolution\nclass Solution {\npublic:\n    vector findItinerary(vector>& tickets) {\n\n        /**\n         *  TC: O(D ^ E), where\n         *      D is the averaged number of outgoing flight from a city\n         *      E is the number of flights\n         *\n         *  SC: O(V + E), where\n         *      V is the number of cities\n         */\n\n        unordered_map>> graph;\n        int n = tickets.size();\n\n        for (const auto& ticket : tickets) {\n            const auto& s = ticket[0];\n            const auto& t = ticket[1];\n            graph[s].push_back({t, false});\n        }\n\n        for (auto& pair : graph) {\n            auto& edges = pair.second;\n            sort(edges.begin(), edges.end());\n        }\n\n        vector seq;\n        seq.push_back(\"JFK\");\n        dfs(0, n, \"JFK\", graph, seq);\n        return seq;\n    }\n\nprivate:\n    bool dfs(\n        int count, int n,\n        const string& src,\n        unordered_map>>& graph,\n        vector& seq) {\n\n        if (count == n) {\n            return true;\n        }\n\n        for (auto& edge : graph[src]) {\n            if (edge.second) {\n                continue;\n            }\n\n            edge.second = true;\n            seq.push_back(edge.first);\n\n            bool res = dfs(count + 1, n, edge.first, graph, seq);\n            if (res) {\n                return true;\n            }\n\n            seq.pop_back();\n            edge.second = false;\n        }\n\n        return false;\n    }\n};\n\n"},"General DFS/Unique Path III.html":{"url":"General DFS/Unique Path III.html","title":"Unique Path III","keywords":"","body":"Problem\nLeetCode 980. Unique Paths III\nhttps://leetcode.com/problems/unique-paths-iii/\nSolution\nclass Solution {\npublic:\n    Solution()\n        : directs({{1, 0}, {-1, 0}, {0, 1}, {0, -1}})\n    { }\n\n    int uniquePathsIII(vector>& grid) {\n\n        /**\n         *  TC: O(3 ^ (M * N)), where\n         *      M is the number of rows\n         *      N is the number of columns\n         *\n         *  SC: O(M * N)\n         */\n\n        int m = grid.size();\n        int n = grid[0].size();\n\n        int k = 0;\n        for (int i = 0 ; i > directs;\n\n    void backTracking(\n            vector>& grid,\n            int r, int c, int m, int n,\n            int pc, int k, int& ans) {\n\n        if (grid[r][c] == 2 && pc == k) {\n            ++ans;\n            return;\n        }\n\n        int backup = grid[r][c];\n        grid[r][c] = -1;\n\n        for (const auto& d : directs) {\n            int nr = r + d[0];\n            int nc = c + d[1];\n\n            if (!(nr >= 0 && nc >= 0 && nr \n"},"Combination DFS/Subsets.html":{"url":"Combination DFS/Subsets.html","title":"Subsets","keywords":"","body":"Problem\nLeetCode 78. Subsets\nhttps://leetcode.com/problems/subsets\nSolution\nclass Solution {\npublic:\n    vector> subsets(vector& nums) {\n\n        /**\n         *  TC: O(N * 2^N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         */\n\n        vector conf;\n        vector> ans;\n\n        int n = nums.size();\n        for (int i = 0 ; i & nums,\n            int bgn, int end, int c, int n,\n            vector& conf,\n            vector>& ans) {\n\n        if (c == n) {\n            ans.push_back(conf);\n            return;\n        }\n\n        for (int i = bgn ; i \n"},"Combination DFS/Subsets II.html":{"url":"Combination DFS/Subsets II.html","title":"Subsets II","keywords":"","body":"Problem\nLeetCode 90. Subsets II\nhttps://leetcode.com/problems/subsets-ii\nSolution\nclass Solution {\npublic:\n    vector> subsetsWithDup(vector& nums) {\n\n        /**\n         *  TC: O(N * 2^N), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         */\n\n        sort(nums.begin(), nums.end());\n\n        vector conf;\n        vector> ans;\n\n        int n = nums.size();\n        for (int i = 0 ; i & nums,\n            int bgn, int end, int c, int n,\n            vector& conf,\n            vector>& ans) {\n\n        if (c == n) {\n            ans.push_back(conf);\n            return;\n        }\n\n        for (int i = bgn ; i  bgn && nums[i] == nums[i - 1]) {\n                continue;\n            }\n\n            conf.emplace_back(nums[i]);\n            backTracking(nums, i + 1, end, c + 1, n, conf, ans);\n            conf.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/Combination Sum.html":{"url":"Combination DFS/Combination Sum.html","title":"Combination Sum","keywords":"","body":"Problem\nLeetCode 39. Combination Sum\nhttps://leetcode.com/problems/combination-sum\nSolution\nclass Solution {\npublic:\n    vector> combinationSum(vector& nums, int target) {\n\n        /**\n         *  TC: O(N * 2^N), where\n         *      N is the number elements\n         *\n         *  SC: O(N)\n         */\n\n        sort(nums.begin(), nums.end());\n\n        vector conf;\n        vector> ans;\n\n        backTracking(nums, 0, nums.size(), target, conf, ans);\n        return ans;\n    }\n\nprivate:\n    void backTracking(\n            const vector& nums,\n            int bgn, int end, int target,\n            vector& conf,\n            vector>& ans) {\n\n        if (target == 0) {\n            ans.emplace_back(conf);\n            return;\n        }\n\n        for (int i = bgn ; i  target) {\n                break;\n            }\n\n            conf.emplace_back(nums[i]);\n            backTracking(nums, i, end, target - nums[i], conf, ans);\n            conf.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/Combination Sum II.html":{"url":"Combination DFS/Combination Sum II.html","title":"Combination Sum II","keywords":"","body":"Problem\nLeetCode 40. Combination Sum II\nhttps://leetcode.com/problems/combination-sum-ii\nSolution\nclass Solution {\npublic:\n    vector> combinationSum2(vector& nums, int target) {\n\n        /**\n         *  TC: O(N * 2^N), where\n         *      N is the number elements\n         *\n         *  SC: O(N)\n         */\n\n        sort(nums.begin(), nums.end());\n\n        vector conf;\n        vector> ans;\n\n        backTracking(nums, 0, nums.size(), target, conf, ans);\n        return ans;\n    }\n\nprivate:\n    void backTracking(\n            const vector& nums,\n            int bgn, int end, int target,\n            vector& conf,\n            vector>& ans) {\n\n        if (target == 0) {\n            ans.emplace_back(conf);\n            return;\n        }\n\n        for (int i = bgn ; i  target) {\n                break;\n            }\n\n            if (i > bgn && nums[i] == nums[i - 1]) {\n                continue;\n            }\n\n            conf.emplace_back(nums[i]);\n            backTracking(nums, i + 1, end, target - nums[i], conf, ans);\n            conf.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/Combination Sum III.html":{"url":"Combination DFS/Combination Sum III.html","title":"Combination Sum III","keywords":"","body":"Problem\nLeetCode 216. Combination Sum III\nhttps://leetcode.com/problems/combination-sum-iii\nSolution\nclass Solution {\npublic:\n    vector> combinationSum3(int k, int n) {\n\n        /**\n         *  TC: O(C(9, K)), where\n         *      K is the required amount of numbers\n         *\n         *  SC: O(K)\n         */\n\n        vector conf;\n        vector> ans;\n        backTracking(1, 10, 0, k, n, conf, ans);\n        return ans;\n    }\n\nprivate:\n    void backTracking(\n            int bgn, int end, int c, int k, int n,\n            vector& conf,\n            vector>& ans) {\n\n        if (c == k) {\n            if (n == 0) {\n                ans.emplace_back(conf);\n            }\n            return;\n        }\n\n        for (int i = bgn ; i  n) {\n                break;\n            }\n\n            conf.emplace_back(i);\n            backTracking(i + 1, end, c + 1, k, n - i, conf, ans);\n            conf.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/K Sum II.html":{"url":"Combination DFS/K Sum II.html","title":"K Sum II","keywords":"","body":"Problem\nLintCode 90. K Sum II\nhttps://www.lintcode.com/problem/k-sum-ii/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param A: an integer array\n     * @param k: a postive integer > kSumII(vector &cands, int k, int target) {\n        // write your code here\n\n        int n = cands.size();\n        if (n == 0) {\n            return {};\n        }\n\n        std::sort(cands.begin(), cands.end());\n\n        std::vector collect;\n        std::vector> ans;\n        runBackTracking(cands, 0, n, 0, k, target, collect, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            const std::vector& cands,\n            int index, int bound, int depth, int k,\n            int target,\n            std::vector& collect,\n            std::vector>& ans) {\n\n        if (depth == k) {\n            if (target == 0) {\n                ans.push_back(collect);\n            }\n            return;\n        }\n\n        for (int i = index ; i  target) {\n                break;\n            }\n\n            collect.push_back(cands[i]);\n            runBackTracking(\n                cands, i + 1, bound, depth + 1, k, target - cands[i], collect, ans);\n            collect.pop_back();\n        }\n    }\n};\n\n"},"Combination DFS/Split String.html":{"url":"Combination DFS/Split String.html","title":"Split String","keywords":"","body":"Problem\nLintCode 680. Split String\nhttps://www.lintcode.com/problem/split-string/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param : a string to be split\n     * @return: all possible split string array\n     */\n    vector> splitString(string& s) {\n        // write your code here\n\n        int n = s.length();\n        if (n == 0) {\n            return {{}};\n        }\n\n        std::vector collect;\n        std::vector> ans;\n        runBackTracking(s, 0, n, collect, ans);\n\n        return ans;\n    }\n\nprivate:\n    void runBackTracking(\n            const std::string& str,\n            int index, int bound,\n            std::vector& collect,\n            std::vector>& ans) {\n\n        if (index == bound) {\n            ans.push_back(collect);\n            return;\n        }\n\n        auto token = str.substr(index, 1);\n        collect.push_back(token);\n        runBackTracking(str, index + 1, bound, collect, ans);\n        collect.pop_back();\n\n        if (index + 1 \n"},"Permutation DFS/Permutations.html":{"url":"Permutation DFS/Permutations.html","title":"Permutations","keywords":"","body":"Problem\nLeetCode 46. Permutations\nhttps://leetcode.com/problems/permutations\nSolution\nclass Solution {\npublic:\n    vector> permute(vector& nums) {\n\n        /**\n         *  TC: O(N * N!), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         */\n\n        int n = nums.size();\n        vector visit(n);\n        vector config;\n        vector> ans;\n\n        backTracking(nums, 0, n, visit, config, ans);\n        return ans;\n    }\n\nprivate:\n    void backTracking(\n            const vector& nums, int c, int n,\n            vector& visit,\n            vector& config,\n            vector>& ans) {\n\n        if (c == n) {\n            ans.push_back(config);\n            return;\n        }\n\n        for (int i = 0 ; i \n"},"Permutation DFS/Permutations II.html":{"url":"Permutation DFS/Permutations II.html","title":"Permutations II","keywords":"","body":"Problem\nLeetCode 47. Permutations II\nhttps://leetcode.com/problems/permutations-ii\nSolution\nclass Solution {\npublic:\n    vector> permuteUnique(vector& nums) {\n\n        /**\n         *  TC: O(N * N!), where\n         *      N is the number of elements\n         *\n         *  SC: O(N)\n         */\n\n        sort(nums.begin(), nums.end());\n\n        int n = nums.size();\n        vector visit(n);\n        vector conf;\n        vector> ans;\n\n        backTracking(nums, 0, n, visit, conf, ans);\n        return ans;\n    }\n\nprivate:\n    void backTracking(\n            const vector& nums, int c, int n,\n            vector& visit,\n            vector& conf,\n            vector>& ans) {\n\n        if (c == n) {\n            ans.emplace_back(conf);\n            return;\n        }\n\n        for (int i = 0 ; i  0 && nums[i] == nums[i - 1] && !visit[i - 1]) {\n                continue;\n            }\n\n            visit[i] = true;\n            conf.emplace_back(nums[i]);\n\n            backTracking(nums, c + 1, n, visit, conf, ans);\n\n            conf.pop_back();\n            visit[i] = false;\n        }\n    }\n};\n\n"},"Permutation DFS/Next Permutation.html":{"url":"Permutation DFS/Next Permutation.html","title":"Next Permutation","keywords":"","body":"Problem\nLeetCode 31. Next Permutation\nhttps://leetcode.com/problems/next-permutation\nSolution\nclass Solution {\npublic:\n    void nextPermutation(vector& nums) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(1)\n         *\n         *  From right to left, the numbers are sorted in\n         *  monotonous non-decreasing order\n         *\n         *        turning point\n         *          |\n         *          v\n         *      1 2 5 4 3 1\n         *          ^^^^^^^\n         *\n         *      1 3 4 5 2 1\n         *          ^^^^^^^\n         *                   Reverse the right portion\n         *      1 3 1 2 4 5\n         *          ^^^^^^^\n         */\n\n        int n = nums.size();\n\n        // Find the turning point.\n        int i;\n        for (i = n - 1 ; i > 0 ; --i) {\n            if (nums[i - 1]  i ; --j) {\n            if (nums[j] > nums[i]) {\n                break;\n            }\n        }\n\n        // Swap the two numbers.\n        swap(nums[i], nums[j]);\n\n        // Revese the right-hand side.\n        reverse(nums.begin() + i + 1, nums.end());\n    }\n};\n\n"},"Permutation DFS/Previous Permutation With One Swap.html":{"url":"Permutation DFS/Previous Permutation With One Swap.html","title":"Previous Permutation With One Swap","keywords":"","body":"Problem\nLintCode 1053. Previous Permutation With One Swap\nhttps://leetcode.com/problems/previous-permutation-with-one-swap/\nSolution\nclass Solution {\npublic:\n    vector prevPermOpt1(vector& A) {\n\n        int n = A.size();\n        int l = n - 2;\n        while (l >= 0 && A[l + 1] >= A[l]) {\n            --l;\n        }\n\n        // The smallest permutation.\n        if (l == -1) {\n            return A;\n        }\n\n        int r = 0;\n        int num = -1;\n        for (int i = n - 1 ; i > l ; --i) {\n            if (A[i] >= num && A[i] \n"},"Permutation DFS/Next Closest Time.html":{"url":"Permutation DFS/Next Closest Time.html","title":"Next Closest Time","keywords":"","body":"Problem\nLintCode 862. Next Closest Time\nhttps://www.lintcode.com/problem/next-closest-time/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param time: the given time\n     * @return: the next closest time\n     */\n    string nextClosestTime(string &time) {\n        // write your code here\n\n        std::vector pool;\n        pool.push_back(time[0] - '0');\n        pool.push_back(time[1] - '0');\n        pool.push_back(time[3] - '0');\n        pool.push_back(time[4] - '0');\n\n        int timestamp =\n            (pool[0] * 10 + pool[1]) * 60 + (pool[2] * 10 + pool[3]);\n\n        std::vector config;\n        std::vector opt(pool);\n        int diff = INT_MAX;\n\n        runBackTracking(pool, 0, 4, timestamp, diff, config, opt);\n\n        std::stringstream stream;\n        stream & pool,\n            int depth, int bound,\n            int timestamp,\n            int& diff,\n            std::vector& config,\n            std::vector& opt) {\n\n        if (depth == bound) {\n            int hour = config[0] * 10 + config[1];\n            if (hour > 23) {\n                return;\n            }\n\n            int minute = config[2] * 10 + config[3];\n            if (minute > 59) {\n                return;\n            }\n\n            int new_timestamp = hour * 60 + minute;\n            if (new_timestamp > 1440) {\n                return;\n            }\n\n            if (new_timestamp == timestamp) {\n                return;\n            }\n\n            int new_diff;\n            if (new_timestamp > timestamp) {\n                new_diff = new_timestamp - timestamp;\n            } else {\n                new_diff = (1440 - timestamp) + new_timestamp;\n            }\n\n            if (new_diff \n"},"Interval Fundamental/Meeting Rooms.html":{"url":"Interval Fundamental/Meeting Rooms.html","title":"Meeting Rooms","keywords":"","body":"Problem\nLeetCode 252. Meeting Rooms\nhttps://leetcode.com/problems/meeting-rooms\nSolution\nclass Solution {\npublic:\n    bool canAttendMeetings(vector>& intervals) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of intervals\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         */\n\n        int n = intervals.size();\n        if (n == 0) {\n            return true;\n        }\n\n        sort(intervals.begin(), intervals.end());\n\n        for (int i = 1 ; i \n"},"Interval Fundamental/Non-overlapping Intervals.html":{"url":"Interval Fundamental/Non-overlapping Intervals.html","title":"Non-overlapping Intervals","keywords":"","body":"Problem\nLeetCode 435. Non-overlapping Intervals\nhttps://leetcode.com/problems/non-overlapping-intervals\nSolution\nclass Solution {\npublic:\n    int eraseOverlapIntervals(vector>& intervals) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of intervals\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         */\n\n        int n = intervals.size();\n        if (n == 1) {\n            return 0;\n        }\n\n        /**\n         *  Why not sorting using the starting point of each interval?\n         *\n         *  Counter Example:\n         *\n         *      |--- B ---|  |-- C --|\n         *\n         *    |---------- A ----------|\n         *\n         */\n\n        sort(intervals.begin(), intervals.end(),\n             [] (const auto& l, const auto& r) {\n                 return l[1] = pivot) {\n                pivot = intervals[i][1];\n            } else {\n                ++ans;\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Interval Fundamental/Merge Intervals.html":{"url":"Interval Fundamental/Merge Intervals.html","title":"Merge Intervals","keywords":"","body":"Problem\nLeetCode 56. Merge Intervals\nhttps://leetcode.com/problems/merge-intervals\nSolution\nclass Solution {\npublic:\n    vector> merge(vector>& intervals) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of intervals\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         */\n\n        sort(intervals.begin(), intervals.end());\n\n        vector> ans;\n        auto pivot = intervals[0];\n\n        int n = intervals.size();\n        for (int i = 1 ; i \n"},"Interval Fundamental/Insert Interval.html":{"url":"Interval Fundamental/Insert Interval.html","title":"Insert Interval","keywords":"","body":"Problem\nLintCode 30. Insert Interval\nhttps://www.lintcode.com/problem/insert-interval/description\nSolution\nclass Solution {\npublic:\n    vector> insert(vector>& intervals, vector& newInterval) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of intervals\n         *\n         *  SC: O(1) to O(N), depending on whether we extend the original vector\n         *                    when adding a new interval\n         */\n\n        auto it = intervals.begin();\n        while (it != intervals.end()) {\n            if ((*it)[0] >= newInterval[0]) {\n                break;\n            }\n            ++it;\n        }\n        intervals.insert(it, newInterval);\n\n        vector> ans;\n        auto pivot = intervals[0];\n\n        int n = intervals.size();\n        for (int i = 0 ; i \n"},"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html":{"url":"Interval Fundamental/Minimum Number of Arrows to Burst Balloons.html","title":"Minimum Number of Arrows to Burst Balloons","keywords":"","body":"Problem\nLeetCode 452. Minimum Number of Arrows to Burst Balloons\nhttps://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons\nSolution\nclass Solution {\npublic:\n    int eraseOverlapIntervals(vector>& intervals) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of intervals\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         *\n\n            [[10,16],[2,8],[1,6],[7,12]]\n\n                     ------------\n\n            -------\n               ----------\n                            --------\n            -----------------------------\n            1  2  6  7  8  10  12  16\n\n            Must sort the ballons using the ending point.\n\n            The counter example for sorting based on starting point.\n\n              -----    -----\n            -------------------\n\n            sorting based on starting point: 1 arrow (wrong)\n            sorting based on endint point: 2 arrows (correct)\n         */\n\n        sort(points.begin(), points.end(),\n             [] (const auto& l, const auto& r) {\n                return l[1]  last) {\n                ++ans;\n                last = points[i][1];\n            }\n        }\n\n        return ans;\n    }\n};\n\n"},"Interval Scheduling with Sweep Line/Meeting Rooms II.html":{"url":"Interval Scheduling with Sweep Line/Meeting Rooms II.html","title":"Meeting Rooms II","keywords":"","body":"Problem\nLeetCode 253. Meeting Rooms II\nhttps://leetcode.com/problems/meeting-rooms-ii\nSolution\nclass Solution {\npublic:\n    int minMeetingRooms(vector>& intervals) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of intervals\n         *\n         *  SC: O(logN) to O(N), depending on the underlying sorting algorithm\n         */\n\n        vector> events;\n\n        for (const auto& interval : intervals) {\n            events.push_back({interval[0], BGN});\n            events.push_back({interval[1], END});\n        }\n\n        sort(events.begin(), events.end());\n\n        int ans = 0;\n        int count = 0;\n        for (const auto& event : events) {\n            if (event.second == BGN) {\n                ++count;\n                ans = max(ans, count);\n            } else {\n                --count;\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    enum {\n        END = 0,\n        BGN\n    };\n};\n\n"},"My Calendar/My Calendar I.html":{"url":"My Calendar/My Calendar I.html","title":"My Calendar I","keywords":"","body":"Problem\nLeetCode 729. My Calendar I\nhttps://leetcode.com/problems/my-calendar-i\nSolution\nclass MyCalendar {\npublic:\n    MyCalendar() {\n\n    }\n\n    bool book(int start, int end) {\n\n        /**\n         *  TC: O(NlogN), where\n         *      N is the number of queries\n         *\n         *  SC: O(N)\n         *\n         *\n         *  case 1: Check upper bound\n         *\n         *      input\n         *      s1 |---------| e1\n         *\n         *        s2 |---------| e2\n         *\n         *      s2  overlap with the upper bound.\n         *\n         *  case 2: Check lower bound\n         *\n         *      intput\n         *      s1 |---------| e1\n         *\n         *    s2 |---------| e2\n         *\n         *      s1  overlap with the lower bound.\n         */\n\n        // Check the upper bound.\n        auto it = map.lower_bound(start);\n        if (it != map.end() && it->first second > start) {\n            return false;\n        }\n\n        map[start] = end;\n        return true;\n    }\n\nprivate:\n    map map;\n};\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar* obj = new MyCalendar();\n * bool param_1 = obj->book(start,end);\n */\n\n"},"My Calendar/My Calendar II.html":{"url":"My Calendar/My Calendar II.html","title":"My Calendar II","keywords":"","body":"Problem\nLeetCode 731. My Calendar II\nhttps://leetcode.com/problems/my-calendar-ii/\nSolution\nclass MyCalendarTwo {\npublic:\n    MyCalendarTwo() {\n\n    }\n\n    bool book(int start, int end) {\n\n        /**\n         *  TC: O(N^2), where\n         *      N is the number of queries\n         *\n         *  SC: O(N)\n         */\n\n        ++delta[start];\n        --delta[end];\n\n        int count = 0;\n\n        for (const auto& p : delta) {\n            count += p.second;\n            if (count > 2) {\n                --delta[start];\n                ++delta[end];\n                return false;\n            }\n        }\n\n        return true;\n    }\n\nprivate:\n    map delta;\n};\n\n/**\n * Your MyCalendarTwo object will be instantiated and called as such:\n * MyCalendarTwo* obj = new MyCalendarTwo();\n * bool param_1 = obj->book(start,end);\n */\n\n"},"My Calendar/My Calendar III.html":{"url":"My Calendar/My Calendar III.html","title":"My Calendar III","keywords":"","body":"Problem\nLeetCode 732. My Calendar III\nhttps://leetcode.com/problems/my-calendar-iii\nSolution\nclass MyCalendarThree {\npublic:\n    MyCalendarThree() {\n\n    }\n\n    int book(int start, int end) {\n\n        /**\n         *  TC: O(N^2), where\n         *      N is the number of queries\n         *\n         *  SC: O(N)\n         */\n\n        ++delta[start];\n        --delta[end];\n\n        int count = 0;\n        int ans = 0;\n\n        for (const auto& p : delta) {\n            count += p.second;\n            ans = max(ans, count);\n        }\n\n        return ans;\n    }\n\nprivate:\n    map delta;\n};\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * MyCalendarThree* obj = new MyCalendarThree();\n * int param_1 = obj->book(start,end);\n */\n\n"},"Topological Sort/Course Schedule.html":{"url":"Topological Sort/Course Schedule.html","title":"Course Schedule","keywords":"","body":"Problem\nLeetCode 207. Course Schedule\nhttps://leetcode.com/problems/course-schedule\nSolution\nclass Solution {\npublic:\n    bool canFinish(int numCourses, vector>& prerequisites) {\n\n        /**\n         * TC: O(V + E), where\n         *      V is the number of nodes\n         *      E is the number of edges\n         *\n         * SC: O(V + E)\n         */\n\n        unordered_map> graph;\n        unordered_map indeg;\n\n        for (const auto& p : prerequisites) {\n            int s = p[0], t = p[1];\n            ++indeg[t];\n            graph[s].emplace(t);\n        }\n\n        queue q;\n        for (int i = 0 ; i  order;\n\n        while (!q.empty()) {\n            int s = q.front();\n            q.pop();\n            order.emplace_back(s);\n\n            for (int d : graph[s]) {\n                --indeg[d];\n                if (indeg[d] == 0) {\n                    q.emplace(d);\n                }\n            }\n        }\n\n        return order.size() == numCourses;\n    }\n};\n\n"},"Topological Sort/Sequence Reconstruction.html":{"url":"Topological Sort/Sequence Reconstruction.html","title":"Sequence Reconstruction","keywords":"","body":"Problem\nLintCode 605. Sequence Reconstruction\nhttps://www.lintcode.com/problem/sequence-reconstruction/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param org: a permutation of the integers from 1 to n\n     * @param seqs: a list of sequences\n     * @return: true if it can be reconstructed only one or false\n     */\n    bool sequenceReconstruction(vector &org, vector> &seqs) {\n        // write your code here\n\n        std::unordered_map> graph;\n        std::unordered_map indegree;\n        int size = 0;\n\n        for (const auto& edge : seqs) {\n\n            // Note that each single sequence is not an edge or a pair of nodes.\n            int n = edge.size();\n            for (int i = 0 ; i  queue;\n        int count = 0;\n        for (int i = 1 ; i  order;\n\n        while (!queue.empty()) {\n            count = queue.size();\n\n            // Have multiple candidates for a specific level.\n            if (count > 1) {\n                return false;\n            }\n\n            for (int i = 0 ; i \n"},"Topological Sort/Alien Dictionary.html":{"url":"Topological Sort/Alien Dictionary.html","title":"Alien Dictionary","keywords":"","body":"Problem\nLeetCode 269. Alien Dictionary\nhttps://leetcode.com/problems/alien-dictionary/\nSolution\nclass Solution {\npublic:\n    string alienOrder(vector& words) {\n\n        /**\n         * TC: O(n * W), where\n         *      n is the number of words\n         *      W is the average length of a word\n         *\n         * SC: O(V + E), where\n         *      V is the number of nodes\n         *      E is the number of edges\n         */\n\n        int n = words.size();\n        unordered_map> graph;\n        unordered_map indeg;\n\n        for (const auto& word : words) {\n            for (char c : word) {\n                indeg[c] = 0;\n            }\n        }\n\n        for (int i = 1 ; i  dst.length()) {\n                return \"\";\n            }\n        }\n\n        // Run topological sort.\n        queue queue;\n        for (const auto& pair : indeg) {\n            if (pair.second == 0) {\n                queue.emplace(pair.first);\n            }\n        }\n\n        string ans;\n        while (!queue.empty()) {\n            char s = queue.front();\n            queue.pop();\n\n            ans.push_back(s);\n\n            for (char t : graph[s]) {\n                --indeg[t];\n                if (indeg[t] == 0) {\n                    queue.emplace(t);\n                }\n            }\n        }\n\n        return ans.length() == indeg.size() ? ans : \"\";\n    }\n};\n\n"},"Graph Theory Basics/Graph Valid Tree.html":{"url":"Graph Theory Basics/Graph Valid Tree.html","title":"Graph Valid Tree","keywords":"","body":"Problem\nLeetCode 261. Graph Valid Tree\nhttps://leetcode.com/problems/graph-valid-tree/solution\nSolution\n\nclass DSU {\npublic:\n    DSU(int n)\n        : n(n), parent(n) {\n\n        for (int i = 0 ; i  parent;\n};\n\n\nclass Solution {\npublic:\n    bool validTree(int n, vector>& edges) {\n\n        /**\n         *  TC: O(N * ack(N)), where\n         *      N is the number of nodes\n         *      ack(N) is the Ackerman function\n         *\n         *  SC: O(N)\n         *\n         *  We can use the data structure, disjoint set and union find, to check\n         *  if a graph is a valid tree. If the graph is a valid tree, it should\n         *  fulfill the following 2 requirements.\n         *\n         *   1. Suppose the number of nodes is n, then the number of edges\n         *      should be n - 1.\n         *\n         *   2. The graph has only one connected component.\n         */\n\n        int e = edges.size();\n        if (n != e + 1) {\n            return false;\n        }\n\n        DSU dsu(n);\n        for (const auto& edge : edges) {\n            dsu.merge(edge[0], edge[1]);\n        }\n\n        return dsu.query() == 1;\n    }\n};\n\n"},"Graph Theory Basics/Minimum Spanning Tree.html":{"url":"Graph Theory Basics/Minimum Spanning Tree.html","title":"Minimum Spanning Tree","keywords":"","body":"Problem\nLintCode 629. Minimum Spanning Tree\nhttps://www.lintcode.com/problem/minimum-spanning-tree/description\nSolution\n/**\n * Definition for a Connection.\n * class Connection {\n * public:\n *   string city1, city2;\n *   int cost;\n *   Connection(string& city1, string& city2, int cost) {\n *       this->city1 = city1;\n *       this->city2 = city2;\n *       this->cost = cost;\n * }\n */\n\n\nclass DisjointSet {\npublic:\n    DisjointSet(int n)\n      : parent(std::vector(n)) {\n\n        for (int i = 0 ; i  parent;\n};\n\n\nclass Solution {\npublic:\n    /**\n     * @param connections given a list of connections include two cities and cost\n     * @return a list of connections from results\n     */\n    vector lowestCost(vector& connections) {\n        // Write your code here\n\n        std::unordered_map name_2_id;\n\n        int id = 0;\n        for (const auto& edge : connections) {\n            const auto& src = edge.city1;\n            const auto& dst = edge.city2;\n\n            if (name_2_id.count(src) == 0) {\n                name_2_id[src] = id;\n                ++id;\n            }\n            if (name_2_id.count(dst) == 0) {\n                name_2_id[dst] = id;\n                ++id;\n            }\n        }\n\n        DisjointSet set(id);\n\n        std::sort(connections.begin(), connections.end(),\n            [](const auto& lhs, const auto& rhs) {\n            if (lhs.cost == rhs.cost) {\n                int order = lhs.city1.compare(rhs.city1);\n                if (order == 0) {\n                    return lhs.city2  ans;\n        for (auto& edge : connections) {\n            auto& src = edge.city1;\n            auto& dst = edge.city2;\n\n            int src_id = name_2_id[src];\n            int dst_id = name_2_id[dst];\n\n            if (set.is_same(src_id, dst_id)) {\n                continue;\n            }\n            set.unite(src_id, dst_id);\n\n            ans.push_back(Connection(src, dst, edge.cost));\n        }\n\n        return (ans.size() == id - 1) ? ans : std::vector();\n    }\n};\n\n"},"Simulation Puzzle/Missing Ranges.html":{"url":"Simulation Puzzle/Missing Ranges.html","title":"Missing Ranges","keywords":"","body":"Problem\nLintCode 641. Missing Ranges\nhttps://www.lintcode.com/problem/missing-ranges/description\nSolution\nclass Solution {\npublic:\n    /*\n     * @param nums: a sorted integer array\n     * @param lower: An integer\n     * @param upper: An integer\n     * @return: a list of its missing ranges\n     */\n    vector findMissingRanges(vector &nums, int lower, int upper) {\n        // write your code here\n\n        int n = nums.size();\n        if (n == 0) {\n            return {genRange(lower, upper)};\n        }\n\n        std::vector ans;\n\n        if (lower (nums[i]) - nums[i - 1];\n            if (diff  nums[n - 1]) {\n            ans.push_back(genRange(nums[n - 1] + 1, upper));\n        }\n\n        return ans;\n    }\n\nprivate:\n    std::string genRange(long bgn, long end) {\n\n        if (bgn == end) {\n            return std::to_string(bgn);\n        }\n\n        return std::to_string(bgn) + \"->\" + std::to_string(end);\n    }\n};\n\n"},"Simulation Puzzle/Integer to Roman.html":{"url":"Simulation Puzzle/Integer to Roman.html","title":"Integer to Roman","keywords":"","body":"Problem\nLintCode 418. Integer to Roman\nhttps://www.lintcode.com/problem/integer-to-roman/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({\n        {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"}, // 1    ~ 9\n        {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"}, // 10   ~ 90\n        {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}, // 100  ~ 900\n        {\"\", \"M\", \"MM\", \"MMM\"}                                        // 1000 ~ 3000\n      })\n    { }\n\n    string intToRoman(int num) {\n\n        return  map[3][num / 1000] +\n                map[2][(num % 1000) / 100] +\n                map[1][(num % 100) / 10] +\n                map[0][num % 10];\n    }\n\nprivate:\n    std::vector> map;\n};\n\n"},"Simulation Puzzle/Roman to Integer.html":{"url":"Simulation Puzzle/Roman to Integer.html","title":"Roman to Integer","keywords":"","body":"Problem\nLintCode 419. Roman to Integer\nhttps://www.lintcode.com/problem/roman-to-integer/description\nSolution\nclass Solution {\npublic:\n    Solution()\n      : map({\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L', 50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}\n      })\n    { }\n\n    /**\n     * @param s: Roman representation\n     * @return: an integer\n     */\n    int romanToInt(string &s) {\n        // write your code here\n\n        /**\n         * Let's scan the string from the tail to the head.\n         *\n         * 1. If the value of a Roman character is greater than or etual to  the\n         *    value of its predecessor, the accumulative sum is the value of the\n         *    predecessor added by the value of the current character.\n         *\n         *    e.g.: VI = 1 + 5 = 6\n         *          VIII = 1 + 1 + 1 + 5 = 8\n         *\n         * 2. If the value of a Roman character is less than the value of its\n         *    predecessor, the accumulative sum is the value of the predecessor\n         *    subtracted by the value of the current character.\n         *\n         *    e.g.: IV = 5 - 1 = 4\n         */\n\n        int n = s.length();\n\n        int sum = map[s[n - 1]];\n\n        for (int i = n - 2 ; i >= 0 ; --i) {\n            if (map[s[i]] >= map[s[i + 1]]) {\n                sum += map[s[i]];\n            } else {\n                sum -= map[s[i]];\n            }\n        }\n\n        return sum;\n    }\n\nprivate:\n    std::unordered_map map;\n};\n\n"},"Simulation Puzzle/Find the Celebrity.html":{"url":"Simulation Puzzle/Find the Celebrity.html","title":"Find the Celebrity","keywords":"","body":"Problem\nLintCode 645. Find the Celebrity\nhttps://www.lintcode.com/problem/find-the-celebrity/description\nSolution\n// Forward declaration of the knows API.\nbool knows(int a, int b);\n\nclass Solution {\npublic:\n    /**\n     * @param n a party with n people\n     * @return the celebrity's label or -1\n     */\n    int findCelebrity(int n) {\n        // Write your code here\n\n        /**\n         * knows(a, b)\n         *\n         * 1. true  -> a knows b -> a is not the celebrity.\n         * 2. false -> a does not know b -> b is not the celebrity.\n         */\n\n        int a = 0, b = n - 1;\n        while (a \n"},"Simulation Puzzle/Largest Number.html":{"url":"Simulation Puzzle/Largest Number.html","title":"Largest Number","keywords":"","body":"Problem\nLintCode 184. Largest Number\nhttps://www.lintcode.com/problem/largest-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param nums: A list of non negative integers\n     * @return: A string\n     */\n    string largestNumber(vector &nums) {\n        // write your code here\n\n        /**\n         * A: 65, B: 6\n         *\n         * A + B = 656\n         * B + A = 665\n         *\n         * B + A > A + B => B > A\n         */\n\n        std::unordered_map radixes;\n        for (int num : nums) {\n            if (radixes.count(num) == 1) {\n                continue;\n            }\n            int radix = (num > 0) ?\n                static_cast(std::floor(std::log10(num))) + 1 : 1;\n            radixes[num] = radix;\n        }\n\n        std::sort(nums.begin(), nums.end(),\n            [&] (const auto& a, const auto& b) {\n                long ab = a * static_cast(std::pow(10, radixes[b])) + b;\n                long ba = b * static_cast(std::pow(10, radixes[a])) + a;\n                return ab > ba;\n            }\n        );\n\n        std::string ans;\n        for (int num : nums) {\n            ans += std::to_string(num);\n        }\n\n        // For the case that the string content is 000...\n        if (ans[0] == '0') {\n            return \"0\";\n        }\n\n        return ans;\n    }\n};\n\n"},"Simulation Puzzle/Strobogrammatic Number.html":{"url":"Simulation Puzzle/Strobogrammatic Number.html","title":"Strobogrammatic Number","keywords":"","body":"Problem\nLintCode 644. Strobogrammatic Number\nhttps://www.lintcode.com/problem/strobogrammatic-number/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param num: a string\n     * @return: true if a number is strobogrammatic or false\n     */\n    bool isStrobogrammatic(string &num) {\n        // write your code here\n\n        std::string mirror;\n        for (char ch : num) {\n            switch (ch) {\n                case '6':\n                    mirror.push_back('9');\n                    break;\n                case '9':\n                    mirror.push_back('6');\n                    break;\n                case '0':\n                case '1':\n                case '8':\n                    mirror.push_back(ch);\n                    break;\n                default:\n                // Simply return false for the numbers including 2, 3, 4, 5, and 7.\n                    return false;\n            }\n        }\n\n        std::reverse(mirror.begin(), mirror.end());\n        return mirror == num;\n    }\n};\n\n"},"Simulation Puzzle/Sparse Matrix Multiplication.html":{"url":"Simulation Puzzle/Sparse Matrix Multiplication.html","title":"Sparse Matrix Multiplication","keywords":"","body":"Problem\nLintCode 654. Sparse Matrix Multiplication\nhttps://www.lintcode.com/problem/sparse-matrix-multiplication/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param A: a sparse matrix\n     * @param B: a sparse matrix\n     * @return: the result of A * B\n     */\n    vector> multiply(vector> &A, vector> &B) {\n        // write your code here\n\n        int m = A.size();\n        int n = A[0].size();\n        int t = B[0].size();\n\n        std::vector> nonzero(n, std::vector());\n        for (int i = 0 ; i > C(m, std::vector(t, 0));\n        for (int i = 0 ; i \n"},"Simulation Puzzle/Simplify Path.html":{"url":"Simulation Puzzle/Simplify Path.html","title":"Simplify Path","keywords":"","body":"Problem\nLintCode 421. Simplify Path\nhttps://www.lintcode.com/problem/simplify-path/description\nSolution\nclass Solution {\npublic:\n    /**\n     * @param path: the original path\n     * @return: the simplified path\n     */\n    string simplifyPath(string &path) {\n        // write your code here\n\n        std::vector tokens;\n\n        int n = path.length();\n        int i = 1;\n\n        while (i \n"},"Data Structure Design/Trie.html":{"url":"Data Structure Design/Trie.html","title":"Trie","keywords":"","body":"Problem\nLintCode 442. Implement Trie (Prefix Tree)\nhttps://www.lintcode.com/problem/implement-trie-prefix-tree/description\nSolution\n\nstruct TrieNode {\n    bool is_word;\n    std::unordered_map> branch;\n\n    TrieNode()\n      : is_word(false)\n    { }\n};\n\n\nclass Trie {\npublic:\n    Trie()\n      : root(std::make_shared()) {\n        // do intialization if necessary\n    }\n\n    /*\n     * @param word: a word\n     * @return: nothing\n     */\n    void insert(string &word) {\n        // write your code here\n\n        auto curr = root;\n\n        for (char ch : word) {\n            if (curr->branch.count(ch) == 0) {\n                curr->branch[ch] = std::make_shared();\n            }\n            curr = curr->branch[ch];\n        }\n\n        curr->is_word = true;\n    }\n\n    /*\n     * @param word: A string\n     * @return: if the word is in the trie.\n     */\n    bool search(string &word) {\n        // write your code here\n\n        auto curr = root;\n\n        for (char ch : word) {\n            if (curr->branch.count(ch) == 0) {\n                return false;\n            }\n            curr = curr->branch[ch];\n        }\n\n        return curr->is_word;\n    }\n\n    /*\n     * @param prefix: A string\n     * @return: if there is any word in the trie that starts with the given prefix.\n     */\n    bool startsWith(string &prefix) {\n        // write your code here\n\n        auto curr = root;\n\n        for (char ch : prefix) {\n            if (curr->branch.count(ch) == 0) {\n                return false;\n            }\n            curr = curr->branch[ch];\n        }\n\n        return true;\n    }\n\nprivate:\n    std::shared_ptr root;\n};\n\n"},"Data Structure Design/Insert Delete GetRandom.html":{"url":"Data Structure Design/Insert Delete GetRandom.html","title":"Insert Delete GetRandom O(1)","keywords":"","body":"Problem\n657. Insert Delete GetRandom O(1)\nhttps://www.lintcode.com/problem/insert-delete-getrandom-o1/description\nSolution\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param = obj.insert(val);\n * bool param = obj.remove(val);\n * int param = obj.getRandom();\n */\n\n\nclass RandomizedSet {\npublic:\n    RandomizedSet() {\n        // do intialization if necessary\n        srand(time(nullptr));\n    }\n\n    /*\n     * @param val: a value to the set\n     * @return: true if the set did not already contain the specified element or false\n     */\n    bool insert(int val) {\n        // write your code here\n\n        if (refs.count(val) == 1) {\n            return false;\n        }\n\n        nums.push_back(val);\n        refs[val] = nums.size() - 1;\n        return true;\n    }\n\n    /*\n     * @param val: a value from the set\n     * @return: true if the set contained the specified element or false\n     */\n    bool remove(int val) {\n        // write your code here\n\n        if (refs.count(val) == 0) {\n            return false;\n        }\n\n        // If the number that we want to remove is just the last element of the\n        // vector, we simply clean the relevant entries.\n        int index = refs[val];\n        if (index == nums.size() - 1) {\n            refs.erase(val);\n            nums.pop_back();\n            return true;\n        }\n\n        // Otherwise, we swap the last element with the to be removed element\n        // and update the indexing structure for that last element.\n        std::swap(nums.back(), nums[index]);\n        refs[nums[index]] = index;\n        nums.pop_back();\n        return true;\n    }\n\n    /*\n     * @return: Get a random element from the set\n     */\n    int getRandom() {\n        // write your code here\n\n        int index = random() % nums.size();\n        return nums[index];\n    }\n\nprivate:\n    std::vector nums;\n    std::unordered_map refs;\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param = obj.insert(val);\n * bool param = obj.remove(val);\n * int param = obj.getRandom();\n */\n\n"},"Data Structure Design/LRU Cache.html":{"url":"Data Structure Design/LRU Cache.html","title":"LRU Cache","keywords":"","body":"Problem\n134. LRU Cache\nhttps://www.lintcode.com/problem/lru-cache/description\nSolution\n#include \n\nclass LRUCache {\npublic:\n    /*\n    * @param capacity: An integer\n    */LRUCache(int capacity)\n      : size(0),\n        capacity(capacity) {\n        // do intialization if necessary\n    }\n\n    /*\n     * @param key: An integer\n     * @return: An integer\n     */\n    int get(int key) {\n        // write your code here\n\n        if (refs.count(key) == 0) {\n            return -1;\n        }\n\n        auto iter = refs[key];\n        int value = iter->second;\n\n        list.erase(iter);\n        list.push_front(std::make_pair(key, value));\n        refs[key] = list.begin();\n\n        return value;\n    }\n\n    /*\n     * @param key: An integer\n     * @param value: An integer\n     * @return: nothing\n     */\n    void set(int key, int value) {\n        // write your code here\n\n        if (refs.count(key) == 0) {\n            list.push_front(std::make_pair(key, value));\n            refs[key] = list.begin();\n\n            ++size;\n            if (size == capacity + 1) {\n                auto iter = --list.end();\n                int expired_key = iter->first;\n\n                list.erase(iter);\n                refs.erase(expired_key);\n\n                --size;\n            }\n            return;\n        }\n\n        auto iter = refs[key];\n        list.erase(iter);\n        list.push_front(std::make_pair(key, value));\n        refs[key] = list.begin();\n    }\n\nprivate:\n    int size;\n    int capacity;\n    std::list> list;\n    std::unordered_map>::iterator> refs;\n};\n\n"},"Math/Number of Ways to Paint N × 3 Grid.html":{"url":"Math/Number of Ways to Paint N × 3 Grid.html","title":"Number of Ways to Paint N × 3 Grid","keywords":"","body":"Problem\nLeetCode 1411. Number of Ways to Paint N × 3 Grid\nhttps://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/\nSolution\nclass Solution {\npublic:\n    int numOfWays(int n) {\n\n        long c2 = 6;\n        long c3 = 6;\n\n        for (int i = 2 ; i \n"},"Reservoir Sampling/Random Pick Index.html":{"url":"Reservoir Sampling/Random Pick Index.html","title":"Random Pick Index","keywords":"","body":"Problem\nLeetCode 398. Random Pick Index\nhttps://leetcode.com/problems/random-pick-index\nSolution\nclass Solution {\npublic:\n    Solution(vector& nums)\n        : nums(nums) {\n\n        /**\n         *  TC: O(N), where\n         *      N is the number of elements\n         *\n         *  SC: O(1)\n         */\n    }\n\n    int pick(int target) {\n\n        int n = nums.size(), count = 0;\n        int ans;\n\n        for (int i = 0 ; i  nums;\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(nums);\n * int param_1 = obj->pick(target);\n */\n\n"}}}